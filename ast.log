TranslationUnitDecl 0xbf6148 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0xbf69b0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0xbf6710 '__int128'
|-TypedefDecl 0xbf6a20 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0xbf6730 'unsigned __int128'
|-TypedefDecl 0xbf6d98 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0xbf6b10 '__NSConstantString_tag'
|   `-CXXRecord 0xbf6a78 '__NSConstantString_tag'
|-TypedefDecl 0xbf6e30 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0xbf6df0 'char *'
|   `-BuiltinType 0xbf61f0 'char'
|-TypedefDecl 0xc3b8e8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag[1]'
| `-ConstantArrayType 0xc3b890 '__va_list_tag[1]' 1 
|   `-RecordType 0xbf6f20 '__va_list_tag'
|     `-CXXRecord 0xbf6e88 '__va_list_tag'
|-NamespaceDecl 0xc3b940 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:278:1, line:286:1> line:278:11 std
| |-TypedefDecl 0xc3b9c8 <line:280:3, col:26> col:26 referenced size_t 'unsigned long'
| | `-BuiltinType 0xbf6310 'unsigned long'
| |-TypedefDecl 0xc3ba38 <line:281:3, col:28> col:28 referenced ptrdiff_t 'long'
| | `-BuiltinType 0xbf6270 'long'
| `-TypedefDecl 0xc3bad8 <line:284:3, col:29> col:29 referenced nullptr_t 'decltype(nullptr)':'std::nullptr_t'
|   `-DecltypeType 0xc3baa0 'decltype(nullptr)' sugar
|     |-CXXNullPtrLiteralExpr 0xc3ba90 <col:20> 'std::nullptr_t'
|     `-BuiltinType 0xbf6940 'std::nullptr_t'
|-NamespaceDecl 0xc3bb30 prev 0xc3b940 <line:300:1, line:303:1> line:300:11 std
| |-original Namespace 0xc3b940 'std'
| `-NamespaceDecl 0xc3bc38 <line:302:3, col:69> col:20 __cxx11 inline
|   `-AbiTagAttr 0xc3bca8 <col:43, col:63> cxx11
|-NamespaceDecl 0xc3bd28 <line:304:1, line:307:1> line:304:11 __gnu_cxx
| `-NamespaceDecl 0xc3bdb8 <line:306:3, col:69> col:20 __cxx11 inline
|   `-AbiTagAttr 0xc3be28 <col:43, col:63> cxx11
|-TypedefDecl 0xc3bec0 </usr/include/x86_64-linux-gnu/bits/types.h:31:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0xbf62b0 'unsigned char'
|-TypedefDecl 0xc3bf30 <line:32:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0xbf62d0 'unsigned short'
|-TypedefDecl 0xc3bfa0 <line:33:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0xbf62f0 'unsigned int'
|-TypedefDecl 0xc3c010 <line:34:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xc3c080 <line:37:1, col:21> col:21 referenced __int8_t 'signed char'
| `-BuiltinType 0xbf6210 'signed char'
|-TypedefDecl 0xc3c0f0 <line:38:1, col:23> col:23 referenced __uint8_t 'unsigned char'
| `-BuiltinType 0xbf62b0 'unsigned char'
|-TypedefDecl 0xc3c160 <line:39:1, col:26> col:26 referenced __int16_t 'short'
| `-BuiltinType 0xbf6230 'short'
|-TypedefDecl 0xc3c1d0 <line:40:1, col:28> col:28 referenced __uint16_t 'unsigned short'
| `-BuiltinType 0xbf62d0 'unsigned short'
|-TypedefDecl 0xc3c240 <line:41:1, col:20> col:20 referenced __int32_t 'int'
| `-BuiltinType 0xbf6250 'int'
|-TypedefDecl 0xc3c2b0 <line:42:1, col:22> col:22 referenced __uint32_t 'unsigned int'
| `-BuiltinType 0xbf62f0 'unsigned int'
|-TypedefDecl 0xc3c320 <line:44:1, col:25> col:25 referenced __int64_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xc3c390 <line:45:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xc3c420 <line:52:1, col:18> col:18 referenced __int_least8_t '__int8_t':'signed char'
| `-TypedefType 0xc3c3f0 '__int8_t' sugar
|   |-Typedef 0xc3c080 '__int8_t'
|   `-BuiltinType 0xbf6210 'signed char'
|-TypedefDecl 0xc3c4b0 <line:53:1, col:19> col:19 referenced __uint_least8_t '__uint8_t':'unsigned char'
| `-TypedefType 0xc3c480 '__uint8_t' sugar
|   |-Typedef 0xc3c0f0 '__uint8_t'
|   `-BuiltinType 0xbf62b0 'unsigned char'
|-TypedefDecl 0xc3c540 <line:54:1, col:19> col:19 referenced __int_least16_t '__int16_t':'short'
| `-TypedefType 0xc3c510 '__int16_t' sugar
|   |-Typedef 0xc3c160 '__int16_t'
|   `-BuiltinType 0xbf6230 'short'
|-TypedefDecl 0xc3c5d0 <line:55:1, col:20> col:20 referenced __uint_least16_t '__uint16_t':'unsigned short'
| `-TypedefType 0xc3c5a0 '__uint16_t' sugar
|   |-Typedef 0xc3c1d0 '__uint16_t'
|   `-BuiltinType 0xbf62d0 'unsigned short'
|-TypedefDecl 0xc3c660 <line:56:1, col:19> col:19 referenced __int_least32_t '__int32_t':'int'
| `-TypedefType 0xc3c630 '__int32_t' sugar
|   |-Typedef 0xc3c240 '__int32_t'
|   `-BuiltinType 0xbf6250 'int'
|-TypedefDecl 0xc3c6f0 <line:57:1, col:20> col:20 referenced __uint_least32_t '__uint32_t':'unsigned int'
| `-TypedefType 0xc3c6c0 '__uint32_t' sugar
|   |-Typedef 0xc3c2b0 '__uint32_t'
|   `-BuiltinType 0xbf62f0 'unsigned int'
|-TypedefDecl 0xc3c780 <line:58:1, col:19> col:19 referenced __int_least64_t '__int64_t':'long'
| `-TypedefType 0xc3c750 '__int64_t' sugar
|   |-Typedef 0xc3c320 '__int64_t'
|   `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xc3c810 <line:59:1, col:20> col:20 referenced __uint_least64_t '__uint64_t':'unsigned long'
| `-TypedefType 0xc3c7e0 '__uint64_t' sugar
|   |-Typedef 0xc3c390 '__uint64_t'
|   `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcbade0 <line:63:1, col:18> col:18 __quad_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcbae50 <line:64:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcbaec0 <line:72:1, col:18> col:18 referenced __intmax_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcbaf30 <line:73:1, col:27> col:27 referenced __uintmax_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcbafa0 <line:137:22, line:145:25> col:25 __dev_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcbb010 <line:137:22, line:146:25> col:25 __uid_t 'unsigned int'
| `-BuiltinType 0xbf62f0 'unsigned int'
|-TypedefDecl 0xcbb080 <line:137:22, line:147:25> col:25 __gid_t 'unsigned int'
| `-BuiltinType 0xbf62f0 'unsigned int'
|-TypedefDecl 0xcbb0f0 <line:137:22, line:148:25> col:25 __ino_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcbb160 <line:137:22, line:149:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcbb1d0 <line:137:22, line:150:26> col:26 __mode_t 'unsigned int'
| `-BuiltinType 0xbf62f0 'unsigned int'
|-TypedefDecl 0xcbb240 <line:137:22, line:151:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcbb2b0 <line:137:22, line:152:25> col:25 __off_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcbb320 <line:137:22, line:153:27> col:27 referenced __off64_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcbb390 <line:137:22, line:154:25> col:25 __pid_t 'int'
| `-BuiltinType 0xbf6250 'int'
|-CXXRecordDecl 0xcbb3e8 </usr/include/x86_64-linux-gnu/bits/typesizes.h:73:24, col:47> col:24 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-FieldDecl 0xcbb5b0 <col:33, col:44> col:37 __val 'int[2]'
|-TypedefDecl 0xcbb678 </usr/include/x86_64-linux-gnu/bits/types.h:137:22, line:155:26> col:26 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0xcbb620 'struct __fsid_t' sugar
|   `-RecordType 0xcbb480 '__fsid_t'
|     `-CXXRecord 0xcbb3e8 ''
|-TypedefDecl 0xcbb700 <line:137:22, line:156:27> col:27 __clock_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcbb770 <line:137:22, line:157:26> col:26 __rlim_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcbb7e0 <line:137:22, line:158:28> col:28 __rlim64_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcbb850 <line:137:22, line:159:24> col:24 __id_t 'unsigned int'
| `-BuiltinType 0xbf62f0 'unsigned int'
|-TypedefDecl 0xcbb8c0 <line:137:22, line:160:26> col:26 __time_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcbb930 <line:137:22, line:161:30> col:30 __useconds_t 'unsigned int'
| `-BuiltinType 0xbf62f0 'unsigned int'
|-TypedefDecl 0xcbb9a0 <line:137:22, line:162:31> col:31 __suseconds_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcbba10 <line:137:22, line:163:33> col:33 __suseconds64_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcbba80 <line:137:22, line:165:27> col:27 __daddr_t 'int'
| `-BuiltinType 0xbf6250 'int'
|-TypedefDecl 0xcbbaf0 <line:137:22, line:166:25> col:25 __key_t 'int'
| `-BuiltinType 0xbf6250 'int'
|-TypedefDecl 0xcbbb60 <line:137:22, line:169:29> col:29 __clockid_t 'int'
| `-BuiltinType 0xbf6250 'int'
|-TypedefDecl 0xcbbbd0 <line:137:22, line:172:27> col:27 __timer_t 'void *'
| `-PointerType 0xbf6910 'void *'
|   `-BuiltinType 0xbf61b0 'void'
|-TypedefDecl 0xcbbc40 <line:137:22, line:175:29> col:29 __blksize_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcbbcb0 <line:137:22, line:180:28> col:28 __blkcnt_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcbbd20 <line:137:22, line:181:30> col:30 __blkcnt64_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcc2a30 <line:137:22, line:184:30> col:30 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcc2aa0 <line:137:22, line:185:32> col:32 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcc2b10 <line:137:22, line:188:30> col:30 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcc2b80 <line:137:22, line:189:32> col:32 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcc2bf0 <line:137:22, line:192:28> col:28 __fsword_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcc2c60 <line:137:22, line:194:27> col:27 __ssize_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcc2cd0 <line:137:22, line:197:33> col:33 __syscall_slong_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcc2d40 <line:137:22, line:199:33> col:33 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcc2dd0 <line:203:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0xcc2da0 '__off64_t' sugar
|   |-Typedef 0xcbb320 '__off64_t'
|   `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcc2e40 <line:204:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0xbf6df0 'char *'
|   `-BuiltinType 0xbf61f0 'char'
|-TypedefDecl 0xcc2eb0 <line:137:22, line:207:25> col:25 __intptr_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcc2f20 <line:137:22, line:210:23> col:23 __socklen_t 'unsigned int'
| `-BuiltinType 0xbf62f0 'unsigned int'
|-TypedefDecl 0xcc2f90 <line:215:1, col:13> col:13 __sig_atomic_t 'int'
| `-BuiltinType 0xbf6250 'int'
|-TypedefDecl 0xcc2ff8 </usr/include/x86_64-linux-gnu/bits/stdint-intn.h:24:1, col:18> col:18 referenced int8_t '__int8_t':'signed char'
| `-TypedefType 0xc3c3f0 '__int8_t' sugar
|   |-Typedef 0xc3c080 '__int8_t'
|   `-BuiltinType 0xbf6210 'signed char'
|-TypedefDecl 0xcc3060 <line:25:1, col:19> col:19 referenced int16_t '__int16_t':'short'
| `-TypedefType 0xc3c510 '__int16_t' sugar
|   |-Typedef 0xc3c160 '__int16_t'
|   `-BuiltinType 0xbf6230 'short'
|-TypedefDecl 0xcc30c8 <line:26:1, col:19> col:19 referenced int32_t '__int32_t':'int'
| `-TypedefType 0xc3c630 '__int32_t' sugar
|   |-Typedef 0xc3c240 '__int32_t'
|   `-BuiltinType 0xbf6250 'int'
|-TypedefDecl 0xcc3130 <line:27:1, col:19> col:19 referenced int64_t '__int64_t':'long'
| `-TypedefType 0xc3c750 '__int64_t' sugar
|   |-Typedef 0xc3c320 '__int64_t'
|   `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcc3198 </usr/include/x86_64-linux-gnu/bits/stdint-uintn.h:24:1, col:19> col:19 referenced uint8_t '__uint8_t':'unsigned char'
| `-TypedefType 0xc3c480 '__uint8_t' sugar
|   |-Typedef 0xc3c0f0 '__uint8_t'
|   `-BuiltinType 0xbf62b0 'unsigned char'
|-TypedefDecl 0xcc3200 <line:25:1, col:20> col:20 referenced uint16_t '__uint16_t':'unsigned short'
| `-TypedefType 0xc3c5a0 '__uint16_t' sugar
|   |-Typedef 0xc3c1d0 '__uint16_t'
|   `-BuiltinType 0xbf62d0 'unsigned short'
|-TypedefDecl 0xcc3268 <line:26:1, col:20> col:20 referenced uint32_t '__uint32_t':'unsigned int'
| `-TypedefType 0xc3c6c0 '__uint32_t' sugar
|   |-Typedef 0xc3c2b0 '__uint32_t'
|   `-BuiltinType 0xbf62f0 'unsigned int'
|-TypedefDecl 0xcc32d0 <line:27:1, col:20> col:20 referenced uint64_t '__uint64_t':'unsigned long'
| `-TypedefType 0xc3c7e0 '__uint64_t' sugar
|   |-Typedef 0xc3c390 '__uint64_t'
|   `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcc3360 </usr/include/stdint.h:43:1, col:24> col:24 referenced int_least8_t '__int_least8_t':'signed char'
| `-TypedefType 0xcc3330 '__int_least8_t' sugar
|   |-Typedef 0xc3c420 '__int_least8_t'
|   `-TypedefType 0xc3c3f0 '__int8_t' sugar
|     |-Typedef 0xc3c080 '__int8_t'
|     `-BuiltinType 0xbf6210 'signed char'
|-TypedefDecl 0xcc33f0 <line:44:1, col:25> col:25 referenced int_least16_t '__int_least16_t':'short'
| `-TypedefType 0xcc33c0 '__int_least16_t' sugar
|   |-Typedef 0xc3c540 '__int_least16_t'
|   `-TypedefType 0xc3c510 '__int16_t' sugar
|     |-Typedef 0xc3c160 '__int16_t'
|     `-BuiltinType 0xbf6230 'short'
|-TypedefDecl 0xcc3480 <line:45:1, col:25> col:25 referenced int_least32_t '__int_least32_t':'int'
| `-TypedefType 0xcc3450 '__int_least32_t' sugar
|   |-Typedef 0xc3c660 '__int_least32_t'
|   `-TypedefType 0xc3c630 '__int32_t' sugar
|     |-Typedef 0xc3c240 '__int32_t'
|     `-BuiltinType 0xbf6250 'int'
|-TypedefDecl 0xcc3510 <line:46:1, col:25> col:25 referenced int_least64_t '__int_least64_t':'long'
| `-TypedefType 0xcc34e0 '__int_least64_t' sugar
|   |-Typedef 0xc3c780 '__int_least64_t'
|   `-TypedefType 0xc3c750 '__int64_t' sugar
|     |-Typedef 0xc3c320 '__int64_t'
|     `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcc35a0 <line:49:1, col:25> col:25 referenced uint_least8_t '__uint_least8_t':'unsigned char'
| `-TypedefType 0xcc3570 '__uint_least8_t' sugar
|   |-Typedef 0xc3c4b0 '__uint_least8_t'
|   `-TypedefType 0xc3c480 '__uint8_t' sugar
|     |-Typedef 0xc3c0f0 '__uint8_t'
|     `-BuiltinType 0xbf62b0 'unsigned char'
|-TypedefDecl 0xcc3630 <line:50:1, col:26> col:26 referenced uint_least16_t '__uint_least16_t':'unsigned short'
| `-TypedefType 0xcc3600 '__uint_least16_t' sugar
|   |-Typedef 0xc3c5d0 '__uint_least16_t'
|   `-TypedefType 0xc3c5a0 '__uint16_t' sugar
|     |-Typedef 0xc3c1d0 '__uint16_t'
|     `-BuiltinType 0xbf62d0 'unsigned short'
|-TypedefDecl 0xcc36c0 <line:51:1, col:26> col:26 referenced uint_least32_t '__uint_least32_t':'unsigned int'
| `-TypedefType 0xcc3690 '__uint_least32_t' sugar
|   |-Typedef 0xc3c6f0 '__uint_least32_t'
|   `-TypedefType 0xc3c6c0 '__uint32_t' sugar
|     |-Typedef 0xc3c2b0 '__uint32_t'
|     `-BuiltinType 0xbf62f0 'unsigned int'
|-TypedefDecl 0xcc3750 <line:52:1, col:26> col:26 referenced uint_least64_t '__uint_least64_t':'unsigned long'
| `-TypedefType 0xcc3720 '__uint_least64_t' sugar
|   |-Typedef 0xc3c810 '__uint_least64_t'
|   `-TypedefType 0xc3c7e0 '__uint64_t' sugar
|     |-Typedef 0xc3c390 '__uint64_t'
|     `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcc37c0 <line:58:1, col:22> col:22 referenced int_fast8_t 'signed char'
| `-BuiltinType 0xbf6210 'signed char'
|-TypedefDecl 0xcc3830 <line:60:1, col:19> col:19 referenced int_fast16_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcc38a0 <line:61:1, col:19> col:19 referenced int_fast32_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcc3910 <line:62:1, col:19> col:19 referenced int_fast64_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcc3980 <line:71:1, col:24> col:24 referenced uint_fast8_t 'unsigned char'
| `-BuiltinType 0xbf62b0 'unsigned char'
|-TypedefDecl 0xcc9a30 <line:73:1, col:27> col:27 referenced uint_fast16_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcc9aa0 <line:74:1, col:27> col:27 referenced uint_fast32_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcc9b10 <line:75:1, col:27> col:27 referenced uint_fast64_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcc9b80 <line:87:1, col:19> col:19 referenced intptr_t 'long'
| `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcc9bf0 <line:90:1, col:27> col:27 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0xbf6310 'unsigned long'
|-TypedefDecl 0xcc9c80 <line:101:1, col:21> col:21 referenced intmax_t '__intmax_t':'long'
| `-TypedefType 0xcc9c50 '__intmax_t' sugar
|   |-Typedef 0xcbaec0 '__intmax_t'
|   `-BuiltinType 0xbf6270 'long'
|-TypedefDecl 0xcc9d10 <line:102:1, col:22> col:22 referenced uintmax_t '__uintmax_t':'unsigned long'
| `-TypedefType 0xcc9ce0 '__uintmax_t' sugar
|   |-Typedef 0xcbaf30 '__uintmax_t'
|   `-BuiltinType 0xbf6310 'unsigned long'
|-NamespaceDecl 0xcc9e08 prev 0xc3bb30 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/move.h:38:1, line:55:1> line:38:11 std
| |-original Namespace 0xc3b940 'std'
| |-VisibilityAttr 0xcc9e78 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:70:49, col:67> Default
| `-FunctionTemplateDecl 0xcca1f0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/move.h:47:3, line:50:40> line:49:5 __addressof
|   |-TemplateTypeParmDecl 0xcc9ed0 <line:47:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
|   `-FunctionDecl 0xcca150 <line:48:5, line:50:40> line:49:5 constexpr __addressof '_Tp *(_Tp &) noexcept' inline
|     |-ParmVarDecl 0xcc9ff8 <col:17, col:22> col:22 referenced __r '_Tp &'
|     `-CompoundStmt 0xcca628 <line:50:5, col:40>
|       `-ReturnStmt 0xcca618 <col:7, col:37>
|         `-CallExpr 0xcca5f0 <col:14, col:37> '<dependent type>'
|           |-DeclRefExpr 0xcca5b0 <col:14> '<builtin fn type>' Function 0xcca3b0 '__builtin_addressof' 'void *(void &) noexcept'
|           `-DeclRefExpr 0xcca5d0 <col:34> '_Tp' lvalue ParmVar 0xcc9ff8 '__r' '_Tp &'
|-LinkageSpecDecl 0xcca360 <col:14> col:14 implicit C
| `-FunctionDecl 0xcca3b0 <col:14> col:14 implicit referenced __builtin_addressof 'void *(void &) noexcept' extern
|   |-ParmVarDecl 0xcca4a8 <<invalid sloc>> <invalid sloc> 'void &'
|   |-BuiltinAttr 0xcca450 <<invalid sloc>> Implicit 1202
|   |-NoThrowAttr 0xcca518 <col:14> Implicit
|   `-ConstAttr 0xcca540 <col:14> Implicit
|-NamespaceDecl 0xcca660 prev 0xcc9e08 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:40:1, line:3598:1> line:40:11 std
| |-original Namespace 0xc3b940 'std'
| |-VisibilityAttr 0xcca6d0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:70:49, col:67> Default
| |-ClassTemplateDecl 0xcca880 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:44:3, line:45:11> col:11 tuple
| | |-TemplateTypeParmDecl 0xcca728 <line:44:12, col:24> col:24 typename depth 0 index 0 ... _Elements
| | `-CXXRecordDecl 0xcca7f0 <line:45:5, col:11> col:11 class tuple
| |-ClassTemplateDecl 0xcd8f40 <line:47:3, line:48:11> col:11 reference_wrapper
| | |-TemplateTypeParmDecl 0xcd8e18 <line:47:12, col:21> col:21 typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xcd8eb0 <line:48:5, col:11> col:11 class reference_wrapper
| |   `-PointerAttr 0xcd9118 <<invalid sloc>> Implicit
| |-ClassTemplateDecl 0xcd9318 <line:64:3, line:77:5> line:65:12 integral_constant
| | |-TemplateTypeParmDecl 0xcd9178 <line:64:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xcd9208 <col:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| | |-CXXRecordDecl 0xcd9288 <line:65:5, line:77:5> line:65:12 struct integral_constant definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0xcd95c0 <col:5, col:12> col:12 implicit struct integral_constant
| | | |-VarDecl 0xcd9660 <line:67:7, col:53> col:45 referenced value 'const _Tp' static constexpr cinit
| | | | `-DeclRefExpr 0xcd96c8 <col:53> '_Tp' NonTypeTemplateParm 0xcd9208 '__v' '_Tp'
| | | |-TypedefDecl 0xcd96f8 <line:68:7, col:45> col:45 referenced value_type '_Tp'
| | | | `-TemplateTypeParmType 0xcd91d0 '_Tp' dependent depth 0 index 0
| | | |   `-TemplateTypeParm 0xcd9178 '_Tp'
| | | |-TypedefDecl 0xcd98c8 <line:69:7, col:45> col:45 type 'integral_constant<_Tp, __v>':'integral_constant<_Tp, __v>'
| | | | `-TemplateSpecializationType 0xcd9820 'integral_constant<_Tp, __v>' sugar dependent integral_constant
| | | |   |-TemplateArgument type '_Tp'
| | | |   | `-TemplateTypeParmType 0xcd91d0 '_Tp' dependent depth 0 index 0
| | | |   |   `-TemplateTypeParm 0xcd9178 '_Tp'
| | | |   |-TemplateArgument expr
| | | |   | `-DeclRefExpr 0xcd97a8 <col:38> '_Tp' NonTypeTemplateParm 0xcd9208 '__v' '_Tp'
| | | |   `-InjectedClassNameType 0xcd9530 'integral_constant<_Tp, __v>' dependent
| | | |     `-CXXRecord 0xcd9288 'integral_constant'
| | | |-CXXConversionDecl 0xcd9a10 <line:70:7, col:70> col:17 constexpr operator type-parameter-0-0 'std::integral_constant::value_type () const noexcept'
| | | | `-CompoundStmt 0xcd9bf8 <col:54, col:70>
| | | |   `-ReturnStmt 0xcd9be8 <col:56, col:63>
| | | |     `-DeclRefExpr 0xcd9bc8 <col:63> 'const _Tp' lvalue Var 0xcd9660 'value' 'const _Tp'
| | | `-CXXMethodDecl 0xcd9ae8 <line:75:7, col:72> col:28 constexpr operator() 'std::integral_constant::value_type () const noexcept'
| | |   `-CompoundStmt 0xcd9c40 <col:56, col:72>
| | |     `-ReturnStmt 0xcd9c30 <col:58, col:65>
| | |       `-DeclRefExpr 0xcd9c10 <col:65> 'const _Tp' lvalue Var 0xcd9660 'value' 'const _Tp'
| | |-ClassTemplateSpecializationDecl 0xce44e8 <line:64:3, line:77:5> line:65:12 struct integral_constant definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'bool'
| | | | `-BuiltinType 0xbf61d0 'bool'
| | | |-TemplateArgument integral 1
| | | |-CXXRecordDecl 0xceb138 <col:5, col:12> col:12 implicit struct integral_constant
| | | |-VarDecl 0xceb1d8 <line:67:7, col:53> col:45 used value 'const bool':'const bool' static constexpr cinit
| | | | |-value: Int 1
| | | | `-SubstNonTypeTemplateParmExpr 0xceb260 <col:53> 'bool'
| | | |   |-NonTypeTemplateParmDecl 0xcd9208 <line:64:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| | | |   `-CXXBoolLiteralExpr 0xceb250 <line:67:53> 'bool' true
| | | |-TypedefDecl 0xceb2e8 <line:68:7, col:45> col:45 value_type 'bool':'bool'
| | | | `-SubstTemplateTypeParmType 0xce4490 'bool' sugar
| | | |   |-TemplateTypeParmType 0xcd91d0 '_Tp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xcd9178 '_Tp'
| | | |   `-BuiltinType 0xbf61d0 'bool'
| | | |-TypedefDecl 0xceb440 <line:69:7, col:45> col:45 referenced type 'integral_constant<bool, true>':'std::integral_constant<bool, true>'
| | | | `-TemplateSpecializationType 0xceb3c0 'integral_constant<bool, true>' sugar integral_constant
| | | |   |-TemplateArgument type 'bool':'bool'
| | | |   | `-SubstTemplateTypeParmType 0xce4490 'bool' sugar
| | | |   |   |-TemplateTypeParmType 0xcd91d0 '_Tp' dependent depth 0 index 0
| | | |   |   | `-TemplateTypeParm 0xcd9178 '_Tp'
| | | |   |   `-BuiltinType 0xbf61d0 'bool'
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0xceb3a0 <col:38> 'bool'
| | | |   |   |-value: Int 1
| | | |   |   `-SubstNonTypeTemplateParmExpr 0xceb360 <col:38> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0xcd9208 <line:64:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| | | |   |     `-CXXBoolLiteralExpr 0xceb350 <line:69:38> 'bool' true
| | | |   `-RecordType 0xce45e0 'std::integral_constant<bool, true>'
| | | |     `-ClassTemplateSpecialization 0xce44e8 'integral_constant'
| | | |-CXXConversionDecl 0xceb520 <line:70:7, col:70> col:17 constexpr operator bool 'std::integral_constant<bool, true>::value_type () const noexcept'
| | | `-CXXMethodDecl 0xceb608 <line:75:7, col:72> col:28 constexpr operator() 'std::integral_constant<bool, true>::value_type () const noexcept'
| | |-ClassTemplateSpecializationDecl 0xce4768 <line:64:3, line:77:5> line:65:12 struct integral_constant definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'bool'
| | | | `-BuiltinType 0xbf61d0 'bool'
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0xce7258 <col:5, col:12> col:12 implicit struct integral_constant
| | | |-VarDecl 0xce72f8 <line:67:7, col:53> col:45 used value 'const bool':'const bool' static constexpr cinit
| | | | |-value: Int 0
| | | | `-SubstNonTypeTemplateParmExpr 0xce7380 <col:53> 'bool'
| | | |   |-NonTypeTemplateParmDecl 0xcd9208 <line:64:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| | | |   `-CXXBoolLiteralExpr 0xce7370 <line:67:53> 'bool' false
| | | |-TypedefDecl 0xce7408 <line:68:7, col:45> col:45 value_type 'bool':'bool'
| | | | `-SubstTemplateTypeParmType 0xce4490 'bool' sugar
| | | |   |-TemplateTypeParmType 0xcd91d0 '_Tp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xcd9178 '_Tp'
| | | |   `-BuiltinType 0xbf61d0 'bool'
| | | |-TypedefDecl 0xce7560 <line:69:7, col:45> col:45 type 'integral_constant<bool, false>':'std::integral_constant<bool, false>'
| | | | `-TemplateSpecializationType 0xce74e0 'integral_constant<bool, false>' sugar integral_constant
| | | |   |-TemplateArgument type 'bool':'bool'
| | | |   | `-SubstTemplateTypeParmType 0xce4490 'bool' sugar
| | | |   |   |-TemplateTypeParmType 0xcd91d0 '_Tp' dependent depth 0 index 0
| | | |   |   | `-TemplateTypeParm 0xcd9178 '_Tp'
| | | |   |   `-BuiltinType 0xbf61d0 'bool'
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0xce74c0 <col:38> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0xce7480 <col:38> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0xcd9208 <line:64:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| | | |   |     `-CXXBoolLiteralExpr 0xce7470 <line:69:38> 'bool' false
| | | |   `-RecordType 0xce4860 'std::integral_constant<bool, false>'
| | | |     `-ClassTemplateSpecialization 0xce4768 'integral_constant'
| | | |-CXXConversionDecl 0xce8828 <line:70:7, col:70> col:17 constexpr operator bool 'std::integral_constant<bool, false>::value_type () const noexcept'
| | | `-CXXMethodDecl 0xce8910 <line:75:7, col:72> col:28 constexpr operator() 'std::integral_constant<bool, false>::value_type () const noexcept'
| | `-ClassTemplateSpecializationDecl 0xd67d30 <line:64:3, line:77:5> line:65:12 struct integral_constant definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-TemplateArgument type 'unsigned long'
| |   | `-BuiltinType 0xbf6310 'unsigned long'
| |   |-TemplateArgument integral 0
| |   |-CXXRecordDecl 0xd67f38 <col:5, col:12> col:12 implicit struct integral_constant
| |   |-VarDecl 0xd67fd8 <line:67:7, col:53> col:45 value 'const unsigned long':'const unsigned long' static constexpr cinit
| |   | |-value: Int 0
| |   | `-SubstNonTypeTemplateParmExpr 0xd68070 <col:53> 'unsigned long'
| |   |   |-NonTypeTemplateParmDecl 0xcd9208 <line:64:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| |   |   `-IntegerLiteral 0xd68050 <line:67:53> 'unsigned long' 0
| |   |-TypedefDecl 0xd680f8 <line:68:7, col:45> col:45 value_type 'unsigned long':'unsigned long'
| |   | `-SubstTemplateTypeParmType 0xd66b40 'unsigned long' sugar
| |   |   |-TemplateTypeParmType 0xcd91d0 '_Tp' dependent depth 0 index 0
| |   |   | `-TemplateTypeParm 0xcd9178 '_Tp'
| |   |   `-BuiltinType 0xbf6310 'unsigned long'
| |   |-TypedefDecl 0xd68260 <line:69:7, col:45> col:45 type 'integral_constant<unsigned long, 0UL>':'std::integral_constant<unsigned long, 0>'
| |   | `-TemplateSpecializationType 0xd681e0 'integral_constant<unsigned long, 0UL>' sugar integral_constant
| |   |   |-TemplateArgument type 'unsigned long':'unsigned long'
| |   |   | `-SubstTemplateTypeParmType 0xd66b40 'unsigned long' sugar
| |   |   |   |-TemplateTypeParmType 0xcd91d0 '_Tp' dependent depth 0 index 0
| |   |   |   | `-TemplateTypeParm 0xcd9178 '_Tp'
| |   |   |   `-BuiltinType 0xbf6310 'unsigned long'
| |   |   |-TemplateArgument expr
| |   |   | `-ConstantExpr 0xd681c0 <col:38> 'unsigned long'
| |   |   |   |-value: Int 0
| |   |   |   `-SubstNonTypeTemplateParmExpr 0xd68180 <col:38> 'unsigned long'
| |   |   |     |-NonTypeTemplateParmDecl 0xcd9208 <line:64:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| |   |   |     `-IntegerLiteral 0xd68160 <line:69:38> 'unsigned long' 0
| |   |   `-RecordType 0xd67e30 'std::integral_constant<unsigned long, 0>'
| |   |     `-ClassTemplateSpecialization 0xd67d30 'integral_constant'
| |   |-CXXConversionDecl 0xd68388 <line:70:7, col:70> col:17 constexpr operator unsigned long 'std::integral_constant<unsigned long, 0>::value_type () const noexcept'
| |   `-CXXMethodDecl 0xd68470 <line:75:7, col:72> col:28 constexpr operator() 'std::integral_constant<unsigned long, 0>::value_type () const noexcept'
| |-VarDecl 0xce43a8 parent 0xcd9288 prev 0xcd9660 <line:79:3, line:80:48> col:48 value 'const _Tp' constexpr
| |-TypeAliasDecl 0xce46a8 <line:83:3, col:50> col:9 referenced true_type 'integral_constant<bool, true>':'std::integral_constant<bool, true>'
| | `-TemplateSpecializationType 0xce4600 'integral_constant<bool, true>' sugar integral_constant
| |   |-TemplateArgument type 'bool'
| |   | `-BuiltinType 0xbf61d0 'bool'
| |   |-TemplateArgument expr
| |   | `-ConstantExpr 0xce44c8 <col:46> 'bool'
| |   |   |-value: Int 1
| |   |   `-CXXBoolLiteralExpr 0xce4468 <col:46> 'bool' true
| |   `-RecordType 0xce45e0 'std::integral_constant<bool, true>'
| |     `-ClassTemplateSpecialization 0xce44e8 'integral_constant'
| |-TypeAliasDecl 0xce4928 <line:86:3, col:51> col:9 referenced false_type 'integral_constant<bool, false>':'std::integral_constant<bool, false>'
| | `-TemplateSpecializationType 0xce4880 'integral_constant<bool, false>' sugar integral_constant
| |   |-TemplateArgument type 'bool'
| |   | `-BuiltinType 0xbf61d0 'bool'
| |   |-TemplateArgument expr
| |   | `-ConstantExpr 0xce4748 <col:46> 'bool'
| |   |   |-value: Int 0
| |   |   `-CXXBoolLiteralExpr 0xce4718 <col:46> 'bool' false
| |   `-RecordType 0xce4860 'std::integral_constant<bool, false>'
| |     `-ClassTemplateSpecialization 0xce4768 'integral_constant'
| |-TypeAliasTemplateDecl 0xce4bc8 <line:90:3, line:91:56> col:5 __bool_constant
| | |-NonTypeTemplateParmDecl 0xce4998 <line:90:12, col:17> col:17 referenced 'bool' depth 0 index 0 __v
| | `-TypeAliasDecl 0xce4b68 <line:91:5, col:56> col:11 __bool_constant 'integral_constant<bool, __v>'
| |   `-TemplateSpecializationType 0xce4ac0 'integral_constant<bool, __v>' dependent integral_constant
| |     |-TemplateArgument type 'bool'
| |     | `-BuiltinType 0xbf61d0 'bool'
| |     `-TemplateArgument expr
| |       `-DeclRefExpr 0xce4a20 <col:53> 'bool' NonTypeTemplateParm 0xce4998 '__v' 'bool'
| |-ClassTemplateDecl 0xce4ea0 <line:104:3, line:105:12> col:12 conditional
| | |-NonTypeTemplateParmDecl 0xce4c30 <line:104:12> col:16 'bool' depth 0 index 0
| | |-TemplateTypeParmDecl 0xce4c90 <col:18> col:26 typename depth 0 index 1
| | |-TemplateTypeParmDecl 0xce4d38 <col:28> col:36 typename depth 0 index 2
| | `-CXXRecordDecl 0xce4e10 <line:105:5, col:12> col:12 struct conditional
| |-ClassTemplateDecl 0xce6660 <line:108:3, line:110:27> line:109:12 __type_identity
| | |-TemplateTypeParmDecl 0xce50f8 <line:108:13, col:22> col:22 referenced typename depth 0 index 0 _Type
| | `-CXXRecordDecl 0xce65d0 <line:109:5, line:110:27> line:109:12 struct __type_identity definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xce68a0 <col:5, col:12> col:12 implicit struct __type_identity
| |   `-TypeAliasDecl 0xce6940 <line:110:7, col:20> col:13 type '_Type'
| |     `-TemplateTypeParmType 0xce5150 '_Type' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xce50f8 '_Type'
| |-TypeAliasTemplateDecl 0xce6c00 <line:112:3, line:113:62> col:5 __type_identity_t
| | |-TemplateTypeParmDecl 0xce69b8 <line:112:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xce6ba0 <line:113:5, col:62> col:11 __type_identity_t 'typename __type_identity<_Tp>::type'
| |   `-DependentNameType 0xce6b30 'typename __type_identity<_Tp>::type' dependent
| |-ClassTemplateDecl 0xce6d80 <line:115:3, line:116:12> col:12 __or_
| | |-TemplateTypeParmDecl 0xce6c58 <line:115:12> col:23 typename depth 0 index 0 ...
| | |-CXXRecordDecl 0xce6cf0 <line:116:5, col:12> col:12 struct __or_
| | `-ClassTemplateSpecialization 0xce6fc8 '__or_'
| |-ClassTemplateSpecializationDecl 0xce6fc8 <line:118:3, line:121:7> line:119:12 struct __or_ definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument pack
| | `-CXXRecordDecl 0xce8a08 <col:5, col:12> col:12 implicit struct __or_
| |-ClassTemplatePartialSpecializationDecl 0xce8c30 <line:123:3, line:126:7> line:124:12 struct __or_ definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_B1'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xce8ab0 <line:123:12, col:21> col:21 referenced typename depth 0 index 0 _B1
| | `-CXXRecordDecl 0xce8eb8 <line:124:5, col:12> col:12 implicit struct __or_
| |-ClassTemplatePartialSpecializationDecl 0xce91d0 <line:128:3, line:131:7> line:129:12 struct __or_ definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'conditional<_B1::value, _B1, _B2>::type'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | | `-TemplateArgument type 'type-parameter-0-1'
| | |   `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0xce8f60 <line:128:12, col:21> col:21 referenced typename depth 0 index 0 _B1
| | |-TemplateTypeParmDecl 0xce8fd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _B2
| | `-CXXRecordDecl 0xce9910 <line:129:5, col:12> col:12 implicit struct __or_
| |-ClassTemplatePartialSpecializationDecl 0xce9ea0 <line:133:3, line:136:7> line:134:12 struct __or_ definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | | |-TemplateArgument type 'type-parameter-0-1'
| | | | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | | |-TemplateArgument type 'type-parameter-0-2'
| | | | `-TemplateTypeParmType 0xce4d90 'type-parameter-0-2' dependent depth 0 index 2
| | | `-TemplateArgument type 'type-parameter-0-3...'
| | |   `-PackExpansionType 0xce9c60 'type-parameter-0-3...' dependent
| | |     `-TemplateTypeParmType 0xce9b90 'type-parameter-0-3' dependent contains_unexpanded_pack depth 0 index 3 pack
| | |-TemplateTypeParmDecl 0xce99b8 <line:133:12, col:21> col:21 referenced typename depth 0 index 0 _B1
| | |-TemplateTypeParmDecl 0xce9a38 <col:26, col:35> col:35 referenced typename depth 0 index 1 _B2
| | |-TemplateTypeParmDecl 0xce9ab8 <col:40, col:49> col:49 referenced typename depth 0 index 2 _B3
| | |-TemplateTypeParmDecl 0xce9b38 <col:54, col:66> col:66 referenced typename depth 0 index 3 ... _Bn
| | `-CXXRecordDecl 0xcea6e0 <line:134:5, col:12> col:12 implicit struct __or_
| |-ClassTemplateDecl 0xceac60 <line:138:3, line:139:12> col:12 __and_
| | |-TemplateTypeParmDecl 0xcea788 <line:138:12> col:23 typename depth 0 index 0 ...
| | |-CXXRecordDecl 0xcea820 <line:139:5, col:12> col:12 struct __and_
| | `-ClassTemplateSpecialization 0xceaea8 '__and_'
| |-ClassTemplateSpecializationDecl 0xceaea8 <line:141:3, line:144:7> line:142:12 struct __and_ definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument pack
| | `-CXXRecordDecl 0xceb700 <col:5, col:12> col:12 implicit struct __and_
| |-ClassTemplatePartialSpecializationDecl 0xceb930 <line:146:3, line:149:7> line:147:12 struct __and_ definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_B1'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xceb7a8 <line:146:12, col:21> col:21 referenced typename depth 0 index 0 _B1
| | `-CXXRecordDecl 0xcebbb8 <line:147:5, col:12> col:12 implicit struct __and_
| |-ClassTemplatePartialSpecializationDecl 0xcec830 <line:151:3, line:154:7> line:152:12 struct __and_ definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'conditional<_B1::value, _B2, _B1>::type'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | | `-TemplateArgument type 'type-parameter-0-1'
| | |   `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0xcec5c0 <line:151:12, col:21> col:21 referenced typename depth 0 index 0 _B1
| | |-TemplateTypeParmDecl 0xcec638 <col:26, col:35> col:35 referenced typename depth 0 index 1 _B2
| | `-CXXRecordDecl 0xcecdd0 <line:152:5, col:12> col:12 implicit struct __and_
| |-ClassTemplatePartialSpecializationDecl 0xced300 <line:156:3, line:159:7> line:157:12 struct __and_ definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | | |-TemplateArgument type 'type-parameter-0-1'
| | | | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | | |-TemplateArgument type 'type-parameter-0-2'
| | | | `-TemplateTypeParmType 0xce4d90 'type-parameter-0-2' dependent depth 0 index 2
| | | `-TemplateArgument type 'type-parameter-0-3...'
| | |   `-PackExpansionType 0xce9c60 'type-parameter-0-3...' dependent
| | |     `-TemplateTypeParmType 0xce9b90 'type-parameter-0-3' dependent contains_unexpanded_pack depth 0 index 3 pack
| | |-TemplateTypeParmDecl 0xcece78 <line:156:12, col:21> col:21 referenced typename depth 0 index 0 _B1
| | |-TemplateTypeParmDecl 0xcecef8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _B2
| | |-TemplateTypeParmDecl 0xcecf78 <col:40, col:49> col:49 referenced typename depth 0 index 2 _B3
| | |-TemplateTypeParmDecl 0xcecff8 <col:54, col:66> col:66 referenced typename depth 0 index 3 ... _Bn
| | `-CXXRecordDecl 0xcedbb0 <line:157:5, col:12> col:12 implicit struct __and_
| |-ClassTemplateDecl 0xcedd80 <line:161:3, line:164:7> line:162:12 __not_
| | |-TemplateTypeParmDecl 0xcedc58 <line:161:12, col:21> col:21 typename depth 0 index 0 _Pp
| | `-CXXRecordDecl 0xcedcf0 <line:162:5, line:164:7> line:162:12 struct __not_ definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<!bool(_Pp::value)>':'integral_constant<bool, !bool(_Pp::value)>'
| |   `-CXXRecordDecl 0xcee288 <col:5, col:12> col:12 implicit struct __not_
| |-ClassTemplateDecl 0xcee450 <line:209:3, line:210:12> col:12 is_reference
| | |-TemplateTypeParmDecl 0xcee330 <line:209:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xcee3c0 <line:210:5, col:12> col:12 struct is_reference
| |-ClassTemplateDecl 0xcef060 <line:211:3, line:212:12> col:12 is_function
| | |-TemplateTypeParmDecl 0xceef40 <line:211:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xceefd0 <line:212:5, col:12> col:12 struct is_function
| |-ClassTemplateDecl 0xcef360 <line:213:3, line:214:12> col:12 is_void
| | |-TemplateTypeParmDecl 0xcef238 <line:213:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0xcef2d0 <line:214:5, col:12> col:12 struct is_void
| | `-ClassTemplateSpecializationDecl 0xe0fd68 <line:269:3, line:272:7> line:270:12 struct is_void definition
| |   |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_void_helper<__remove_cv_t<void>>::type':'std::integral_constant<bool, true>'
| |   |-TemplateArgument type 'void'
| |   | `-BuiltinType 0xbf61b0 'void'
| |   `-CXXRecordDecl 0xe10610 <col:5, col:12> col:12 implicit struct is_void
| |-ClassTemplateDecl 0xcef660 <line:215:3, line:216:12> col:12 remove_cv
| | |-TemplateTypeParmDecl 0xcef538 <line:215:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0xcef5d0 <line:216:5, col:12> col:12 struct remove_cv
| | |-ClassTemplateSpecializationDecl 0xda8c78 <line:215:3, line:216:12> line:1537:12 struct remove_cv definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0xbf6750 'wchar_t'
| | | |-CXXRecordDecl 0xda8f18 <col:5, col:12> col:12 implicit struct remove_cv
| | | `-TypeAliasDecl 0xda8fe8 <line:1538:7, col:20> col:13 referenced type 'wchar_t':'wchar_t'
| | |   `-SubstTemplateTypeParmType 0xda8fb0 'wchar_t' sugar
| | |     |-TemplateTypeParmType 0xd76970 '_Tp' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0xd76918 '_Tp'
| | |     `-BuiltinType 0xbf6750 'wchar_t'
| | |-ClassTemplateSpecializationDecl 0xdab6c8 <line:215:3, line:216:12> line:1537:12 struct remove_cv definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-CXXRecordDecl 0xdab968 <col:5, col:12> col:12 implicit struct remove_cv
| | | `-TypeAliasDecl 0xdaba38 <line:1538:7, col:20> col:13 referenced type 'unsigned int':'unsigned int'
| | |   `-SubstTemplateTypeParmType 0xdaba00 'unsigned int' sugar
| | |     |-TemplateTypeParmType 0xd76970 '_Tp' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0xd76918 '_Tp'
| | |     `-BuiltinType 0xbf62f0 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0xdaf9c8 <line:215:3, line:216:12> line:1537:12 struct remove_cv definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0xbf6790 'char16_t'
| | | |-CXXRecordDecl 0xdafc68 <col:5, col:12> col:12 implicit struct remove_cv
| | | `-TypeAliasDecl 0xdafd38 <line:1538:7, col:20> col:13 referenced type 'char16_t':'char16_t'
| | |   `-SubstTemplateTypeParmType 0xdafd00 'char16_t' sugar
| | |     |-TemplateTypeParmType 0xd76970 '_Tp' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0xd76918 '_Tp'
| | |     `-BuiltinType 0xbf6790 'char16_t'
| | |-ClassTemplateSpecializationDecl 0xdb14b8 <line:215:3, line:216:12> line:1537:12 struct remove_cv definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0xbf62d0 'unsigned short'
| | | |-CXXRecordDecl 0xdb1d58 <col:5, col:12> col:12 implicit struct remove_cv
| | | `-TypeAliasDecl 0xdb1e28 <line:1538:7, col:20> col:13 referenced type 'unsigned short':'unsigned short'
| | |   `-SubstTemplateTypeParmType 0xdb1df0 'unsigned short' sugar
| | |     |-TemplateTypeParmType 0xd76970 '_Tp' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0xd76918 '_Tp'
| | |     `-BuiltinType 0xbf62d0 'unsigned short'
| | |-ClassTemplateSpecializationDecl 0xdb4f28 <line:215:3, line:216:12> line:1537:12 struct remove_cv definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'char32_t'
| | | | `-BuiltinType 0xbf67b0 'char32_t'
| | | |-CXXRecordDecl 0xdb51c8 <col:5, col:12> col:12 implicit struct remove_cv
| | | `-TypeAliasDecl 0xdb5298 <line:1538:7, col:20> col:13 referenced type 'char32_t':'char32_t'
| | |   `-SubstTemplateTypeParmType 0xdb5260 'char32_t' sugar
| | |     |-TemplateTypeParmType 0xd76970 '_Tp' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0xd76918 '_Tp'
| | |     `-BuiltinType 0xbf67b0 'char32_t'
| | `-ClassTemplateSpecializationDecl 0xe10038 <line:215:3, line:216:12> line:1537:12 struct remove_cv definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-TemplateArgument type 'void'
| |   | `-BuiltinType 0xbf61b0 'void'
| |   |-CXXRecordDecl 0xe102d8 <col:5, col:12> col:12 implicit struct remove_cv
| |   `-TypeAliasDecl 0xe103a8 <line:1538:7, col:20> col:13 referenced type 'void':'void'
| |     `-SubstTemplateTypeParmType 0xe10370 'void' sugar
| |       |-TemplateTypeParmType 0xd76970 '_Tp' dependent depth 0 index 0
| |       | `-TemplateTypeParm 0xd76918 '_Tp'
| |       `-BuiltinType 0xbf61b0 'void'
| |-ClassTemplateDecl 0xcef960 <line:217:3, line:218:12> col:12 is_const
| | |-TemplateTypeParmDecl 0xcef838 <line:217:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0xcef8d0 <line:218:5, col:12> col:12 struct is_const
| | |-ClassTemplateSpecializationDecl 0xd364c8 <line:682:3, line:684:27> line:683:12 struct is_const definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0xbf6750 'wchar_t'
| | | `-CXXRecordDecl 0xd368b8 <col:5, col:12> col:12 implicit struct is_const
| | |-ClassTemplateSpecializationDecl 0xd9d7c8 <line:682:3, line:684:27> line:683:12 struct is_const definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0xbf6790 'char16_t'
| | | `-CXXRecordDecl 0xd9da28 <col:5, col:12> col:12 implicit struct is_const
| | |-ClassTemplateSpecializationDecl 0xd9fad8 <line:682:3, line:684:27> line:683:12 struct is_const definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'char32_t'
| | | | `-BuiltinType 0xbf67b0 'char32_t'
| | | `-CXXRecordDecl 0xd9fd38 <col:5, col:12> col:12 implicit struct is_const
| | |-ClassTemplateSpecializationDecl 0xdacc78 <line:682:3, line:684:27> line:683:12 struct is_const definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | `-CXXRecordDecl 0xdaced8 <col:5, col:12> col:12 implicit struct is_const
| | `-ClassTemplateSpecializationDecl 0xdb2de8 <line:682:3, line:684:27> line:683:12 struct is_const definition
| |   |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   |-TemplateArgument type 'unsigned short'
| |   | `-BuiltinType 0xbf62d0 'unsigned short'
| |   `-CXXRecordDecl 0xdb3048 <col:5, col:12> col:12 implicit struct is_const
| |-ClassTemplateDecl 0xcefc60 <line:221:3, line:222:12> col:12 __is_array_unknown_bounds
| | |-TemplateTypeParmDecl 0xcefb38 <line:221:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xcefbd0 <line:222:5, col:12> col:12 struct __is_array_unknown_bounds
| |-FunctionTemplateDecl 0xcf2068 <line:227:3, line:229:18> line:228:25 __is_complete_or_unbounded
| | |-TemplateTypeParmDecl 0xcefe38 <line:227:13, col:22> col:22 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xcf1dc0 <col:27, col:46> col:34 'std::size_t':'unsigned long' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-UnaryExprOrTypeTraitExpr 0xcefef0 <col:36, col:46> 'unsigned long' sizeof '_Tp'
| | `-FunctionDecl 0xcf1fc8 <line:228:5, line:229:18> line:228:25 constexpr __is_complete_or_unbounded 'std::true_type (__type_identity<_Tp>)'
| |   |-ParmVarDecl 0xcf1ed0 <col:52, col:71> col:72 '__type_identity<_Tp>'
| |   `-CompoundStmt 0xcf21d0 <line:229:5, col:18>
| |     `-ReturnStmt 0xcf21c0 <col:7, col:15>
| |       `-InitListExpr 0xcf2180 <col:14, col:15> 'std::true_type':'std::integral_constant<bool, true>'
| |-FunctionTemplateDecl 0xcf2b58 <line:231:3, line:239:18> line:238:13 __is_complete_or_unbounded
| | |-TemplateTypeParmDecl 0xcf21e8 <line:231:13, col:22> col:22 referenced typename depth 0 index 0 _TypeIdentity
| | |-TemplateTypeParmDecl 0xcf2340 <line:232:7, col:54> col:16 referenced typename depth 0 index 1 _NestedType
| | | `-TemplateArgument type 'typename _TypeIdentity::type'
| | |   `-DependentNameType 0xcf22d0 'typename _TypeIdentity::type' dependent
| | `-FunctionDecl 0xcf2ab8 <line:233:5, line:239:18> line:238:13 constexpr __is_complete_or_unbounded 'typename __or_<is_reference<_NestedType>, is_function<_NestedType>, is_void<_NestedType>, __is_array_unknown_bounds<_NestedType>>::type (_TypeIdentity)'
| |   |-ParmVarDecl 0xcf29b0 <col:40> col:53 '_TypeIdentity'
| |   `-CompoundStmt 0xcf2c90 <line:239:5, col:18>
| |     `-ReturnStmt 0xcf2c80 <col:7, col:15>
| |       `-InitListExpr 0xcf2c40 <col:14, col:15> 'void'
| |-ClassTemplateDecl 0xcf3300 <line:246:3, line:248:25> line:247:12 __success_type
| | |-TemplateTypeParmDecl 0xcf2ca8 <line:246:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xcf3270 <line:247:5, line:248:25> line:247:12 struct __success_type definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xcf3540 <col:5, col:12> col:12 implicit struct __success_type
| |   `-TypedefDecl 0xcf35e0 <line:248:7, col:19> col:19 type '_Tp'
| |     `-TemplateTypeParmType 0xcf2d00 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xcf2ca8 '_Tp'
| |-CXXRecordDecl 0xcf3650 <line:250:3, line:251:5> line:250:10 referenced struct __failure_type definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | `-CXXRecordDecl 0xcf3768 <col:3, col:10> col:10 implicit struct __failure_type
| |-TypeAliasTemplateDecl 0xcf3a50 <line:254:3, line:255:52> col:5 __remove_cv_t
| | |-TemplateTypeParmDecl 0xcf3810 <line:254:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xcf39f0 <line:255:5, col:52> col:11 __remove_cv_t 'typename remove_cv<_Tp>::type'
| |   `-DependentNameType 0xcf3980 'typename remove_cv<_Tp>::type' dependent
| |-ClassTemplateDecl 0xcf3bd0 <line:259:3, line:261:27> line:260:12 __is_void_helper
| | |-TemplateTypeParmDecl 0xcf3aa8 <line:259:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0xcf3b40 <line:260:5, line:261:27> line:260:12 struct __is_void_helper definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | `-CXXRecordDecl 0xcf3e50 <col:5, col:12> col:12 implicit struct __is_void_helper
| | `-ClassTemplateSpecialization 0xcf3f18 '__is_void_helper'
| |-ClassTemplateSpecializationDecl 0xcf3f18 <line:263:3, line:265:26> line:264:12 struct __is_void_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0xbf61b0 'void'
| | `-CXXRecordDecl 0xcf4168 <col:5, col:12> col:12 implicit struct __is_void_helper
| |-ClassTemplateDecl 0xcf4d10 prev 0xcef360 <line:269:3, line:272:7> line:270:12 is_void
| | |-TemplateTypeParmDecl 0xcf4210 <line:269:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xcf4c80 prev 0xcef2d0 <line:270:5, line:272:7> line:270:12 struct is_void definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '__is_void_helper<__remove_cv_t<_Tp>>::type'
| | | `-CXXRecordDecl 0xcf51a0 <col:5, col:12> col:12 implicit struct is_void
| | `-ClassTemplateSpecialization 0xe0fd68 'is_void'
| |-ClassTemplateDecl 0xcf5370 <line:275:3, line:277:27> line:276:12 __is_integral_helper
| | |-TemplateTypeParmDecl 0xcf5248 <line:275:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0xcf52e0 <line:276:5, line:277:27> line:276:12 struct __is_integral_helper definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | `-CXXRecordDecl 0xcf55f0 <col:5, col:12> col:12 implicit struct __is_integral_helper
| | |-ClassTemplateSpecialization 0xcf56b8 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf59d0 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf6260 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf6578 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf6890 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf6ba0 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf6eb0 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf73c0 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf76d8 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf79f8 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf7d18 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf8038 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf85d0 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf88e8 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf8c08 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0xcf8f28 '__is_integral_helper'
| | `-ClassTemplateSpecialization 0xcf9248 '__is_integral_helper'
| |-ClassTemplateSpecializationDecl 0xcf56b8 <line:279:3, line:281:26> line:280:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'bool'
| | | `-BuiltinType 0xbf61d0 'bool'
| | `-CXXRecordDecl 0xcf5908 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf59d0 <line:283:3, line:285:26> line:284:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'char'
| | | `-BuiltinType 0xbf61f0 'char'
| | `-CXXRecordDecl 0xcf6190 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf6260 <line:287:3, line:289:26> line:288:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'signed char'
| | | `-BuiltinType 0xbf6210 'signed char'
| | `-CXXRecordDecl 0xcf64a8 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf6578 <line:291:3, line:293:26> line:292:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'unsigned char'
| | | `-BuiltinType 0xbf62b0 'unsigned char'
| | `-CXXRecordDecl 0xcf67c8 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf6890 <line:299:3, line:301:26> line:300:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'wchar_t'
| | | `-BuiltinType 0xbf6750 'wchar_t'
| | `-CXXRecordDecl 0xcf6ad8 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf6ba0 <line:310:3, line:312:26> line:311:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'char16_t'
| | | `-BuiltinType 0xbf6790 'char16_t'
| | `-CXXRecordDecl 0xcf6de8 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf6eb0 <line:314:3, line:316:26> line:315:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'char32_t'
| | | `-BuiltinType 0xbf67b0 'char32_t'
| | `-CXXRecordDecl 0xcf70f8 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf73c0 <line:318:3, line:320:26> line:319:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'short'
| | | `-BuiltinType 0xbf6230 'short'
| | `-CXXRecordDecl 0xcf7608 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf76d8 <line:322:3, line:324:26> line:323:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'unsigned short'
| | | `-BuiltinType 0xbf62d0 'unsigned short'
| | `-CXXRecordDecl 0xcf7928 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf79f8 <line:326:3, line:328:26> line:327:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'int'
| | | `-BuiltinType 0xbf6250 'int'
| | `-CXXRecordDecl 0xcf7c48 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf7d18 <line:330:3, line:332:26> line:331:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'unsigned int'
| | | `-BuiltinType 0xbf62f0 'unsigned int'
| | `-CXXRecordDecl 0xcf7f68 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf8038 <line:334:3, line:336:26> line:335:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'long'
| | | `-BuiltinType 0xbf6270 'long'
| | `-CXXRecordDecl 0xcf8288 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf85d0 <line:338:3, line:340:26> line:339:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'unsigned long'
| | | `-BuiltinType 0xbf6310 'unsigned long'
| | `-CXXRecordDecl 0xcf8818 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf88e8 <line:342:3, line:344:26> line:343:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'long long'
| | | `-BuiltinType 0xbf6290 'long long'
| | `-CXXRecordDecl 0xcf8b38 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf8c08 <line:346:3, line:348:26> line:347:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'unsigned long long'
| | | `-BuiltinType 0xbf6330 'unsigned long long'
| | `-CXXRecordDecl 0xcf8e58 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf8f28 <line:353:3, line:355:26> line:354:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type '__int128'
| | | `-BuiltinType 0xbf6710 '__int128'
| | `-CXXRecordDecl 0xcf9178 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0xcf9248 <line:357:3, line:359:26> line:358:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'unsigned __int128'
| | | `-BuiltinType 0xbf6730 'unsigned __int128'
| | `-CXXRecordDecl 0xcf9498 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateDecl 0xcfa9a0 <line:391:3, line:394:7> line:392:12 is_integral
| | |-TemplateTypeParmDecl 0xcf9540 <line:391:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xcfa910 <line:392:5, line:394:7> line:392:12 struct is_integral definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '__is_integral_helper<__remove_cv_t<_Tp>>::type'
| | | `-CXXRecordDecl 0xcfaf80 <col:5, col:12> col:12 implicit struct is_integral
| | |-ClassTemplateSpecializationDecl 0xda89a8 <line:391:3, line:394:7> line:392:12 struct is_integral definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '__is_integral_helper<__remove_cv_t<wchar_t>>::type':'std::integral_constant<bool, true>'
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0xbf6750 'wchar_t'
| | | `-CXXRecordDecl 0xda9270 <col:5, col:12> col:12 implicit struct is_integral
| | |-ClassTemplateSpecializationDecl 0xdab3f8 <line:391:3, line:394:7> line:392:12 struct is_integral definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '__is_integral_helper<__remove_cv_t<unsigned int>>::type':'std::integral_constant<bool, true>'
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | `-CXXRecordDecl 0xdabca0 <col:5, col:12> col:12 implicit struct is_integral
| | |-ClassTemplateSpecializationDecl 0xdaf6f8 <line:391:3, line:394:7> line:392:12 struct is_integral definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '__is_integral_helper<__remove_cv_t<char16_t>>::type':'std::integral_constant<bool, true>'
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0xbf6790 'char16_t'
| | | `-CXXRecordDecl 0xdaffa0 <col:5, col:12> col:12 implicit struct is_integral
| | |-ClassTemplateSpecializationDecl 0xdb11e8 <line:391:3, line:394:7> line:392:12 struct is_integral definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '__is_integral_helper<__remove_cv_t<unsigned short>>::type':'std::integral_constant<bool, true>'
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0xbf62d0 'unsigned short'
| | | `-CXXRecordDecl 0xdb2090 <col:5, col:12> col:12 implicit struct is_integral
| | `-ClassTemplateSpecializationDecl 0xdb4c58 <line:391:3, line:394:7> line:392:12 struct is_integral definition
| |   |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_integral_helper<__remove_cv_t<char32_t>>::type':'std::integral_constant<bool, true>'
| |   |-TemplateArgument type 'char32_t'
| |   | `-BuiltinType 0xbf67b0 'char32_t'
| |   `-CXXRecordDecl 0xdb5500 <col:5, col:12> col:12 implicit struct is_integral
| |-ClassTemplateDecl 0xcfb150 <line:397:3, line:399:27> line:398:12 __is_floating_point_helper
| | |-TemplateTypeParmDecl 0xcfb028 <line:397:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0xcfb0c0 <line:398:5, line:399:27> line:398:12 struct __is_floating_point_helper definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | `-CXXRecordDecl 0xcfb3d0 <col:5, col:12> col:12 implicit struct __is_floating_point_helper
| | |-ClassTemplateSpecialization 0xcfb4a0 '__is_floating_point_helper'
| | |-ClassTemplateSpecialization 0xcfb7b8 '__is_floating_point_helper'
| | |-ClassTemplateSpecialization 0xcfc468 '__is_floating_point_helper'
| | `-ClassTemplateSpecialization 0xcfc788 '__is_floating_point_helper'
| |-ClassTemplateSpecializationDecl 0xcfb4a0 <line:401:3, line:403:26> line:402:12 struct __is_floating_point_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'float'
| | | `-BuiltinType 0xbf6350 'float'
| | `-CXXRecordDecl 0xcfb6e8 <col:5, col:12> col:12 implicit struct __is_floating_point_helper
| |-ClassTemplateSpecializationDecl 0xcfb7b8 <line:405:3, line:407:26> line:406:12 struct __is_floating_point_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'double'
| | | `-BuiltinType 0xbf6370 'double'
| | `-CXXRecordDecl 0xcfc398 <col:5, col:12> col:12 implicit struct __is_floating_point_helper
| |-ClassTemplateSpecializationDecl 0xcfc468 <line:409:3, line:411:26> line:410:12 struct __is_floating_point_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'long double'
| | | `-BuiltinType 0xbf6390 'long double'
| | `-CXXRecordDecl 0xcfc6b8 <col:5, col:12> col:12 implicit struct __is_floating_point_helper
| |-ClassTemplateSpecializationDecl 0xcfc788 <line:414:3, line:416:26> line:415:12 struct __is_floating_point_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type '__float128'
| | | `-BuiltinType 0xbf63b0 '__float128'
| | `-CXXRecordDecl 0xcfc9d8 <col:5, col:12> col:12 implicit struct __is_floating_point_helper
| |-ClassTemplateDecl 0xcfcba0 <line:421:3, line:424:7> line:422:12 is_floating_point
| | |-TemplateTypeParmDecl 0xcfca80 <line:421:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xcfcb10 <line:422:5, line:424:7> line:422:12 struct is_floating_point definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_floating_point_helper<__remove_cv_t<_Tp>>::type'
| |   `-CXXRecordDecl 0xcfd180 <col:5, col:12> col:12 implicit struct is_floating_point
| |-ClassTemplateDecl 0xcfd900 <line:427:3, line:429:27> line:428:12 is_array
| | |-TemplateTypeParmDecl 0xcfd228 <line:427:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xcfd870 <line:428:5, line:429:27> line:428:12 struct is_array definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0xcfdb80 <col:5, col:12> col:12 implicit struct is_array
| |-ClassTemplatePartialSpecializationDecl 0xcfdf30 <line:431:3, line:433:26> line:432:12 struct is_array definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0[_Size]'
| | | `-DependentSizedArrayType 0xcfdde0 'type-parameter-0-0[_Size]' dependent   <col:24, col:30>
| | |   |-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |   `-DeclRefExpr 0xcfddc0 <col:25> 'std::size_t':'unsigned long' NonTypeTemplateParm 0xcfdd40 '_Size' 'std::size_t':'unsigned long'
| | |-TemplateTypeParmDecl 0xcfdc28 <line:431:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xcfdd40 <col:26, col:38> col:38 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Size
| | `-CXXRecordDecl 0xcfe198 <line:432:5, col:12> col:12 implicit struct is_array
| |-ClassTemplatePartialSpecializationDecl 0xcfe400 <line:435:3, line:437:26> line:436:12 struct is_array definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0[]'
| | | `-IncompleteArrayType 0xcfe2d0 'type-parameter-0-0[]' dependent 
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xcfe240 <line:435:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xcfe668 <line:436:5, col:12> col:12 implicit struct is_array
| |-ClassTemplateDecl 0xcfed80 <line:439:3, line:441:27> line:440:12 __is_pointer_helper
| | |-TemplateTypeParmDecl 0xcfe710 <line:439:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xcfe7a0 <line:440:5, line:441:27> line:440:12 struct __is_pointer_helper definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0xcff000 <col:5, col:12> col:12 implicit struct __is_pointer_helper
| |-ClassTemplatePartialSpecializationDecl 0xcff230 <line:443:3, line:445:26> line:444:12 struct __is_pointer_helper definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0 *'
| | | `-PointerType 0xcca060 'type-parameter-0-0 *' dependent
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xcff0a8 <line:443:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xcff488 <line:444:5, col:12> col:12 implicit struct __is_pointer_helper
| |-ClassTemplateDecl 0xcff650 <line:448:3, line:451:7> line:449:12 is_pointer
| | |-TemplateTypeParmDecl 0xcff530 <line:448:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xcff5c0 <line:449:5, line:451:7> line:449:12 struct is_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_pointer_helper<__remove_cv_t<_Tp>>::type'
| |   `-CXXRecordDecl 0xcffc30 <col:5, col:12> col:12 implicit struct is_pointer
| |-ClassTemplateDecl 0xd00780 <line:454:3, line:456:27> line:455:12 is_lvalue_reference
| | |-TemplateTypeParmDecl 0xcffcd8 <line:454:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xd006f0 <line:455:5, line:456:27> line:455:12 struct is_lvalue_reference definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0xd00a00 <col:5, col:12> col:12 implicit struct is_lvalue_reference
| |-ClassTemplatePartialSpecializationDecl 0xd00c30 <line:458:3, line:460:26> line:459:12 struct is_lvalue_reference definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0xcc9f90 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd00aa8 <line:458:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd00e88 <line:459:5, col:12> col:12 implicit struct is_lvalue_reference
| |-ClassTemplateDecl 0xd01050 <line:463:3, line:465:27> line:464:12 is_rvalue_reference
| | |-TemplateTypeParmDecl 0xd00f30 <line:463:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xd00fc0 <line:464:5, line:465:27> line:464:12 struct is_rvalue_reference definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0xd012d0 <col:5, col:12> col:12 implicit struct is_rvalue_reference
| |-ClassTemplatePartialSpecializationDecl 0xd01530 <line:467:3, line:469:26> line:468:12 struct is_rvalue_reference definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0 &&'
| | | `-RValueReferenceType 0xd01410 'type-parameter-0-0 &&' dependent
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd01378 <line:467:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd02518 <line:468:5, col:12> col:12 implicit struct is_rvalue_reference
| |-ClassTemplateDecl 0xd026e0 <line:471:3, line:473:27> line:472:12 __is_member_object_pointer_helper
| | |-TemplateTypeParmDecl 0xd025c0 <line:471:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xd02650 <line:472:5, line:473:27> line:472:12 struct __is_member_object_pointer_helper definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0xd02960 <col:5, col:12> col:12 implicit struct __is_member_object_pointer_helper
| |-ClassTemplatePartialSpecializationDecl 0xd02ca0 <line:475:3, line:477:47> line:476:12 struct __is_member_object_pointer_helper definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__not_<is_function<_Tp>>::type'
| | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| | | `-MemberPointerType 0xd02b50 'type-parameter-0-0 type-parameter-0-1::*' dependent
| | |   |-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd02a08 <line:475:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd02a88 <col:26, col:35> col:35 typename depth 0 index 1 _Cp
| | `-CXXRecordDecl 0xd03110 <line:476:5, col:12> col:12 implicit struct __is_member_object_pointer_helper
| |-ClassTemplateDecl 0xd032e0 <line:480:3, line:483:7> line:481:12 is_member_object_pointer
| | |-TemplateTypeParmDecl 0xd031b8 <line:480:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd03250 <line:481:5, line:483:7> line:481:12 struct is_member_object_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_member_object_pointer_helper<__remove_cv_t<_Tp>>::type'
| |   `-CXXRecordDecl 0xd04250 <col:5, col:12> col:12 implicit struct is_member_object_pointer
| |-ClassTemplateDecl 0xd04420 <line:485:3, line:487:27> line:486:12 __is_member_function_pointer_helper
| | |-TemplateTypeParmDecl 0xd042f8 <line:485:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xd04390 <line:486:5, line:487:27> line:486:12 struct __is_member_function_pointer_helper definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0xd046a0 <col:5, col:12> col:12 implicit struct __is_member_function_pointer_helper
| |-ClassTemplatePartialSpecializationDecl 0xd049b0 <line:489:3, line:491:39> line:490:12 struct __is_member_function_pointer_helper definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'is_function<_Tp>::type'
| | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| | | `-MemberPointerType 0xd02b50 'type-parameter-0-0 type-parameter-0-1::*' dependent
| | |   |-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd04748 <line:489:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd047c8 <col:26, col:35> col:35 typename depth 0 index 1 _Cp
| | `-CXXRecordDecl 0xd052d0 <line:490:5, col:12> col:12 implicit struct __is_member_function_pointer_helper
| |-ClassTemplateDecl 0xd054a0 <line:494:3, line:497:7> line:495:12 is_member_function_pointer
| | |-TemplateTypeParmDecl 0xd05378 <line:494:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd05410 <line:495:5, line:497:7> line:495:12 struct is_member_function_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_member_function_pointer_helper<__remove_cv_t<_Tp>>::type'
| |   `-CXXRecordDecl 0xd05a80 <col:5, col:12> col:12 implicit struct is_member_function_pointer
| |-ClassTemplateDecl 0xd05c50 <line:500:3, line:503:7> line:501:12 is_enum
| | |-TemplateTypeParmDecl 0xd05b28 <line:500:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd05bc0 <line:501:5, line:503:7> line:501:12 struct is_enum definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'integral_constant<bool, __is_enum(_Tp)>'
| | | `-CXXRecordDecl 0xd06000 <col:5, col:12> col:12 implicit struct is_enum
| | |-ClassTemplateSpecializationDecl 0xda95b0 <line:500:3, line:503:7> line:501:12 struct is_enum definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'integral_constant<bool, __is_enum(wchar_t)>':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0xbf6750 'wchar_t'
| | | `-CXXRecordDecl 0xdaa640 <col:5, col:12> col:12 implicit struct is_enum
| | |-ClassTemplateSpecializationDecl 0xdabdf0 <line:500:3, line:503:7> line:501:12 struct is_enum definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'integral_constant<bool, __is_enum(unsigned int)>':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | `-CXXRecordDecl 0xdac130 <col:5, col:12> col:12 implicit struct is_enum
| | |-ClassTemplateSpecializationDecl 0xdb00f0 <line:500:3, line:503:7> line:501:12 struct is_enum definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'integral_constant<bool, __is_enum(char16_t)>':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0xbf6790 'char16_t'
| | | `-CXXRecordDecl 0xdb0430 <col:5, col:12> col:12 implicit struct is_enum
| | |-ClassTemplateSpecializationDecl 0xdb21e0 <line:500:3, line:503:7> line:501:12 struct is_enum definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'integral_constant<bool, __is_enum(unsigned short)>':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0xbf62d0 'unsigned short'
| | | `-CXXRecordDecl 0xdb2520 <col:5, col:12> col:12 implicit struct is_enum
| | `-ClassTemplateSpecializationDecl 0xdb5650 <line:500:3, line:503:7> line:501:12 struct is_enum definition
| |   |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_enum(char32_t)>':'std::integral_constant<bool, false>'
| |   |-TemplateArgument type 'char32_t'
| |   | `-BuiltinType 0xbf67b0 'char32_t'
| |   `-CXXRecordDecl 0xdb5990 <col:5, col:12> col:12 implicit struct is_enum
| |-ClassTemplateDecl 0xd061d0 <line:506:3, line:509:7> line:507:12 is_union
| | |-TemplateTypeParmDecl 0xd060a8 <line:506:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd06140 <line:507:5, line:509:7> line:507:12 struct is_union definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_union(_Tp)>'
| |   `-CXXRecordDecl 0xd06fa0 <col:5, col:12> col:12 implicit struct is_union
| |-ClassTemplateDecl 0xd07170 <line:512:3, line:515:7> line:513:12 is_class
| | |-TemplateTypeParmDecl 0xd07048 <line:512:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd070e0 <line:513:5, line:515:7> line:513:12 struct is_class definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_class(_Tp)>'
| |   `-CXXRecordDecl 0xd07520 <col:5, col:12> col:12 implicit struct is_class
| |-ClassTemplateDecl 0xd076f0 prev 0xcef060 <line:518:3, line:520:61> line:519:12 is_function
| | |-TemplateTypeParmDecl 0xd075c8 <line:518:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd07660 prev 0xceefd0 <line:519:5, line:520:61> line:519:12 struct is_function definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<!is_const<const _Tp>::value>':'integral_constant<bool, !is_const<const _Tp>::value>'
| |   `-CXXRecordDecl 0xd07b18 <col:5, col:12> col:12 implicit struct is_function
| |-ClassTemplatePartialSpecializationDecl 0xd0a5c0 <line:522:3, line:524:27> line:523:12 struct is_function definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0xcc9f90 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd07bc0 <line:522:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd0a818 <line:523:5, col:12> col:12 implicit struct is_function
| |-ClassTemplatePartialSpecializationDecl 0xd0aa40 <line:526:3, line:528:27> line:527:12 struct is_function definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0 &&'
| | | `-RValueReferenceType 0xd01410 'type-parameter-0-0 &&' dependent
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd0a8c0 <line:526:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd0ac98 <line:527:5, col:12> col:12 implicit struct is_function
| |-ClassTemplateDecl 0xd0ae60 <line:532:3, line:534:27> line:533:12 __is_null_pointer_helper
| | |-TemplateTypeParmDecl 0xd0ad40 <line:532:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0xd0add0 <line:533:5, line:534:27> line:533:12 struct __is_null_pointer_helper definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | `-CXXRecordDecl 0xd0b0e0 <col:5, col:12> col:12 implicit struct __is_null_pointer_helper
| | `-ClassTemplateSpecialization 0xd0b238 '__is_null_pointer_helper'
| |-ClassTemplateSpecializationDecl 0xd0b238 <line:536:3, line:538:26> line:537:12 struct __is_null_pointer_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'std::nullptr_t'
| | | `-BuiltinType 0xbf6940 'std::nullptr_t'
| | `-CXXRecordDecl 0xd0b4c0 <col:5, col:12> col:12 implicit struct __is_null_pointer_helper
| |-ClassTemplateDecl 0xd0b690 <line:541:3, line:544:7> line:542:12 is_null_pointer
| | |-TemplateTypeParmDecl 0xd0b568 <line:541:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd0b600 <line:542:5, line:544:7> line:542:12 struct is_null_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_null_pointer_helper<__remove_cv_t<_Tp>>::type'
| |   `-CXXRecordDecl 0xd0bc70 <col:5, col:12> col:12 implicit struct is_null_pointer
| |-ClassTemplateDecl 0xd0be40 <line:548:3, line:551:7> line:549:12 __is_nullptr_t
| | |-TemplateTypeParmDecl 0xd0bd18 <line:548:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd0bdb0 <line:549:5, line:551:7> line:549:12 struct __is_nullptr_t definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'is_null_pointer<_Tp>'
| |   |-DeprecatedAttr 0xd0c270 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:94:19, col:58> "use 'std::is_null_pointer' instead" ""
| |   `-CXXRecordDecl 0xd0c120 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:549:5, col:12> col:12 implicit struct __is_nullptr_t
| |-ClassTemplateDecl 0xd0c440 prev 0xcee450 <line:556:3, line:560:7> line:557:12 is_reference
| | |-TemplateTypeParmDecl 0xd0c320 <line:556:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd0c3b0 prev 0xcee3c0 <line:557:5, line:560:7> line:557:12 struct is_reference definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__or_<is_lvalue_reference<_Tp>, is_rvalue_reference<_Tp>>::type'
| |   `-CXXRecordDecl 0xd0ccb0 <col:5, col:12> col:12 implicit struct is_reference
| |-ClassTemplateDecl 0xd0ce80 <line:563:3, line:566:7> line:564:12 is_arithmetic
| | |-TemplateTypeParmDecl 0xd0cd58 <line:563:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd0cdf0 <line:564:5, line:566:7> line:564:12 struct is_arithmetic definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__or_<is_integral<_Tp>, is_floating_point<_Tp>>::type'
| |   `-CXXRecordDecl 0xd0d410 <col:5, col:12> col:12 implicit struct is_arithmetic
| |-ClassTemplateDecl 0xd0d5e0 <line:569:3, line:573:7> line:570:12 is_fundamental
| | |-TemplateTypeParmDecl 0xd0d4b8 <line:569:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd0d550 <line:570:5, line:573:7> line:570:12 struct is_fundamental definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__or_<is_arithmetic<_Tp>, is_void<_Tp>, is_null_pointer<_Tp>>::type'
| |   `-CXXRecordDecl 0xd0eda0 <col:5, col:12> col:12 implicit struct is_fundamental
| |-ClassTemplateDecl 0xd0ef70 <line:576:3, line:580:7> line:577:12 is_object
| | |-TemplateTypeParmDecl 0xd0ee48 <line:576:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd0eee0 <line:577:5, line:580:7> line:577:12 struct is_object definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__not_<__or_<is_function<_Tp>, is_reference<_Tp>, is_void<_Tp>>>::type'
| |   `-CXXRecordDecl 0xd0f6b0 <col:5, col:12> col:12 implicit struct is_object
| |-ClassTemplateDecl 0xd0f880 <line:582:3, line:583:12> col:12 is_member_pointer
| | |-TemplateTypeParmDecl 0xd0f758 <line:582:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xd0f7f0 <line:583:5, col:12> col:12 struct is_member_pointer
| |-ClassTemplateDecl 0xd114c0 <line:586:3, line:590:7> line:587:12 is_scalar
| | |-TemplateTypeParmDecl 0xd11398 <line:586:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd11430 <line:587:5, line:590:7> line:587:12 struct is_scalar definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>, is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type'
| |   `-CXXRecordDecl 0xd11cf0 <col:5, col:12> col:12 implicit struct is_scalar
| |-ClassTemplateDecl 0xd11ec0 <line:593:3, line:595:50> line:594:12 is_compound
| | |-TemplateTypeParmDecl 0xd11d98 <line:593:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd11e30 <line:594:5, line:595:50> line:594:12 struct is_compound definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__not_<is_fundamental<_Tp>>::type'
| |   `-CXXRecordDecl 0xd12c78 <col:5, col:12> col:12 implicit struct is_compound
| |-ClassTemplateDecl 0xd12e40 <line:598:3, line:600:27> line:599:12 __is_member_pointer_helper
| | |-TemplateTypeParmDecl 0xd12d20 <line:598:12, col:21> col:21 typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd12db0 <line:599:5, line:600:27> line:599:12 struct __is_member_pointer_helper definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0xd130c0 <col:5, col:12> col:12 implicit struct __is_member_pointer_helper
| |-ClassTemplatePartialSpecializationDecl 0xd133d0 <line:602:3, line:604:26> line:603:12 struct __is_member_pointer_helper definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| | | `-MemberPointerType 0xd02b50 'type-parameter-0-0 type-parameter-0-1::*' dependent
| | |   |-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd13168 <line:602:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd131e8 <col:26, col:35> col:35 typename depth 0 index 1 _Cp
| | `-CXXRecordDecl 0xd13638 <line:603:5, col:12> col:12 implicit struct __is_member_pointer_helper
| |-ClassTemplateDecl 0xd13800 prev 0xd0f880 <line:608:3, line:611:7> line:609:12 is_member_pointer
| | |-TemplateTypeParmDecl 0xd136e0 <line:608:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd13770 prev 0xd0f7f0 <line:609:5, line:611:7> line:609:12 struct is_member_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_member_pointer_helper<__remove_cv_t<_Tp>>::type'
| |   `-CXXRecordDecl 0xd141b0 <col:5, col:12> col:12 implicit struct is_member_pointer
| |-ClassTemplateDecl 0xd14408 <line:613:3, line:614:12> col:12 is_same
| | |-TemplateTypeParmDecl 0xd14258 <line:613:12> col:20 typename depth 0 index 0
| | |-TemplateTypeParmDecl 0xd142d8 <col:22> col:30 typename depth 0 index 1
| | `-CXXRecordDecl 0xd14378 <line:614:5, col:12> col:12 struct is_same
| |-TypeAliasTemplateDecl 0xd14a90 <line:617:3, line:618:54> col:5 __is_one_of
| | |-TemplateTypeParmDecl 0xd14628 <line:617:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd146a8 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Types
| | `-TypeAliasDecl 0xd14a30 <line:618:5, col:54> col:11 __is_one_of '__or_<is_same<_Tp, _Types>...>'
| |   `-TemplateSpecializationType 0xd149b0 '__or_<is_same<_Tp, _Types>...>' dependent __or_
| |     `-TemplateArgument type 'is_same<_Tp, _Types>...'
| |       `-PackExpansionType 0xd148e0 'is_same<_Tp, _Types>...' dependent
| |         `-TemplateSpecializationType 0xd14800 'is_same<_Tp, _Types>' dependent contains_unexpanded_pack is_same
| |           |-TemplateArgument type '_Tp'
| |           | `-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |           |   `-TemplateTypeParm 0xd14628 '_Tp'
| |           `-TemplateArgument type '_Types'
| |             `-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |               `-TemplateTypeParm 0xd146a8 '_Types'
| |-TypeAliasTemplateDecl 0xd16218 <line:621:3, line:637:4> line:622:5 __is_signed_integer
| | |-TemplateTypeParmDecl 0xd14ae8 <line:621:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xd161b8 <line:622:5, line:637:4> line:622:11 __is_signed_integer '__is_one_of<__remove_cv_t<_Tp>, signed char, short, int, long, long long, __int128>':'__or_<is_same<typename remove_cv<type-parameter-0-0>::type, signed char>, is_same<typename remove_cv<type-parameter-0-0>::type, short>, is_same<typename remove_cv<type-parameter-0-0>::type, int>, is_same<typename remove_cv<type-parameter-0-0>::type, long>, is_same<typename remove_cv<type-parameter-0-0>::type, long long>, is_same<typename remove_cv<type-parameter-0-0>::type, __int128>>'
| |   `-TemplateSpecializationType 0xd16040 '__is_one_of<__remove_cv_t<_Tp>, signed char, short, int, long, long long, __int128>' sugar dependent alias __is_one_of
| |     |-TemplateArgument type '__remove_cv_t<_Tp>':'typename remove_cv<type-parameter-0-0>::type'
| |     | `-TemplateSpecializationType 0xd14ce0 '__remove_cv_t<_Tp>' sugar dependent alias __remove_cv_t
| |     |   |-TemplateArgument type '_Tp'
| |     |   | `-TemplateTypeParmType 0xd14b40 '_Tp' dependent depth 0 index 0
| |     |   |   `-TemplateTypeParm 0xd14ae8 '_Tp'
| |     |   `-DependentNameType 0xd14c90 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |-TemplateArgument type 'signed char'
| |     | `-BuiltinType 0xbf6210 'signed char'
| |     |-TemplateArgument type 'short'
| |     | `-BuiltinType 0xbf6230 'short'
| |     |-TemplateArgument type 'int'
| |     | `-BuiltinType 0xbf6250 'int'
| |     |-TemplateArgument type 'long'
| |     | `-BuiltinType 0xbf6270 'long'
| |     |-TemplateArgument type 'long long'
| |     | `-BuiltinType 0xbf6290 'long long'
| |     |-TemplateArgument type '__int128'
| |     | `-BuiltinType 0xbf6710 '__int128'
| |     `-TemplateSpecializationType 0xd15f40 '__or_<is_same<typename remove_cv<type-parameter-0-0>::type, signed char>, is_same<typename remove_cv<type-parameter-0-0>::type, short>, is_same<typename remove_cv<type-parameter-0-0>::type, int>, is_same<typename remove_cv<type-parameter-0-0>::type, long>, is_same<typename remove_cv<type-parameter-0-0>::type, long long>, is_same<typename remove_cv<type-parameter-0-0>::type, __int128>>' dependent __or_
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, signed char>'
| |       | `-TemplateSpecializationType 0xd15000 'is_same<typename remove_cv<type-parameter-0-0>::type, signed char>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'signed char':'signed char'
| |       |     `-SubstTemplateTypeParmType 0xd14f60 'signed char' sugar
| |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |       |       `-BuiltinType 0xbf6210 'signed char'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, short>'
| |       | `-TemplateSpecializationType 0xd15130 'is_same<typename remove_cv<type-parameter-0-0>::type, short>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'short':'short'
| |       |     `-SubstTemplateTypeParmType 0xd15090 'short' sugar
| |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |       |       `-BuiltinType 0xbf6230 'short'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, int>'
| |       | `-TemplateSpecializationType 0xd159d0 'is_same<typename remove_cv<type-parameter-0-0>::type, int>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'int':'int'
| |       |     `-SubstTemplateTypeParmType 0xd15930 'int' sugar
| |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |       |       `-BuiltinType 0xbf6250 'int'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, long>'
| |       | `-TemplateSpecializationType 0xd15b00 'is_same<typename remove_cv<type-parameter-0-0>::type, long>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'long':'long'
| |       |     `-SubstTemplateTypeParmType 0xd15a60 'long' sugar
| |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |       |       `-BuiltinType 0xbf6270 'long'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, long long>'
| |       | `-TemplateSpecializationType 0xd15c30 'is_same<typename remove_cv<type-parameter-0-0>::type, long long>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'long long':'long long'
| |       |     `-SubstTemplateTypeParmType 0xd15b90 'long long' sugar
| |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |       |       `-BuiltinType 0xbf6290 'long long'
| |       `-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, __int128>'
| |         `-TemplateSpecializationType 0xd15d60 'is_same<typename remove_cv<type-parameter-0-0>::type, __int128>' dependent is_same
| |           |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |           | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |           |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |           |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |           |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |           `-TemplateArgument type '__int128':'__int128'
| |             `-SubstTemplateTypeParmType 0xd15cc0 '__int128' sugar
| |               |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |               | `-TemplateTypeParm 0xd146a8 '_Types'
| |               `-BuiltinType 0xbf6710 '__int128'
| |-TypeAliasTemplateDecl 0xd17438 <line:640:3, line:656:4> line:641:5 __is_unsigned_integer
| | |-TemplateTypeParmDecl 0xd16270 <line:640:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xd173d8 <line:641:5, line:656:4> line:641:11 __is_unsigned_integer '__is_one_of<__remove_cv_t<_Tp>, unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long, unsigned __int128>':'__or_<is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>>'
| |   `-TemplateSpecializationType 0xd17260 '__is_one_of<__remove_cv_t<_Tp>, unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long, unsigned __int128>' sugar dependent alias __is_one_of
| |     |-TemplateArgument type '__remove_cv_t<_Tp>':'typename remove_cv<type-parameter-0-0>::type'
| |     | `-TemplateSpecializationType 0xd16460 '__remove_cv_t<_Tp>' sugar dependent alias __remove_cv_t
| |     |   |-TemplateArgument type '_Tp'
| |     |   | `-TemplateTypeParmType 0xd162c0 '_Tp' dependent depth 0 index 0
| |     |   |   `-TemplateTypeParm 0xd16270 '_Tp'
| |     |   `-DependentNameType 0xd16410 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |-TemplateArgument type 'unsigned char'
| |     | `-BuiltinType 0xbf62b0 'unsigned char'
| |     |-TemplateArgument type 'unsigned short'
| |     | `-BuiltinType 0xbf62d0 'unsigned short'
| |     |-TemplateArgument type 'unsigned int'
| |     | `-BuiltinType 0xbf62f0 'unsigned int'
| |     |-TemplateArgument type 'unsigned long'
| |     | `-BuiltinType 0xbf6310 'unsigned long'
| |     |-TemplateArgument type 'unsigned long long'
| |     | `-BuiltinType 0xbf6330 'unsigned long long'
| |     |-TemplateArgument type 'unsigned __int128'
| |     | `-BuiltinType 0xbf6730 'unsigned __int128'
| |     `-TemplateSpecializationType 0xd17160 '__or_<is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>>' dependent __or_
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>'
| |       | `-TemplateSpecializationType 0xd16750 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'unsigned char':'unsigned char'
| |       |     `-SubstTemplateTypeParmType 0xd166b0 'unsigned char' sugar
| |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |       |       `-BuiltinType 0xbf62b0 'unsigned char'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>'
| |       | `-TemplateSpecializationType 0xd16880 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'unsigned short':'unsigned short'
| |       |     `-SubstTemplateTypeParmType 0xd167e0 'unsigned short' sugar
| |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |       |       `-BuiltinType 0xbf62d0 'unsigned short'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>'
| |       | `-TemplateSpecializationType 0xd16bf0 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'unsigned int':'unsigned int'
| |       |     `-SubstTemplateTypeParmType 0xd16b50 'unsigned int' sugar
| |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |       |       `-BuiltinType 0xbf62f0 'unsigned int'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>'
| |       | `-TemplateSpecializationType 0xd16d20 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'unsigned long':'unsigned long'
| |       |     `-SubstTemplateTypeParmType 0xd16c80 'unsigned long' sugar
| |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |       |       `-BuiltinType 0xbf6310 'unsigned long'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>'
| |       | `-TemplateSpecializationType 0xd16e50 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'unsigned long long':'unsigned long long'
| |       |     `-SubstTemplateTypeParmType 0xd16db0 'unsigned long long' sugar
| |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |       |       `-BuiltinType 0xbf6330 'unsigned long long'
| |       `-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>'
| |         `-TemplateSpecializationType 0xd16f80 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>' dependent is_same
| |           |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |           | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |           |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |           |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |           |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |           `-TemplateArgument type 'unsigned __int128':'unsigned __int128'
| |             `-SubstTemplateTypeParmType 0xd16ee0 'unsigned __int128' sugar
| |               |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |               | `-TemplateTypeParm 0xd146a8 '_Types'
| |               `-BuiltinType 0xbf6730 'unsigned __int128'
| |-TypeAliasTemplateDecl 0xd19208 <line:659:3, line:661:67> line:660:5 __is_standard_integer
| | |-TemplateTypeParmDecl 0xd17490 <line:659:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xd191a8 <line:660:5, line:661:67> line:660:11 __is_standard_integer '__or_<__is_signed_integer<_Tp>, __is_unsigned_integer<_Tp>>'
| |   `-TemplateSpecializationType 0xd19100 '__or_<__is_signed_integer<_Tp>, __is_unsigned_integer<_Tp>>' dependent __or_
| |     |-TemplateArgument type '__is_signed_integer<_Tp>':'__or_<is_same<typename remove_cv<type-parameter-0-0>::type, signed char>, is_same<typename remove_cv<type-parameter-0-0>::type, short>, is_same<typename remove_cv<type-parameter-0-0>::type, int>, is_same<typename remove_cv<type-parameter-0-0>::type, long>, is_same<typename remove_cv<type-parameter-0-0>::type, long long>, is_same<typename remove_cv<type-parameter-0-0>::type, __int128>>'
| |     | `-TemplateSpecializationType 0xd182a0 '__is_signed_integer<_Tp>' sugar dependent alias __is_signed_integer
| |     |   |-TemplateArgument type '_Tp'
| |     |   | `-TemplateTypeParmType 0xd174e0 '_Tp' dependent depth 0 index 0
| |     |   |   `-TemplateTypeParm 0xd17490 '_Tp'
| |     |   `-TemplateSpecializationType 0xd18170 '__is_one_of<__remove_cv_t<type-parameter-0-0>, signed char, short, int, long, long long, __int128>' sugar dependent alias __is_one_of
| |     |     |-TemplateArgument type '__remove_cv_t<type-parameter-0-0>':'typename remove_cv<type-parameter-0-0>::type'
| |     |     | `-TemplateSpecializationType 0xd177d0 '__remove_cv_t<type-parameter-0-0>' sugar dependent alias __remove_cv_t
| |     |     |   |-TemplateArgument type 'type-parameter-0-0':'type-parameter-0-0'
| |     |     |   | `-SubstTemplateTypeParmType 0xd17640 'type-parameter-0-0' sugar dependent
| |     |     |   |   |-TemplateTypeParmType 0xd14b40 '_Tp' dependent depth 0 index 0
| |     |     |   |   | `-TemplateTypeParm 0xd14ae8 '_Tp'
| |     |     |   |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| |     |     |   `-DependentNameType 0xd17780 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |     |-TemplateArgument type 'signed char'
| |     |     | `-BuiltinType 0xbf6210 'signed char'
| |     |     |-TemplateArgument type 'short'
| |     |     | `-BuiltinType 0xbf6230 'short'
| |     |     |-TemplateArgument type 'int'
| |     |     | `-BuiltinType 0xbf6250 'int'
| |     |     |-TemplateArgument type 'long'
| |     |     | `-BuiltinType 0xbf6270 'long'
| |     |     |-TemplateArgument type 'long long'
| |     |     | `-BuiltinType 0xbf6290 'long long'
| |     |     |-TemplateArgument type '__int128'
| |     |     | `-BuiltinType 0xbf6710 '__int128'
| |     |     `-TemplateSpecializationType 0xd18070 '__or_<is_same<typename remove_cv<type-parameter-0-0>::type, signed char>, is_same<typename remove_cv<type-parameter-0-0>::type, short>, is_same<typename remove_cv<type-parameter-0-0>::type, int>, is_same<typename remove_cv<type-parameter-0-0>::type, long>, is_same<typename remove_cv<type-parameter-0-0>::type, long long>, is_same<typename remove_cv<type-parameter-0-0>::type, __int128>>' dependent __or_
| |     |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, signed char>'
| |     |       | `-TemplateSpecializationType 0xd17980 'is_same<typename remove_cv<type-parameter-0-0>::type, signed char>' dependent is_same
| |     |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |     |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |     |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |     |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |     |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |       |   `-TemplateArgument type 'signed char':'signed char'
| |     |       |     `-SubstTemplateTypeParmType 0xd14f60 'signed char' sugar
| |     |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |     |       |       `-BuiltinType 0xbf6210 'signed char'
| |     |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, short>'
| |     |       | `-TemplateSpecializationType 0xd17a20 'is_same<typename remove_cv<type-parameter-0-0>::type, short>' dependent is_same
| |     |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |     |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |     |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |     |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |     |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |       |   `-TemplateArgument type 'short':'short'
| |     |       |     `-SubstTemplateTypeParmType 0xd15090 'short' sugar
| |     |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |     |       |       `-BuiltinType 0xbf6230 'short'
| |     |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, int>'
| |     |       | `-TemplateSpecializationType 0xd17ac0 'is_same<typename remove_cv<type-parameter-0-0>::type, int>' dependent is_same
| |     |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |     |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |     |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |     |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |     |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |       |   `-TemplateArgument type 'int':'int'
| |     |       |     `-SubstTemplateTypeParmType 0xd15930 'int' sugar
| |     |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |     |       |       `-BuiltinType 0xbf6250 'int'
| |     |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, long>'
| |     |       | `-TemplateSpecializationType 0xd17d90 'is_same<typename remove_cv<type-parameter-0-0>::type, long>' dependent is_same
| |     |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |     |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |     |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |     |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |     |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |       |   `-TemplateArgument type 'long':'long'
| |     |       |     `-SubstTemplateTypeParmType 0xd15a60 'long' sugar
| |     |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |     |       |       `-BuiltinType 0xbf6270 'long'
| |     |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, long long>'
| |     |       | `-TemplateSpecializationType 0xd17e30 'is_same<typename remove_cv<type-parameter-0-0>::type, long long>' dependent is_same
| |     |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |     |       |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |     |       |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |     |       |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |     |       |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |       |   `-TemplateArgument type 'long long':'long long'
| |     |       |     `-SubstTemplateTypeParmType 0xd15b90 'long long' sugar
| |     |       |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |       |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |     |       |       `-BuiltinType 0xbf6290 'long long'
| |     |       `-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, __int128>'
| |     |         `-TemplateSpecializationType 0xd17ed0 'is_same<typename remove_cv<type-parameter-0-0>::type, __int128>' dependent is_same
| |     |           |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |     |           | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |     |           |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |     |           |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |     |           |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |           `-TemplateArgument type '__int128':'__int128'
| |     |             `-SubstTemplateTypeParmType 0xd15cc0 '__int128' sugar
| |     |               |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |               | `-TemplateTypeParm 0xd146a8 '_Types'
| |     |               `-BuiltinType 0xbf6710 '__int128'
| |     `-TemplateArgument type '__is_unsigned_integer<_Tp>':'__or_<is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>>'
| |       `-TemplateSpecializationType 0xd18fd0 '__is_unsigned_integer<_Tp>' sugar dependent alias __is_unsigned_integer
| |         |-TemplateArgument type '_Tp'
| |         | `-TemplateTypeParmType 0xd174e0 '_Tp' dependent depth 0 index 0
| |         |   `-TemplateTypeParm 0xd17490 '_Tp'
| |         `-TemplateSpecializationType 0xd18ea0 '__is_one_of<__remove_cv_t<type-parameter-0-0>, unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long, unsigned __int128>' sugar dependent alias __is_one_of
| |           |-TemplateArgument type '__remove_cv_t<type-parameter-0-0>':'typename remove_cv<type-parameter-0-0>::type'
| |           | `-TemplateSpecializationType 0xd185e0 '__remove_cv_t<type-parameter-0-0>' sugar dependent alias __remove_cv_t
| |           |   |-TemplateArgument type 'type-parameter-0-0':'type-parameter-0-0'
| |           |   | `-SubstTemplateTypeParmType 0xd18450 'type-parameter-0-0' sugar dependent
| |           |   |   |-TemplateTypeParmType 0xd162c0 '_Tp' dependent depth 0 index 0
| |           |   |   | `-TemplateTypeParm 0xd16270 '_Tp'
| |           |   |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| |           |   `-DependentNameType 0xd18590 'typename remove_cv<type-parameter-0-0>::type' dependent
| |           |-TemplateArgument type 'unsigned char'
| |           | `-BuiltinType 0xbf62b0 'unsigned char'
| |           |-TemplateArgument type 'unsigned short'
| |           | `-BuiltinType 0xbf62d0 'unsigned short'
| |           |-TemplateArgument type 'unsigned int'
| |           | `-BuiltinType 0xbf62f0 'unsigned int'
| |           |-TemplateArgument type 'unsigned long'
| |           | `-BuiltinType 0xbf6310 'unsigned long'
| |           |-TemplateArgument type 'unsigned long long'
| |           | `-BuiltinType 0xbf6330 'unsigned long long'
| |           |-TemplateArgument type 'unsigned __int128'
| |           | `-BuiltinType 0xbf6730 'unsigned __int128'
| |           `-TemplateSpecializationType 0xd18c50 '__or_<is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>>' dependent __or_
| |             |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>'
| |             | `-TemplateSpecializationType 0xd18790 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>' dependent is_same
| |             |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |             |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |             |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |             |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |             |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |             |   `-TemplateArgument type 'unsigned char':'unsigned char'
| |             |     `-SubstTemplateTypeParmType 0xd166b0 'unsigned char' sugar
| |             |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |             |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |             |       `-BuiltinType 0xbf62b0 'unsigned char'
| |             |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>'
| |             | `-TemplateSpecializationType 0xd18830 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>' dependent is_same
| |             |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |             |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |             |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |             |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |             |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |             |   `-TemplateArgument type 'unsigned short':'unsigned short'
| |             |     `-SubstTemplateTypeParmType 0xd167e0 'unsigned short' sugar
| |             |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |             |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |             |       `-BuiltinType 0xbf62d0 'unsigned short'
| |             |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>'
| |             | `-TemplateSpecializationType 0xd188d0 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>' dependent is_same
| |             |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |             |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |             |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |             |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |             |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |             |   `-TemplateArgument type 'unsigned int':'unsigned int'
| |             |     `-SubstTemplateTypeParmType 0xd16b50 'unsigned int' sugar
| |             |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |             |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |             |       `-BuiltinType 0xbf62f0 'unsigned int'
| |             |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>'
| |             | `-TemplateSpecializationType 0xd18970 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>' dependent is_same
| |             |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |             |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |             |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |             |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |             |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |             |   `-TemplateArgument type 'unsigned long':'unsigned long'
| |             |     `-SubstTemplateTypeParmType 0xd16c80 'unsigned long' sugar
| |             |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |             |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |             |       `-BuiltinType 0xbf6310 'unsigned long'
| |             |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>'
| |             | `-TemplateSpecializationType 0xd18a10 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>' dependent is_same
| |             |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |             |   | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |             |   |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |             |   |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |             |   |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |             |   `-TemplateArgument type 'unsigned long long':'unsigned long long'
| |             |     `-SubstTemplateTypeParmType 0xd16db0 'unsigned long long' sugar
| |             |       |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |             |       | `-TemplateTypeParm 0xd146a8 '_Types'
| |             |       `-BuiltinType 0xbf6330 'unsigned long long'
| |             `-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>'
| |               `-TemplateSpecializationType 0xd18ab0 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>' dependent is_same
| |                 |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |                 | `-SubstTemplateTypeParmType 0xd14f20 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |                 |   |-TemplateTypeParmType 0xd14680 '_Tp' dependent depth 0 index 0
| |                 |   | `-TemplateTypeParm 0xd14628 '_Tp'
| |                 |   `-DependentNameType 0xcf3950 'typename remove_cv<type-parameter-0-0>::type' dependent
| |                 `-TemplateArgument type 'unsigned __int128':'unsigned __int128'
| |                   `-SubstTemplateTypeParmType 0xd16ee0 'unsigned __int128' sugar
| |                     |-TemplateTypeParmType 0xd14730 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |                     | `-TemplateTypeParm 0xd146a8 '_Types'
| |                     `-BuiltinType 0xbf6730 'unsigned __int128'
| |-TypeAliasTemplateDecl 0xd19360 <line:664:3, col:42> col:25 __void_t
| | |-TemplateTypeParmDecl 0xd19260 <col:12> col:23 typename depth 0 index 0 ...
| | `-TypeAliasDecl 0xd19300 <col:25, col:42> col:31 __void_t 'void'
| |   `-BuiltinType 0xbf61b0 'void'
| |-ClassTemplateDecl 0xd19578 <line:668:3, line:671:7> line:669:12 __is_referenceable
| | |-TemplateTypeParmDecl 0xd193b8 <line:668:12, col:21> col:21 typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd19448 <col:26, col:37> col:35 typename depth 0 index 1
| | | `-TemplateArgument type 'void'
| | |   `-BuiltinType 0xbf61b0 'void'
| | `-CXXRecordDecl 0xd194e8 <line:669:5, line:671:7> line:669:12 struct __is_referenceable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0xd19840 <col:5, col:12> col:12 implicit struct __is_referenceable
| |-ClassTemplatePartialSpecializationDecl 0xd19b78 <line:673:3, line:676:7> line:674:12 struct __is_referenceable definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0xbf61b0 'void'
| | |-TemplateTypeParmDecl 0xd198e8 <line:673:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd1b5c0 <line:674:5, col:12> col:12 implicit struct __is_referenceable
| |-ClassTemplateDecl 0xd1b790 prev 0xcef960 <line:682:3, line:684:27> line:683:12 is_const
| | |-TemplateTypeParmDecl 0xd1b668 <line:682:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0xd1b700 prev 0xcef8d0 <line:683:5, line:684:27> line:683:12 struct is_const definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | `-CXXRecordDecl 0xd1b890 <col:5, col:12> col:12 implicit struct is_const
| | |-ClassTemplateSpecialization 0xd364c8 'is_const'
| | |-ClassTemplateSpecialization 0xd9d7c8 'is_const'
| | |-ClassTemplateSpecialization 0xd9fad8 'is_const'
| | |-ClassTemplateSpecialization 0xdacc78 'is_const'
| | `-ClassTemplateSpecialization 0xdb2de8 'is_const'
| |-ClassTemplatePartialSpecializationDecl 0xd1ba50 <line:686:3, line:688:26> line:687:12 struct is_const definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'const type-parameter-0-0'
| | | `-QualType 0xcc9f21 'const type-parameter-0-0' const
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd1b938 <line:686:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd1bca8 <line:687:5, col:12> col:12 implicit struct is_const
| |-ClassTemplateDecl 0xd1be70 <line:691:3, line:693:27> line:692:12 is_volatile
| | |-TemplateTypeParmDecl 0xd1bd50 <line:691:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0xd1bde0 <line:692:5, line:693:27> line:692:12 struct is_volatile definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | `-CXXRecordDecl 0xd1c0f0 <col:5, col:12> col:12 implicit struct is_volatile
| | |-ClassTemplateSpecializationDecl 0xd36c20 <line:691:3, line:693:27> line:692:12 struct is_volatile definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0xbf6750 'wchar_t'
| | | `-CXXRecordDecl 0xd36e78 <col:5, col:12> col:12 implicit struct is_volatile
| | |-ClassTemplateSpecializationDecl 0xd9db78 <line:691:3, line:693:27> line:692:12 struct is_volatile definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0xbf6790 'char16_t'
| | | `-CXXRecordDecl 0xd9ddd8 <col:5, col:12> col:12 implicit struct is_volatile
| | |-ClassTemplateSpecializationDecl 0xd9fe88 <line:691:3, line:693:27> line:692:12 struct is_volatile definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'char32_t'
| | | | `-BuiltinType 0xbf67b0 'char32_t'
| | | `-CXXRecordDecl 0xda00e8 <col:5, col:12> col:12 implicit struct is_volatile
| | |-ClassTemplateSpecializationDecl 0xdad028 <line:691:3, line:693:27> line:692:12 struct is_volatile definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | `-CXXRecordDecl 0xdad288 <col:5, col:12> col:12 implicit struct is_volatile
| | `-ClassTemplateSpecializationDecl 0xdb3198 <line:691:3, line:693:27> line:692:12 struct is_volatile definition
| |   |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   |-TemplateArgument type 'unsigned short'
| |   | `-BuiltinType 0xbf62d0 'unsigned short'
| |   `-CXXRecordDecl 0xdb33f8 <col:5, col:12> col:12 implicit struct is_volatile
| |-ClassTemplatePartialSpecializationDecl 0xd1c2f0 <line:695:3, line:697:26> line:696:12 struct is_volatile definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'volatile type-parameter-0-0'
| | | `-QualType 0xcc9f24 'volatile type-parameter-0-0' volatile
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd1c198 <line:695:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd1cb70 <line:696:5, col:12> col:12 implicit struct is_volatile
| |-ClassTemplateDecl 0xd1cd40 <line:700:3, line:706:5> line:701:12 is_trivial
| | |-TemplateTypeParmDecl 0xd1cc18 <line:700:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd1ccb0 <line:701:5, line:706:5> line:701:12 struct is_trivial definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_trivial(_Tp)>'
| |   |-CXXRecordDecl 0xd1d0f0 <col:5, col:12> col:12 implicit struct is_trivial
| |   `-StaticAssertDecl 0xd1d3e0 <line:704:7, line:705:68> line:704:7
| |     |-CallExpr 0xd1d2e8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd1d1a0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd1d2c0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd1d280 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd1d388 <line:705:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd1d560 <line:709:3, line:715:5> line:710:12 is_trivially_copyable
| | |-TemplateTypeParmDecl 0xd1d438 <line:709:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd1d4d0 <line:710:5, line:715:5> line:710:12 struct is_trivially_copyable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_trivially_copyable(_Tp)>'
| |   |-CXXRecordDecl 0xd1d910 <col:5, col:12> col:12 implicit struct is_trivially_copyable
| |   `-StaticAssertDecl 0xd1e538 <line:713:7, line:714:68> line:713:7
| |     |-CallExpr 0xd1db08 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd1d9c0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd1dae0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd1daa0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd1e4e0 <line:714:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd1e6b0 <line:718:3, line:724:5> line:719:12 is_standard_layout
| | |-TemplateTypeParmDecl 0xd1e590 <line:718:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd1e620 <line:719:5, line:724:5> line:719:12 struct is_standard_layout definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_standard_layout(_Tp)>'
| |   |-CXXRecordDecl 0xd1ea60 <col:5, col:12> col:12 implicit struct is_standard_layout
| |   `-StaticAssertDecl 0xd1ecd8 <line:722:7, line:723:68> line:722:7
| |     |-CallExpr 0xd1ec58 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd1eb10 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd1ec30 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd1ebf0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd1ec80 <line:723:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd1ee50 <line:730:3, line:738:5> line:733:5 is_pod
| | |-TemplateTypeParmDecl 0xd1ed30 <line:730:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd1edc0 <line:731:5, line:738:5> line:733:5 struct is_pod definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_pod(_Tp)>'
| |   |-CXXRecordDecl 0xd1f200 <line:731:5, line:733:5> col:5 implicit struct is_pod
| |   `-StaticAssertDecl 0xd1f478 <line:736:7, line:737:68> line:736:7
| |     |-CallExpr 0xd1f3f8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd1f2b0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd1f3d0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd1f390 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd1f420 <line:737:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd1ff10 <line:743:3, line:751:5> line:746:5 is_literal_type
| | |-TemplateTypeParmDecl 0xd1fdf0 <line:743:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd1fe80 <line:744:5, line:751:5> line:746:5 struct is_literal_type definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_literal(_Tp)>'
| |   |-CXXRecordDecl 0xd202c0 <line:744:5, line:746:5> col:5 implicit struct is_literal_type
| |   `-StaticAssertDecl 0xd20538 <line:749:7, line:750:68> line:749:7
| |     |-CallExpr 0xd204b8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd20370 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd20490 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd20450 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd204e0 <line:750:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd206b0 <line:754:3, line:757:7> line:755:12 is_empty
| | |-TemplateTypeParmDecl 0xd20590 <line:754:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd20620 <line:755:5, line:757:7> line:755:12 struct is_empty definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_empty(_Tp)>'
| |   `-CXXRecordDecl 0xd20a60 <col:5, col:12> col:12 implicit struct is_empty
| |-ClassTemplateDecl 0xd20c30 <line:760:3, line:763:7> line:761:12 is_polymorphic
| | |-TemplateTypeParmDecl 0xd20b08 <line:760:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd20ba0 <line:761:5, line:763:7> line:761:12 struct is_polymorphic definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_polymorphic(_Tp)>'
| |   `-CXXRecordDecl 0xd21d20 <col:5, col:12> col:12 implicit struct is_polymorphic
| |-ClassTemplateDecl 0xd21ef0 <line:769:3, line:772:7> line:770:12 is_final
| | |-TemplateTypeParmDecl 0xd21dc8 <line:769:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd21e60 <line:770:5, line:772:7> line:770:12 struct is_final definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_final(_Tp)>'
| |   `-CXXRecordDecl 0xd222a0 <col:5, col:12> col:12 implicit struct is_final
| |-ClassTemplateDecl 0xd22470 <line:776:3, line:779:7> line:777:12 is_abstract
| | |-TemplateTypeParmDecl 0xd22348 <line:776:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd223e0 <line:777:5, line:779:7> line:777:12 struct is_abstract definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_abstract(_Tp)>'
| |   `-CXXRecordDecl 0xd22820 <col:5, col:12> col:12 implicit struct is_abstract
| |-ClassTemplateDecl 0xd24e40 <line:782:3, line:785:27> line:784:12 __is_signed_helper
| | |-TemplateTypeParmDecl 0xd228c8 <line:782:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd22a48 <line:783:5, col:32> col:10 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd22aa8 <col:12, col:32> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd22a00 <col:12, col:32> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd24db0 <line:784:5, line:785:27> line:784:12 struct __is_signed_helper definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0xd25120 <col:5, col:12> col:12 implicit struct __is_signed_helper
| |-ClassTemplatePartialSpecializationDecl 0xd253a8 <line:787:3, line:790:7> line:788:12 struct __is_signed_helper definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'integral_constant<bool, _Tp(-1) < _Tp(0)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd251c8 <line:787:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd25870 <line:788:5, col:12> col:12 implicit struct __is_signed_helper
| |-ClassTemplateDecl 0xd25a40 <line:794:3, line:797:7> line:795:12 is_signed
| | |-TemplateTypeParmDecl 0xd25918 <line:794:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd259b0 <line:795:5, line:797:7> line:795:12 struct is_signed definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_signed_helper<_Tp>::type'
| |   `-CXXRecordDecl 0xd27970 <col:5, col:12> col:12 implicit struct is_signed
| |-ClassTemplateDecl 0xd27b40 <line:800:3, line:803:7> line:801:12 is_unsigned
| | |-TemplateTypeParmDecl 0xd27a18 <line:800:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd27ab0 <line:801:5, line:803:7> line:801:12 struct is_unsigned definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>'
| |   `-CXXRecordDecl 0xd280b0 <col:5, col:12> col:12 implicit struct is_unsigned
| |-FunctionTemplateDecl 0xd28468 <line:806:3, line:808:18> col:5 __declval
| | |-TemplateTypeParmDecl 0xd28158 <line:806:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd28218 <col:26, col:44> col:35 referenced typename depth 0 index 1 _Up
| | | `-TemplateArgument type '_Tp &&'
| | |   `-RValueReferenceType 0xd281e0 '_Tp &&' dependent
| | |     `-TemplateTypeParmType 0xd281b0 '_Tp' dependent depth 0 index 0
| | |       `-TemplateTypeParm 0xd28158 '_Tp'
| | `-FunctionDecl 0xd283c8 <line:807:5, line:808:18> col:5 __declval '_Up (int)'
| |   `-ParmVarDecl 0xd282d0 <col:15> col:18 'int'
| |-FunctionTemplateDecl 0xd28e80 <line:810:3, line:812:19> col:5 __declval
| | |-TemplateTypeParmDecl 0xd28540 <line:810:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xd286d8 <line:811:5, line:812:19> col:5 __declval '_Tp (long)'
| |   `-ParmVarDecl 0xd285e8 <col:15> col:19 'long'
| |-FunctionTemplateDecl 0xd292c0 <line:815:3, line:816:10> col:10 declval
| | |-TemplateTypeParmDecl 0xd28f68 <line:815:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xd29220 <line:816:5, col:10> col:10 declval 'auto () noexcept -> decltype(__declval<_Tp>(0))'
| |-ClassTemplateDecl 0xd29588 <line:818:3, line:819:12> col:12 extent
| | |-TemplateTypeParmDecl 0xd29390 <line:818:12> col:20 typename depth 0 index 0
| | |-NonTypeTemplateParmDecl 0xd29440 <col:22, col:33> col:31 'unsigned int' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ConstantExpr 0xd294b8 <col:33> 'unsigned int'
| | |     |-value: Int 0
| | |     `-ImplicitCastExpr 0xd294a0 <col:33> 'unsigned int' <IntegralCast>
| | |       `-IntegerLiteral 0xd29408 <col:33> 'int' 0
| | `-CXXRecordDecl 0xd294f8 <line:819:5, col:12> col:12 struct extent
| |-ClassTemplateDecl 0xd298f0 <line:821:3, line:822:12> col:12 remove_all_extents
| | |-TemplateTypeParmDecl 0xd297c8 <line:821:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xd29860 <line:822:5, col:12> col:12 struct remove_all_extents
| |-ClassTemplateDecl 0xd29bf0 <line:825:3, line:828:7> line:826:12 __is_array_known_bounds
| | |-TemplateTypeParmDecl 0xd29ac8 <line:825:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd29b60 <line:826:5, line:828:7> line:826:12 struct __is_array_known_bounds definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, (extent<_Tp>::value > 0)>'
| |   `-CXXRecordDecl 0xd2b240 <col:5, col:12> col:12 implicit struct __is_array_known_bounds
| |-ClassTemplateDecl 0xd2b410 prev 0xcefc60 <line:830:3, line:833:7> line:831:12 __is_array_unknown_bounds
| | |-TemplateTypeParmDecl 0xd2b2e8 <line:830:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd2b380 prev 0xcefbd0 <line:831:5, line:833:7> line:831:12 struct __is_array_unknown_bounds definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__and_<is_array<_Tp>, __not_<extent<_Tp>>>'
| |   `-CXXRecordDecl 0xd2b840 <col:5, col:12> col:12 implicit struct __is_array_unknown_bounds
| |-CXXRecordDecl 0xd2b8e8 <line:842:3, line:849:3> line:842:10 referenced struct __do_is_destructible_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xd2ba08 <col:3, col:10> col:10 implicit struct __do_is_destructible_impl
| | |-FunctionTemplateDecl 0xd2c0e0 <line:844:5, line:845:34> col:24 __test
| | | |-TemplateTypeParmDecl 0xd2ba98 <line:844:14, col:23> col:23 referenced typename depth 0 index 0 _Tp
| | | |-TemplateTypeParmDecl 0xd2bce8 <col:28, col:70> col:37 typename depth 0 index 1
| | | | `-TemplateArgument type 'decltype(declval<_Tp &>().~_Tp())'
| | | |   `-DecltypeType 0xd2bcb0 'decltype(declval<_Tp &>().~_Tp())' dependent
| | | |     `-CallExpr 0xd2bc50 <col:48, col:69> 'void'
| | | |       `-CXXPseudoDestructorExpr 0xd2bc00 <col:48, col:65> '<bound member function type>'
| | | |         `-CallExpr 0xd2bbd0 <col:48, col:62> '<dependent type>'
| | | |           `-UnresolvedLookupExpr 0xd2bb58 <col:48, col:60> '<dependent type>' lvalue (ADL) = 'declval' 0xd292c0
| | | `-CXXMethodDecl 0xd2c040 <line:845:7, col:34> col:24 __test 'std::true_type (int)' static
| | |   `-ParmVarDecl 0xd2bda0 <col:31> col:34 'int'
| | `-FunctionTemplateDecl 0xd2c2f0 <line:847:5, line:848:35> col:25 __test
| |   |-TemplateTypeParmDecl 0xd2c140 <line:847:14> col:22 typename depth 0 index 0
| |   `-CXXMethodDecl 0xd2c250 <line:848:7, col:35> col:25 __test 'std::false_type (...)' static
| |-ClassTemplateDecl 0xd2c490 <line:851:3, line:856:5> line:852:12 __is_destructible_impl
| | |-TemplateTypeParmDecl 0xd2c370 <line:851:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd2c400 <line:852:5, line:856:5> line:852:12 struct __is_destructible_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::__do_is_destructible_impl'
| |   |-CXXRecordDecl 0xd2c710 <col:5, col:12> col:12 implicit struct __is_destructible_impl
| |   `-TypedefDecl 0xd2c908 <line:855:7, col:40> col:40 type 'decltype(__test<_Tp>(0))'
| |     `-DecltypeType 0xd2c8d0 'decltype(__test<_Tp>(0))' dependent
| |       `-CallExpr 0xd2c868 <col:24, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xd2c7c8 <col:24, col:34> '<dependent type>' lvalue (no ADL) = '__test' 0xd2c0e0 0xd2c2f0
| |         `-IntegerLiteral 0xd2c848 <col:36> 'int' 0
| |-ClassTemplateDecl 0xd2d6b0 <line:858:3, line:863:12> col:12 __is_destructible_safe
| | |-TemplateTypeParmDecl 0xd2c978 <line:858:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd2cda8 <line:859:12, line:861:44> line:859:17 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd2ce08 <col:19, line:861:44> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd2cd60 <line:859:19, line:861:44> '<dependent type>' lvalue
| | |-NonTypeTemplateParmDecl 0xd2d580 <line:862:12, col:61> col:17 'bool' depth 0 index 2
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd2d5e0 <col:19, col:61> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd2d538 <col:19, col:61> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd2d620 <line:863:5, col:12> col:12 struct __is_destructible_safe
| |-ClassTemplatePartialSpecializationDecl 0xd2db80 <line:865:3, line:869:7> line:866:12 struct __is_destructible_safe definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_destructible_impl<typename remove_all_extents<_Tp>::type>::type'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd2d928 <line:865:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd2e170 <line:866:5, col:12> col:12 implicit struct __is_destructible_safe
| |-ClassTemplatePartialSpecializationDecl 0xd2f1e0 <line:871:3, line:873:27> line:872:12 struct __is_destructible_safe definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd2e218 <line:871:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd2f508 <line:872:5, col:12> col:12 implicit struct __is_destructible_safe
| |-ClassTemplatePartialSpecializationDecl 0xd2f800 <line:875:3, line:877:26> line:876:12 struct __is_destructible_safe definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd2f5b0 <line:875:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd2fb28 <line:876:5, col:12> col:12 implicit struct __is_destructible_safe
| |-ClassTemplateDecl 0xd2fcf0 <line:881:3, line:887:5> line:882:12 is_destructible
| | |-TemplateTypeParmDecl 0xd2fbd0 <line:881:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd2fc60 <line:882:5, line:887:5> line:882:12 struct is_destructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_destructible_safe<_Tp>::type'
| |   |-CXXRecordDecl 0xd30bd0 <col:5, col:12> col:12 implicit struct is_destructible
| |   `-StaticAssertDecl 0xd30e48 <line:885:7, line:886:68> line:885:7
| |     |-CallExpr 0xd30dc8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd30c80 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd30da0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd30d60 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd30df0 <line:886:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-CXXRecordDecl 0xd30ea0 <line:895:3, line:903:3> line:895:10 referenced struct __do_is_nt_destructible_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xd30fb8 <col:3, col:10> col:10 implicit struct __do_is_nt_destructible_impl
| | |-FunctionTemplateDecl 0xd31608 <line:897:5, line:899:17> col:7 __test
| | | |-TemplateTypeParmDecl 0xd31048 <line:897:14, col:23> col:23 referenced typename depth 0 index 0 _Tp
| | | `-CXXMethodDecl 0xd31568 <line:898:7, line:899:17> col:7 __test '__bool_constant<noexcept(declval<_Tp &>().~_Tp())> (int)' static
| | |   `-ParmVarDecl 0xd31430 <col:14> col:17 'int'
| | `-FunctionTemplateDecl 0xd318a0 <line:901:5, line:902:35> col:25 __test
| |   |-TemplateTypeParmDecl 0xd31668 <line:901:14> col:22 typename depth 0 index 0
| |   `-CXXMethodDecl 0xd31800 <line:902:7, col:35> col:25 __test 'std::false_type (...)' static
| |-ClassTemplateDecl 0xd31a40 <line:905:3, line:910:5> line:906:12 __is_nt_destructible_impl
| | |-TemplateTypeParmDecl 0xd31920 <line:905:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd319b0 <line:906:5, line:910:5> line:906:12 struct __is_nt_destructible_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::__do_is_nt_destructible_impl'
| |   |-CXXRecordDecl 0xd31cc0 <col:5, col:12> col:12 implicit struct __is_nt_destructible_impl
| |   `-TypedefDecl 0xd31e78 <line:909:7, col:40> col:40 type 'decltype(__test<_Tp>(0))'
| |     `-DecltypeType 0xd31e40 'decltype(__test<_Tp>(0))' dependent
| |       `-CallExpr 0xd31e18 <col:24, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xd31d78 <col:24, col:34> '<dependent type>' lvalue (no ADL) = '__test' 0xd31608 0xd318a0
| |         `-IntegerLiteral 0xd31df8 <col:36> 'int' 0
| |-ClassTemplateDecl 0xd32708 <line:912:3, line:917:12> col:12 __is_nt_destructible_safe
| | |-TemplateTypeParmDecl 0xd31ee8 <line:912:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd322d8 <line:913:12, line:915:44> line:913:17 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd32338 <col:19, line:915:44> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd32290 <line:913:19, line:915:44> '<dependent type>' lvalue
| | |-NonTypeTemplateParmDecl 0xd325d8 <line:916:12, col:61> col:17 'bool' depth 0 index 2
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd32638 <col:19, col:61> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd32590 <col:19, col:61> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd32678 <line:917:5, col:12> col:12 struct __is_nt_destructible_safe
| |-ClassTemplatePartialSpecializationDecl 0xd330b0 <line:919:3, line:923:7> line:920:12 struct __is_nt_destructible_safe definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_nt_destructible_impl<typename remove_all_extents<_Tp>::type>::type'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd32e58 <line:919:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd33650 <line:920:5, col:12> col:12 implicit struct __is_nt_destructible_safe
| |-ClassTemplatePartialSpecializationDecl 0xd33950 <line:925:3, line:927:27> line:926:12 struct __is_nt_destructible_safe definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd336f8 <line:925:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd34168 <line:926:5, col:12> col:12 implicit struct __is_nt_destructible_safe
| |-ClassTemplatePartialSpecializationDecl 0xd34460 <line:929:3, line:931:26> line:930:12 struct __is_nt_destructible_safe definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd34210 <line:929:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd34788 <line:930:5, col:12> col:12 implicit struct __is_nt_destructible_safe
| |-ClassTemplateDecl 0xd34950 <line:935:3, line:941:5> line:936:12 is_nothrow_destructible
| | |-TemplateTypeParmDecl 0xd34830 <line:935:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd348c0 <line:936:5, line:941:5> line:936:12 struct is_nothrow_destructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nt_destructible_safe<_Tp>::type'
| |   |-CXXRecordDecl 0xd086b0 <col:5, col:12> col:12 implicit struct is_nothrow_destructible
| |   `-StaticAssertDecl 0xd08928 <line:939:7, line:940:68> line:939:7
| |     |-CallExpr 0xd088a8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd08760 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd08880 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd08840 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd088d0 <line:940:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd08b28 <line:944:3, line:947:7> line:945:12 __is_constructible_impl
| | |-TemplateTypeParmDecl 0xd08980 <line:944:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd089f8 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-CXXRecordDecl 0xd08a98 <line:945:5, line:947:7> line:945:12 struct __is_constructible_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<__is_constructible(_Tp, _Args...)>':'integral_constant<bool, __is_constructible(_Tp, _Args...)>'
| |   `-CXXRecordDecl 0xd09088 <col:5, col:12> col:12 implicit struct __is_constructible_impl
| |-ClassTemplateDecl 0xd092d8 <line:951:3, line:957:5> line:952:12 is_constructible
| | |-TemplateTypeParmDecl 0xd09130 <line:951:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd091a8 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-CXXRecordDecl 0xd09248 <line:952:5, line:957:5> line:952:12 struct is_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_constructible_impl<_Tp, _Args...>'
| |   |-CXXRecordDecl 0xd39810 <col:5, col:12> col:12 implicit struct is_constructible
| |   `-StaticAssertDecl 0xd39a88 <line:955:7, line:956:68> line:955:7
| |     |-CallExpr 0xd39a08 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd398c0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd399e0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd399a0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd39a30 <line:956:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd39c00 <line:960:3, line:966:5> line:961:12 is_default_constructible
| | |-TemplateTypeParmDecl 0xd39ae0 <line:960:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd39b70 <line:961:5, line:966:5> line:961:12 struct is_default_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_constructible_impl<_Tp>::type'
| |   |-CXXRecordDecl 0xd3a020 <col:5, col:12> col:12 implicit struct is_default_constructible
| |   `-StaticAssertDecl 0xd3a298 <line:964:7, line:965:68> line:964:7
| |     |-CallExpr 0xd3a218 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd3a0d0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd3a1f0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd3a1b0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd3a240 <line:965:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd3a5c0 <line:969:3, line:970:12> col:12 __is_copy_constructible_impl
| | |-TemplateTypeParmDecl 0xd3a2f0 <line:969:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd3a468 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd3a4c8 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd3a420 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd3a500 <line:970:5, col:12> col:12 struct __is_copy_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0xd3a9d8 <line:972:3, line:974:27> line:973:12 struct __is_copy_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd3a7f8 <line:972:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd3ac98 <line:973:5, col:12> col:12 implicit struct __is_copy_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0xd3af18 <line:976:3, line:979:7> line:977:12 struct __is_copy_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_constructible_impl<_Tp, const _Tp &>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd3ad40 <line:976:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd3b360 <line:977:5, col:12> col:12 implicit struct __is_copy_constructible_impl
| |-ClassTemplateDecl 0xd3b530 <line:983:3, line:989:5> line:984:12 is_copy_constructible
| | |-TemplateTypeParmDecl 0xd3b408 <line:983:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd3b4a0 <line:984:5, line:989:5> line:984:12 struct is_copy_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_copy_constructible_impl<_Tp>'
| |   |-CXXRecordDecl 0xd3bcc0 <col:5, col:12> col:12 implicit struct is_copy_constructible
| |   `-StaticAssertDecl 0xd3bf38 <line:987:7, line:988:68> line:987:7
| |     |-CallExpr 0xd3beb8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd3bd70 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd3be90 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd3be50 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd3bee0 <line:988:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd3c230 <line:992:3, line:993:12> col:12 __is_move_constructible_impl
| | |-TemplateTypeParmDecl 0xd3bf90 <line:992:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd3c108 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd3c168 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd3c0c0 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd3c1a0 <line:993:5, col:12> col:12 struct __is_move_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0xd3c648 <line:995:3, line:997:27> line:996:12 struct __is_move_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd3c468 <line:995:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd3e208 <line:996:5, col:12> col:12 implicit struct __is_move_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0xd3e488 <line:999:3, line:1002:7> line:1000:12 struct __is_move_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_constructible_impl<_Tp, _Tp &&>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd3e2b0 <line:999:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd3e8a0 <line:1000:5, col:12> col:12 implicit struct __is_move_constructible_impl
| |-ClassTemplateDecl 0xd3ea70 <line:1006:3, line:1012:5> line:1007:12 is_move_constructible
| | |-TemplateTypeParmDecl 0xd3e948 <line:1006:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd3e9e0 <line:1007:5, line:1012:5> line:1007:12 struct is_move_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_move_constructible_impl<_Tp>'
| |   |-CXXRecordDecl 0xd3eed0 <col:5, col:12> col:12 implicit struct is_move_constructible
| |   `-StaticAssertDecl 0xd3f6b0 <line:1010:7, line:1011:68> line:1010:7
| |     |-CallExpr 0xd3f0c8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd3ef80 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd3f0a0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd3f060 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd3f0f0 <line:1011:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-TypeAliasTemplateDecl 0xd3faf8 <line:1015:3, line:1017:66> line:1016:5 __is_nothrow_constructible_impl
| | |-TemplateTypeParmDecl 0xd3f708 <line:1015:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd3f788 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-TypeAliasDecl 0xd3fa98 <line:1016:5, line:1017:66> line:1016:11 __is_nothrow_constructible_impl '__bool_constant<__is_nothrow_constructible(_Tp, _Args...)>':'integral_constant<bool, __is_nothrow_constructible(_Tp, _Args...)>'
| |   `-TemplateSpecializationType 0xd3fa10 '__bool_constant<__is_nothrow_constructible(_Tp, _Args...)>' sugar dependent alias __bool_constant
| |     |-TemplateArgument expr
| |     | `-TypeTraitExpr 0xd3f888 <line:1017:25, col:65> 'bool' __is_nothrow_constructible
| |     `-TemplateSpecializationType 0xd3f990 'integral_constant<bool, __is_nothrow_constructible(_Tp, _Args...)>' dependent integral_constant
| |       |-TemplateArgument type 'bool'
| |       | `-BuiltinType 0xbf61d0 'bool'
| |       `-TemplateArgument expr
| |         `-SubstNonTypeTemplateParmExpr 0xd3f8e8 <line:91:53> 'bool'
| |           |-NonTypeTemplateParmDecl 0xce4998 <line:90:12, col:17> col:17 referenced 'bool' depth 0 index 0 __v
| |           `-TypeTraitExpr 0xd3f888 <line:1017:25, col:65> 'bool' __is_nothrow_constructible
| |-ClassTemplateDecl 0xd3fcf8 <line:1021:3, line:1027:5> line:1022:12 is_nothrow_constructible
| | |-TemplateTypeParmDecl 0xd3fb50 <line:1021:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd3fbc8 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-CXXRecordDecl 0xd3fc68 <line:1022:5, line:1027:5> line:1022:12 struct is_nothrow_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_constructible_impl<_Tp, _Args...>::type'
| |   |-CXXRecordDecl 0xd404b0 <col:5, col:12> col:12 implicit struct is_nothrow_constructible
| |   `-StaticAssertDecl 0xd41b70 <line:1025:7, line:1026:68> line:1025:7
| |     |-CallExpr 0xd41af0 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd40560 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd40680 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd40640 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd41b18 <line:1026:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd41cf0 <line:1030:3, line:1036:5> line:1031:12 is_nothrow_default_constructible
| | |-TemplateTypeParmDecl 0xd41bc8 <line:1030:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd41c60 <line:1031:5, line:1036:5> line:1031:12 struct is_nothrow_default_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<__is_nothrow_constructible(_Tp)>':'integral_constant<bool, __is_nothrow_constructible(_Tp)>'
| |   |-CXXRecordDecl 0xd42158 <col:5, col:12> col:12 implicit struct is_nothrow_default_constructible
| |   `-StaticAssertDecl 0xd423d8 <line:1034:7, line:1035:68> line:1034:7
| |     |-CallExpr 0xd42358 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd42208 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd42330 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd422f0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd42380 <line:1035:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd426d0 <line:1039:3, line:1040:12> col:12 __is_nothrow_copy_constructible_impl
| | |-TemplateTypeParmDecl 0xd42430 <line:1039:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd425a8 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd42608 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd42560 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd42640 <line:1040:5, col:12> col:12 struct __is_nothrow_copy_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0xd42d10 <line:1042:3, line:1044:27> line:1043:12 struct __is_nothrow_copy_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd42908 <line:1042:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd42fc8 <line:1043:5, col:12> col:12 implicit struct __is_nothrow_copy_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0xd43248 <line:1046:3, line:1049:7> line:1047:12 struct __is_nothrow_copy_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_nothrow_constructible_impl<_Tp, const _Tp &>':'integral_constant<bool, __is_nothrow_constructible(type-parameter-0-0, const type-parameter-0-0 &)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd43070 <line:1046:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd43848 <line:1047:5, col:12> col:12 implicit struct __is_nothrow_copy_constructible_impl
| |-ClassTemplateDecl 0xd43a10 <line:1053:3, line:1059:5> line:1054:12 is_nothrow_copy_constructible
| | |-TemplateTypeParmDecl 0xd438f0 <line:1053:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd43980 <line:1054:5, line:1059:5> line:1054:12 struct is_nothrow_copy_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_copy_constructible_impl<_Tp>::type'
| |   |-CXXRecordDecl 0xd44390 <col:5, col:12> col:12 implicit struct is_nothrow_copy_constructible
| |   `-StaticAssertDecl 0xd44608 <line:1057:7, line:1058:68> line:1057:7
| |     |-CallExpr 0xd44588 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd44440 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd44560 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd44520 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd445b0 <line:1058:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd44900 <line:1062:3, line:1063:12> col:12 __is_nothrow_move_constructible_impl
| | |-TemplateTypeParmDecl 0xd44660 <line:1062:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd447d8 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd44838 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd44790 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd44870 <line:1063:5, col:12> col:12 struct __is_nothrow_move_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0xd44d18 <line:1065:3, line:1067:27> line:1066:12 struct __is_nothrow_move_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd44b38 <line:1065:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd44fd8 <line:1066:5, col:12> col:12 implicit struct __is_nothrow_move_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0xd45f08 <line:1069:3, line:1072:7> line:1070:12 struct __is_nothrow_move_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_nothrow_constructible_impl<_Tp, _Tp &&>':'integral_constant<bool, __is_nothrow_constructible(type-parameter-0-0, type-parameter-0-0 &&)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd45080 <line:1069:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd46508 <line:1070:5, col:12> col:12 implicit struct __is_nothrow_move_constructible_impl
| |-ClassTemplateDecl 0xd466d0 <line:1076:3, line:1082:5> line:1077:12 is_nothrow_move_constructible
| | |-TemplateTypeParmDecl 0xd465b0 <line:1076:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd46640 <line:1077:5, line:1082:5> line:1077:12 struct is_nothrow_move_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_move_constructible_impl<_Tp>::type'
| |   |-CXXRecordDecl 0xd46c10 <col:5, col:12> col:12 implicit struct is_nothrow_move_constructible
| |   `-StaticAssertDecl 0xd47378 <line:1080:7, line:1081:68> line:1080:7
| |     |-CallExpr 0xd472f8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd46cc0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd472d0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd46da0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd47320 <line:1081:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd47578 <line:1085:3, line:1091:5> line:1086:12 is_assignable
| | |-TemplateTypeParmDecl 0xd473d0 <line:1085:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd47448 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0xd474e8 <line:1086:5, line:1091:5> line:1086:12 struct is_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<__is_assignable(_Tp, _Up)>':'integral_constant<bool, __is_assignable(_Tp, _Up)>'
| |   |-CXXRecordDecl 0xd47a38 <col:5, col:12> col:12 implicit struct is_assignable
| |   `-StaticAssertDecl 0xd47cb8 <line:1089:7, line:1090:68> line:1089:7
| |     |-CallExpr 0xd47c38 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd47ae8 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd47c10 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd47bd0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd47c60 <line:1090:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd47fb0 <line:1093:3, line:1094:12> col:12 __is_copy_assignable_impl
| | |-TemplateTypeParmDecl 0xd47d10 <line:1093:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd47e88 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd47ee8 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd47e40 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd47f20 <line:1094:5, col:12> col:12 struct __is_copy_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0xd49098 <line:1096:3, line:1098:27> line:1097:12 struct __is_copy_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd481e8 <line:1096:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd49358 <line:1097:5, col:12> col:12 implicit struct __is_copy_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0xd495d8 <line:1100:3, line:1103:7> line:1101:12 struct __is_copy_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__bool_constant<__is_assignable(_Tp &, const _Tp &)>':'integral_constant<bool, __is_assignable(_Tp &, const _Tp &)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd49400 <line:1100:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd49af8 <line:1101:5, col:12> col:12 implicit struct __is_copy_assignable_impl
| |-ClassTemplateDecl 0xd49cc0 <line:1106:3, line:1112:5> line:1107:12 is_copy_assignable
| | |-TemplateTypeParmDecl 0xd49ba0 <line:1106:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd49c30 <line:1107:5, line:1112:5> line:1107:12 struct is_copy_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_copy_assignable_impl<_Tp>::type'
| |   |-CXXRecordDecl 0xd4a6f0 <col:5, col:12> col:12 implicit struct is_copy_assignable
| |   `-StaticAssertDecl 0xd4a968 <line:1110:7, line:1111:68> line:1110:7
| |     |-CallExpr 0xd4a8e8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd4a7a0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd4a8c0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd4a880 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd4a910 <line:1111:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd4ac60 <line:1114:3, line:1115:12> col:12 __is_move_assignable_impl
| | |-TemplateTypeParmDecl 0xd4a9c0 <line:1114:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd4ab38 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd4ab98 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd4aaf0 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd4abd0 <line:1115:5, col:12> col:12 struct __is_move_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0xd4b078 <line:1117:3, line:1119:27> line:1118:12 struct __is_move_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd4ae98 <line:1117:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd4b338 <line:1118:5, col:12> col:12 implicit struct __is_move_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0xd4baa8 <line:1121:3, line:1124:7> line:1122:12 struct __is_move_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__bool_constant<__is_assignable(_Tp &, _Tp &&)>':'integral_constant<bool, __is_assignable(_Tp &, _Tp &&)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd4b3e0 <line:1121:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd4bfc8 <line:1122:5, col:12> col:12 implicit struct __is_move_assignable_impl
| |-ClassTemplateDecl 0xd4c190 <line:1127:3, line:1133:5> line:1128:12 is_move_assignable
| | |-TemplateTypeParmDecl 0xd4c070 <line:1127:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd4c100 <line:1128:5, line:1133:5> line:1128:12 struct is_move_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_move_assignable_impl<_Tp>::type'
| |   |-CXXRecordDecl 0xd4c6d0 <col:5, col:12> col:12 implicit struct is_move_assignable
| |   `-StaticAssertDecl 0xd4ce60 <line:1131:7, line:1132:68> line:1131:7
| |     |-CallExpr 0xd4c8c8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd4c780 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd4c8a0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd4c860 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd4c8f0 <line:1132:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-TypeAliasTemplateDecl 0xd4d268 <line:1135:3, line:1137:58> line:1136:5 __is_nothrow_assignable_impl
| | |-TemplateTypeParmDecl 0xd4ceb8 <line:1135:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd4cf38 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-TypeAliasDecl 0xd4d208 <line:1136:5, line:1137:58> line:1136:11 __is_nothrow_assignable_impl '__bool_constant<__is_nothrow_assignable(_Tp, _Up)>':'integral_constant<bool, __is_nothrow_assignable(_Tp, _Up)>'
| |   `-TemplateSpecializationType 0xd4d180 '__bool_constant<__is_nothrow_assignable(_Tp, _Up)>' sugar dependent alias __bool_constant
| |     |-TemplateArgument expr
| |     | `-TypeTraitExpr 0xd4cff8 <line:1137:25, col:57> 'bool' __is_nothrow_assignable
| |     `-TemplateSpecializationType 0xd4d100 'integral_constant<bool, __is_nothrow_assignable(_Tp, _Up)>' dependent integral_constant
| |       |-TemplateArgument type 'bool'
| |       | `-BuiltinType 0xbf61d0 'bool'
| |       `-TemplateArgument expr
| |         `-SubstNonTypeTemplateParmExpr 0xd4d058 <line:91:53> 'bool'
| |           |-NonTypeTemplateParmDecl 0xce4998 <line:90:12, col:17> col:17 referenced 'bool' depth 0 index 0 __v
| |           `-TypeTraitExpr 0xd4cff8 <line:1137:25, col:57> 'bool' __is_nothrow_assignable
| |-ClassTemplateDecl 0xd4d468 <line:1140:3, line:1146:5> line:1141:12 is_nothrow_assignable
| | |-TemplateTypeParmDecl 0xd4d2c0 <line:1140:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd4d338 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0xd4d3d8 <line:1141:5, line:1146:5> line:1141:12 struct is_nothrow_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_assignable_impl<_Tp, _Up>':'integral_constant<bool, __is_nothrow_assignable(type-parameter-0-0, type-parameter-0-1)>'
| |   |-CXXRecordDecl 0xd4d9f8 <col:5, col:12> col:12 implicit struct is_nothrow_assignable
| |   `-StaticAssertDecl 0xd4dc78 <line:1144:7, line:1145:68> line:1144:7
| |     |-CallExpr 0xd4dbf8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd4daa8 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd4dbd0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd4db90 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd4dc20 <line:1145:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd4e418 <line:1148:3, line:1149:12> col:12 __is_nt_copy_assignable_impl
| | |-TemplateTypeParmDecl 0xd4dcd0 <line:1148:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd4e2f0 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd4e350 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd4de00 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd4e388 <line:1149:5, col:12> col:12 struct __is_nt_copy_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0xd4e838 <line:1151:3, line:1153:27> line:1152:12 struct __is_nt_copy_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd4e658 <line:1151:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd4eaf8 <line:1152:5, col:12> col:12 implicit struct __is_nt_copy_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0xd4ed78 <line:1155:3, line:1158:7> line:1156:12 struct __is_nt_copy_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_nothrow_assignable_impl<_Tp &, const _Tp &>':'integral_constant<bool, __is_nothrow_assignable(type-parameter-0-0 &, const type-parameter-0-0 &)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd4eba0 <line:1155:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd4f858 <line:1156:5, col:12> col:12 implicit struct __is_nt_copy_assignable_impl
| |-ClassTemplateDecl 0xd4fa20 <line:1161:3, line:1167:5> line:1162:12 is_nothrow_copy_assignable
| | |-TemplateTypeParmDecl 0xd4f900 <line:1161:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd4f990 <line:1162:5, line:1167:5> line:1162:12 struct is_nothrow_copy_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nt_copy_assignable_impl<_Tp>'
| |   |-CXXRecordDecl 0xd4fe80 <col:5, col:12> col:12 implicit struct is_nothrow_copy_assignable
| |   `-StaticAssertDecl 0xd500f8 <line:1165:7, line:1166:68> line:1165:7
| |     |-CallExpr 0xd50078 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd4ff30 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd50050 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd50010 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd500a0 <line:1166:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd503f0 <line:1169:3, line:1170:12> col:12 __is_nt_move_assignable_impl
| | |-TemplateTypeParmDecl 0xd50150 <line:1169:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd502c8 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd50328 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd50280 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd50360 <line:1170:5, col:12> col:12 struct __is_nt_move_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0xd51548 <line:1172:3, line:1174:27> line:1173:12 struct __is_nt_move_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd50628 <line:1172:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd51808 <line:1173:5, col:12> col:12 implicit struct __is_nt_move_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0xd51a88 <line:1176:3, line:1179:7> line:1177:12 struct __is_nt_move_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_nothrow_assignable_impl<_Tp &, _Tp &&>':'integral_constant<bool, __is_nothrow_assignable(type-parameter-0-0 &, type-parameter-0-0 &&)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd518b0 <line:1176:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd520a8 <line:1177:5, col:12> col:12 implicit struct __is_nt_move_assignable_impl
| |-ClassTemplateDecl 0xd52270 <line:1182:3, line:1188:5> line:1183:12 is_nothrow_move_assignable
| | |-TemplateTypeParmDecl 0xd52150 <line:1182:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd521e0 <line:1183:5, line:1188:5> line:1183:12 struct is_nothrow_move_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nt_move_assignable_impl<_Tp>'
| |   |-CXXRecordDecl 0xd52c20 <col:5, col:12> col:12 implicit struct is_nothrow_move_assignable
| |   `-StaticAssertDecl 0xd52e98 <line:1186:7, line:1187:68> line:1186:7
| |     |-CallExpr 0xd52e18 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd52cd0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd52df0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd52db0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd52e40 <line:1187:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd53098 <line:1191:3, line:1197:5> line:1192:12 is_trivially_constructible
| | |-TemplateTypeParmDecl 0xd52ef0 <line:1191:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd52f68 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-CXXRecordDecl 0xd53008 <line:1192:5, line:1197:5> line:1192:12 struct is_trivially_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<__is_trivially_constructible(_Tp, _Args...)>':'integral_constant<bool, __is_trivially_constructible(_Tp, _Args...)>'
| |   |-CXXRecordDecl 0xd535c8 <col:5, col:12> col:12 implicit struct is_trivially_constructible
| |   `-StaticAssertDecl 0xd53848 <line:1195:7, line:1196:68> line:1195:7
| |     |-CallExpr 0xd537c8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd53678 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd537a0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd53760 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd537f0 <line:1196:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd54f20 <line:1200:3, line:1206:5> line:1201:12 is_trivially_default_constructible
| | |-TemplateTypeParmDecl 0xd538a0 <line:1200:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd54e90 <line:1201:5, line:1206:5> line:1201:12 struct is_trivially_default_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<__is_trivially_constructible(_Tp)>':'integral_constant<bool, __is_trivially_constructible(_Tp)>'
| |   |-CXXRecordDecl 0xd55388 <col:5, col:12> col:12 implicit struct is_trivially_default_constructible
| |   `-StaticAssertDecl 0xd55608 <line:1204:7, line:1205:68> line:1204:7
| |     |-CallExpr 0xd55588 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd55438 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd55560 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd55520 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd555b0 <line:1205:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-CXXRecordDecl 0xd55660 <line:1208:3, line:1218:3> line:1208:10 referenced struct __do_is_implicitly_default_constructible_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xd55778 <col:3, col:10> col:10 implicit struct __do_is_implicitly_default_constructible_impl
| | |-FunctionTemplateDecl 0xd55a98 <line:1210:5, line:1211:36> col:17 __helper
| | | |-TemplateTypeParmDecl 0xd55808 <line:1210:15, col:24> col:24 referenced typename depth 0 index 0 _Tp
| | | `-CXXMethodDecl 0xd559f8 <line:1211:5, col:36> col:17 __helper 'void (const _Tp &)' static
| | |   `-ParmVarDecl 0xd558d8 <col:26, col:35> col:36 'const _Tp &'
| | |-FunctionTemplateDecl 0xd564c8 <line:1213:5, line:1215:68> line:1214:22 __test
| | | |-TemplateTypeParmDecl 0xd55af8 <line:1213:15, col:24> col:24 referenced typename depth 0 index 0 _Tp
| | | `-CXXMethodDecl 0xd56428 <line:1214:5, line:1215:68> line:1214:22 __test 'std::true_type (const _Tp &, decltype(__helper<const _Tp &>({})) *)' static
| | |   |-ParmVarDecl 0xd55bc8 <col:29, col:38> col:39 'const _Tp &'
| | |   `-ParmVarDecl 0xd55e00 <line:1215:29, col:67> col:65 'decltype(__helper<const _Tp &>({})) *' cinit
| | |     `-IntegerLiteral 0xd56618 <col:67> 'int' 0
| | `-CXXMethodDecl 0xd56550 <line:1217:5, col:33> col:23 __test 'std::false_type (...)' static
| |-ClassTemplateDecl 0xd567d0 <line:1220:3, line:1225:5> line:1221:12 __is_implicitly_default_constructible_impl
| | |-TemplateTypeParmDecl 0xd566b0 <line:1220:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd56740 <line:1221:5, line:1225:5> line:1221:12 struct __is_implicitly_default_constructible_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::__do_is_implicitly_default_constructible_impl'
| |   |-CXXRecordDecl 0xd56a50 <col:5, col:12> col:12 implicit struct __is_implicitly_default_constructible_impl
| |   `-TypedefDecl 0xd56c78 <line:1224:7, col:48> col:48 type 'decltype(__test(declval<_Tp>()))'
| |     `-DecltypeType 0xd56c40 'decltype(__test(declval<_Tp>()))' dependent
| |       `-CallExpr 0xd56bd8 <col:24, col:45> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xd56ae0 <col:24> '<overloaded function type>' lvalue (no ADL) = '__test' 0xd564c8 0xd56550
| |         `-CallExpr 0xd56bb8 <col:31, col:44> '<dependent type>'
| |           `-UnresolvedLookupExpr 0xd56b40 <col:31, col:42> '<dependent type>' lvalue (ADL) = 'declval' 0xd292c0
| |-ClassTemplateDecl 0xd56e10 <line:1227:3, line:1230:7> line:1228:12 __is_implicitly_default_constructible_safe
| | |-TemplateTypeParmDecl 0xd56ce8 <line:1227:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd56d80 <line:1228:5, line:1230:7> line:1228:12 struct __is_implicitly_default_constructible_safe definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_implicitly_default_constructible_impl<_Tp>::type'
| |   `-CXXRecordDecl 0xd571d0 <col:5, col:12> col:12 implicit struct __is_implicitly_default_constructible_safe
| |-ClassTemplateDecl 0xd58f40 <line:1232:3, line:1236:7> line:1233:12 __is_implicitly_default_constructible
| | |-TemplateTypeParmDecl 0xd57278 <line:1232:13, col:22> col:22 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd58eb0 <line:1233:5, line:1236:7> line:1233:12 struct __is_implicitly_default_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__and_<__is_constructible_impl<_Tp>, __is_implicitly_default_constructible_safe<_Tp>>'
| |   `-CXXRecordDecl 0xd593f0 <col:5, col:12> col:12 implicit struct __is_implicitly_default_constructible
| |-ClassTemplateDecl 0xd59740 <line:1238:3, line:1239:12> col:12 __is_trivially_copy_constructible_impl
| | |-TemplateTypeParmDecl 0xd59498 <line:1238:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd59618 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd59678 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd595d0 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd596b0 <line:1239:5, col:12> col:12 struct __is_trivially_copy_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0xd59b58 <line:1241:3, line:1243:27> line:1242:12 struct __is_trivially_copy_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd59978 <line:1241:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd59e18 <line:1242:5, col:12> col:12 implicit struct __is_trivially_copy_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0xd5a958 <line:1245:3, line:1250:7> line:1246:12 struct __is_trivially_copy_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__and_<__is_copy_constructible_impl<_Tp>, integral_constant<bool, __is_trivially_constructible(_Tp, const _Tp &)>>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd5a778 <line:1245:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd5b060 <line:1246:5, col:12> col:12 implicit struct __is_trivially_copy_constructible_impl
| |-ClassTemplateDecl 0xd5b230 <line:1253:3, line:1259:5> line:1254:12 is_trivially_copy_constructible
| | |-TemplateTypeParmDecl 0xd5b108 <line:1253:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd5b1a0 <line:1254:5, line:1259:5> line:1254:12 struct is_trivially_copy_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_trivially_copy_constructible_impl<_Tp>'
| |   |-CXXRecordDecl 0xd5b690 <col:5, col:12> col:12 implicit struct is_trivially_copy_constructible
| |   `-StaticAssertDecl 0xd5bf28 <line:1257:7, line:1258:68> line:1257:7
| |     |-CallExpr 0xd5bea8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd5bd60 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd5be80 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd5be40 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd5bed0 <line:1258:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd5c220 <line:1261:3, line:1262:12> col:12 __is_trivially_move_constructible_impl
| | |-TemplateTypeParmDecl 0xd5bf80 <line:1261:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd5c0f8 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd5c158 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd5c0b0 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd5c190 <line:1262:5, col:12> col:12 struct __is_trivially_move_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0xd5c638 <line:1264:3, line:1266:27> line:1265:12 struct __is_trivially_move_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd5c458 <line:1264:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd5c8f8 <line:1265:5, col:12> col:12 implicit struct __is_trivially_move_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0xd5cb78 <line:1268:3, line:1273:7> line:1269:12 struct __is_trivially_move_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__and_<__is_move_constructible_impl<_Tp>, integral_constant<bool, __is_trivially_constructible(_Tp, _Tp &&)>>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd5c9a0 <line:1268:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd5dc10 <line:1269:5, col:12> col:12 implicit struct __is_trivially_move_constructible_impl
| |-ClassTemplateDecl 0xd5dde0 <line:1276:3, line:1282:5> line:1277:12 is_trivially_move_constructible
| | |-TemplateTypeParmDecl 0xd5dcb8 <line:1276:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd5dd50 <line:1277:5, line:1282:5> line:1277:12 struct is_trivially_move_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_trivially_move_constructible_impl<_Tp>'
| |   |-CXXRecordDecl 0xd5e240 <col:5, col:12> col:12 implicit struct is_trivially_move_constructible
| |   `-StaticAssertDecl 0xd5e4b8 <line:1280:7, line:1281:68> line:1280:7
| |     |-CallExpr 0xd5e438 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd5e2f0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd5e410 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd5e3d0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd5e460 <line:1281:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd5ebe0 <line:1285:3, line:1291:5> line:1286:12 is_trivially_assignable
| | |-TemplateTypeParmDecl 0xd5e510 <line:1285:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd5e588 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0xd5e628 <line:1286:5, line:1291:5> line:1286:12 struct is_trivially_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<__is_trivially_assignable(_Tp, _Up)>':'integral_constant<bool, __is_trivially_assignable(_Tp, _Up)>'
| |   |-CXXRecordDecl 0xd5f098 <col:5, col:12> col:12 implicit struct is_trivially_assignable
| |   `-StaticAssertDecl 0xd5f318 <line:1289:7, line:1290:68> line:1289:7
| |     |-CallExpr 0xd5f298 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd5f148 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd5f270 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd5f230 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd5f2c0 <line:1290:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd5f610 <line:1293:3, line:1294:12> col:12 __is_trivially_copy_assignable_impl
| | |-TemplateTypeParmDecl 0xd5f370 <line:1293:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd5f4e8 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd5f548 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd5f4a0 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd5f580 <line:1294:5, col:12> col:12 struct __is_trivially_copy_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0xd5fa28 <line:1296:3, line:1298:27> line:1297:12 struct __is_trivially_copy_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd5f848 <line:1296:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd605c8 <line:1297:5, col:12> col:12 implicit struct __is_trivially_copy_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0xd60848 <line:1300:3, line:1303:7> line:1301:12 struct __is_trivially_copy_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__bool_constant<__is_trivially_assignable(_Tp &, const _Tp &)>':'integral_constant<bool, __is_trivially_assignable(_Tp &, const _Tp &)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd60670 <line:1300:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd60d68 <line:1301:5, col:12> col:12 implicit struct __is_trivially_copy_assignable_impl
| |-ClassTemplateDecl 0xd60f30 <line:1306:3, line:1312:5> line:1307:12 is_trivially_copy_assignable
| | |-TemplateTypeParmDecl 0xd60e10 <line:1306:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd60ea0 <line:1307:5, line:1312:5> line:1307:12 struct is_trivially_copy_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_trivially_copy_assignable_impl<_Tp>'
| |   |-CXXRecordDecl 0xd61390 <col:5, col:12> col:12 implicit struct is_trivially_copy_assignable
| |   `-StaticAssertDecl 0xd62368 <line:1310:7, line:1311:68> line:1310:7
| |     |-CallExpr 0xd622e8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd61440 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd622c0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd62280 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd62310 <line:1311:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd62660 <line:1314:3, line:1315:12> col:12 __is_trivially_move_assignable_impl
| | |-TemplateTypeParmDecl 0xd623c0 <line:1314:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd62538 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd62598 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd624f0 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd625d0 <line:1315:5, col:12> col:12 struct __is_trivially_move_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0xd62a78 <line:1317:3, line:1319:27> line:1318:12 struct __is_trivially_move_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd62898 <line:1317:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd62d38 <line:1318:5, col:12> col:12 implicit struct __is_trivially_move_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0xd62fb8 <line:1321:3, line:1324:7> line:1322:12 struct __is_trivially_move_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__bool_constant<__is_trivially_assignable(_Tp &, _Tp &&)>':'integral_constant<bool, __is_trivially_assignable(_Tp &, _Tp &&)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd62de0 <line:1321:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd63988 <line:1322:5, col:12> col:12 implicit struct __is_trivially_move_assignable_impl
| |-ClassTemplateDecl 0xd63b50 <line:1327:3, line:1333:5> line:1328:12 is_trivially_move_assignable
| | |-TemplateTypeParmDecl 0xd63a30 <line:1327:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd63ac0 <line:1328:5, line:1333:5> line:1328:12 struct is_trivially_move_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_trivially_move_assignable_impl<_Tp>'
| |   |-CXXRecordDecl 0xd63fb0 <col:5, col:12> col:12 implicit struct is_trivially_move_assignable
| |   `-StaticAssertDecl 0xd64228 <line:1331:7, line:1332:68> line:1331:7
| |     |-CallExpr 0xd641a8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd64060 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd64180 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd64140 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd641d0 <line:1332:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd643a0 <line:1336:3, line:1343:5> line:1337:12 is_trivially_destructible
| | |-TemplateTypeParmDecl 0xd64280 <line:1336:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd64310 <line:1337:5, line:1343:5> line:1337:12 struct is_trivially_destructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__and_<__is_destructible_safe<_Tp>, __bool_constant<__has_trivial_destructor(_Tp)>>'
| |   |-CXXRecordDecl 0xd65840 <col:5, col:12> col:12 implicit struct is_trivially_destructible
| |   `-StaticAssertDecl 0xd65ab8 <line:1341:7, line:1342:68> line:1341:7
| |     |-CallExpr 0xd65a38 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd658f0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd65a10 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd659d0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd65a60 <line:1342:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd65c30 <line:1347:3, line:1353:5> line:1348:12 has_virtual_destructor
| | |-TemplateTypeParmDecl 0xd65b10 <line:1347:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd65ba0 <line:1348:5, line:1353:5> line:1348:12 struct has_virtual_destructor definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __has_virtual_destructor(_Tp)>'
| |   |-CXXRecordDecl 0xd66478 <col:5, col:12> col:12 implicit struct has_virtual_destructor
| |   `-StaticAssertDecl 0xd666f8 <line:1351:7, line:1352:68> line:1351:7
| |     |-CallExpr 0xd66678 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd66528 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd66650 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd66610 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd666a0 <line:1352:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd66870 <line:1359:3, line:1365:5> line:1360:12 alignment_of
| | |-TemplateTypeParmDecl 0xd66750 <line:1359:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd667e0 <line:1360:5, line:1365:5> line:1360:12 struct alignment_of definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<std::size_t, alignof(_Tp)>'
| |   |-CXXRecordDecl 0xd66c90 <col:5, col:12> col:12 implicit struct alignment_of
| |   `-StaticAssertDecl 0xd66f08 <line:1363:7, line:1364:68> line:1363:7
| |     |-CallExpr 0xd66e88 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xd66d40 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xd66e60 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xd66e20 <col:73, col:74> 'void'
| |     `-StringLiteral 0xd66eb0 <line:1364:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xd67080 <line:1368:3, line:1370:50> line:1369:12 rank
| | |-TemplateTypeParmDecl 0xd66f60 <line:1368:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xd66ff0 <line:1369:5, line:1370:50> line:1369:12 struct rank definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<std::size_t, 0>':'std::integral_constant<unsigned long, 0>'
| |   `-CXXRecordDecl 0xd68568 <col:5, col:12> col:12 implicit struct rank
| |-ClassTemplatePartialSpecializationDecl 0xd68890 <line:1372:3, line:1374:69> line:1373:12 struct rank definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'integral_constant<std::size_t, 1 + rank<_Tp>::value>'
| | |-TemplateArgument type 'type-parameter-0-0[_Size]'
| | | `-DependentSizedArrayType 0xcfdde0 'type-parameter-0-0[_Size]' dependent   <line:432:24, col:30>
| | |   |-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |   `-DeclRefExpr 0xcfddc0 <col:25> 'std::size_t':'unsigned long' NonTypeTemplateParm 0xcfdd40 '_Size' 'std::size_t':'unsigned long'
| | |-TemplateTypeParmDecl 0xd68610 <line:1372:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd686d8 <col:26, col:38> col:38 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Size
| | `-CXXRecordDecl 0xd68eb0 <line:1373:5, col:12> col:12 implicit struct rank
| |-ClassTemplatePartialSpecializationDecl 0xd690f0 <line:1376:3, line:1378:69> line:1377:12 struct rank definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'integral_constant<std::size_t, 1 + rank<_Tp>::value>'
| | |-TemplateArgument type 'type-parameter-0-0[]'
| | | `-IncompleteArrayType 0xcfe2d0 'type-parameter-0-0[]' dependent 
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd68f58 <line:1376:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd69570 <line:1377:5, col:12> col:12 implicit struct rank
| |-ClassTemplateDecl 0xd697c0 prev 0xd29588 <line:1381:3, line:1383:50> line:1382:12 extent
| | |-TemplateTypeParmDecl 0xd69618 <line:1381:12> col:20 typename depth 0 index 0
| | |-NonTypeTemplateParmDecl 0xd696b0 <col:22, col:31> col:31 'unsigned int' depth 0 index 1 _Uint
| | | `-TemplateArgument expr
| | |   |-inherited from NonTypeTemplateParm 0xd29440 '' 'unsigned int'
| | |   `-ConstantExpr 0xd294b8 <line:818:33> 'unsigned int'
| | |     |-value: Int 0
| | |     `-ImplicitCastExpr 0xd294a0 <col:33> 'unsigned int' <IntegralCast>
| | |       `-IntegerLiteral 0xd29408 <col:33> 'int' 0
| | `-CXXRecordDecl 0xd69730 prev 0xd294f8 <line:1382:5, line:1383:50> line:1382:12 struct extent definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<std::size_t, 0>':'std::integral_constant<unsigned long, 0>'
| |   `-CXXRecordDecl 0xd699f0 <col:5, col:12> col:12 implicit struct extent
| |-ClassTemplatePartialSpecializationDecl 0xd69fd8 <line:1385:3, line:1390:7> line:1386:12 struct extent definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'integral_constant<std::size_t, _Uint == 0 ? _Size : extent<_Tp, _Uint - 1>::value>'
| | |-TemplateArgument type 'type-parameter-0-0[_Size]'
| | | `-DependentSizedArrayType 0xd69c90 'type-parameter-0-0[_Size]' dependent   <col:22, col:28>
| | |   |-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |   `-DeclRefExpr 0xd69c68 <col:23> 'std::size_t':'unsigned long' NonTypeTemplateParm 0xd69be0 '_Size' 'std::size_t':'unsigned long'
| | |-TemplateArgument expr
| | | `-DeclRefExpr 0xd69d30 <col:31> 'unsigned int' NonTypeTemplateParm 0xd69b30 '_Uint' 'unsigned int'
| | |-TemplateTypeParmDecl 0xd69a98 <line:1385:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd69b30 <col:26, col:35> col:35 referenced 'unsigned int' depth 0 index 1 _Uint
| | |-NonTypeTemplateParmDecl 0xd69be0 <col:42, col:54> col:54 referenced 'std::size_t':'unsigned long' depth 0 index 2 _Size
| | `-CXXRecordDecl 0xd6a720 <line:1386:5, col:12> col:12 implicit struct extent
| |-ClassTemplatePartialSpecializationDecl 0xd6aa58 <line:1392:3, line:1397:7> line:1393:12 struct extent definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'integral_constant<std::size_t, _Uint == 0 ? 0 : extent<_Tp, _Uint - 1>::value>'
| | |-TemplateArgument type 'type-parameter-0-0[]'
| | | `-IncompleteArrayType 0xcfe2d0 'type-parameter-0-0[]' dependent 
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument expr
| | | `-DeclRefExpr 0xd6a928 <col:26> 'unsigned int' NonTypeTemplateParm 0xd6a860 '_Uint' 'unsigned int'
| | |-TemplateTypeParmDecl 0xd6a7c8 <line:1392:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd6a860 <col:26, col:35> col:35 referenced 'unsigned int' depth 0 index 1 _Uint
| | `-CXXRecordDecl 0xd6c1b0 <line:1393:5, col:12> col:12 implicit struct extent
| |-ClassTemplateDecl 0xd6c408 prev 0xd14408 <line:1403:3, line:1410:7> line:1404:12 is_same
| | |-TemplateTypeParmDecl 0xd6c258 <line:1403:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xd6c2d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0xd6c378 prev 0xd14378 <line:1404:5, line:1410:7> line:1404:12 struct is_same definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_same(_Tp, _Up)>'
| |   `-CXXRecordDecl 0xd6c650 <col:5, col:12> col:12 implicit struct is_same
| |-ClassTemplateDecl 0xd6c8a8 <line:1420:3, line:1423:7> line:1421:12 is_base_of
| | |-TemplateTypeParmDecl 0xd6c6f8 <line:1420:12, col:21> col:21 referenced typename depth 0 index 0 _Base
| | |-TemplateTypeParmDecl 0xd6c778 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Derived
| | `-CXXRecordDecl 0xd6c818 <line:1421:5, line:1423:7> line:1421:12 struct is_base_of definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_base_of(_Base, _Derived)>'
| |   `-CXXRecordDecl 0xd6ccc0 <col:5, col:12> col:12 implicit struct is_base_of
| |-ClassTemplateDecl 0xd6d8e8 <line:1425:3, line:1431:5> line:1428:12 __is_convertible_helper
| | |-TemplateTypeParmDecl 0xd6cd68 <line:1425:12, col:21> col:21 referenced typename depth 0 index 0 _From
| | |-TemplateTypeParmDecl 0xd6cde8 <col:28, col:37> col:37 referenced typename depth 0 index 1 _To
| | |-NonTypeTemplateParmDecl 0xd6d7b8 <line:1426:12, line:1427:41> line:1426:17 'bool' depth 0 index 2
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd6d818 <col:19, line:1427:41> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd6d770 <line:1426:19, line:1427:41> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd6d858 <line:1428:5, line:1431:5> line:1428:12 struct __is_convertible_helper definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xd6dbb0 <col:5, col:12> col:12 implicit struct __is_convertible_helper
| |   `-TypedefDecl 0xd6dd90 <line:1430:7, col:43> col:43 type 'typename is_void<_To>::type'
| |     `-DependentNameType 0xd6dd20 'typename is_void<_To>::type' dependent
| |-ClassTemplatePartialSpecializationDecl 0xd6e0c0 <line:1435:3, line:1452:5> line:1436:11 class __is_convertible_helper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd6de00 <line:1435:12, col:21> col:21 referenced typename depth 0 index 0 _From
| | |-TemplateTypeParmDecl 0xd6de78 <col:28, col:37> col:37 referenced typename depth 0 index 1 _To
| | |-CXXRecordDecl 0xd6e388 <line:1436:5, col:11> col:11 implicit class __is_convertible_helper
| | |-FunctionTemplateDecl 0xd6ed70 <line:1438:7, line:1439:31> col:14 __test_aux
| | | |-TemplateTypeParmDecl 0xd6e418 <line:1438:16, col:25> col:25 referenced typename depth 1 index 0 _To1
| | | `-CXXMethodDecl 0xd6ecd0 <line:1439:2, col:31> col:14 __test_aux 'void (_To1) noexcept' static
| | |   `-ParmVarDecl 0xd6eba0 <col:25> col:29 '_To1'
| | |-FunctionTemplateDecl 0xd6f338 <line:1441:7, line:1444:12> col:2 __test
| | | |-TemplateTypeParmDecl 0xd6edd0 <line:1441:16, col:25> col:25 referenced typename depth 1 index 0 _From1
| | | |-TemplateTypeParmDecl 0xd6ee48 <col:33, col:42> col:42 referenced typename depth 1 index 1 _To1
| | | |-TemplateTypeParmDecl 0xd6f118 <line:1442:9, col:69> col:18 typename depth 1 index 2
| | | | `-TemplateArgument type 'decltype(__test_aux<_To1>(std::declval<_From1>()))'
| | | |   `-DecltypeType 0xd6f0e0 'decltype(__test_aux<_To1>(std::declval<_From1>()))' dependent
| | | |     `-CallExpr 0xd6f060 <col:29, col:68> '<dependent type>'
| | | |       |-UnresolvedLookupExpr 0xd6ef08 <col:29, col:44> '<dependent type>' lvalue (no ADL) = '__test_aux' 0xd6ed70
| | | |       `-CallExpr 0xd6f040 <col:46, col:67> '<dependent type>'
| | | |         `-UnresolvedLookupExpr 0xd6efc8 <col:46, col:65> '<dependent type>' lvalue (no ADL) = 'declval' 0xd292c0
| | | `-CXXMethodDecl 0xd6f298 <line:1443:2, line:1444:12> col:2 __test 'std::true_type (int)' static
| | |   `-ParmVarDecl 0xd6f208 <col:9> col:12 'int'
| | |-FunctionTemplateDecl 0xd6f578 <line:1446:7, line:1448:12> col:2 __test
| | | |-TemplateTypeParmDecl 0xd6f398 <line:1446:16> col:24 typename depth 1 index 0
| | | |-TemplateTypeParmDecl 0xd6f418 <col:26> col:34 typename depth 1 index 1
| | | `-CXXMethodDecl 0xd6f4d8 <line:1447:2, line:1448:12> col:2 __test 'std::false_type (...)' static
| | |-AccessSpecDecl 0xd6f5e0 <line:1450:5, col:11> col:5 public
| | `-TypedefDecl 0xd6f7a8 <line:1451:7, col:47> col:47 type 'decltype(__test<_From, _To>(0))'
| |   `-DecltypeType 0xd6f770 'decltype(__test<_From, _To>(0))' dependent
| |     `-CallExpr 0xd6f700 <col:24, col:44> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xd6f640 <col:24, col:41> '<dependent type>' lvalue (no ADL) = '__test' 0xd6f578 0xd6f338
| |       `-IntegerLiteral 0xd6f6e0 <col:43> 'int' 0
| |-ClassTemplateDecl 0xd6f9c8 <line:1456:3, line:1459:7> line:1457:12 is_convertible
| | |-TemplateTypeParmDecl 0xd6f818 <line:1456:12, col:21> col:21 referenced typename depth 0 index 0 _From
| | |-TemplateTypeParmDecl 0xd6f898 <col:28, col:37> col:37 referenced typename depth 0 index 1 _To
| | `-CXXRecordDecl 0xd6f938 <line:1457:5, line:1459:7> line:1457:12 struct is_convertible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_convertible_helper<_From, _To>::type'
| |   `-CXXRecordDecl 0xd70a60 <col:5, col:12> col:12 implicit struct is_convertible
| |-TypeAliasTemplateDecl 0xd70fa8 <line:1462:3, line:1464:66> line:1463:5 __is_array_convertible
| | |-TemplateTypeParmDecl 0xd70b08 <line:1462:12, col:21> col:21 referenced typename depth 0 index 0 _ToElementType
| | |-TemplateTypeParmDecl 0xd70b88 <col:37, col:46> col:46 referenced typename depth 0 index 1 _FromElementType
| | `-TypeAliasDecl 0xd70f48 <line:1463:5, line:1464:66> line:1463:11 __is_array_convertible 'is_convertible<_FromElementType (*)[], _ToElementType (*)[]>'
| |   `-TemplateSpecializationType 0xd70ea0 'is_convertible<_FromElementType (*)[], _ToElementType (*)[]>' dependent is_convertible
| |     |-TemplateArgument type '_FromElementType (*)[]'
| |     | `-PointerType 0xd70cf0 '_FromElementType (*)[]' dependent
| |     |   `-ParenType 0xd70c90 '_FromElementType[]' sugar dependent
| |     |     `-IncompleteArrayType 0xd70c60 '_FromElementType[]' dependent 
| |     |       `-TemplateTypeParmType 0xd70be0 '_FromElementType' dependent depth 0 index 1
| |     |         `-TemplateTypeParm 0xd70b88 '_FromElementType'
| |     `-TemplateArgument type '_ToElementType (*)[]'
| |       `-PointerType 0xd70de0 '_ToElementType (*)[]' dependent
| |         `-ParenType 0xd70d80 '_ToElementType[]' sugar dependent
| |           `-IncompleteArrayType 0xd70d50 '_ToElementType[]' dependent 
| |             `-TemplateTypeParmType 0xd70b60 '_ToElementType' dependent depth 0 index 0
| |               `-TemplateTypeParm 0xd70b08 '_ToElementType'
| |-ClassTemplateDecl 0xd71610 <line:1466:3, line:1471:7> line:1469:12 __is_nt_convertible_helper
| | |-TemplateTypeParmDecl 0xd71000 <line:1466:12, col:21> col:21 referenced typename depth 0 index 0 _From
| | |-TemplateTypeParmDecl 0xd71078 <col:28, col:37> col:37 referenced typename depth 0 index 1 _To
| | |-NonTypeTemplateParmDecl 0xd714e0 <line:1467:12, line:1468:41> line:1467:17 'bool' depth 0 index 2
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd71540 <col:19, line:1468:41> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd71498 <line:1467:19, line:1468:41> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd71580 <line:1469:5, line:1471:7> line:1469:12 struct __is_nt_convertible_helper definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'is_void<_To>'
| |   `-CXXRecordDecl 0xd71970 <col:5, col:12> col:12 implicit struct __is_nt_convertible_helper
| |-ClassTemplatePartialSpecializationDecl 0xd71ce0 <line:1475:3, line:1492:5> line:1476:11 class __is_nt_convertible_helper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd71a18 <line:1475:12, col:21> col:21 referenced typename depth 0 index 0 _From
| | |-TemplateTypeParmDecl 0xd71a98 <col:28, col:37> col:37 referenced typename depth 0 index 1 _To
| | |-CXXRecordDecl 0xd71fa8 <line:1476:5, col:11> col:11 implicit class __is_nt_convertible_helper
| | |-FunctionTemplateDecl 0xd72280 <line:1478:7, line:1479:31> col:14 __test_aux
| | | |-TemplateTypeParmDecl 0xd72038 <line:1478:16, col:25> col:25 referenced typename depth 1 index 0 _To1
| | | `-CXXMethodDecl 0xd721e0 <line:1479:2, col:31> col:14 __test_aux 'void (_To1) noexcept' static
| | |   `-ParmVarDecl 0xd720e0 <col:25> col:29 '_To1'
| | |-FunctionTemplateDecl 0xd72e48 <line:1481:7, line:1484:12> col:2 __test
| | | |-TemplateTypeParmDecl 0xd722e0 <line:1481:16, col:25> col:25 referenced typename depth 1 index 0 _From1
| | | |-TemplateTypeParmDecl 0xd72358 <col:33, col:42> col:42 referenced typename depth 1 index 1 _To1
| | | `-CXXMethodDecl 0xd72da8 <line:1482:2, line:1484:12> col:2 __test '__bool_constant<noexcept(__test_aux<_To1>(std::declval<_From1>()))> (int)' static
| | |   `-ParmVarDecl 0xd72ca0 <col:9> col:12 'int'
| | |-FunctionTemplateDecl 0xd73088 <line:1486:7, line:1488:12> col:2 __test
| | | |-TemplateTypeParmDecl 0xd72ea8 <line:1486:16> col:24 typename depth 1 index 0
| | | |-TemplateTypeParmDecl 0xd72f28 <col:26> col:34 typename depth 1 index 1
| | | `-CXXMethodDecl 0xd72fe8 <line:1487:2, line:1488:12> col:2 __test 'std::false_type (...)' static
| | |-AccessSpecDecl 0xd730f0 <line:1490:5, col:11> col:5 public
| | `-TypeAliasDecl 0xd73278 <line:1491:7, col:50> col:13 type 'decltype(__test<_From, _To>(0))'
| |   `-DecltypeType 0xd73240 'decltype(__test<_From, _To>(0))' dependent
| |     `-CallExpr 0xd73210 <col:29, col:49> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xd73150 <col:29, col:46> '<dependent type>' lvalue (no ADL) = '__test' 0xd73088 0xd72e48
| |       `-IntegerLiteral 0xd731f0 <col:48> 'int' 0
| |-ClassTemplateDecl 0xd73498 <line:1496:3, line:1499:7> line:1497:12 __is_nothrow_convertible
| | |-TemplateTypeParmDecl 0xd732f0 <line:1496:12, col:21> col:21 referenced typename depth 0 index 0 _From
| | |-TemplateTypeParmDecl 0xd73368 <col:28, col:37> col:37 referenced typename depth 0 index 1 _To
| | `-CXXRecordDecl 0xd73408 <line:1497:5, line:1499:7> line:1497:12 struct __is_nothrow_convertible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nt_convertible_helper<_From, _To>::type'
| |   `-CXXRecordDecl 0xd744f0 <col:5, col:12> col:12 implicit struct __is_nothrow_convertible
| |-ClassTemplateDecl 0xd746c0 <line:1518:3, line:1520:29> line:1519:12 remove_const
| | |-TemplateTypeParmDecl 0xd74598 <line:1518:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd74630 <line:1519:5, line:1520:29> line:1519:12 struct remove_const definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xd74900 <col:5, col:12> col:12 implicit struct remove_const
| |   `-TypedefDecl 0xd749a0 <line:1520:7, col:23> col:23 type '_Tp'
| |     `-TemplateTypeParmType 0xd745f0 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xd74598 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xd74b60 <line:1522:3, line:1524:29> line:1523:12 struct remove_const definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'const type-parameter-0-0'
| | | `-QualType 0xcc9f21 'const type-parameter-0-0' const
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd74a10 <line:1522:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd74d78 <line:1523:5, col:12> col:12 implicit struct remove_const
| | `-TypedefDecl 0xd74e18 <line:1524:7, col:23> col:23 type '_Tp'
| |   `-TemplateTypeParmType 0xd74a60 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0xd74a10 '_Tp'
| |-ClassTemplateDecl 0xd74fb0 <line:1527:3, line:1529:29> line:1528:12 remove_volatile
| | |-TemplateTypeParmDecl 0xd74e88 <line:1527:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd74f20 <line:1528:5, line:1529:29> line:1528:12 struct remove_volatile definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xd76390 <col:5, col:12> col:12 implicit struct remove_volatile
| |   `-TypedefDecl 0xd76430 <line:1529:7, col:23> col:23 type '_Tp'
| |     `-TemplateTypeParmType 0xd74ee0 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xd74e88 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xd765f0 <line:1531:3, line:1533:29> line:1532:12 struct remove_volatile definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'volatile type-parameter-0-0'
| | | `-QualType 0xcc9f24 'volatile type-parameter-0-0' volatile
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd764a0 <line:1531:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd76808 <line:1532:5, col:12> col:12 implicit struct remove_volatile
| | `-TypedefDecl 0xd768a8 <line:1533:7, col:23> col:23 type '_Tp'
| |   `-TemplateTypeParmType 0xd764f0 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0xd764a0 '_Tp'
| |-ClassTemplateDecl 0xd76a40 prev 0xcef660 <line:1536:3, line:1538:25> line:1537:12 remove_cv
| | |-TemplateTypeParmDecl 0xd76918 <line:1536:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd769b0 prev 0xcef5d0 <line:1537:5, line:1538:25> line:1537:12 struct remove_cv definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0xd76b00 <col:5, col:12> col:12 implicit struct remove_cv
| | | `-TypeAliasDecl 0xd76ba0 <line:1538:7, col:20> col:13 type '_Tp'
| | |   `-TemplateTypeParmType 0xd76970 '_Tp' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0xd76918 '_Tp'
| | |-ClassTemplateSpecialization 0xda8c78 'remove_cv'
| | |-ClassTemplateSpecialization 0xdab6c8 'remove_cv'
| | |-ClassTemplateSpecialization 0xdaf9c8 'remove_cv'
| | |-ClassTemplateSpecialization 0xdb14b8 'remove_cv'
| | |-ClassTemplateSpecialization 0xdb4f28 'remove_cv'
| | `-ClassTemplateSpecialization 0xe10038 'remove_cv'
| |-ClassTemplatePartialSpecializationDecl 0xd76d70 <line:1540:3, line:1542:25> line:1541:12 struct remove_cv definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'const type-parameter-0-0'
| | | `-QualType 0xcc9f21 'const type-parameter-0-0' const
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd76c18 <line:1540:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd76f88 <line:1541:5, col:12> col:12 implicit struct remove_cv
| | `-TypeAliasDecl 0xd77028 <line:1542:7, col:20> col:13 type '_Tp'
| |   `-TemplateTypeParmType 0xd76c70 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0xd76c18 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xd771f0 <line:1544:3, line:1546:25> line:1545:12 struct remove_cv definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'volatile type-parameter-0-0'
| | | `-QualType 0xcc9f24 'volatile type-parameter-0-0' volatile
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd770a0 <line:1544:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd775a8 <line:1545:5, col:12> col:12 implicit struct remove_cv
| | `-TypeAliasDecl 0xd77648 <line:1546:7, col:20> col:13 type '_Tp'
| |   `-TemplateTypeParmType 0xd770f0 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0xd770a0 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xd77810 <line:1548:3, line:1550:25> line:1549:12 struct remove_cv definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'const volatile type-parameter-0-0'
| | | `-QualType 0xcc9f25 'const volatile type-parameter-0-0' const volatile
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd776c0 <line:1548:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd77a28 <line:1549:5, col:12> col:12 implicit struct remove_cv
| | `-TypeAliasDecl 0xd77ac8 <line:1550:7, col:20> col:13 type '_Tp'
| |   `-TemplateTypeParmType 0xd77710 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0xd776c0 '_Tp'
| |-ClassTemplateDecl 0xd77c60 <line:1553:3, line:1555:35> line:1554:12 add_const
| | |-TemplateTypeParmDecl 0xd77b40 <line:1553:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd77bd0 <line:1554:5, line:1555:35> line:1554:12 struct add_const definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xd77ea0 <col:5, col:12> col:12 implicit struct add_const
| |   `-TypedefDecl 0xd77f40 <line:1555:7, col:29> col:29 type 'const _Tp'
| |     `-QualType 0xd77b91 'const _Tp' const
| |       `-TemplateTypeParmType 0xd77b90 '_Tp' dependent depth 0 index 0
| |         `-TemplateTypeParm 0xd77b40 '_Tp'
| |-ClassTemplateDecl 0xd780d0 <line:1558:3, line:1560:38> line:1559:12 add_volatile
| | |-TemplateTypeParmDecl 0xd77fb0 <line:1558:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd78040 <line:1559:5, line:1560:38> line:1559:12 struct add_volatile definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xd78310 <col:5, col:12> col:12 implicit struct add_volatile
| |   `-TypedefDecl 0xd783b0 <line:1560:7, col:32> col:32 type 'volatile _Tp'
| |     `-QualType 0xd78004 'volatile _Tp' volatile
| |       `-TemplateTypeParmType 0xd78000 '_Tp' dependent depth 0 index 0
| |         `-TemplateTypeParm 0xd77fb0 '_Tp'
| |-ClassTemplateDecl 0xd78f30 <line:1563:3, line:1568:5> line:1564:12 add_cv
| | |-TemplateTypeParmDecl 0xd78420 <line:1563:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd78ea0 <line:1564:5, line:1568:5> line:1564:12 struct add_cv definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xd79170 <col:5, col:12> col:12 implicit struct add_cv
| |   `-TypedefDecl 0xd794d0 <line:1566:7, line:1567:61> col:61 type 'typename add_const<typename add_volatile<_Tp>::type>::type'
| |     `-DependentNameType 0xd79460 'typename add_const<typename add_volatile<_Tp>::type>::type' dependent
| |-TypeAliasTemplateDecl 0xd79780 <line:1575:3, line:1576:56> col:5 remove_const_t
| | |-TemplateTypeParmDecl 0xd79540 <line:1575:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xd79720 <line:1576:5, col:56> col:11 remove_const_t 'typename remove_const<_Tp>::type'
| |   `-DependentNameType 0xd796b0 'typename remove_const<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xd79a20 <line:1579:3, line:1580:62> col:5 remove_volatile_t
| | |-TemplateTypeParmDecl 0xd797d8 <line:1579:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xd799c0 <line:1580:5, col:62> col:11 remove_volatile_t 'typename remove_volatile<_Tp>::type'
| |   `-DependentNameType 0xd79950 'typename remove_volatile<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xd79c70 <line:1583:3, line:1584:50> col:5 remove_cv_t
| | |-TemplateTypeParmDecl 0xd79a78 <line:1583:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xd79c10 <line:1584:5, col:50> col:11 remove_cv_t 'typename remove_cv<_Tp>::type'
| |   `-DependentNameType 0xd79ba0 'typename remove_cv<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xd7a3c0 <line:1587:3, line:1588:50> col:5 add_const_t
| | |-TemplateTypeParmDecl 0xd79cc8 <line:1587:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xd7a360 <line:1588:5, col:50> col:11 add_const_t 'typename add_const<_Tp>::type'
| |   `-DependentNameType 0xd7a2f0 'typename add_const<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xd7a610 <line:1591:3, line:1592:56> col:5 add_volatile_t
| | |-TemplateTypeParmDecl 0xd7a418 <line:1591:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xd7a5b0 <line:1592:5, col:56> col:11 add_volatile_t 'typename add_volatile<_Tp>::type'
| |   `-DependentNameType 0xd7a540 'typename add_volatile<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xd7a8b0 <line:1595:3, line:1596:44> col:5 add_cv_t
| | |-TemplateTypeParmDecl 0xd7a668 <line:1595:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xd7a850 <line:1596:5, col:44> col:11 add_cv_t 'typename add_cv<_Tp>::type'
| |   `-DependentNameType 0xd7a7e0 'typename add_cv<_Tp>::type' dependent
| |-ClassTemplateDecl 0xd7aa30 <line:1602:3, line:1604:27> line:1603:12 remove_reference
| | |-TemplateTypeParmDecl 0xd7a908 <line:1602:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd7a9a0 <line:1603:5, line:1604:27> line:1603:12 struct remove_reference definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xd7ac70 <col:5, col:12> col:12 implicit struct remove_reference
| |   `-TypedefDecl 0xd7ad10 <line:1604:7, col:21> col:21 type '_Tp'
| |     `-TemplateTypeParmType 0xd7a960 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xd7a908 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xd7af00 <line:1606:3, line:1608:27> line:1607:12 struct remove_reference definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0xcc9f90 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd7ad80 <line:1606:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd7b118 <line:1607:5, col:12> col:12 implicit struct remove_reference
| | `-TypedefDecl 0xd7b1b8 <line:1608:7, col:21> col:21 type '_Tp'
| |   `-TemplateTypeParmType 0xd7add0 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0xd7ad80 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xd7b8a0 <line:1610:3, line:1612:27> line:1611:12 struct remove_reference definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0 &&'
| | | `-RValueReferenceType 0xd01410 'type-parameter-0-0 &&' dependent
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xd7b228 <line:1610:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd7bab8 <line:1611:5, col:12> col:12 implicit struct remove_reference
| | `-TypedefDecl 0xd7bb58 <line:1612:7, col:21> col:21 type '_Tp'
| |   `-TemplateTypeParmType 0xd7b280 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0xd7b228 '_Tp'
| |-ClassTemplateDecl 0xd7be70 <line:1614:3, line:1616:27> line:1615:12 __add_lvalue_reference_helper
| | |-TemplateTypeParmDecl 0xd7bbc8 <line:1614:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd7bd48 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd7bda8 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd7bd00 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd7bde0 <line:1615:5, line:1616:27> line:1615:12 struct __add_lvalue_reference_helper definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xd7c110 <col:5, col:12> col:12 implicit struct __add_lvalue_reference_helper
| |   `-TypedefDecl 0xd7c1b0 <line:1616:7, col:21> col:21 type '_Tp'
| |     `-TemplateTypeParmType 0xd7bc20 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xd7bbc8 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xd7c3f8 <line:1618:3, line:1620:28> line:1619:12 struct __add_lvalue_reference_helper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd7c220 <line:1618:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd7c678 <line:1619:5, col:12> col:12 implicit struct __add_lvalue_reference_helper
| | `-TypedefDecl 0xd7c748 <line:1620:7, col:22> col:22 type '_Tp &'
| |   `-LValueReferenceType 0xd7c710 '_Tp &' dependent
| |     `-TemplateTypeParmType 0xd7c270 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xd7c220 '_Tp'
| |-ClassTemplateDecl 0xd7ce50 <line:1623:3, line:1626:7> line:1624:12 add_lvalue_reference
| | |-TemplateTypeParmDecl 0xd7cd30 <line:1623:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd7cdc0 <line:1624:5, line:1626:7> line:1624:12 struct add_lvalue_reference definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__add_lvalue_reference_helper<_Tp>'
| |   `-CXXRecordDecl 0xd7d2b0 <col:5, col:12> col:12 implicit struct add_lvalue_reference
| |-ClassTemplateDecl 0xd7d600 <line:1628:3, line:1630:27> line:1629:12 __add_rvalue_reference_helper
| | |-TemplateTypeParmDecl 0xd7d358 <line:1628:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd7d4d8 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd7d538 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd7d490 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xd7d570 <line:1629:5, line:1630:27> line:1629:12 struct __add_rvalue_reference_helper definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xd7d8a0 <col:5, col:12> col:12 implicit struct __add_rvalue_reference_helper
| |   `-TypedefDecl 0xd7d940 <line:1630:7, col:21> col:21 type '_Tp'
| |     `-TemplateTypeParmType 0xd7d3b0 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xd7d358 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xd7db88 <line:1632:3, line:1634:29> line:1633:12 struct __add_rvalue_reference_helper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd7d9b0 <line:1632:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd7e738 <line:1633:5, col:12> col:12 implicit struct __add_rvalue_reference_helper
| | `-TypedefDecl 0xd7e808 <line:1634:7, col:23> col:23 type '_Tp &&'
| |   `-RValueReferenceType 0xd7e7d0 '_Tp &&' dependent
| |     `-TemplateTypeParmType 0xd7da00 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xd7d9b0 '_Tp'
| |-ClassTemplateDecl 0xd7e9a0 <line:1637:3, line:1640:7> line:1638:12 add_rvalue_reference
| | |-TemplateTypeParmDecl 0xd7e878 <line:1637:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xd7e910 <line:1638:5, line:1640:7> line:1638:12 struct add_rvalue_reference definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__add_rvalue_reference_helper<_Tp>'
| |   `-CXXRecordDecl 0xd7ee00 <col:5, col:12> col:12 implicit struct add_rvalue_reference
| |-TypeAliasTemplateDecl 0xd7f0f0 <line:1644:3, line:1645:64> col:5 remove_reference_t
| | |-TemplateTypeParmDecl 0xd7eea8 <line:1644:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xd7f090 <line:1645:5, col:64> col:11 remove_reference_t 'typename remove_reference<_Tp>::type'
| |   `-DependentNameType 0xd7f020 'typename remove_reference<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xd7f390 <line:1648:3, line:1649:72> col:5 add_lvalue_reference_t
| | |-TemplateTypeParmDecl 0xd7f148 <line:1648:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xd7f330 <line:1649:5, col:72> col:11 add_lvalue_reference_t 'typename add_lvalue_reference<_Tp>::type'
| |   `-DependentNameType 0xd7f2c0 'typename add_lvalue_reference<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xd7fb30 <line:1652:3, line:1653:72> col:5 add_rvalue_reference_t
| | |-TemplateTypeParmDecl 0xd7f3e8 <line:1652:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xd7f5d0 <line:1653:5, col:72> col:11 add_rvalue_reference_t 'typename add_rvalue_reference<_Tp>::type'
| |   `-DependentNameType 0xd7f560 'typename add_rvalue_reference<_Tp>::type' dependent
| |-ClassTemplateDecl 0xd7fda0 <line:1661:3, line:1662:12> col:12 __cv_selector
| | |-TemplateTypeParmDecl 0xd7fb88 <line:1661:12, col:21> col:21 typename depth 0 index 0 _Unqualified
| | |-NonTypeTemplateParmDecl 0xd7fc18 <col:35, col:40> col:40 'bool' depth 0 index 1 _IsConst
| | |-NonTypeTemplateParmDecl 0xd7fc88 <col:50, col:55> col:55 'bool' depth 0 index 2 _IsVol
| | |-CXXRecordDecl 0xd7fd10 <line:1662:5, col:12> col:12 struct __cv_selector
| | |-ClassTemplateSpecializationDecl 0xd37378 <line:1664:3, line:1666:36> line:1665:12 struct __cv_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0xd37948 <col:5, col:12> col:12 implicit struct __cv_selector
| | | `-TypedefDecl 0xd379e8 <line:1666:7, col:28> col:28 referenced __type 'unsigned int':'unsigned int'
| | |   `-SubstTemplateTypeParmType 0xd37670 'unsigned int' sugar
| | |     |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |     `-BuiltinType 0xbf62f0 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0xd9e2d8 <line:1664:3, line:1666:36> line:1665:12 struct __cv_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0xbf62d0 'unsigned short'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0xd9e760 <col:5, col:12> col:12 implicit struct __cv_selector
| | | `-TypedefDecl 0xd9e800 <line:1666:7, col:28> col:28 referenced __type 'unsigned short':'unsigned short'
| | |   `-SubstTemplateTypeParmType 0xd9e5e0 'unsigned short' sugar
| | |     |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |     `-BuiltinType 0xbf62d0 'unsigned short'
| | |-ClassTemplateSpecializationDecl 0xdad788 <line:1664:3, line:1666:36> line:1665:12 struct __cv_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'int'
| | | | `-BuiltinType 0xbf6250 'int'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0xdadc00 <col:5, col:12> col:12 implicit struct __cv_selector
| | | `-TypedefDecl 0xdadca0 <line:1666:7, col:28> col:28 referenced __type 'int':'int'
| | |   `-SubstTemplateTypeParmType 0xdada80 'int' sugar
| | |     |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |     `-BuiltinType 0xbf6250 'int'
| | `-ClassTemplateSpecializationDecl 0xdb38f8 <line:1664:3, line:1666:36> line:1665:12 struct __cv_selector definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-TemplateArgument type 'short'
| |   | `-BuiltinType 0xbf6230 'short'
| |   |-TemplateArgument integral 0
| |   |-TemplateArgument integral 0
| |   |-CXXRecordDecl 0xdb4028 <col:5, col:12> col:12 implicit struct __cv_selector
| |   `-TypedefDecl 0xdb40c8 <line:1666:7, col:28> col:28 referenced __type 'short':'short'
| |     `-SubstTemplateTypeParmType 0xdb3bf0 'short' sugar
| |       |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| |       | `-TemplateTypeParm 0xd80018 '_Unqualified'
| |       `-BuiltinType 0xbf6230 'short'
| |-ClassTemplatePartialSpecializationDecl 0xd80270 <line:1664:3, line:1666:36> line:1665:12 struct __cv_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd80018 <line:1664:12, col:21> col:21 referenced typename depth 0 index 0 _Unqualified
| | |-CXXRecordDecl 0xd80558 <line:1665:5, col:12> col:12 implicit struct __cv_selector
| | `-TypedefDecl 0xd805f8 <line:1666:7, col:28> col:28 __type '_Unqualified'
| |   `-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| |     `-TemplateTypeParm 0xd80018 '_Unqualified'
| |-ClassTemplatePartialSpecializationDecl 0xd808c0 <line:1668:3, line:1670:45> line:1669:12 struct __cv_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd80668 <line:1668:12, col:21> col:21 referenced typename depth 0 index 0 _Unqualified
| | |-CXXRecordDecl 0xd81038 <line:1669:5, col:12> col:12 implicit struct __cv_selector
| | `-TypedefDecl 0xd810d8 <line:1670:7, col:37> col:37 __type 'volatile _Unqualified'
| |   `-QualType 0xd806c4 'volatile _Unqualified' volatile
| |     `-TemplateTypeParmType 0xd806c0 '_Unqualified' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xd80668 '_Unqualified'
| |-ClassTemplatePartialSpecializationDecl 0xd813a0 <line:1672:3, line:1674:42> line:1673:12 struct __cv_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd81148 <line:1672:12, col:21> col:21 referenced typename depth 0 index 0 _Unqualified
| | |-CXXRecordDecl 0xd81688 <line:1673:5, col:12> col:12 implicit struct __cv_selector
| | `-TypedefDecl 0xd81728 <line:1674:7, col:34> col:34 __type 'const _Unqualified'
| |   `-QualType 0xd811a1 'const _Unqualified' const
| |     `-TemplateTypeParmType 0xd811a0 '_Unqualified' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xd81148 '_Unqualified'
| |-ClassTemplatePartialSpecializationDecl 0xd819f0 <line:1676:3, line:1678:51> line:1677:12 struct __cv_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd81798 <line:1676:12, col:21> col:21 referenced typename depth 0 index 0 _Unqualified
| | |-CXXRecordDecl 0xd81cd8 <line:1677:5, col:12> col:12 implicit struct __cv_selector
| | `-TypedefDecl 0xd81d78 <line:1678:7, col:43> col:43 __type 'const volatile _Unqualified'
| |   `-QualType 0xd817f5 'const volatile _Unqualified' const volatile
| |     `-TemplateTypeParmType 0xd817f0 '_Unqualified' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xd81798 '_Unqualified'
| |-ClassTemplateDecl 0xd823e0 <line:1680:3, line:1689:5> line:1683:11 __match_cv_qualifiers
| | |-TemplateTypeParmDecl 0xd81de8 <line:1680:12, col:21> col:21 referenced typename depth 0 index 0 _Qualified
| | |-TemplateTypeParmDecl 0xd81e68 <col:33, col:42> col:42 referenced typename depth 0 index 1 _Unqualified
| | |-NonTypeTemplateParmDecl 0xd82138 <line:1681:5, col:43> col:10 referenced 'bool' depth 0 index 2 _IsConst
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd82198 <col:21, col:43> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd820f0 <col:21, col:43> '<dependent type>' lvalue
| | |-NonTypeTemplateParmDecl 0xd822a8 <line:1682:5, col:44> col:10 referenced 'bool' depth 0 index 3 _IsVol
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd82308 <col:19, col:44> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd82260 <col:19, col:44> '<dependent type>' lvalue
| | |-CXXRecordDecl 0xd82350 <line:1683:5, line:1689:5> line:1683:11 class __match_cv_qualifiers definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0xd82700 <col:5, col:11> col:11 implicit class __match_cv_qualifiers
| | | |-TypedefDecl 0xd829b0 <line:1685:7, col:61> col:61 referenced __match '__cv_selector<_Unqualified, _IsConst, _IsVol>'
| | | | `-TemplateSpecializationType 0xd828e0 '__cv_selector<_Unqualified, _IsConst, _IsVol>' dependent __cv_selector
| | | |   |-TemplateArgument type '_Unqualified'
| | | |   | `-TemplateTypeParmType 0xd81ec0 '_Unqualified' dependent depth 0 index 1
| | | |   |   `-TemplateTypeParm 0xd81e68 '_Unqualified'
| | | |   |-TemplateArgument expr
| | | |   | `-DeclRefExpr 0xd827e8 <col:43> 'bool' NonTypeTemplateParm 0xd82138 '_IsConst' 'bool'
| | | |   `-TemplateArgument expr
| | | |     `-DeclRefExpr 0xd82850 <col:53> 'bool' NonTypeTemplateParm 0xd822a8 '_IsVol' 'bool'
| | | |-AccessSpecDecl 0xd82a08 <line:1687:5, col:11> col:5 public
| | | `-TypedefDecl 0xd82b40 <line:1688:7, col:40> col:40 __type 'typename __match::__type'
| | |   `-DependentNameType 0xd82ad0 'typename __match::__type' dependent
| | |-ClassTemplateSpecializationDecl 0xd36fb8 <line:1680:3, line:1689:5> line:1683:11 class __match_cv_qualifiers definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0xbf6750 'wchar_t'
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0xd37210 <col:5, col:11> col:11 implicit class __match_cv_qualifiers
| | | |-TypedefDecl 0xd37550 <line:1685:7, col:61> col:61 __match '__cv_selector<unsigned int, false, false>':'std::__cv_selector<unsigned int, false, false>'
| | | | `-TemplateSpecializationType 0xd374b0 '__cv_selector<unsigned int, false, false>' sugar __cv_selector
| | | |   |-TemplateArgument type 'unsigned int':'unsigned int'
| | | |   | `-SubstTemplateTypeParmType 0xd372a0 'unsigned int' sugar
| | | |   |   |-TemplateTypeParmType 0xd81ec0 '_Unqualified' dependent depth 0 index 1
| | | |   |   | `-TemplateTypeParm 0xd81e68 '_Unqualified'
| | | |   |   `-BuiltinType 0xbf62f0 'unsigned int'
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0xd37338 <col:43> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0xd372e8 <col:43> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0xd82138 <line:1681:5, col:43> col:10 referenced 'bool' depth 0 index 2 _IsConst
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0xd82198 <col:21, col:43> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0xd820f0 <col:21, col:43> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0xd372d8 <line:1685:43> 'bool' false
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0xd37358 <col:53> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0xd37318 <col:53> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0xd822a8 <line:1682:5, col:44> col:10 referenced 'bool' depth 0 index 3 _IsVol
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0xd82308 <col:19, col:44> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0xd82260 <col:19, col:44> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0xd37308 <line:1685:53> 'bool' false
| | | |   `-RecordType 0xd37490 'std::__cv_selector<unsigned int, false, false>'
| | | |     `-ClassTemplateSpecialization 0xd37378 '__cv_selector'
| | | |-AccessSpecDecl 0xd375a8 <line:1687:5, col:11> col:5 public
| | | `-TypedefDecl 0xd37ad0 <line:1688:7, col:40> col:40 referenced __type 'typename __match::__type':'unsigned int'
| | |   `-ElaboratedType 0xd37a80 'typename __match::__type' sugar
| | |     `-TypedefType 0xd37a60 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | |       |-Typedef 0xd379e8 '__type'
| | |       `-SubstTemplateTypeParmType 0xd37670 'unsigned int' sugar
| | |         |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |         | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |         `-BuiltinType 0xbf62f0 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0xd9df18 <line:1680:3, line:1689:5> line:1683:11 class __match_cv_qualifiers definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0xbf6790 'char16_t'
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0xbf62d0 'unsigned short'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0xd9e170 <col:5, col:11> col:11 implicit class __match_cv_qualifiers
| | | |-TypedefDecl 0xd9e4b0 <line:1685:7, col:61> col:61 __match '__cv_selector<unsigned short, false, false>':'std::__cv_selector<unsigned short, false, false>'
| | | | `-TemplateSpecializationType 0xd9e410 '__cv_selector<unsigned short, false, false>' sugar __cv_selector
| | | |   |-TemplateArgument type 'unsigned short':'unsigned short'
| | | |   | `-SubstTemplateTypeParmType 0xd9e200 'unsigned short' sugar
| | | |   |   |-TemplateTypeParmType 0xd81ec0 '_Unqualified' dependent depth 0 index 1
| | | |   |   | `-TemplateTypeParm 0xd81e68 '_Unqualified'
| | | |   |   `-BuiltinType 0xbf62d0 'unsigned short'
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0xd9e298 <col:43> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0xd9e248 <col:43> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0xd82138 <line:1681:5, col:43> col:10 referenced 'bool' depth 0 index 2 _IsConst
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0xd82198 <col:21, col:43> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0xd820f0 <col:21, col:43> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0xd9e238 <line:1685:43> 'bool' false
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0xd9e2b8 <col:53> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0xd9e278 <col:53> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0xd822a8 <line:1682:5, col:44> col:10 referenced 'bool' depth 0 index 3 _IsVol
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0xd82308 <col:19, col:44> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0xd82260 <col:19, col:44> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0xd9e268 <line:1685:53> 'bool' false
| | | |   `-RecordType 0xd9e3f0 'std::__cv_selector<unsigned short, false, false>'
| | | |     `-ClassTemplateSpecialization 0xd9e2d8 '__cv_selector'
| | | |-AccessSpecDecl 0xd9e508 <line:1687:5, col:11> col:5 public
| | | `-TypedefDecl 0xd9e8e0 <line:1688:7, col:40> col:40 referenced __type 'typename __match::__type':'unsigned short'
| | |   `-ElaboratedType 0xd9e890 'typename __match::__type' sugar
| | |     `-TypedefType 0xd9e870 'std::__cv_selector<unsigned short, false, false>::__type' sugar
| | |       |-Typedef 0xd9e800 '__type'
| | |       `-SubstTemplateTypeParmType 0xd9e5e0 'unsigned short' sugar
| | |         |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |         | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |         `-BuiltinType 0xbf62d0 'unsigned short'
| | |-ClassTemplateSpecializationDecl 0xda0228 <line:1680:3, line:1689:5> line:1683:11 class __match_cv_qualifiers definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'char32_t'
| | | | `-BuiltinType 0xbf67b0 'char32_t'
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0xda0480 <col:5, col:11> col:11 implicit class __match_cv_qualifiers
| | | |-TypedefDecl 0xda0660 <line:1685:7, col:61> col:61 __match '__cv_selector<unsigned int, false, false>':'std::__cv_selector<unsigned int, false, false>'
| | | | `-TemplateSpecializationType 0xda05c0 '__cv_selector<unsigned int, false, false>' sugar __cv_selector
| | | |   |-TemplateArgument type 'unsigned int':'unsigned int'
| | | |   | `-SubstTemplateTypeParmType 0xd372a0 'unsigned int' sugar
| | | |   |   |-TemplateTypeParmType 0xd81ec0 '_Unqualified' dependent depth 0 index 1
| | | |   |   | `-TemplateTypeParm 0xd81e68 '_Unqualified'
| | | |   |   `-BuiltinType 0xbf62f0 'unsigned int'
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0xda0580 <col:43> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0xda0530 <col:43> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0xd82138 <line:1681:5, col:43> col:10 referenced 'bool' depth 0 index 2 _IsConst
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0xd82198 <col:21, col:43> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0xd820f0 <col:21, col:43> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0xda0520 <line:1685:43> 'bool' false
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0xda05a0 <col:53> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0xda0560 <col:53> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0xd822a8 <line:1682:5, col:44> col:10 referenced 'bool' depth 0 index 3 _IsVol
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0xd82308 <col:19, col:44> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0xd82260 <col:19, col:44> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0xda0550 <line:1685:53> 'bool' false
| | | |   `-RecordType 0xd37490 'std::__cv_selector<unsigned int, false, false>'
| | | |     `-ClassTemplateSpecialization 0xd37378 '__cv_selector'
| | | |-AccessSpecDecl 0xda06b8 <line:1687:5, col:11> col:5 public
| | | `-TypedefDecl 0xda0790 <line:1688:7, col:40> col:40 referenced __type 'typename __match::__type':'unsigned int'
| | |   `-ElaboratedType 0xda0740 'typename __match::__type' sugar
| | |     `-TypedefType 0xd37a60 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | |       |-Typedef 0xd379e8 '__type'
| | |       `-SubstTemplateTypeParmType 0xd37670 'unsigned int' sugar
| | |         |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |         | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |         `-BuiltinType 0xbf62f0 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0xdad3c8 <line:1680:3, line:1689:5> line:1683:11 class __match_cv_qualifiers definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-TemplateArgument type 'int'
| | | | `-BuiltinType 0xbf6250 'int'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0xdad620 <col:5, col:11> col:11 implicit class __match_cv_qualifiers
| | | |-TypedefDecl 0xdad960 <line:1685:7, col:61> col:61 __match '__cv_selector<int, false, false>':'std::__cv_selector<int, false, false>'
| | | | `-TemplateSpecializationType 0xdad8c0 '__cv_selector<int, false, false>' sugar __cv_selector
| | | |   |-TemplateArgument type 'int':'int'
| | | |   | `-SubstTemplateTypeParmType 0xdad6b0 'int' sugar
| | | |   |   |-TemplateTypeParmType 0xd81ec0 '_Unqualified' dependent depth 0 index 1
| | | |   |   | `-TemplateTypeParm 0xd81e68 '_Unqualified'
| | | |   |   `-BuiltinType 0xbf6250 'int'
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0xdad748 <col:43> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0xdad6f8 <col:43> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0xd82138 <line:1681:5, col:43> col:10 referenced 'bool' depth 0 index 2 _IsConst
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0xd82198 <col:21, col:43> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0xd820f0 <col:21, col:43> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0xdad6e8 <line:1685:43> 'bool' false
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0xdad768 <col:53> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0xdad728 <col:53> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0xd822a8 <line:1682:5, col:44> col:10 referenced 'bool' depth 0 index 3 _IsVol
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0xd82308 <col:19, col:44> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0xd82260 <col:19, col:44> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0xdad718 <line:1685:53> 'bool' false
| | | |   `-RecordType 0xdad8a0 'std::__cv_selector<int, false, false>'
| | | |     `-ClassTemplateSpecialization 0xdad788 '__cv_selector'
| | | |-AccessSpecDecl 0xdad9b8 <line:1687:5, col:11> col:5 public
| | | `-TypedefDecl 0xdadd80 <line:1688:7, col:40> col:40 referenced __type 'typename __match::__type':'int'
| | |   `-ElaboratedType 0xdadd30 'typename __match::__type' sugar
| | |     `-TypedefType 0xdadd10 'std::__cv_selector<int, false, false>::__type' sugar
| | |       |-Typedef 0xdadca0 '__type'
| | |       `-SubstTemplateTypeParmType 0xdada80 'int' sugar
| | |         |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |         | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |         `-BuiltinType 0xbf6250 'int'
| | `-ClassTemplateSpecializationDecl 0xdb3538 <line:1680:3, line:1689:5> line:1683:11 class __match_cv_qualifiers definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-TemplateArgument type 'unsigned short'
| |   | `-BuiltinType 0xbf62d0 'unsigned short'
| |   |-TemplateArgument type 'short'
| |   | `-BuiltinType 0xbf6230 'short'
| |   |-TemplateArgument integral 0
| |   |-TemplateArgument integral 0
| |   |-CXXRecordDecl 0xdb3790 <col:5, col:11> col:11 implicit class __match_cv_qualifiers
| |   |-TypedefDecl 0xdb3ad0 <line:1685:7, col:61> col:61 __match '__cv_selector<short, false, false>':'std::__cv_selector<short, false, false>'
| |   | `-TemplateSpecializationType 0xdb3a30 '__cv_selector<short, false, false>' sugar __cv_selector
| |   |   |-TemplateArgument type 'short':'short'
| |   |   | `-SubstTemplateTypeParmType 0xdb3820 'short' sugar
| |   |   |   |-TemplateTypeParmType 0xd81ec0 '_Unqualified' dependent depth 0 index 1
| |   |   |   | `-TemplateTypeParm 0xd81e68 '_Unqualified'
| |   |   |   `-BuiltinType 0xbf6230 'short'
| |   |   |-TemplateArgument expr
| |   |   | `-ConstantExpr 0xdb38b8 <col:43> 'bool'
| |   |   |   |-value: Int 0
| |   |   |   `-SubstNonTypeTemplateParmExpr 0xdb3868 <col:43> 'bool'
| |   |   |     |-NonTypeTemplateParmDecl 0xd82138 <line:1681:5, col:43> col:10 referenced 'bool' depth 0 index 2 _IsConst
| |   |   |     | `-TemplateArgument expr
| |   |   |     |   `-ImplicitCastExpr 0xd82198 <col:21, col:43> 'bool' <Dependent>
| |   |   |     |     `-DependentScopeDeclRefExpr 0xd820f0 <col:21, col:43> '<dependent type>' lvalue
| |   |   |     `-CXXBoolLiteralExpr 0xdb3858 <line:1685:43> 'bool' false
| |   |   |-TemplateArgument expr
| |   |   | `-ConstantExpr 0xdb38d8 <col:53> 'bool'
| |   |   |   |-value: Int 0
| |   |   |   `-SubstNonTypeTemplateParmExpr 0xdb3898 <col:53> 'bool'
| |   |   |     |-NonTypeTemplateParmDecl 0xd822a8 <line:1682:5, col:44> col:10 referenced 'bool' depth 0 index 3 _IsVol
| |   |   |     | `-TemplateArgument expr
| |   |   |     |   `-ImplicitCastExpr 0xd82308 <col:19, col:44> 'bool' <Dependent>
| |   |   |     |     `-DependentScopeDeclRefExpr 0xd82260 <col:19, col:44> '<dependent type>' lvalue
| |   |   |     `-CXXBoolLiteralExpr 0xdb3888 <line:1685:53> 'bool' false
| |   |   `-RecordType 0xdb3a10 'std::__cv_selector<short, false, false>'
| |   |     `-ClassTemplateSpecialization 0xdb38f8 '__cv_selector'
| |   |-AccessSpecDecl 0xdb3b28 <line:1687:5, col:11> col:5 public
| |   `-TypedefDecl 0xdb41b0 <line:1688:7, col:40> col:40 referenced __type 'typename __match::__type':'short'
| |     `-ElaboratedType 0xdb4160 'typename __match::__type' sugar
| |       `-TypedefType 0xdb4140 'std::__cv_selector<short, false, false>::__type' sugar
| |         |-Typedef 0xdb40c8 '__type'
| |         `-SubstTemplateTypeParmType 0xdb3bf0 'short' sugar
| |           |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| |           | `-TemplateTypeParm 0xd80018 '_Unqualified'
| |           `-BuiltinType 0xbf6230 'short'
| |-ClassTemplateDecl 0xd82cd0 <line:1692:3, line:1694:27> line:1693:12 __make_unsigned
| | |-TemplateTypeParmDecl 0xd82bb0 <line:1692:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd82c40 <line:1693:5, line:1694:27> line:1693:12 struct __make_unsigned definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0xd82f10 <col:5, col:12> col:12 implicit struct __make_unsigned
| | | `-TypedefDecl 0xd82fb0 <line:1694:7, col:19> col:19 __type '_Tp'
| | |   `-TemplateTypeParmType 0xd82c00 '_Tp' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0xd82bb0 '_Tp'
| | |-ClassTemplateSpecialization 0xd83a00 '__make_unsigned'
| | |-ClassTemplateSpecialization 0xd83d48 '__make_unsigned'
| | |-ClassTemplateSpecialization 0xd84098 '__make_unsigned'
| | |-ClassTemplateSpecialization 0xd843e8 '__make_unsigned'
| | |-ClassTemplateSpecialization 0xd84738 '__make_unsigned'
| | |-ClassTemplateSpecialization 0xd85c98 '__make_unsigned'
| | |-ClassTemplateSpecialization 0xd85fe8 '__make_unsigned'
| | |-ClassTemplateSpecialization 0xd923f8 '__make_unsigned'
| | |-ClassTemplateSpecialization 0xd37d58 '__make_unsigned'
| | `-ClassTemplateSpecialization 0xd9eb68 '__make_unsigned'
| |-ClassTemplateSpecializationDecl 0xd83a00 <line:1696:3, line:1698:37> line:1697:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char'
| | | `-BuiltinType 0xbf61f0 'char'
| | |-CXXRecordDecl 0xd83c08 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0xd83cb0 <line:1698:7, col:29> col:29 __type 'unsigned char'
| |   `-BuiltinType 0xbf62b0 'unsigned char'
| |-ClassTemplateSpecializationDecl 0xd83d48 <line:1700:3, line:1702:37> line:1701:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'signed char'
| | | `-BuiltinType 0xbf6210 'signed char'
| | |-CXXRecordDecl 0xd83f58 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0xd84000 <line:1702:7, col:29> col:29 __type 'unsigned char'
| |   `-BuiltinType 0xbf62b0 'unsigned char'
| |-ClassTemplateSpecializationDecl 0xd84098 <line:1704:3, line:1706:38> line:1705:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'short'
| | | `-BuiltinType 0xbf6230 'short'
| | |-CXXRecordDecl 0xd842a8 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0xd84350 <line:1706:7, col:30> col:30 __type 'unsigned short'
| |   `-BuiltinType 0xbf62d0 'unsigned short'
| |-ClassTemplateSpecializationDecl 0xd843e8 <line:1708:3, line:1710:36> line:1709:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'int'
| | | `-BuiltinType 0xbf6250 'int'
| | |-CXXRecordDecl 0xd845f8 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0xd846a0 <line:1710:7, col:28> col:28 __type 'unsigned int'
| |   `-BuiltinType 0xbf62f0 'unsigned int'
| |-ClassTemplateSpecializationDecl 0xd84738 <line:1712:3, line:1714:37> line:1713:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'long'
| | | `-BuiltinType 0xbf6270 'long'
| | |-CXXRecordDecl 0xd84948 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0xd85c00 <line:1714:7, col:29> col:29 __type 'unsigned long'
| |   `-BuiltinType 0xbf6310 'unsigned long'
| |-ClassTemplateSpecializationDecl 0xd85c98 <line:1716:3, line:1718:42> line:1717:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'long long'
| | | `-BuiltinType 0xbf6290 'long long'
| | |-CXXRecordDecl 0xd85ea8 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0xd85f50 <line:1718:7, col:34> col:34 __type 'unsigned long long'
| |   `-BuiltinType 0xbf6330 'unsigned long long'
| |-ClassTemplateSpecializationDecl 0xd85fe8 <line:1721:3, line:1723:55> line:1722:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type '__int128'
| | | `-BuiltinType 0xbf6710 '__int128'
| | |-CXXRecordDecl 0xd861f8 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0xd862a0 <line:1723:7, col:47> col:47 __type 'unsigned __int128'
| |   `-BuiltinType 0xbf6730 'unsigned __int128'
| |-ClassTemplateDecl 0xd86728 <line:1742:3, line:1745:11> col:11 __make_unsigned_selector
| | |-TemplateTypeParmDecl 0xd86310 <line:1742:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xd86488 <line:1743:5, col:37> col:10 'bool' depth 0 index 1 _IsInt
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd864e8 <col:19, col:37> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd86440 <col:19, col:37> '<dependent type>' lvalue
| | |-NonTypeTemplateParmDecl 0xd865f8 <line:1744:5, col:34> col:10 'bool' depth 0 index 2 _IsEnum
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xd86658 <col:20, col:34> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xd865b0 <col:20, col:34> '<dependent type>' lvalue
| | |-CXXRecordDecl 0xd86698 <line:1745:5, col:11> col:11 class __make_unsigned_selector
| | |-ClassTemplateSpecializationDecl 0xd92708 <line:1781:3, line:1794:5> line:1782:11 class __make_unsigned_selector definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-private 'std::__make_unsigned_selector_base'
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0xbf6750 'wchar_t'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 1
| | | |-CXXRecordDecl 0xd92a90 <col:5, col:11> col:11 implicit class __make_unsigned_selector
| | | |-TypeAliasDecl 0xd92b20 <line:1786:7, line:1787:40> line:1786:13 _UInts '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | `-TemplateSpecializationType 0xd8d130 '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>' sugar _List
| | | |   |-TemplateArgument type 'unsigned char'
| | | |   | `-BuiltinType 0xbf62b0 'unsigned char'
| | | |   |-TemplateArgument type 'unsigned short'
| | | |   | `-BuiltinType 0xbf62d0 'unsigned short'
| | | |   |-TemplateArgument type 'unsigned int'
| | | |   | `-BuiltinType 0xbf62f0 'unsigned int'
| | | |   |-TemplateArgument type 'unsigned long'
| | | |   | `-BuiltinType 0xbf6310 'unsigned long'
| | | |   |-TemplateArgument type 'unsigned long long'
| | | |   | `-BuiltinType 0xbf6330 'unsigned long long'
| | | |   `-RecordType 0xd8d110 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | |     `-ClassTemplateSpecialization 0xd8d028 '_List'
| | | |-TypeAliasDecl 0xd363c0 <line:1789:7, col:71> col:13 __unsigned_type 'typename __select<sizeof(wchar_t), _UInts>::__type':'unsigned int'
| | | | `-ElaboratedType 0xd36370 'typename __select<sizeof(wchar_t), _UInts>::__type' sugar
| | | |   `-TypedefType 0xd36350 'std::__make_unsigned_selector_base::__select<4, std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>, true>::__type' sugar
| | | |     |-TypeAlias 0xd36128 '__type'
| | | |     `-SubstTemplateTypeParmType 0xd35dc0 'unsigned int' sugar
| | | |       |-TemplateTypeParmType 0xd8b050 '_Uint' dependent depth 0 index 1
| | | |       | `-TemplateTypeParm 0xd8aff8 '_Uint'
| | | |       `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-AccessSpecDecl 0xd36420 <line:1791:5, col:11> col:5 public
| | | `-TypeAliasDecl 0xd37bb0 <line:1792:7, line:1793:58> line:1792:13 referenced __type 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type':'unsigned int'
| | |   `-ElaboratedType 0xd37b60 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type' sugar
| | |     `-TypedefType 0xd37b40 'std::__match_cv_qualifiers<wchar_t, unsigned int, false, false>::__type' sugar
| | |       |-Typedef 0xd37ad0 '__type'
| | |       `-ElaboratedType 0xd37a80 'typename __match::__type' sugar
| | |         `-TypedefType 0xd37a60 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | |           |-Typedef 0xd379e8 '__type'
| | |           `-SubstTemplateTypeParmType 0xd37670 'unsigned int' sugar
| | |             |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |             `-BuiltinType 0xbf62f0 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0xd38068 <line:1781:3, line:1794:5> line:1782:11 class __make_unsigned_selector definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-private 'std::__make_unsigned_selector_base'
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0xbf6790 'char16_t'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 1
| | | |-CXXRecordDecl 0xd383f0 <col:5, col:11> col:11 implicit class __make_unsigned_selector
| | | |-TypeAliasDecl 0xd38480 <line:1786:7, line:1787:40> line:1786:13 _UInts '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | `-TemplateSpecializationType 0xd8d130 '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>' sugar _List
| | | |   |-TemplateArgument type 'unsigned char'
| | | |   | `-BuiltinType 0xbf62b0 'unsigned char'
| | | |   |-TemplateArgument type 'unsigned short'
| | | |   | `-BuiltinType 0xbf62d0 'unsigned short'
| | | |   |-TemplateArgument type 'unsigned int'
| | | |   | `-BuiltinType 0xbf62f0 'unsigned int'
| | | |   |-TemplateArgument type 'unsigned long'
| | | |   | `-BuiltinType 0xbf6310 'unsigned long'
| | | |   |-TemplateArgument type 'unsigned long long'
| | | |   | `-BuiltinType 0xbf6330 'unsigned long long'
| | | |   `-RecordType 0xd8d110 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | |     `-ClassTemplateSpecialization 0xd8d028 '_List'
| | | |-TypeAliasDecl 0xd9d6c0 <line:1789:7, col:71> col:13 __unsigned_type 'typename __select<sizeof(char16_t), _UInts>::__type':'unsigned short'
| | | | `-ElaboratedType 0xd9d670 'typename __select<sizeof(char16_t), _UInts>::__type' sugar
| | | |   `-TypedefType 0xd9d650 'std::__make_unsigned_selector_base::__select<2, std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>, true>::__type' sugar
| | | |     |-TypeAlias 0xd9d4e0 '__type'
| | | |     `-SubstTemplateTypeParmType 0xd9d140 'unsigned short' sugar
| | | |       |-TemplateTypeParmType 0xd8b050 '_Uint' dependent depth 0 index 1
| | | |       | `-TemplateTypeParm 0xd8aff8 '_Uint'
| | | |       `-BuiltinType 0xbf62d0 'unsigned short'
| | | |-AccessSpecDecl 0xd9d720 <line:1791:5, col:11> col:5 public
| | | `-TypeAliasDecl 0xd9e9c0 <line:1792:7, line:1793:58> line:1792:13 referenced __type 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type':'unsigned short'
| | |   `-ElaboratedType 0xd9e970 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type' sugar
| | |     `-TypedefType 0xd9e950 'std::__match_cv_qualifiers<char16_t, unsigned short, false, false>::__type' sugar
| | |       |-Typedef 0xd9e8e0 '__type'
| | |       `-ElaboratedType 0xd9e890 'typename __match::__type' sugar
| | |         `-TypedefType 0xd9e870 'std::__cv_selector<unsigned short, false, false>::__type' sugar
| | |           |-Typedef 0xd9e800 '__type'
| | |           `-SubstTemplateTypeParmType 0xd9e5e0 'unsigned short' sugar
| | |             |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |             `-BuiltinType 0xbf62d0 'unsigned short'
| | |-ClassTemplateSpecializationDecl 0xd9ee78 <line:1781:3, line:1794:5> line:1782:11 class __make_unsigned_selector definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-private 'std::__make_unsigned_selector_base'
| | | |-TemplateArgument type 'char32_t'
| | | | `-BuiltinType 0xbf67b0 'char32_t'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 1
| | | |-CXXRecordDecl 0xd9f200 <col:5, col:11> col:11 implicit class __make_unsigned_selector
| | | |-TypeAliasDecl 0xd9f290 <line:1786:7, line:1787:40> line:1786:13 _UInts '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | `-TemplateSpecializationType 0xd8d130 '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>' sugar _List
| | | |   |-TemplateArgument type 'unsigned char'
| | | |   | `-BuiltinType 0xbf62b0 'unsigned char'
| | | |   |-TemplateArgument type 'unsigned short'
| | | |   | `-BuiltinType 0xbf62d0 'unsigned short'
| | | |   |-TemplateArgument type 'unsigned int'
| | | |   | `-BuiltinType 0xbf62f0 'unsigned int'
| | | |   |-TemplateArgument type 'unsigned long'
| | | |   | `-BuiltinType 0xbf6310 'unsigned long'
| | | |   |-TemplateArgument type 'unsigned long long'
| | | |   | `-BuiltinType 0xbf6330 'unsigned long long'
| | | |   `-RecordType 0xd8d110 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | |     `-ClassTemplateSpecialization 0xd8d028 '_List'
| | | |-TypeAliasDecl 0xd9f9d0 <line:1789:7, col:71> col:13 __unsigned_type 'typename __select<sizeof(char32_t), _UInts>::__type':'unsigned int'
| | | | `-ElaboratedType 0xd9f530 'typename __select<sizeof(char32_t), _UInts>::__type' sugar
| | | |   `-TypedefType 0xd36350 'std::__make_unsigned_selector_base::__select<4, std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>, true>::__type' sugar
| | | |     |-TypeAlias 0xd36128 '__type'
| | | |     `-SubstTemplateTypeParmType 0xd35dc0 'unsigned int' sugar
| | | |       |-TemplateTypeParmType 0xd8b050 '_Uint' dependent depth 0 index 1
| | | |       | `-TemplateTypeParm 0xd8aff8 '_Uint'
| | | |       `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-AccessSpecDecl 0xd9fa30 <line:1791:5, col:11> col:5 public
| | | `-TypeAliasDecl 0xda0870 <line:1792:7, line:1793:58> line:1792:13 referenced __type 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type':'unsigned int'
| | |   `-ElaboratedType 0xda0820 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type' sugar
| | |     `-TypedefType 0xda0800 'std::__match_cv_qualifiers<char32_t, unsigned int, false, false>::__type' sugar
| | |       |-Typedef 0xda0790 '__type'
| | |       `-ElaboratedType 0xda0740 'typename __match::__type' sugar
| | |         `-TypedefType 0xd37a60 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | |           |-Typedef 0xd379e8 '__type'
| | |           `-SubstTemplateTypeParmType 0xd37670 'unsigned int' sugar
| | |             |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |             `-BuiltinType 0xbf62f0 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0xdaa780 <line:1747:3, line:1756:5> line:1748:11 class __make_unsigned_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0xbf6750 'wchar_t'
| | | |-TemplateArgument integral 1
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0xdaaa90 <col:5, col:11> col:11 implicit class __make_unsigned_selector
| | | |-TypeAliasDecl 0xdaadf0 <line:1750:7, line:1751:50> line:1750:13 __unsigned_type 'typename __make_unsigned<__remove_cv_t<wchar_t>>::__type':'unsigned int'
| | | | `-ElaboratedType 0xdaada0 'typename __make_unsigned<__remove_cv_t<wchar_t>>::__type' sugar
| | | |   `-TypedefType 0xdaad80 'std::__make_unsigned<wchar_t>::__type' sugar
| | | |     |-TypeAlias 0xd37cc0 '__type'
| | | |     `-ElaboratedType 0xd37c50 'typename __make_unsigned_selector<wchar_t, false, true>::__type' sugar
| | | |       `-TypedefType 0xd37c30 'std::__make_unsigned_selector<wchar_t, false, true>::__type' sugar
| | | |         |-TypeAlias 0xd37bb0 '__type'
| | | |         `-ElaboratedType 0xd37b60 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type' sugar
| | | |           `-TypedefType 0xd37b40 'std::__match_cv_qualifiers<wchar_t, unsigned int, false, false>::__type' sugar
| | | |             |-Typedef 0xd37ad0 '__type'
| | | |             `-ElaboratedType 0xd37a80 'typename __match::__type' sugar
| | | |               `-TypedefType 0xd37a60 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | | |                 |-Typedef 0xd379e8 '__type'
| | | |                 `-SubstTemplateTypeParmType 0xd37670 'unsigned int' sugar
| | | |                   |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | | |                   | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | | |                   `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-AccessSpecDecl 0xdaae50 <line:1753:5, col:11> col:5 public
| | | `-TypeAliasDecl 0xdab220 <line:1754:7, line:1755:58> line:1754:13 referenced __type 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type':'unsigned int'
| | |   `-ElaboratedType 0xdab1d0 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type' sugar
| | |     `-TypedefType 0xd37b40 'std::__match_cv_qualifiers<wchar_t, unsigned int, false, false>::__type' sugar
| | |       |-Typedef 0xd37ad0 '__type'
| | |       `-ElaboratedType 0xd37a80 'typename __match::__type' sugar
| | |         `-TypedefType 0xd37a60 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | |           |-Typedef 0xd379e8 '__type'
| | |           `-SubstTemplateTypeParmType 0xd37670 'unsigned int' sugar
| | |             |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |             `-BuiltinType 0xbf62f0 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0xdb0570 <line:1747:3, line:1756:5> line:1748:11 class __make_unsigned_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0xbf6790 'char16_t'
| | | |-TemplateArgument integral 1
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0xdb0880 <col:5, col:11> col:11 implicit class __make_unsigned_selector
| | | |-TypeAliasDecl 0xdb0be0 <line:1750:7, line:1751:50> line:1750:13 __unsigned_type 'typename __make_unsigned<__remove_cv_t<char16_t>>::__type':'unsigned short'
| | | | `-ElaboratedType 0xdb0b90 'typename __make_unsigned<__remove_cv_t<char16_t>>::__type' sugar
| | | |   `-TypedefType 0xdb0b70 'std::__make_unsigned<char16_t>::__type' sugar
| | | |     |-TypeAlias 0xd9ead0 '__type'
| | | |     `-ElaboratedType 0xd9ea60 'typename __make_unsigned_selector<char16_t, false, true>::__type' sugar
| | | |       `-TypedefType 0xd9ea40 'std::__make_unsigned_selector<char16_t, false, true>::__type' sugar
| | | |         |-TypeAlias 0xd9e9c0 '__type'
| | | |         `-ElaboratedType 0xd9e970 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type' sugar
| | | |           `-TypedefType 0xd9e950 'std::__match_cv_qualifiers<char16_t, unsigned short, false, false>::__type' sugar
| | | |             |-Typedef 0xd9e8e0 '__type'
| | | |             `-ElaboratedType 0xd9e890 'typename __match::__type' sugar
| | | |               `-TypedefType 0xd9e870 'std::__cv_selector<unsigned short, false, false>::__type' sugar
| | | |                 |-Typedef 0xd9e800 '__type'
| | | |                 `-SubstTemplateTypeParmType 0xd9e5e0 'unsigned short' sugar
| | | |                   |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | | |                   | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | | |                   `-BuiltinType 0xbf62d0 'unsigned short'
| | | |-AccessSpecDecl 0xdb0c40 <line:1753:5, col:11> col:5 public
| | | `-TypeAliasDecl 0xdb1010 <line:1754:7, line:1755:58> line:1754:13 referenced __type 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type':'unsigned short'
| | |   `-ElaboratedType 0xdb0fc0 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type' sugar
| | |     `-TypedefType 0xd9e950 'std::__match_cv_qualifiers<char16_t, unsigned short, false, false>::__type' sugar
| | |       |-Typedef 0xd9e8e0 '__type'
| | |       `-ElaboratedType 0xd9e890 'typename __match::__type' sugar
| | |         `-TypedefType 0xd9e870 'std::__cv_selector<unsigned short, false, false>::__type' sugar
| | |           |-Typedef 0xd9e800 '__type'
| | |           `-SubstTemplateTypeParmType 0xd9e5e0 'unsigned short' sugar
| | |             |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |             `-BuiltinType 0xbf62d0 'unsigned short'
| | `-ClassTemplateSpecializationDecl 0xdb5ad0 <line:1747:3, line:1756:5> line:1748:11 class __make_unsigned_selector definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-TemplateArgument type 'char32_t'
| |   | `-BuiltinType 0xbf67b0 'char32_t'
| |   |-TemplateArgument integral 1
| |   |-TemplateArgument integral 0
| |   |-CXXRecordDecl 0xdb5de0 <col:5, col:11> col:11 implicit class __make_unsigned_selector
| |   |-TypeAliasDecl 0xdb6f60 <line:1750:7, line:1751:50> line:1750:13 __unsigned_type 'typename __make_unsigned<__remove_cv_t<char32_t>>::__type':'unsigned int'
| |   | `-ElaboratedType 0xdb6f10 'typename __make_unsigned<__remove_cv_t<char32_t>>::__type' sugar
| |   |   `-TypedefType 0xdb6ef0 'std::__make_unsigned<char32_t>::__type' sugar
| |   |     |-TypeAlias 0xda1260 '__type'
| |   |     `-ElaboratedType 0xda0910 'typename __make_unsigned_selector<char32_t, false, true>::__type' sugar
| |   |       `-TypedefType 0xda08f0 'std::__make_unsigned_selector<char32_t, false, true>::__type' sugar
| |   |         |-TypeAlias 0xda0870 '__type'
| |   |         `-ElaboratedType 0xda0820 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type' sugar
| |   |           `-TypedefType 0xda0800 'std::__match_cv_qualifiers<char32_t, unsigned int, false, false>::__type' sugar
| |   |             |-Typedef 0xda0790 '__type'
| |   |             `-ElaboratedType 0xda0740 'typename __match::__type' sugar
| |   |               `-TypedefType 0xd37a60 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| |   |                 |-Typedef 0xd379e8 '__type'
| |   |                 `-SubstTemplateTypeParmType 0xd37670 'unsigned int' sugar
| |   |                   |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| |   |                   | `-TemplateTypeParm 0xd80018 '_Unqualified'
| |   |                   `-BuiltinType 0xbf62f0 'unsigned int'
| |   |-AccessSpecDecl 0xdb6fc0 <line:1753:5, col:11> col:5 public
| |   `-TypeAliasDecl 0xdb7390 <line:1754:7, line:1755:58> line:1754:13 referenced __type 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type':'unsigned int'
| |     `-ElaboratedType 0xdb7340 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type' sugar
| |       `-TypedefType 0xda0800 'std::__match_cv_qualifiers<char32_t, unsigned int, false, false>::__type' sugar
| |         |-Typedef 0xda0790 '__type'
| |         `-ElaboratedType 0xda0740 'typename __match::__type' sugar
| |           `-TypedefType 0xd37a60 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| |             |-Typedef 0xd379e8 '__type'
| |             `-SubstTemplateTypeParmType 0xd37670 'unsigned int' sugar
| |               |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| |               | `-TemplateTypeParm 0xd80018 '_Unqualified'
| |               `-BuiltinType 0xbf62f0 'unsigned int'
| |-ClassTemplatePartialSpecializationDecl 0xd870f0 <line:1747:3, line:1756:5> line:1748:11 class __make_unsigned_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xd869a8 <line:1747:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd873d8 <line:1748:5, col:11> col:11 implicit class __make_unsigned_selector
| | |-TypeAliasDecl 0xd877e0 <line:1750:7, line:1751:50> line:1750:13 referenced __unsigned_type 'typename __make_unsigned<__remove_cv_t<_Tp>>::__type'
| | | `-DependentNameType 0xd87770 'typename __make_unsigned<__remove_cv_t<_Tp>>::__type' dependent
| | |-AccessSpecDecl 0xd87840 <line:1753:5, col:11> col:5 public
| | `-TypeAliasDecl 0xd87ce0 <line:1754:7, line:1755:58> line:1754:13 __type 'typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type'
| |   `-DependentNameType 0xd87c70 'typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type' dependent
| |-CXXRecordDecl 0xd87d58 <line:1758:3, line:1778:3> line:1758:9 referenced class __make_unsigned_selector_base definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xd87e78 <col:3, col:9> col:9 implicit class __make_unsigned_selector_base
| | |-AccessSpecDecl 0xd87f08 <line:1760:3, col:12> col:3 protected
| | |-ClassTemplateDecl 0xd88050 <line:1761:5, col:42> col:34 _List
| | | |-TemplateTypeParmDecl 0xd87f30 <col:14> col:25 typename depth 0 index 0 ...
| | | |-CXXRecordDecl 0xd87fc0 <col:27, col:42> col:34 struct _List definition
| | | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | `-CXXRecordDecl 0xd89830 <col:27, col:34> col:34 implicit struct _List
| | | |-ClassTemplateSpecializationDecl 0xd8d028 <line:1763:5, line:1765:55> line:1764:14 struct _List definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '_List<unsigned short, unsigned int, unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | |-TemplateArgument pack
| | | | | |-TemplateArgument type 'unsigned char'
| | | | | | `-BuiltinType 0xbf62b0 'unsigned char'
| | | | | |-TemplateArgument type 'unsigned short'
| | | | | | `-BuiltinType 0xbf62d0 'unsigned short'
| | | | | |-TemplateArgument type 'unsigned int'
| | | | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | | | |-TemplateArgument type 'unsigned long'
| | | | | | `-BuiltinType 0xbf6310 'unsigned long'
| | | | | `-TemplateArgument type 'unsigned long long'
| | | | |   `-BuiltinType 0xbf6330 'unsigned long long'
| | | | |-CXXRecordDecl 0xd8f1c0 <col:7, col:14> col:14 implicit struct _List
| | | | `-VarDecl 0xd8f250 <line:1765:9, col:52> col:33 referenced __size 'const std::size_t':'const unsigned long' static constexpr cinit
| | | |   |-value: Int 1
| | | |   `-UnaryExprOrTypeTraitExpr 0xd8f2d8 <col:42, col:52> 'unsigned long' sizeof 'unsigned char':'unsigned char'
| | | |-ClassTemplateSpecializationDecl 0xd8d8c8 <line:1763:5, line:1765:55> line:1764:14 struct _List definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '_List<unsigned int, unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>'
| | | | |-TemplateArgument pack
| | | | | |-TemplateArgument type 'unsigned short'
| | | | | | `-BuiltinType 0xbf62d0 'unsigned short'
| | | | | |-TemplateArgument type 'unsigned int'
| | | | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | | | |-TemplateArgument type 'unsigned long'
| | | | | | `-BuiltinType 0xbf6310 'unsigned long'
| | | | | `-TemplateArgument type 'unsigned long long'
| | | | |   `-BuiltinType 0xbf6330 'unsigned long long'
| | | | |-CXXRecordDecl 0xd8efe8 <col:7, col:14> col:14 implicit struct _List
| | | | `-VarDecl 0xd8f078 <line:1765:9, col:52> col:33 referenced __size 'const std::size_t':'const unsigned long' static constexpr cinit
| | | |   |-value: Int 2
| | | |   `-UnaryExprOrTypeTraitExpr 0xd8f100 <col:42, col:52> 'unsigned long' sizeof 'unsigned short':'unsigned short'
| | | |-ClassTemplateSpecializationDecl 0xd8dd98 <line:1763:5, line:1765:55> line:1764:14 struct _List definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '_List<unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned long, unsigned long long>'
| | | | |-TemplateArgument pack
| | | | | |-TemplateArgument type 'unsigned int'
| | | | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | | | |-TemplateArgument type 'unsigned long'
| | | | | | `-BuiltinType 0xbf6310 'unsigned long'
| | | | | `-TemplateArgument type 'unsigned long long'
| | | | |   `-BuiltinType 0xbf6330 'unsigned long long'
| | | | |-CXXRecordDecl 0xd8ee10 <col:7, col:14> col:14 implicit struct _List
| | | | `-VarDecl 0xd8eea0 <line:1765:9, col:52> col:33 referenced __size 'const std::size_t':'const unsigned long' static constexpr cinit
| | | |   |-value: Int 4
| | | |   `-UnaryExprOrTypeTraitExpr 0xd8ef28 <col:42, col:52> 'unsigned long' sizeof 'unsigned int':'unsigned int'
| | | |-ClassTemplateSpecializationDecl 0xd8e1b8 <line:1763:5, line:1765:55> line:1764:14 struct _List definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '_List<unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned long long>'
| | | | |-TemplateArgument pack
| | | | | |-TemplateArgument type 'unsigned long'
| | | | | | `-BuiltinType 0xbf6310 'unsigned long'
| | | | | `-TemplateArgument type 'unsigned long long'
| | | | |   `-BuiltinType 0xbf6330 'unsigned long long'
| | | | |-CXXRecordDecl 0xd8ec38 <col:7, col:14> col:14 implicit struct _List
| | | | `-VarDecl 0xd8ecc8 <line:1765:9, col:52> col:33 __size 'const std::size_t':'const unsigned long' static constexpr cinit
| | | |   |-value: Int 8
| | | |   `-UnaryExprOrTypeTraitExpr 0xd8ed50 <col:42, col:52> 'unsigned long' sizeof 'unsigned long':'unsigned long'
| | | |-ClassTemplateSpecializationDecl 0xd8e530 <line:1763:5, line:1765:55> line:1764:14 struct _List definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '_List<>':'std::__make_unsigned_selector_base::_List<>'
| | | | |-TemplateArgument pack
| | | | | `-TemplateArgument type 'unsigned long long'
| | | | |   `-BuiltinType 0xbf6330 'unsigned long long'
| | | | |-CXXRecordDecl 0xd8ea60 <col:7, col:14> col:14 implicit struct _List
| | | | `-VarDecl 0xd8eaf0 <line:1765:9, col:52> col:33 __size 'const std::size_t':'const unsigned long' static constexpr cinit
| | | |   |-value: Int 8
| | | |   `-UnaryExprOrTypeTraitExpr 0xd8eb78 <col:42, col:52> 'unsigned long' sizeof 'unsigned long long':'unsigned long long'
| | | `-ClassTemplateSpecializationDecl 0xd8e7d8 <line:1761:5, col:42> col:34 struct _List definition
| | |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-TemplateArgument pack
| | |   `-CXXRecordDecl 0xd8e988 <col:27, col:34> col:34 implicit struct _List
| | |-ClassTemplatePartialSpecializationDecl 0xd89b90 <line:1763:5, line:1765:55> line:1764:14 struct _List definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '_List<_Up...>'
| | | |-TemplateArgument pack
| | | | |-TemplateArgument type 'type-parameter-0-0'
| | | | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | | | `-TemplateArgument type 'type-parameter-0-1...'
| | | |   `-PackExpansionType 0xd08c60 'type-parameter-0-1...' dependent
| | | |     `-TemplateTypeParmType 0xd14700 'type-parameter-0-1' dependent contains_unexpanded_pack depth 0 index 1 pack
| | | |-TemplateTypeParmDecl 0xd898d8 <line:1763:14, col:23> col:23 referenced typename depth 0 index 0 _Tp
| | | |-TemplateTypeParmDecl 0xd89958 <col:28, col:40> col:40 referenced typename depth 0 index 1 ... _Up
| | | |-CXXRecordDecl 0xd89f60 <line:1764:7, col:14> col:14 implicit struct _List
| | | `-VarDecl 0xd8a000 <line:1765:9, col:52> col:33 __size 'const std::size_t':'const unsigned long' static constexpr cinit
| | |   `-UnaryExprOrTypeTraitExpr 0xd8a078 <col:42, col:52> 'unsigned long' sizeof '_Tp'
| | |-ClassTemplateDecl 0xd8a3c0 <line:1767:5, line:1768:14> col:14 __select
| | | |-NonTypeTemplateParmDecl 0xd8a0c0 <line:1767:14, col:21> col:21 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Sz
| | | |-TemplateTypeParmDecl 0xd8a120 <col:26, col:35> col:35 typename depth 0 index 1 _Tp
| | | |-NonTypeTemplateParmDecl 0xd8a290 <col:40, col:66> col:45 'bool' depth 0 index 2
| | | | `-TemplateArgument expr
| | | |   `-ImplicitCastExpr 0xd8a2f0 <col:47, col:66> 'bool' <Dependent>
| | | |     `-ParenExpr 0xd8a260 <col:47, col:66> '<dependent type>'
| | | |       `-BinaryOperator 0xd8a240 <col:48, col:60> '<dependent type>' '<='
| | | |         |-DeclRefExpr 0xd8a198 <col:48> 'std::size_t':'unsigned long' NonTypeTemplateParm 0xd8a0c0 '_Sz' 'std::size_t':'unsigned long'
| | | |         `-DependentScopeDeclRefExpr 0xd8a208 <col:55, col:60> '<dependent type>' lvalue
| | | |-CXXRecordDecl 0xd8a330 <line:1768:7, col:14> col:14 struct __select
| | | |-ClassTemplateSpecializationDecl 0xd935a0 <line:1774:5, line:1777:9> line:1775:14 struct __select definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '__select<4UL, _List<unsigned short, unsigned int, unsigned long, unsigned long long>>':'std::__make_unsigned_selector_base::__select<4, std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>, false>'
| | | | |-TemplateArgument integral 4
| | | | |-TemplateArgument type 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | | `-RecordType 0xd8d110 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | |   `-ClassTemplateSpecialization 0xd8d028 '_List'
| | | | |-TemplateArgument integral 0
| | | | `-CXXRecordDecl 0xd362a8 <col:7, col:14> col:14 implicit struct __select
| | | |-ClassTemplateSpecializationDecl 0xd940c8 <line:1774:5, line:1777:9> line:1775:14 struct __select definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '__select<4UL, _List<unsigned int, unsigned long, unsigned long long>>':'std::__make_unsigned_selector_base::__select<4, std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>, true>'
| | | | |-TemplateArgument integral 4
| | | | |-TemplateArgument type 'std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | | `-RecordType 0xd8d9b0 'std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | |   `-ClassTemplateSpecialization 0xd8d8c8 '_List'
| | | | |-TemplateArgument integral 0
| | | | `-CXXRecordDecl 0xd361d0 <col:7, col:14> col:14 implicit struct __select
| | | |-ClassTemplateSpecializationDecl 0xd35a88 <line:1770:5, line:1772:31> line:1771:14 struct __select definition
| | | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-TemplateArgument integral 4
| | | | |-TemplateArgument type 'std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>'
| | | | | `-RecordType 0xd8de80 'std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>'
| | | | |   `-ClassTemplateSpecialization 0xd8dd98 '_List'
| | | | |-TemplateArgument integral 1
| | | | |-CXXRecordDecl 0xd36088 <col:7, col:14> col:14 implicit struct __select
| | | | `-TypeAliasDecl 0xd36128 <line:1772:9, col:24> col:15 referenced __type 'unsigned int':'unsigned int'
| | | |   `-SubstTemplateTypeParmType 0xd35dc0 'unsigned int' sugar
| | | |     |-TemplateTypeParmType 0xd8b050 '_Uint' dependent depth 0 index 1
| | | |     | `-TemplateTypeParm 0xd8aff8 '_Uint'
| | | |     `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-ClassTemplateSpecializationDecl 0xd38668 <line:1774:5, line:1777:9> line:1775:14 struct __select definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '__select<2UL, _List<unsigned short, unsigned int, unsigned long, unsigned long long>>':'std::__make_unsigned_selector_base::__select<2, std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>, true>'
| | | | |-TemplateArgument integral 2
| | | | |-TemplateArgument type 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | | `-RecordType 0xd8d110 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | |   `-ClassTemplateSpecialization 0xd8d028 '_List'
| | | | |-TemplateArgument integral 0
| | | | `-CXXRecordDecl 0xd9d5a0 <col:7, col:14> col:14 implicit struct __select
| | | `-ClassTemplateSpecializationDecl 0xd9cdb8 <line:1770:5, line:1772:31> line:1771:14 struct __select definition
| | |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-TemplateArgument integral 2
| | |   |-TemplateArgument type 'std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>'
| | |   | `-RecordType 0xd8d9b0 'std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>'
| | |   |   `-ClassTemplateSpecialization 0xd8d8c8 '_List'
| | |   |-TemplateArgument integral 1
| | |   |-CXXRecordDecl 0xd9d440 <col:7, col:14> col:14 implicit struct __select
| | |   `-TypeAliasDecl 0xd9d4e0 <line:1772:9, col:24> col:15 referenced __type 'unsigned short':'unsigned short'
| | |     `-SubstTemplateTypeParmType 0xd9d140 'unsigned short' sugar
| | |       |-TemplateTypeParmType 0xd8b050 '_Uint' dependent depth 0 index 1
| | |       | `-TemplateTypeParm 0xd8aff8 '_Uint'
| | |       `-BuiltinType 0xbf62d0 'unsigned short'
| | |-ClassTemplatePartialSpecializationDecl 0xd8b4d0 <line:1770:5, line:1772:31> line:1771:14 struct __select definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0xd8b150 <col:23> 'std::size_t':'unsigned long' NonTypeTemplateParm 0xd8af98 '_Sz' 'std::size_t':'unsigned long'
| | | |-TemplateArgument type '_List<type-parameter-0-1, type-parameter-0-2...>'
| | | | `-TemplateSpecializationType 0xd8b260 '_List<type-parameter-0-1, type-parameter-0-2...>' dependent _List
| | | |   `-TemplateArgument pack
| | | |     |-TemplateArgument type 'type-parameter-0-1'
| | | |     | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | | |     `-TemplateArgument type 'type-parameter-0-2...'
| | | |       `-PackExpansionType 0xd8b190 'type-parameter-0-2...' dependent
| | | |         `-TemplateTypeParmType 0xd8b0d0 'type-parameter-0-2' dependent contains_unexpanded_pack depth 0 index 2 pack
| | | |-TemplateArgument integral 1
| | | |-NonTypeTemplateParmDecl 0xd8af98 <line:1770:14, col:21> col:21 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Sz
| | | |-TemplateTypeParmDecl 0xd8aff8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Uint
| | | |-TemplateTypeParmDecl 0xd8b078 <col:42, col:54> col:54 referenced typename depth 0 index 2 ... _UInts
| | | |-CXXRecordDecl 0xd8b798 <line:1771:7, col:14> col:14 implicit struct __select
| | | `-TypeAliasDecl 0xd8b838 <line:1772:9, col:24> col:15 __type '_Uint'
| | |   `-TemplateTypeParmType 0xd8b050 '_Uint' dependent depth 0 index 1
| | |     `-TemplateTypeParm 0xd8aff8 '_Uint'
| | `-ClassTemplatePartialSpecializationDecl 0xd8bd50 <line:1774:5, line:1777:9> line:1775:14 struct __select definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__select<_Sz, _List<_UInts...>>'
| |   |-TemplateArgument expr
| |   | `-DeclRefExpr 0xd8ba40 <col:23> 'std::size_t':'unsigned long' NonTypeTemplateParm 0xd8b8c0 '_Sz' 'std::size_t':'unsigned long'
| |   |-TemplateArgument type '_List<type-parameter-0-1, type-parameter-0-2...>'
| |   | `-TemplateSpecializationType 0xd8b260 '_List<type-parameter-0-1, type-parameter-0-2...>' dependent _List
| |   |   `-TemplateArgument pack
| |   |     |-TemplateArgument type 'type-parameter-0-1'
| |   |     | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| |   |     `-TemplateArgument type 'type-parameter-0-2...'
| |   |       `-PackExpansionType 0xd8b190 'type-parameter-0-2...' dependent
| |   |         `-TemplateTypeParmType 0xd8b0d0 'type-parameter-0-2' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |-TemplateArgument integral 0
| |   |-NonTypeTemplateParmDecl 0xd8b8c0 <line:1774:14, col:21> col:21 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Sz
| |   |-TemplateTypeParmDecl 0xd8b920 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Uint
| |   |-TemplateTypeParmDecl 0xd8b998 <col:42, col:54> col:54 referenced typename depth 0 index 2 ... _UInts
| |   `-CXXRecordDecl 0xd8c870 <line:1775:7, col:14> col:14 implicit struct __select
| |-ClassTemplatePartialSpecializationDecl 0xd8cb80 <line:1781:3, line:1794:5> line:1782:11 class __make_unsigned_selector definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-private 'std::__make_unsigned_selector_base'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xd8c930 <line:1781:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xd8cea8 <line:1782:5, col:11> col:11 implicit class __make_unsigned_selector
| | |-TypeAliasDecl 0xd8d250 <line:1786:7, line:1787:40> line:1786:13 referenced _UInts '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | `-TemplateSpecializationType 0xd8d130 '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>' sugar _List
| | |   |-TemplateArgument type 'unsigned char'
| | |   | `-BuiltinType 0xbf62b0 'unsigned char'
| | |   |-TemplateArgument type 'unsigned short'
| | |   | `-BuiltinType 0xbf62d0 'unsigned short'
| | |   |-TemplateArgument type 'unsigned int'
| | |   | `-BuiltinType 0xbf62f0 'unsigned int'
| | |   |-TemplateArgument type 'unsigned long'
| | |   | `-BuiltinType 0xbf6310 'unsigned long'
| | |   |-TemplateArgument type 'unsigned long long'
| | |   | `-BuiltinType 0xbf6330 'unsigned long long'
| | |   `-RecordType 0xd8d110 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | |     `-ClassTemplateSpecialization 0xd8d028 '_List'
| | |-TypeAliasDecl 0xd91ec0 <line:1789:7, col:71> col:13 referenced __unsigned_type 'typename __select<sizeof(_Tp), _UInts>::__type'
| | | `-DependentNameType 0xd91e50 'typename __select<sizeof(_Tp), _UInts>::__type' dependent
| | |-AccessSpecDecl 0xd91f20 <line:1791:5, col:11> col:5 public
| | `-TypeAliasDecl 0xd92360 <line:1792:7, line:1793:58> line:1792:13 __type 'typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type'
| |   `-DependentNameType 0xd922f0 'typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type' dependent
| |-ClassTemplateSpecializationDecl 0xd923f8 <line:1801:3, line:1806:5> line:1802:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'wchar_t'
| | | `-BuiltinType 0xbf6750 'wchar_t'
| | |-CXXRecordDecl 0xd92608 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypeAliasDecl 0xd37cc0 <line:1804:7, line:1805:61> line:1804:13 referenced __type 'typename __make_unsigned_selector<wchar_t, false, true>::__type':'unsigned int'
| |   `-ElaboratedType 0xd37c50 'typename __make_unsigned_selector<wchar_t, false, true>::__type' sugar
| |     `-TypedefType 0xd37c30 'std::__make_unsigned_selector<wchar_t, false, true>::__type' sugar
| |       |-TypeAlias 0xd37bb0 '__type'
| |       `-ElaboratedType 0xd37b60 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type' sugar
| |         `-TypedefType 0xd37b40 'std::__match_cv_qualifiers<wchar_t, unsigned int, false, false>::__type' sugar
| |           |-Typedef 0xd37ad0 '__type'
| |           `-ElaboratedType 0xd37a80 'typename __match::__type' sugar
| |             `-TypedefType 0xd37a60 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| |               |-Typedef 0xd379e8 '__type'
| |               `-SubstTemplateTypeParmType 0xd37670 'unsigned int' sugar
| |                 |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| |                 | `-TemplateTypeParm 0xd80018 '_Unqualified'
| |                 `-BuiltinType 0xbf62f0 'unsigned int'
| |-VarDecl 0xd369c8 parent 0xce4768 prev 0xce72f8 <line:80:5, col:48> col:48 used value 'const bool':'const bool' constexpr
| |-ClassTemplateSpecializationDecl 0xd37d58 <line:1818:3, line:1823:5> line:1819:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char16_t'
| | | `-BuiltinType 0xbf6790 'char16_t'
| | |-CXXRecordDecl 0xd37f68 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypeAliasDecl 0xd9ead0 <line:1821:7, line:1822:62> line:1821:13 referenced __type 'typename __make_unsigned_selector<char16_t, false, true>::__type':'unsigned short'
| |   `-ElaboratedType 0xd9ea60 'typename __make_unsigned_selector<char16_t, false, true>::__type' sugar
| |     `-TypedefType 0xd9ea40 'std::__make_unsigned_selector<char16_t, false, true>::__type' sugar
| |       |-TypeAlias 0xd9e9c0 '__type'
| |       `-ElaboratedType 0xd9e970 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type' sugar
| |         `-TypedefType 0xd9e950 'std::__match_cv_qualifiers<char16_t, unsigned short, false, false>::__type' sugar
| |           |-Typedef 0xd9e8e0 '__type'
| |           `-ElaboratedType 0xd9e890 'typename __match::__type' sugar
| |             `-TypedefType 0xd9e870 'std::__cv_selector<unsigned short, false, false>::__type' sugar
| |               |-Typedef 0xd9e800 '__type'
| |               `-SubstTemplateTypeParmType 0xd9e5e0 'unsigned short' sugar
| |                 |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| |                 | `-TemplateTypeParm 0xd80018 '_Unqualified'
| |                 `-BuiltinType 0xbf62d0 'unsigned short'
| |-ClassTemplateSpecializationDecl 0xd9eb68 <line:1825:3, line:1830:5> line:1826:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char32_t'
| | | `-BuiltinType 0xbf67b0 'char32_t'
| | |-CXXRecordDecl 0xd9ed78 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypeAliasDecl 0xda1260 <line:1828:7, line:1829:62> line:1828:13 referenced __type 'typename __make_unsigned_selector<char32_t, false, true>::__type':'unsigned int'
| |   `-ElaboratedType 0xda0910 'typename __make_unsigned_selector<char32_t, false, true>::__type' sugar
| |     `-TypedefType 0xda08f0 'std::__make_unsigned_selector<char32_t, false, true>::__type' sugar
| |       |-TypeAlias 0xda0870 '__type'
| |       `-ElaboratedType 0xda0820 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type' sugar
| |         `-TypedefType 0xda0800 'std::__match_cv_qualifiers<char32_t, unsigned int, false, false>::__type' sugar
| |           |-Typedef 0xda0790 '__type'
| |           `-ElaboratedType 0xda0740 'typename __match::__type' sugar
| |             `-TypedefType 0xd37a60 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| |               |-Typedef 0xd379e8 '__type'
| |               `-SubstTemplateTypeParmType 0xd37670 'unsigned int' sugar
| |                 |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| |                 | `-TemplateTypeParm 0xd80018 '_Unqualified'
| |                 `-BuiltinType 0xbf62f0 'unsigned int'
| |-ClassTemplateDecl 0xda1400 <line:1837:3, line:1839:68> line:1838:12 make_unsigned
| | |-TemplateTypeParmDecl 0xda12d8 <line:1837:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xda1370 <line:1838:5, line:1839:68> line:1838:12 struct make_unsigned definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0xda1640 <col:5, col:12> col:12 implicit struct make_unsigned
| | | `-TypedefDecl 0xda1ad0 <line:1839:7, col:62> col:62 type 'typename __make_unsigned_selector<_Tp>::__type'
| | |   `-DependentNameType 0xda1a60 'typename __make_unsigned_selector<_Tp>::__type' dependent
| | `-ClassTemplateSpecialization 0xda1b60 'make_unsigned'
| |-ClassTemplateSpecializationDecl 0xda1b60 <line:1842:3, line:1843:30> col:12 struct make_unsigned
| | `-TemplateArgument type 'bool'
| |   `-BuiltinType 0xbf61d0 'bool'
| |-ClassTemplateDecl 0xda1e20 <line:1848:3, line:1850:27> line:1849:12 __make_signed
| | |-TemplateTypeParmDecl 0xda1d00 <line:1848:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xda1d90 <line:1849:5, line:1850:27> line:1849:12 struct __make_signed definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0xda2060 <col:5, col:12> col:12 implicit struct __make_signed
| | | `-TypedefDecl 0xda2100 <line:1850:7, col:19> col:19 __type '_Tp'
| | |   `-TemplateTypeParmType 0xda1d50 '_Tp' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0xda1d00 '_Tp'
| | |-ClassTemplateSpecialization 0xda2190 '__make_signed'
| | |-ClassTemplateSpecialization 0xda3a28 '__make_signed'
| | |-ClassTemplateSpecialization 0xda3d78 '__make_signed'
| | |-ClassTemplateSpecialization 0xda40c8 '__make_signed'
| | |-ClassTemplateSpecialization 0xda4418 '__make_signed'
| | |-ClassTemplateSpecialization 0xda47a0 '__make_signed'
| | |-ClassTemplateSpecialization 0xda4ae8 '__make_signed'
| | |-ClassTemplateSpecialization 0xda8270 '__make_signed'
| | |-ClassTemplateSpecialization 0xdae0e8 '__make_signed'
| | `-ClassTemplateSpecialization 0xdb4518 '__make_signed'
| |-ClassTemplateSpecializationDecl 0xda2190 <line:1852:3, line:1854:35> line:1853:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char'
| | | `-BuiltinType 0xbf61f0 'char'
| | |-CXXRecordDecl 0xda38e8 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0xda3990 <line:1854:7, col:27> col:27 __type 'signed char'
| |   `-BuiltinType 0xbf6210 'signed char'
| |-ClassTemplateSpecializationDecl 0xda3a28 <line:1856:3, line:1858:35> line:1857:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned char'
| | | `-BuiltinType 0xbf62b0 'unsigned char'
| | |-CXXRecordDecl 0xda3c38 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0xda3ce0 <line:1858:7, col:27> col:27 __type 'signed char'
| |   `-BuiltinType 0xbf6210 'signed char'
| |-ClassTemplateSpecializationDecl 0xda3d78 <line:1860:3, line:1862:36> line:1861:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned short'
| | | `-BuiltinType 0xbf62d0 'unsigned short'
| | |-CXXRecordDecl 0xda3f88 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0xda4030 <line:1862:7, col:28> col:28 referenced __type 'short'
| |   `-BuiltinType 0xbf6230 'short'
| |-ClassTemplateSpecializationDecl 0xda40c8 <line:1864:3, line:1866:34> line:1865:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned int'
| | | `-BuiltinType 0xbf62f0 'unsigned int'
| | |-CXXRecordDecl 0xda42d8 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0xda4380 <line:1866:7, col:26> col:26 referenced __type 'int'
| |   `-BuiltinType 0xbf6250 'int'
| |-ClassTemplateSpecializationDecl 0xda4418 <line:1868:3, line:1870:35> line:1869:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned long'
| | | `-BuiltinType 0xbf6310 'unsigned long'
| | |-CXXRecordDecl 0xda4628 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0xda46d0 <line:1870:7, col:27> col:27 __type 'long'
| |   `-BuiltinType 0xbf6270 'long'
| |-ClassTemplateSpecializationDecl 0xda47a0 <line:1872:3, line:1874:40> line:1873:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned long long'
| | | `-BuiltinType 0xbf6330 'unsigned long long'
| | |-CXXRecordDecl 0xda49a8 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0xda4a50 <line:1874:7, col:32> col:32 __type 'long long'
| |   `-BuiltinType 0xbf6290 'long long'
| |-ClassTemplateSpecializationDecl 0xda4ae8 <line:1877:3, line:1879:46> line:1878:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned __int128'
| | | `-BuiltinType 0xbf6730 'unsigned __int128'
| | |-CXXRecordDecl 0xda4cf8 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0xda4da0 <line:1879:7, col:38> col:38 __type '__int128'
| |   `-BuiltinType 0xbf6710 '__int128'
| |-ClassTemplateDecl 0xda5228 <line:1898:3, line:1901:11> col:11 __make_signed_selector
| | |-TemplateTypeParmDecl 0xda4e10 <line:1898:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xda4f88 <line:1899:5, col:37> col:10 'bool' depth 0 index 1 _IsInt
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xda4fe8 <col:19, col:37> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xda4f40 <col:19, col:37> '<dependent type>' lvalue
| | |-NonTypeTemplateParmDecl 0xda50f8 <line:1900:5, col:34> col:10 'bool' depth 0 index 2 _IsEnum
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xda5158 <col:20, col:34> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xda50b0 <col:20, col:34> '<dependent type>' lvalue
| | |-CXXRecordDecl 0xda5198 <line:1901:5, col:11> col:11 class __make_signed_selector
| | |-ClassTemplateSpecializationDecl 0xda8578 <line:1915:3, line:1922:5> line:1916:11 class __make_signed_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0xbf6750 'wchar_t'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 1
| | | |-CXXRecordDecl 0xda88d0 <col:5, col:11> col:11 implicit class __make_signed_selector
| | | |-TypedefDecl 0xdab310 <line:1918:7, col:62> col:62 __unsigned_type 'typename __make_unsigned_selector<wchar_t>::__type':'unsigned int'
| | | | `-ElaboratedType 0xdab2c0 'typename __make_unsigned_selector<wchar_t>::__type' sugar
| | | |   `-TypedefType 0xdab2a0 'std::__make_unsigned_selector<wchar_t, true, false>::__type' sugar
| | | |     |-TypeAlias 0xdab220 '__type'
| | | |     `-ElaboratedType 0xdab1d0 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type' sugar
| | | |       `-TypedefType 0xd37b40 'std::__match_cv_qualifiers<wchar_t, unsigned int, false, false>::__type' sugar
| | | |         |-Typedef 0xd37ad0 '__type'
| | | |         `-ElaboratedType 0xd37a80 'typename __match::__type' sugar
| | | |           `-TypedefType 0xd37a60 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | | |             |-Typedef 0xd379e8 '__type'
| | | |             `-SubstTemplateTypeParmType 0xd37670 'unsigned int' sugar
| | | |               |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | | |               | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | | |               `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-AccessSpecDecl 0xdab368 <line:1920:5, col:11> col:5 public
| | | `-TypedefDecl 0xdadf50 <line:1921:7, col:72> col:72 referenced __type 'typename __make_signed_selector<__unsigned_type>::__type':'int'
| | |   `-ElaboratedType 0xdadf00 'typename __make_signed_selector<__unsigned_type>::__type' sugar
| | |     `-TypedefType 0xdadee0 'std::__make_signed_selector<unsigned int, true, false>::__type' sugar
| | |       |-TypeAlias 0xdade60 '__type'
| | |       `-ElaboratedType 0xdade10 'typename __match_cv_qualifiers<unsigned int, __signed_type>::__type' sugar
| | |         `-TypedefType 0xdaddf0 'std::__match_cv_qualifiers<unsigned int, int, false, false>::__type' sugar
| | |           |-Typedef 0xdadd80 '__type'
| | |           `-ElaboratedType 0xdadd30 'typename __match::__type' sugar
| | |             `-TypedefType 0xdadd10 'std::__cv_selector<int, false, false>::__type' sugar
| | |               |-Typedef 0xdadca0 '__type'
| | |               `-SubstTemplateTypeParmType 0xdada80 'int' sugar
| | |                 |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |                 | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |                 `-BuiltinType 0xbf6250 'int'
| | |-ClassTemplateSpecializationDecl 0xdac270 <line:1903:3, line:1912:5> line:1904:11 class __make_signed_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-TemplateArgument integral 1
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0xdac808 <col:5, col:11> col:11 implicit class __make_signed_selector
| | | |-TypeAliasDecl 0xdacb70 <line:1906:7, line:1907:48> line:1906:13 __signed_type 'typename __make_signed<__remove_cv_t<unsigned int>>::__type':'int'
| | | | `-ElaboratedType 0xdacb20 'typename __make_signed<__remove_cv_t<unsigned int>>::__type' sugar
| | | |   `-TypedefType 0xdacb00 'std::__make_signed<unsigned int>::__type' sugar
| | | |     |-Typedef 0xda4380 '__type'
| | | |     `-BuiltinType 0xbf6250 'int'
| | | |-AccessSpecDecl 0xdacbd0 <line:1909:5, col:11> col:5 public
| | | `-TypeAliasDecl 0xdade60 <line:1910:7, line:1911:56> line:1910:13 referenced __type 'typename __match_cv_qualifiers<unsigned int, __signed_type>::__type':'int'
| | |   `-ElaboratedType 0xdade10 'typename __match_cv_qualifiers<unsigned int, __signed_type>::__type' sugar
| | |     `-TypedefType 0xdaddf0 'std::__match_cv_qualifiers<unsigned int, int, false, false>::__type' sugar
| | |       |-Typedef 0xdadd80 '__type'
| | |       `-ElaboratedType 0xdadd30 'typename __match::__type' sugar
| | |         `-TypedefType 0xdadd10 'std::__cv_selector<int, false, false>::__type' sugar
| | |           |-Typedef 0xdadca0 '__type'
| | |           `-SubstTemplateTypeParmType 0xdada80 'int' sugar
| | |             |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |             `-BuiltinType 0xbf6250 'int'
| | |-ClassTemplateSpecializationDecl 0xdae3f8 <line:1915:3, line:1922:5> line:1916:11 class __make_signed_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0xbf6790 'char16_t'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 1
| | | |-CXXRecordDecl 0xdaf620 <col:5, col:11> col:11 implicit class __make_signed_selector
| | | |-TypedefDecl 0xdb1100 <line:1918:7, col:62> col:62 __unsigned_type 'typename __make_unsigned_selector<char16_t>::__type':'unsigned short'
| | | | `-ElaboratedType 0xdb10b0 'typename __make_unsigned_selector<char16_t>::__type' sugar
| | | |   `-TypedefType 0xdb1090 'std::__make_unsigned_selector<char16_t, true, false>::__type' sugar
| | | |     |-TypeAlias 0xdb1010 '__type'
| | | |     `-ElaboratedType 0xdb0fc0 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type' sugar
| | | |       `-TypedefType 0xd9e950 'std::__match_cv_qualifiers<char16_t, unsigned short, false, false>::__type' sugar
| | | |         |-Typedef 0xd9e8e0 '__type'
| | | |         `-ElaboratedType 0xd9e890 'typename __match::__type' sugar
| | | |           `-TypedefType 0xd9e870 'std::__cv_selector<unsigned short, false, false>::__type' sugar
| | | |             |-Typedef 0xd9e800 '__type'
| | | |             `-SubstTemplateTypeParmType 0xd9e5e0 'unsigned short' sugar
| | | |               |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | | |               | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | | |               `-BuiltinType 0xbf62d0 'unsigned short'
| | | |-AccessSpecDecl 0xdb1158 <line:1920:5, col:11> col:5 public
| | | `-TypedefDecl 0xdb4380 <line:1921:7, col:72> col:72 referenced __type 'typename __make_signed_selector<__unsigned_type>::__type':'short'
| | |   `-ElaboratedType 0xdb4330 'typename __make_signed_selector<__unsigned_type>::__type' sugar
| | |     `-TypedefType 0xdb4310 'std::__make_signed_selector<unsigned short, true, false>::__type' sugar
| | |       |-TypeAlias 0xdb4290 '__type'
| | |       `-ElaboratedType 0xdb4240 'typename __match_cv_qualifiers<unsigned short, __signed_type>::__type' sugar
| | |         `-TypedefType 0xdb4220 'std::__match_cv_qualifiers<unsigned short, short, false, false>::__type' sugar
| | |           |-Typedef 0xdb41b0 '__type'
| | |           `-ElaboratedType 0xdb4160 'typename __match::__type' sugar
| | |             `-TypedefType 0xdb4140 'std::__cv_selector<short, false, false>::__type' sugar
| | |               |-Typedef 0xdb40c8 '__type'
| | |               `-SubstTemplateTypeParmType 0xdb3bf0 'short' sugar
| | |                 |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |                 | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |                 `-BuiltinType 0xbf6230 'short'
| | |-ClassTemplateSpecializationDecl 0xdb2660 <line:1903:3, line:1912:5> line:1904:11 class __make_signed_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0xbf62d0 'unsigned short'
| | | |-TemplateArgument integral 1
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0xdb2980 <col:5, col:11> col:11 implicit class __make_signed_selector
| | | |-TypeAliasDecl 0xdb2ce0 <line:1906:7, line:1907:48> line:1906:13 __signed_type 'typename __make_signed<__remove_cv_t<unsigned short>>::__type':'short'
| | | | `-ElaboratedType 0xdb2c90 'typename __make_signed<__remove_cv_t<unsigned short>>::__type' sugar
| | | |   `-TypedefType 0xdb2c70 'std::__make_signed<unsigned short>::__type' sugar
| | | |     |-Typedef 0xda4030 '__type'
| | | |     `-BuiltinType 0xbf6230 'short'
| | | |-AccessSpecDecl 0xdb2d40 <line:1909:5, col:11> col:5 public
| | | `-TypeAliasDecl 0xdb4290 <line:1910:7, line:1911:56> line:1910:13 referenced __type 'typename __match_cv_qualifiers<unsigned short, __signed_type>::__type':'short'
| | |   `-ElaboratedType 0xdb4240 'typename __match_cv_qualifiers<unsigned short, __signed_type>::__type' sugar
| | |     `-TypedefType 0xdb4220 'std::__match_cv_qualifiers<unsigned short, short, false, false>::__type' sugar
| | |       |-Typedef 0xdb41b0 '__type'
| | |       `-ElaboratedType 0xdb4160 'typename __match::__type' sugar
| | |         `-TypedefType 0xdb4140 'std::__cv_selector<short, false, false>::__type' sugar
| | |           |-Typedef 0xdb40c8 '__type'
| | |           `-SubstTemplateTypeParmType 0xdb3bf0 'short' sugar
| | |             |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0xd80018 '_Unqualified'
| | |             `-BuiltinType 0xbf6230 'short'
| | `-ClassTemplateSpecializationDecl 0xdb4828 <line:1915:3, line:1922:5> line:1916:11 class __make_signed_selector definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-TemplateArgument type 'char32_t'
| |   | `-BuiltinType 0xbf67b0 'char32_t'
| |   |-TemplateArgument integral 0
| |   |-TemplateArgument integral 1
| |   |-CXXRecordDecl 0xdb4b80 <col:5, col:11> col:11 implicit class __make_signed_selector
| |   |-TypedefDecl 0xdb7480 <line:1918:7, col:62> col:62 __unsigned_type 'typename __make_unsigned_selector<char32_t>::__type':'unsigned int'
| |   | `-ElaboratedType 0xdb7430 'typename __make_unsigned_selector<char32_t>::__type' sugar
| |   |   `-TypedefType 0xdb7410 'std::__make_unsigned_selector<char32_t, true, false>::__type' sugar
| |   |     |-TypeAlias 0xdb7390 '__type'
| |   |     `-ElaboratedType 0xdb7340 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type' sugar
| |   |       `-TypedefType 0xda0800 'std::__match_cv_qualifiers<char32_t, unsigned int, false, false>::__type' sugar
| |   |         |-Typedef 0xda0790 '__type'
| |   |         `-ElaboratedType 0xda0740 'typename __match::__type' sugar
| |   |           `-TypedefType 0xd37a60 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| |   |             |-Typedef 0xd379e8 '__type'
| |   |             `-SubstTemplateTypeParmType 0xd37670 'unsigned int' sugar
| |   |               |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| |   |               | `-TemplateTypeParm 0xd80018 '_Unqualified'
| |   |               `-BuiltinType 0xbf62f0 'unsigned int'
| |   |-AccessSpecDecl 0xdb74d8 <line:1920:5, col:11> col:5 public
| |   `-TypedefDecl 0xdb7870 <line:1921:7, col:72> col:72 referenced __type 'typename __make_signed_selector<__unsigned_type>::__type':'int'
| |     `-ElaboratedType 0xdb7820 'typename __make_signed_selector<__unsigned_type>::__type' sugar
| |       `-TypedefType 0xdadee0 'std::__make_signed_selector<unsigned int, true, false>::__type' sugar
| |         |-TypeAlias 0xdade60 '__type'
| |         `-ElaboratedType 0xdade10 'typename __match_cv_qualifiers<unsigned int, __signed_type>::__type' sugar
| |           `-TypedefType 0xdaddf0 'std::__match_cv_qualifiers<unsigned int, int, false, false>::__type' sugar
| |             |-Typedef 0xdadd80 '__type'
| |             `-ElaboratedType 0xdadd30 'typename __match::__type' sugar
| |               `-TypedefType 0xdadd10 'std::__cv_selector<int, false, false>::__type' sugar
| |                 |-Typedef 0xdadca0 '__type'
| |                 `-SubstTemplateTypeParmType 0xdada80 'int' sugar
| |                   |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| |                   | `-TemplateTypeParm 0xd80018 '_Unqualified'
| |                   `-BuiltinType 0xbf6250 'int'
| |-ClassTemplatePartialSpecializationDecl 0xda63e0 <line:1903:3, line:1912:5> line:1904:11 class __make_signed_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xda54a8 <line:1903:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xda66c8 <line:1904:5, col:11> col:11 implicit class __make_signed_selector
| | |-TypeAliasDecl 0xda6ad0 <line:1906:7, line:1907:48> line:1906:13 referenced __signed_type 'typename __make_signed<__remove_cv_t<_Tp>>::__type'
| | | `-DependentNameType 0xda6a60 'typename __make_signed<__remove_cv_t<_Tp>>::__type' dependent
| | |-AccessSpecDecl 0xda6b30 <line:1909:5, col:11> col:5 public
| | `-TypeAliasDecl 0xda6f70 <line:1910:7, line:1911:56> line:1910:13 __type 'typename __match_cv_qualifiers<_Tp, __signed_type>::__type'
| |   `-DependentNameType 0xda6f00 'typename __match_cv_qualifiers<_Tp, __signed_type>::__type' dependent
| |-ClassTemplatePartialSpecializationDecl 0xda7240 <line:1915:3, line:1922:5> line:1916:11 class __make_signed_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xda6fe8 <line:1915:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xda7948 <line:1916:5, col:11> col:11 implicit class __make_signed_selector
| | |-TypedefDecl 0xda7cc0 <line:1918:7, col:62> col:62 referenced __unsigned_type 'typename __make_unsigned_selector<_Tp>::__type'
| | | `-DependentNameType 0xda7c50 'typename __make_unsigned_selector<_Tp>::__type' dependent
| | |-AccessSpecDecl 0xda7d18 <line:1920:5, col:11> col:5 public
| | `-TypedefDecl 0xda81e0 <line:1921:7, col:72> col:72 __type 'typename __make_signed_selector<__unsigned_type>::__type'
| |   `-DependentNameType 0xda8170 'typename __make_signed_selector<__unsigned_type>::__type' dependent
| |-ClassTemplateSpecializationDecl 0xda8270 <line:1929:3, line:1934:5> line:1930:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'wchar_t'
| | | `-BuiltinType 0xbf6750 'wchar_t'
| | |-CXXRecordDecl 0xda8478 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypeAliasDecl 0xdae050 <line:1932:7, line:1933:59> line:1932:13 __type 'typename __make_signed_selector<wchar_t, false, true>::__type':'int'
| |   `-ElaboratedType 0xdadfe0 'typename __make_signed_selector<wchar_t, false, true>::__type' sugar
| |     `-TypedefType 0xdadfc0 'std::__make_signed_selector<wchar_t, false, true>::__type' sugar
| |       |-Typedef 0xdadf50 '__type'
| |       `-ElaboratedType 0xdadf00 'typename __make_signed_selector<__unsigned_type>::__type' sugar
| |         `-TypedefType 0xdadee0 'std::__make_signed_selector<unsigned int, true, false>::__type' sugar
| |           |-TypeAlias 0xdade60 '__type'
| |           `-ElaboratedType 0xdade10 'typename __match_cv_qualifiers<unsigned int, __signed_type>::__type' sugar
| |             `-TypedefType 0xdaddf0 'std::__match_cv_qualifiers<unsigned int, int, false, false>::__type' sugar
| |               |-Typedef 0xdadd80 '__type'
| |               `-ElaboratedType 0xdadd30 'typename __match::__type' sugar
| |                 `-TypedefType 0xdadd10 'std::__cv_selector<int, false, false>::__type' sugar
| |                   |-Typedef 0xdadca0 '__type'
| |                   `-SubstTemplateTypeParmType 0xdada80 'int' sugar
| |                     |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| |                     | `-TemplateTypeParm 0xd80018 '_Unqualified'
| |                     `-BuiltinType 0xbf6250 'int'
| |-VarDecl 0xda9358 parent 0xce44e8 prev 0xceb1d8 <line:80:5, col:48> col:48 used value 'const bool':'const bool' constexpr
| |-ClassTemplateSpecializationDecl 0xdae0e8 <line:1946:3, line:1951:5> line:1947:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char16_t'
| | | `-BuiltinType 0xbf6790 'char16_t'
| | |-CXXRecordDecl 0xdae2f8 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypeAliasDecl 0xdb4480 <line:1949:7, line:1950:60> line:1949:13 __type 'typename __make_signed_selector<char16_t, false, true>::__type':'short'
| |   `-ElaboratedType 0xdb4410 'typename __make_signed_selector<char16_t, false, true>::__type' sugar
| |     `-TypedefType 0xdb43f0 'std::__make_signed_selector<char16_t, false, true>::__type' sugar
| |       |-Typedef 0xdb4380 '__type'
| |       `-ElaboratedType 0xdb4330 'typename __make_signed_selector<__unsigned_type>::__type' sugar
| |         `-TypedefType 0xdb4310 'std::__make_signed_selector<unsigned short, true, false>::__type' sugar
| |           |-TypeAlias 0xdb4290 '__type'
| |           `-ElaboratedType 0xdb4240 'typename __match_cv_qualifiers<unsigned short, __signed_type>::__type' sugar
| |             `-TypedefType 0xdb4220 'std::__match_cv_qualifiers<unsigned short, short, false, false>::__type' sugar
| |               |-Typedef 0xdb41b0 '__type'
| |               `-ElaboratedType 0xdb4160 'typename __match::__type' sugar
| |                 `-TypedefType 0xdb4140 'std::__cv_selector<short, false, false>::__type' sugar
| |                   |-Typedef 0xdb40c8 '__type'
| |                   `-SubstTemplateTypeParmType 0xdb3bf0 'short' sugar
| |                     |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| |                     | `-TemplateTypeParm 0xd80018 '_Unqualified'
| |                     `-BuiltinType 0xbf6230 'short'
| |-ClassTemplateSpecializationDecl 0xdb4518 <line:1953:3, line:1958:5> line:1954:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char32_t'
| | | `-BuiltinType 0xbf67b0 'char32_t'
| | |-CXXRecordDecl 0xdb4728 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypeAliasDecl 0xdb7970 <line:1956:7, line:1957:60> line:1956:13 __type 'typename __make_signed_selector<char32_t, false, true>::__type':'int'
| |   `-ElaboratedType 0xdb7900 'typename __make_signed_selector<char32_t, false, true>::__type' sugar
| |     `-TypedefType 0xdb78e0 'std::__make_signed_selector<char32_t, false, true>::__type' sugar
| |       |-Typedef 0xdb7870 '__type'
| |       `-ElaboratedType 0xdb7820 'typename __make_signed_selector<__unsigned_type>::__type' sugar
| |         `-TypedefType 0xdadee0 'std::__make_signed_selector<unsigned int, true, false>::__type' sugar
| |           |-TypeAlias 0xdade60 '__type'
| |           `-ElaboratedType 0xdade10 'typename __match_cv_qualifiers<unsigned int, __signed_type>::__type' sugar
| |             `-TypedefType 0xdaddf0 'std::__match_cv_qualifiers<unsigned int, int, false, false>::__type' sugar
| |               |-Typedef 0xdadd80 '__type'
| |               `-ElaboratedType 0xdadd30 'typename __match::__type' sugar
| |                 `-TypedefType 0xdadd10 'std::__cv_selector<int, false, false>::__type' sugar
| |                   |-Typedef 0xdadca0 '__type'
| |                   `-SubstTemplateTypeParmType 0xdada80 'int' sugar
| |                     |-TemplateTypeParmType 0xd80070 '_Unqualified' dependent depth 0 index 0
| |                     | `-TemplateTypeParm 0xd80018 '_Unqualified'
| |                     `-BuiltinType 0xbf6250 'int'
| |-ClassTemplateDecl 0xdb7b10 <line:1965:3, line:1967:66> line:1966:12 make_signed
| | |-TemplateTypeParmDecl 0xdb79e8 <line:1965:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xdb7a80 <line:1966:5, line:1967:66> line:1966:12 struct make_signed definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0xdb7d50 <col:5, col:12> col:12 implicit struct make_signed
| | | `-TypedefDecl 0xdb81b0 <line:1967:7, col:60> col:60 type 'typename __make_signed_selector<_Tp>::__type'
| | |   `-DependentNameType 0xdb8140 'typename __make_signed_selector<_Tp>::__type' dependent
| | `-ClassTemplateSpecialization 0xdb8240 'make_signed'
| |-ClassTemplateSpecializationDecl 0xdb8240 <line:1970:3, line:1971:28> col:12 struct make_signed
| | `-TemplateArgument type 'bool'
| |   `-BuiltinType 0xbf61d0 'bool'
| |-TypeAliasTemplateDecl 0xdb8620 <line:1975:3, line:1976:54> col:5 make_signed_t
| | |-TemplateTypeParmDecl 0xdb83e0 <line:1975:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xdb85c0 <line:1976:5, col:54> col:11 make_signed_t 'typename make_signed<_Tp>::type'
| |   `-DependentNameType 0xdb8550 'typename make_signed<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xdb88c0 <line:1979:3, line:1980:58> col:5 make_unsigned_t
| | |-TemplateTypeParmDecl 0xdb8678 <line:1979:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xdb8860 <line:1980:5, col:58> col:11 make_unsigned_t 'typename make_unsigned<_Tp>::type'
| |   `-DependentNameType 0xdb87f0 'typename make_unsigned<_Tp>::type' dependent
| |-ClassTemplateDecl 0xdb8a40 <line:1986:3, line:1988:29> line:1987:12 remove_extent
| | |-TemplateTypeParmDecl 0xdb8918 <line:1986:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xdb89b0 <line:1987:5, line:1988:29> line:1987:12 struct remove_extent definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdb9e80 <col:5, col:12> col:12 implicit struct remove_extent
| |   `-TypedefDecl 0xdb9f20 <line:1988:7, col:23> col:23 type '_Tp'
| |     `-TemplateTypeParmType 0xdb8970 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xdb8918 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xdba210 <line:1990:3, line:1992:29> line:1991:12 struct remove_extent definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0[_Size]'
| | | `-DependentSizedArrayType 0xcfdde0 'type-parameter-0-0[_Size]' dependent   <line:432:24, col:30>
| | |   |-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |   `-DeclRefExpr 0xcfddc0 <col:25> 'std::size_t':'unsigned long' NonTypeTemplateParm 0xcfdd40 '_Size' 'std::size_t':'unsigned long'
| | |-TemplateTypeParmDecl 0xdb9f90 <line:1990:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xdba058 <col:26, col:38> col:38 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Size
| | |-CXXRecordDecl 0xdba438 <line:1991:5, col:12> col:12 implicit struct remove_extent
| | `-TypedefDecl 0xdba4d8 <line:1992:7, col:23> col:23 type '_Tp'
| |   `-TemplateTypeParmType 0xdb9fe0 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0xdb9f90 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xdba6e0 <line:1994:3, line:1996:29> line:1995:12 struct remove_extent definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0[]'
| | | `-IncompleteArrayType 0xcfe2d0 'type-parameter-0-0[]' dependent 
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xdba548 <line:1994:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xdba908 <line:1995:5, col:12> col:12 implicit struct remove_extent
| | `-TypedefDecl 0xdba9a8 <line:1996:7, col:23> col:23 type '_Tp'
| |   `-TemplateTypeParmType 0xdba5a0 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0xdba548 '_Tp'
| |-ClassTemplateDecl 0xdbab40 prev 0xd298f0 <line:1999:3, line:2001:29> line:2000:12 remove_all_extents
| | |-TemplateTypeParmDecl 0xdbaa18 <line:1999:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xdbaab0 prev 0xd29860 <line:2000:5, line:2001:29> line:2000:12 struct remove_all_extents definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdbac00 <col:5, col:12> col:12 implicit struct remove_all_extents
| |   `-TypedefDecl 0xdbaca0 <line:2001:7, col:23> col:23 type '_Tp'
| |     `-TemplateTypeParmType 0xdbaa70 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xdbaa18 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xdbaf90 <line:2003:3, line:2005:64> line:2004:12 struct remove_all_extents definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0[_Size]'
| | | `-DependentSizedArrayType 0xcfdde0 'type-parameter-0-0[_Size]' dependent   <line:432:24, col:30>
| | |   |-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |   `-DeclRefExpr 0xcfddc0 <col:25> 'std::size_t':'unsigned long' NonTypeTemplateParm 0xcfdd40 '_Size' 'std::size_t':'unsigned long'
| | |-TemplateTypeParmDecl 0xdbad10 <line:2003:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xdbadd8 <col:26, col:38> col:38 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Size
| | |-CXXRecordDecl 0xdbb1b8 <line:2004:5, col:12> col:12 implicit struct remove_all_extents
| | `-TypedefDecl 0xdbb350 <line:2005:7, col:58> col:58 type 'typename remove_all_extents<_Tp>::type'
| |   `-DependentNameType 0xdbb2e0 'typename remove_all_extents<_Tp>::type' dependent
| |-ClassTemplatePartialSpecializationDecl 0xdbb550 <line:2007:3, line:2009:64> line:2008:12 struct remove_all_extents definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0[]'
| | | `-IncompleteArrayType 0xcfe2d0 'type-parameter-0-0[]' dependent 
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xdbb3c0 <line:2007:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xdbb778 <line:2008:5, col:12> col:12 implicit struct remove_all_extents
| | `-TypedefDecl 0xdbb910 <line:2009:7, col:58> col:58 type 'typename remove_all_extents<_Tp>::type'
| |   `-DependentNameType 0xdbb8a0 'typename remove_all_extents<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xdbbbc0 <line:2013:3, line:2014:58> col:5 remove_extent_t
| | |-TemplateTypeParmDecl 0xdbb980 <line:2013:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xdbbb60 <line:2014:5, col:58> col:11 remove_extent_t 'typename remove_extent<_Tp>::type'
| |   `-DependentNameType 0xdbbaf0 'typename remove_extent<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xdbbe10 <line:2017:3, line:2018:68> col:5 remove_all_extents_t
| | |-TemplateTypeParmDecl 0xdbbc18 <line:2017:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xdbbdb0 <line:2018:5, col:68> col:11 remove_all_extents_t 'typename remove_all_extents<_Tp>::type'
| |   `-DependentNameType 0xdbbd40 'typename remove_all_extents<_Tp>::type' dependent
| |-ClassTemplateDecl 0xdbd288 <line:2023:3, line:2025:29> line:2024:12 __remove_pointer_helper
| | |-TemplateTypeParmDecl 0xdbd0e0 <line:2023:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xdbd158 <col:26> col:34 typename depth 0 index 1
| | `-CXXRecordDecl 0xdbd1f8 <line:2024:5, line:2025:29> line:2024:12 struct __remove_pointer_helper definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdbd510 <col:5, col:12> col:12 implicit struct __remove_pointer_helper
| |   `-TypedefDecl 0xdbd5b0 <line:2025:7, col:23> col:23 type '_Tp'
| |     `-TemplateTypeParmType 0xdbd130 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xdbd0e0 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xdbd8c8 <line:2027:3, line:2029:29> line:2028:12 struct __remove_pointer_helper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1 *'
| | | `-PointerType 0xdbd750 'type-parameter-0-1 *' dependent
| | |   `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0xdbd620 <line:2027:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xdbd698 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | |-CXXRecordDecl 0xdbdb28 <line:2028:5, col:12> col:12 implicit struct __remove_pointer_helper
| | `-TypedefDecl 0xdbdbc8 <line:2029:7, col:23> col:23 type '_Up'
| |   `-TemplateTypeParmType 0xdbd6f0 '_Up' dependent depth 0 index 1
| |     `-TemplateTypeParm 0xdbd698 '_Up'
| |-ClassTemplateDecl 0xdbdd60 <line:2032:3, line:2035:7> line:2033:12 remove_pointer
| | |-TemplateTypeParmDecl 0xdbdc38 <line:2032:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xdbdcd0 <line:2033:5, line:2035:7> line:2033:12 struct remove_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__remove_pointer_helper<_Tp, __remove_cv_t<_Tp>>'
| |   `-CXXRecordDecl 0xdbe2b0 <col:5, col:12> col:12 implicit struct remove_pointer
| |-ClassTemplateDecl 0xdbe7d0 <line:2037:3, line:2040:29> line:2039:12 __add_pointer_helper
| | |-TemplateTypeParmDecl 0xdbe358 <line:2037:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xdbe6a8 <col:26, line:2038:26> line:2037:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xdbe708 <col:33, line:2038:26> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xdbe660 <line:2037:33, line:2038:26> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xdbe740 <line:2039:5, line:2040:29> line:2039:12 struct __add_pointer_helper definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdbea70 <col:5, col:12> col:12 implicit struct __add_pointer_helper
| |   `-TypedefDecl 0xdbeb10 <line:2040:7, col:23> col:23 type '_Tp'
| |     `-TemplateTypeParmType 0xdbe3b0 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xdbe358 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xdbed58 <line:2042:3, line:2044:63> line:2043:12 struct __add_pointer_helper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xdbeb80 <line:2042:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xdbefd8 <line:2043:5, col:12> col:12 implicit struct __add_pointer_helper
| | `-TypedefDecl 0xdc0030 <line:2044:7, col:57> col:57 type 'typename remove_reference<_Tp>::type *'
| |   `-PointerType 0xdbffe0 'typename remove_reference<_Tp>::type *' dependent
| |     `-DependentNameType 0xdbff60 'typename remove_reference<_Tp>::type' dependent
| |-ClassTemplateDecl 0xdc01c0 <line:2047:3, line:2050:7> line:2048:12 add_pointer
| | |-TemplateTypeParmDecl 0xdc00a0 <line:2047:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xdc0130 <line:2048:5, line:2050:7> line:2048:12 struct add_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__add_pointer_helper<_Tp>'
| |   `-CXXRecordDecl 0xdc0780 <col:5, col:12> col:12 implicit struct add_pointer
| |-TypeAliasTemplateDecl 0xdc0a70 <line:2054:3, line:2055:60> col:5 remove_pointer_t
| | |-TemplateTypeParmDecl 0xdc0828 <line:2054:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xdc0a10 <line:2055:5, col:60> col:11 remove_pointer_t 'typename remove_pointer<_Tp>::type'
| |   `-DependentNameType 0xdc09a0 'typename remove_pointer<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xdc0d10 <line:2058:3, line:2059:54> col:5 add_pointer_t
| | |-TemplateTypeParmDecl 0xdc0ac8 <line:2058:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xdc0cb0 <line:2059:5, col:54> col:11 add_pointer_t 'typename add_pointer<_Tp>::type'
| |   `-DependentNameType 0xdc0c40 'typename add_pointer<_Tp>::type' dependent
| |-ClassTemplateDecl 0xdc0ec0 <line:2062:3, line:2070:5> line:2063:12 __aligned_storage_msa
| | |-NonTypeTemplateParmDecl 0xdc0db8 <line:2062:12, col:24> col:24 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Len
| | `-CXXRecordDecl 0xdc0e30 <line:2063:5, line:2070:5> line:2063:12 struct __aligned_storage_msa definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdc1120 <col:5, col:12> col:12 implicit struct __aligned_storage_msa
| |   `-CXXRecordDecl 0xdc11b0 <line:2065:7, line:2069:7> line:2065:13 union __type definition
| |     |-DefinitionData aggregate standard_layout trivially_copyable pod trivial has_variant_members
| |     | |-DefaultConstructor exists trivial needs_implicit
| |     | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | |-MoveConstructor exists simple trivial needs_implicit
| |     | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | |-MoveAssignment exists simple trivial needs_implicit
| |     | `-Destructor simple irrelevant trivial needs_implicit
| |     |-CXXRecordDecl 0xdc12c8 <col:7, col:13> col:13 implicit union __type
| |     |-FieldDecl 0xdc13e8 <line:2067:2, col:27> col:16 __data 'unsigned char[_Len]'
| |     |-CXXRecordDecl 0xdc1438 <line:2068:2, col:40> col:2 struct definition
| |     | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |     | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |     | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | | |-MoveConstructor exists simple trivial needs_implicit
| |     | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | | |-MoveAssignment exists simple trivial needs_implicit
| |     | | `-Destructor simple irrelevant trivial needs_implicit
| |     | `-AlignedAttr 0xdc1558 <col:24> aligned
| |     |   `-<<<NULL>>>
| |     `-FieldDecl 0xdc1628 <col:2, col:42> col:42 __align 'struct (unnamed struct at /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:2068:2)':'std::__aligned_storage_msa::__type::(unnamed struct at /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:2068:2)'
| |-ClassTemplateDecl 0xdc1a50 <line:2082:3, line:2091:5> line:2084:12 aligned_storage
| | |-NonTypeTemplateParmDecl 0xdc1710 <line:2082:12, col:24> col:24 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Len
| | |-NonTypeTemplateParmDecl 0xdc1940 <col:30, line:2083:61> line:2082:42 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Align
| | | `-TemplateArgument expr
| | |   `-UnaryExprOrTypeTraitExpr 0xdc1900 <line:2083:5, col:61> 'unsigned long' __alignof 'typename __aligned_storage_msa<_Len>::__type'
| | `-CXXRecordDecl 0xdc19c0 <line:2084:5, line:2091:5> line:2084:12 struct aligned_storage definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdc1d10 <col:5, col:12> col:12 implicit struct aligned_storage
| |   `-CXXRecordDecl 0xdc1da0 <line:2086:7, line:2090:7> line:2086:13 union type definition
| |     |-DefinitionData aggregate standard_layout trivially_copyable pod trivial has_variant_members
| |     | |-DefaultConstructor exists trivial needs_implicit
| |     | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | |-MoveConstructor exists simple trivial needs_implicit
| |     | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | |-MoveAssignment exists simple trivial needs_implicit
| |     | `-Destructor simple irrelevant trivial needs_implicit
| |     |-CXXRecordDecl 0xdc39e0 <col:7, col:13> col:13 implicit union type
| |     |-FieldDecl 0xdc3af8 <line:2088:2, col:27> col:16 __data 'unsigned char[_Len]'
| |     |-CXXRecordDecl 0xdc3bd0 <line:2089:2, col:50> col:2 struct definition
| |     | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |     | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |     | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | | |-MoveConstructor exists simple trivial needs_implicit
| |     | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | | |-MoveAssignment exists simple trivial needs_implicit
| |     | | `-Destructor simple irrelevant trivial needs_implicit
| |     | `-AlignedAttr 0xdc3ce8 <col:24, col:44> aligned
| |     |   `-ParenExpr 0xdc3bb0 <col:36, col:43> 'std::size_t':'unsigned long'
| |     |     `-DeclRefExpr 0xdc3b90 <col:37> 'std::size_t':'unsigned long' NonTypeTemplateParm 0xdc1940 '_Align' 'std::size_t':'unsigned long'
| |     `-FieldDecl 0xdc3db8 <col:2, col:52> col:52 __align 'struct (unnamed struct at /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:2089:2)':'std::aligned_storage::type::(unnamed struct at /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:2089:2)'
| |-ClassTemplateDecl 0xdc3f70 <line:2093:3, line:2098:5> line:2094:12 __strictest_alignment
| | |-TemplateTypeParmDecl 0xdc3e50 <line:2093:13, col:25> col:25 typename depth 0 index 0 ... _Types
| | `-CXXRecordDecl 0xdc3ee0 <line:2094:5, line:2098:5> line:2094:12 struct __strictest_alignment definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdc4210 <col:5, col:12> col:12 implicit struct __strictest_alignment
| |   |-VarDecl 0xdc42b0 <line:2096:7, col:42> col:27 _S_alignment 'const std::size_t':'const unsigned long' static cinit
| |   | `-ImplicitCastExpr 0xdc4338 <col:42> 'const std::size_t':'const unsigned long' <IntegralCast>
| |   |   `-IntegerLiteral 0xdc4318 <col:42> 'int' 0
| |   `-VarDecl 0xdc43b8 <line:2097:7, col:37> col:27 _S_size 'const std::size_t':'const unsigned long' static cinit
| |     `-ImplicitCastExpr 0xdc4440 <col:37> 'const std::size_t':'const unsigned long' <IntegralCast>
| |       `-IntegerLiteral 0xdc4420 <col:37> 'int' 0
| |-ClassTemplatePartialSpecializationDecl 0xdc4780 <line:2100:3, line:2109:5> line:2101:12 struct __strictest_alignment definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | | `-TemplateArgument type 'type-parameter-0-1...'
| | |   `-PackExpansionType 0xd08c60 'type-parameter-0-1...' dependent
| | |     `-TemplateTypeParmType 0xd14700 'type-parameter-0-1' dependent contains_unexpanded_pack depth 0 index 1 pack
| | |-TemplateTypeParmDecl 0xdc44c8 <line:2100:13, col:22> col:22 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xdc4548 <col:27, col:39> col:39 referenced typename depth 0 index 1 ... _Types
| | |-CXXRecordDecl 0xdc4a28 <line:2101:5, col:12> col:12 implicit struct __strictest_alignment
| | |-VarDecl 0xdc4ac8 <line:2103:7, line:2105:53> line:2103:27 _S_alignment 'const std::size_t':'const unsigned long' static cinit
| | | `-ConditionalOperator 0xdc4e48 <line:2104:9, line:2105:53> '<dependent type>'
| | |   |-BinaryOperator 0xdc4cc8 <line:2104:9, col:58> '<dependent type>' '>'
| | |   | |-UnaryExprOrTypeTraitExpr 0xdc4b40 <col:9, col:20> 'unsigned long' alignof '_Tp'
| | |   | `-DependentScopeDeclRefExpr 0xdc4c90 <col:24, col:58> '<dependent type>' lvalue
| | |   |-UnaryExprOrTypeTraitExpr 0xdc4cf8 <line:2105:4, col:15> 'unsigned long' alignof '_Tp'
| | |   `-DependentScopeDeclRefExpr 0xdc4e10 <col:19, col:53> '<dependent type>' lvalue
| | `-VarDecl 0xdc4e88 <line:2106:7, line:2108:52> line:2106:27 _S_size 'const std::size_t':'const unsigned long' static cinit
| |   `-ConditionalOperator 0xdc51c8 <line:2107:9, line:2108:52> '<dependent type>'
| |     |-BinaryOperator 0xdc5048 <line:2107:9, col:57> '<dependent type>' '>'
| |     | |-UnaryExprOrTypeTraitExpr 0xdc4f00 <col:9, col:19> 'unsigned long' sizeof '_Tp'
| |     | `-DependentScopeDeclRefExpr 0xdc5010 <col:23, col:57> '<dependent type>' lvalue
| |     |-UnaryExprOrTypeTraitExpr 0xdc5078 <line:2108:4, col:14> 'unsigned long' sizeof '_Tp'
| |     `-DependentScopeDeclRefExpr 0xdc5190 <col:18, col:52> '<dependent type>' lvalue
| |-ClassTemplateDecl 0xdc53a8 <line:2121:3, line:2135:5> line:2122:12 aligned_union
| | |-NonTypeTemplateParmDecl 0xdc5220 <line:2121:13, col:20> col:20 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Len
| | |-TemplateTypeParmDecl 0xdc5280 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Types
| | `-CXXRecordDecl 0xdc5318 <line:2122:5, line:2135:5> line:2122:12 struct aligned_union definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdc56b0 <col:5, col:12> col:12 implicit struct aligned_union
| |   |-AccessSpecDecl 0xdc5740 <line:2124:5, col:12> col:5 private
| |   |-StaticAssertDecl 0xdc58a0 <line:2125:7, col:76> col:7
| |   | |-BinaryOperator 0xdc57c8 <col:21, col:42> 'bool' '!='
| |   | | |-SizeOfPackExpr 0xdc5768 <col:21, col:37> 'unsigned long' 0xdc5280 _Types
| |   | | `-ImplicitCastExpr 0xdc57b0 <col:42> 'unsigned long' <IntegralCast>
| |   | |   `-IntegerLiteral 0xdc5790 <col:42> 'int' 0
| |   | `-StringLiteral 0xdc5868 <col:45> 'const char[30]' lvalue "At least one type is required"
| |   |-TypeAliasDecl 0xdc7480 <line:2127:7, col:58> col:13 referenced __strictest '__strictest_alignment<_Types...>'
| |   | `-TemplateSpecializationType 0xdc5930 '__strictest_alignment<_Types...>' dependent __strictest_alignment
| |   |   `-TemplateArgument type '_Types...'
| |   |     `-PackExpansionType 0xdc5500 '_Types...' dependent
| |   |       `-TemplateTypeParmType 0xdc52d0 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |   |         `-TemplateTypeParm 0xdc5280 '_Types'
| |   |-VarDecl 0xdc74f0 <line:2128:7, line:2129:24> line:2128:27 referenced _S_len 'const std::size_t':'const unsigned long' static cinit
| |   | `-ConditionalOperator 0xdc76d8 <col:36, line:2129:24> '<dependent type>'
| |   |   |-BinaryOperator 0xdc7628 <line:2128:36, col:56> '<dependent type>' '>'
| |   |   | |-DeclRefExpr 0xdc7558 <col:36> 'std::size_t':'unsigned long' NonTypeTemplateParm 0xdc5220 '_Len' 'std::size_t':'unsigned long'
| |   |   | `-DependentScopeDeclRefExpr 0xdc75f0 <col:43, col:56> '<dependent type>' lvalue
| |   |   |-DeclRefExpr 0xdc7648 <line:2129:4> 'std::size_t':'unsigned long' NonTypeTemplateParm 0xdc5220 '_Len' 'std::size_t':'unsigned long'
| |   |   `-DependentScopeDeclRefExpr 0xdc76a0 <col:11, col:24> '<dependent type>' lvalue
| |   |-AccessSpecDecl 0xdc7708 <line:2130:5, col:11> col:5 public
| |   |-VarDecl 0xdc7740 <line:2132:7, col:58> col:27 referenced alignment_value 'const std::size_t':'const unsigned long' static cinit
| |   | `-DependentScopeDeclRefExpr 0xdc77e0 <col:45, col:58> '<dependent type>' lvalue
| |   `-TypedefDecl 0xdc7ae0 <line:2134:7, col:71> col:71 type 'typename aligned_storage<_S_len, alignment_value>::type'
| |     `-DependentNameType 0xdc7a70 'typename aligned_storage<_S_len, alignment_value>::type' dependent
| |-VarDecl 0xdc7eb8 parent 0xdc5318 prev 0xdc7740 <line:2137:3, line:2138:50> col:50 alignment_value 'const std::size_t':'const unsigned long'
| |-ClassTemplateDecl 0xdc8388 <line:2144:3, line:2147:12> col:12 __decay_selector
| | |-TemplateTypeParmDecl 0xdc7f68 <line:2144:12, col:21> col:21 referenced typename depth 0 index 0 _Up
| | |-NonTypeTemplateParmDecl 0xdc80e8 <line:2145:5, col:36> col:10 'bool' depth 0 index 1 _IsArray
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xdc8148 <col:21, col:36> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xdc80a0 <col:21, col:36> '<dependent type>' lvalue
| | |-NonTypeTemplateParmDecl 0xdc8258 <line:2146:5, col:42> col:10 'bool' depth 0 index 2 _IsFunction
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xdc82b8 <col:24, col:42> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xdc8210 <col:24, col:42> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xdc82f8 <line:2147:5, col:12> col:12 struct __decay_selector
| |-ClassTemplatePartialSpecializationDecl 0xdc8860 <line:2150:3, line:2152:42> line:2151:12 struct __decay_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xdc8608 <line:2150:12, col:21> col:21 referenced typename depth 0 index 0 _Up
| | |-CXXRecordDecl 0xdc8b48 <line:2151:5, col:12> col:12 implicit struct __decay_selector
| | `-TypedefDecl 0xdc8dc8 <line:2152:7, col:34> col:34 __type '__remove_cv_t<_Up>':'typename remove_cv<type-parameter-0-0>::type'
| |   `-TemplateSpecializationType 0xdc8d40 '__remove_cv_t<_Up>' sugar dependent alias __remove_cv_t
| |     |-TemplateArgument type '_Up'
| |     | `-TemplateTypeParmType 0xdc8660 '_Up' dependent depth 0 index 0
| |     |   `-TemplateTypeParm 0xdc8608 '_Up'
| |     `-DependentNameType 0xdc8cf0 'typename remove_cv<type-parameter-0-0>::type' dependent
| |-ClassTemplatePartialSpecializationDecl 0xdc9090 <line:2154:3, line:2156:58> line:2155:12 struct __decay_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xdc8e38 <line:2154:12, col:21> col:21 referenced typename depth 0 index 0 _Up
| | |-CXXRecordDecl 0xdc9378 <line:2155:5, col:12> col:12 implicit struct __decay_selector
| | `-TypedefDecl 0xdc9e80 <line:2156:7, col:50> col:50 __type 'typename remove_extent<_Up>::type *'
| |   `-PointerType 0xdc9e30 'typename remove_extent<_Up>::type *' dependent
| |     `-DependentNameType 0xdc9db0 'typename remove_extent<_Up>::type' dependent
| |-ClassTemplatePartialSpecializationDecl 0xdca140 <line:2158:3, line:2160:55> line:2159:12 struct __decay_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0xdc9ef0 <line:2158:12, col:21> col:21 referenced typename depth 0 index 0 _Up
| | |-CXXRecordDecl 0xdca428 <line:2159:5, col:12> col:12 implicit struct __decay_selector
| | `-TypedefDecl 0xdca5c0 <line:2160:7, col:47> col:47 __type 'typename add_pointer<_Up>::type'
| |   `-DependentNameType 0xdca550 'typename add_pointer<_Up>::type' dependent
| |-ClassTemplateDecl 0xdca750 <line:2164:3, line:2171:5> line:2165:11 decay
| | |-TemplateTypeParmDecl 0xdca630 <line:2164:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xdca6c0 <line:2165:5, line:2171:5> line:2165:11 class decay definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdca990 <col:5, col:11> col:11 implicit class decay
| |   |-TypedefDecl 0xdcab20 <line:2167:7, col:52> col:52 referenced __remove_type 'typename remove_reference<_Tp>::type'
| |   | `-DependentNameType 0xdcaab0 'typename remove_reference<_Tp>::type' dependent
| |   |-AccessSpecDecl 0xdcab78 <line:2169:5, col:11> col:5 public
| |   `-TypedefDecl 0xdcb040 <line:2170:7, col:64> col:64 type 'typename __decay_selector<__remove_type>::__type'
| |     `-DependentNameType 0xdcafd0 'typename __decay_selector<__remove_type>::__type' dependent
| |-ClassTemplateDecl 0xdcb1d0 <line:2176:3, line:2180:5> line:2177:12 __strip_reference_wrapper
| | |-TemplateTypeParmDecl 0xdcb0b0 <line:2176:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xdcb140 <line:2177:5, line:2180:5> line:2177:12 struct __strip_reference_wrapper definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdcb410 <col:5, col:12> col:12 implicit struct __strip_reference_wrapper
| |   `-TypedefDecl 0xdcb4b0 <line:2179:7, col:19> col:19 __type '_Tp'
| |     `-TemplateTypeParmType 0xdcb100 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xdcb0b0 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xdcb6f0 <line:2182:3, line:2186:5> line:2183:12 struct __strip_reference_wrapper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'reference_wrapper<type-parameter-0-0>'
| | | `-TemplateSpecializationType 0xcd9070 'reference_wrapper<type-parameter-0-0>' dependent reference_wrapper
| | |   `-TemplateArgument type 'type-parameter-0-0'
| | |     `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xdcb520 <line:2182:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xdcb928 <line:2183:5, col:12> col:12 implicit struct __strip_reference_wrapper
| | `-TypedefDecl 0xdcb9f8 <line:2185:7, col:20> col:20 __type '_Tp &'
| |   `-LValueReferenceType 0xdcb9c0 '_Tp &' dependent
| |     `-TemplateTypeParmType 0xdcb570 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xdcb520 '_Tp'
| |-TypeAliasTemplateDecl 0xdcbcb0 <line:2189:3, line:2190:44> col:5 __decay_t
| | |-TemplateTypeParmDecl 0xdcba68 <line:2189:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xdcbc50 <line:2190:5, col:44> col:11 __decay_t 'typename decay<_Tp>::type'
| |   `-DependentNameType 0xdcbbe0 'typename decay<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xdcd2f0 <line:2192:3, line:2193:71> col:5 __decay_and_strip
| | |-TemplateTypeParmDecl 0xdcbd08 <line:2192:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xdcd290 <line:2193:5, col:71> col:11 __decay_and_strip '__strip_reference_wrapper<__decay_t<_Tp>>'
| |   `-TemplateSpecializationType 0xdcd210 '__strip_reference_wrapper<__decay_t<_Tp>>' dependent __strip_reference_wrapper
| |     `-TemplateArgument type '__decay_t<_Tp>':'typename decay<type-parameter-0-0>::type'
| |       `-TemplateSpecializationType 0xdcd140 '__decay_t<_Tp>' sugar dependent alias __decay_t
| |         |-TemplateArgument type '_Tp'
| |         | `-TemplateTypeParmType 0xdccf70 '_Tp' dependent depth 0 index 0
| |         |   `-TemplateTypeParm 0xdcbd08 '_Tp'
| |         `-DependentNameType 0xdcd0f0 'typename decay<type-parameter-0-0>::type' dependent
| |-ClassTemplateDecl 0xdcd4f8 <line:2198:3, line:2200:7> line:2199:12 enable_if
| | |-NonTypeTemplateParmDecl 0xdcd358 <line:2198:12> col:16 'bool' depth 0 index 0
| | |-TemplateTypeParmDecl 0xdcd3c8 <col:18, col:33> col:27 typename depth 0 index 1 _Tp
| | | `-TemplateArgument type 'void'
| | |   `-BuiltinType 0xbf61b0 'void'
| | `-CXXRecordDecl 0xdcd468 <line:2199:5, line:2200:7> line:2199:12 struct enable_if definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   `-CXXRecordDecl 0xdcd7a0 <col:5, col:12> col:12 implicit struct enable_if
| |-ClassTemplatePartialSpecializationDecl 0xdcda28 <line:2203:3, line:2205:25> line:2204:12 struct enable_if definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xdcd848 <line:2203:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xdcdca8 <line:2204:5, col:12> col:12 implicit struct enable_if
| | `-TypedefDecl 0xdcdd48 <line:2205:7, col:19> col:19 type '_Tp'
| |   `-TemplateTypeParmType 0xdcd8a0 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0xdcd848 '_Tp'
| |-TypeAliasTemplateDecl 0xdce0d0 <line:2210:3, line:2211:59> col:5 __enable_if_t
| | |-NonTypeTemplateParmDecl 0xdcddc8 <line:2210:12, col:17> col:17 referenced 'bool' depth 0 index 0 _Cond
| | |-TemplateTypeParmDecl 0xdcde38 <col:24, col:39> col:33 referenced typename depth 0 index 1 _Tp
| | | `-TemplateArgument type 'void'
| | |   `-BuiltinType 0xbf61b0 'void'
| | `-TypeAliasDecl 0xdce070 <line:2211:5, col:59> col:11 __enable_if_t 'typename enable_if<_Cond, _Tp>::type'
| |   `-DependentNameType 0xdce000 'typename enable_if<_Cond, _Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xdce6a8 <line:2214:3, line:2215:59> col:5 _Require
| | |-TemplateTypeParmDecl 0xdce128 <line:2214:12, col:24> col:24 referenced typename depth 0 index 0 ... _Cond
| | `-TypeAliasDecl 0xdce648 <line:2215:5, col:59> col:11 _Require '__enable_if_t<__and_<_Cond...>::value>':'typename enable_if<__and_<_Cond...>::value, void>::type'
| |   `-TemplateSpecializationType 0xdce5c0 '__enable_if_t<__and_<_Cond...>::value>' sugar dependent alias __enable_if_t
| |     |-TemplateArgument expr
| |     | `-ImplicitCastExpr 0xdce330 <col:36, col:54> 'bool' <Dependent>
| |     |   `-DependentScopeDeclRefExpr 0xdce2f8 <col:36, col:54> '<dependent type>' lvalue
| |     `-DependentNameType 0xdce570 'typename enable_if<__and_<_Cond...>::value, void>::type' dependent
| |-TypeAliasTemplateDecl 0xdcea70 <line:2218:3, line:2220:66> line:2219:5 __remove_cvref_t
| | |-TemplateTypeParmDecl 0xdce700 <line:2218:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xdcea10 <line:2219:5, line:2220:66> line:2219:11 __remove_cvref_t 'typename remove_cv<typename remove_reference<_Tp>::type>::type'
| |   `-DependentNameType 0xdce9a0 'typename remove_cv<typename remove_reference<_Tp>::type>::type' dependent
| |-ClassTemplateDecl 0xdcecf0 prev 0xce4ea0 <line:2225:3, line:2227:29> line:2226:12 conditional
| | |-NonTypeTemplateParmDecl 0xdcead8 <line:2225:12, col:17> col:17 'bool' depth 0 index 0 _Cond
| | |-TemplateTypeParmDecl 0xdceb38 <col:24, col:33> col:33 referenced typename depth 0 index 1 _Iftrue
| | |-TemplateTypeParmDecl 0xdcebb8 <col:42, col:51> col:51 typename depth 0 index 2 _Iffalse
| | `-CXXRecordDecl 0xdcec60 prev 0xce4e10 <line:2226:5, line:2227:29> line:2226:12 struct conditional definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdcedb0 <col:5, col:12> col:12 implicit struct conditional
| |   `-TypedefDecl 0xdcee50 <line:2227:7, col:23> col:23 type '_Iftrue'
| |     `-TemplateTypeParmType 0xdceb90 '_Iftrue' dependent depth 0 index 1
| |       `-TemplateTypeParm 0xdceb38 '_Iftrue'
| |-ClassTemplatePartialSpecializationDecl 0xdcf700 <line:2230:3, line:2232:30> line:2231:12 struct conditional definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0xdceec0 <line:2230:12, col:21> col:21 referenced typename depth 0 index 0 _Iftrue
| | |-TemplateTypeParmDecl 0xdcf4c0 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Iffalse
| | |-CXXRecordDecl 0xdcf9c8 <line:2231:5, col:12> col:12 implicit struct conditional
| | `-TypedefDecl 0xdcfa68 <line:2232:7, col:24> col:24 type '_Iffalse'
| |   `-TemplateTypeParmType 0xdcf510 '_Iffalse' dependent depth 0 index 1
| |     `-TemplateTypeParm 0xdcf4c0 '_Iffalse'
| |-ClassTemplateDecl 0xdcfc00 <line:2235:3, line:2236:12> col:12 common_type
| | |-TemplateTypeParmDecl 0xdcfad8 <line:2235:12, col:24> col:24 typename depth 0 index 0 ... _Tp
| | |-CXXRecordDecl 0xdcfb70 <line:2236:5, col:12> col:12 struct common_type
| | `-ClassTemplateSpecialization 0xdd1dc0 'common_type'
| |-CXXRecordDecl 0xdcfe38 <line:2241:3, line:2268:3> line:2241:10 referenced struct __do_common_type_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xdcff58 <col:3, col:10> col:10 implicit struct __do_common_type_impl
| | |-TypeAliasTemplateDecl 0xdd03b8 <line:2243:5, line:2245:61> line:2244:7 __cond_t
| | | |-TemplateTypeParmDecl 0xdcffe8 <line:2243:14, col:23> col:23 referenced typename depth 0 index 0 _Tp
| | | |-TemplateTypeParmDecl 0xdd0068 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Up
| | | `-TypeAliasDecl 0xdd0358 <line:2244:7, line:2245:61> line:2244:13 __cond_t 'decltype(true ? std::declval<_Tp>() : std::declval<_Up>())'
| | |   `-DecltypeType 0xdd0320 'decltype(true ? std::declval<_Tp>() : std::declval<_Up>())' dependent
| | |     `-ConditionalOperator 0xdd02a8 <line:2245:13, col:60> '<dependent type>'
| | |       |-CXXBoolLiteralExpr 0xdd0108 <col:13> 'bool' true
| | |       |-CallExpr 0xdd01c0 <col:20, col:38> '<dependent type>'
| | |       | `-UnresolvedLookupExpr 0xdd0148 <col:20, col:36> '<dependent type>' lvalue (no ADL) = 'declval' 0xd292c0
| | |       `-CallExpr 0xdd0288 <col:42, col:60> '<dependent type>'
| | |         `-UnresolvedLookupExpr 0xdd0210 <col:42, col:58> '<dependent type>' lvalue (no ADL) = 'declval' 0xd292c0
| | |-FunctionTemplateDecl 0xdd0d38 <line:2249:5, line:2251:18> col:7 _S_test
| | | |-TemplateTypeParmDecl 0xdd0410 <line:2249:14, col:23> col:23 referenced typename depth 0 index 0 _Tp
| | | |-TemplateTypeParmDecl 0xdd0488 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Up
| | | `-CXXMethodDecl 0xdd0c98 <line:2250:7, line:2251:18> col:7 _S_test '__success_type<__decay_t<__cond_t<_Tp, _Up>>> (int)' static
| | |   `-ParmVarDecl 0xdd0b68 <col:15> col:18 'int'
| | |-FunctionTemplateDecl 0xdd0fb0 <line:2261:5, line:2263:20> col:7 _S_test_2
| | | |-TemplateTypeParmDecl 0xdd0d98 <line:2261:14> col:22 typename depth 0 index 0
| | | |-TemplateTypeParmDecl 0xdd0e18 <col:24> col:32 typename depth 0 index 1
| | | `-CXXMethodDecl 0xdd0f10 <line:2262:7, line:2263:20> col:7 _S_test_2 'std::__failure_type (...)' static
| | `-FunctionTemplateDecl 0xdd13c0 <line:2265:5, line:2267:18> col:7 _S_test
| |   |-TemplateTypeParmDecl 0xdd1008 <line:2265:14, col:23> col:23 referenced typename depth 0 index 0 _Tp
| |   |-TemplateTypeParmDecl 0xdd1088 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Up
| |   `-CXXMethodDecl 0xdd1320 <line:2266:7, line:2267:18> col:7 _S_test 'decltype(_S_test_2<_Tp, _Up>(0)) (...)' static
| |-ClassTemplateSpecializationDecl 0xdd1dc0 <line:2271:3, line:2273:7> line:2272:12 struct common_type definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument pack
| | `-CXXRecordDecl 0xdd1fa8 <col:5, col:12> col:12 implicit struct common_type
| |-ClassTemplatePartialSpecializationDecl 0xdd21d0 <line:2276:3, line:2279:7> line:2277:12 struct common_type definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'common_type<_Tp0, _Tp0>'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xdd2050 <line:2276:12, col:21> col:21 referenced typename depth 0 index 0 _Tp0
| | `-CXXRecordDecl 0xdd2590 <line:2277:5, col:12> col:12 implicit struct common_type
| |-ClassTemplateDecl 0xdd2db8 <line:2282:3, line:2289:5> line:2284:12 __common_type_impl
| | |-TemplateTypeParmDecl 0xdd2638 <line:2282:12, col:21> col:21 referenced typename depth 0 index 0 _Tp1
| | |-TemplateTypeParmDecl 0xdd26b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Tp2
| | |-TemplateTypeParmDecl 0xdd2928 <line:2283:5, col:35> col:14 referenced typename depth 0 index 2 _Dp1
| | | `-TemplateArgument type '__decay_t<_Tp1>':'typename decay<type-parameter-0-0>::type'
| | |   `-TemplateSpecializationType 0xdd28a0 '__decay_t<_Tp1>' sugar dependent alias __decay_t
| | |     |-TemplateArgument type '_Tp1'
| | |     | `-TemplateTypeParmType 0xdd2690 '_Tp1' dependent depth 0 index 0
| | |     |   `-TemplateTypeParm 0xdd2638 '_Tp1'
| | |     `-DependentNameType 0xdd2850 'typename decay<type-parameter-0-0>::type' dependent
| | |-TemplateTypeParmDecl 0xdd2c48 <col:38, <scratch space>:81:1> /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:2283:47 referenced typename depth 0 index 3 _Dp2
| | | `-TemplateArgument type '__decay_t<_Tp2>':'typename decay<type-parameter-0-1>::type'
| | |   `-TemplateSpecializationType 0xdd2bc0 '__decay_t<_Tp2>' sugar dependent alias __decay_t
| | |     |-TemplateArgument type '_Tp2'
| | |     | `-TemplateTypeParmType 0xdd2710 '_Tp2' dependent depth 0 index 1
| | |     |   `-TemplateTypeParm 0xdd26b8 '_Tp2'
| | |     `-DependentNameType 0xdd2b70 'typename decay<type-parameter-0-1>::type' dependent
| | `-CXXRecordDecl 0xdd2d28 <line:2284:5, line:2289:5> line:2284:12 struct __common_type_impl definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdd30a0 <col:5, col:12> col:12 implicit struct __common_type_impl
| |   `-TypeAliasDecl 0xdd3298 <line:2288:7, col:42> col:13 type 'common_type<_Dp1, _Dp2>'
| |     `-TemplateSpecializationType 0xdd31f0 'common_type<_Dp1, _Dp2>' dependent common_type
| |       |-TemplateArgument type '_Dp1'
| |       | `-TemplateTypeParmType 0xdd2980 '_Dp1' dependent depth 0 index 2
| |       |   `-TemplateTypeParm 0xdd2928 '_Dp1'
| |       `-TemplateArgument type '_Dp2'
| |         `-TemplateTypeParmType 0xdd2cd0 '_Dp2' dependent depth 0 index 3
| |           `-TemplateTypeParm 0xdd2c48 '_Dp2'
| |-ClassTemplatePartialSpecializationDecl 0xdd3618 <line:2291:3, line:2298:5> line:2292:12 struct __common_type_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-private 'std::__do_common_type_impl'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0xdd3310 <line:2291:12, col:21> col:21 referenced typename depth 0 index 0 _Tp1
| | |-TemplateTypeParmDecl 0xdd3388 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Tp2
| | |-CXXRecordDecl 0xdd3948 <line:2292:5, col:12> col:12 implicit struct __common_type_impl
| | `-TypeAliasDecl 0xdd3b78 <line:2297:7, col:51> col:13 type 'decltype(_S_test<_Tp1, _Tp2>(0))'
| |   `-DecltypeType 0xdd3b40 'decltype(_S_test<_Tp1, _Tp2>(0))' dependent
| |     `-CallExpr 0xdd3ad0 <col:29, col:50> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xdd3a10 <col:29, col:47> '<dependent type>' lvalue (no ADL) = '_S_test' 0xdd0d38 0xdd13c0
| |       `-IntegerLiteral 0xdd3ab0 <col:49> 'int' 0
| |-ClassTemplatePartialSpecializationDecl 0xdd73a0 <line:2301:3, line:2304:7> line:2302:12 struct common_type definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__common_type_impl<_Tp1, _Tp2>::type'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | | `-TemplateArgument type 'type-parameter-0-1'
| | |   `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0xdd3bf0 <line:2301:12, col:21> col:21 referenced typename depth 0 index 0 _Tp1
| | |-TemplateTypeParmDecl 0xdd3c68 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Tp2
| | `-CXXRecordDecl 0xdd7c90 <line:2302:5, col:12> col:12 implicit struct common_type
| |-ClassTemplateDecl 0xdd7e60 <line:2306:3, line:2308:7> line:2307:12 __common_type_pack
| | |-TemplateTypeParmDecl 0xdd7d38 <line:2306:12> col:23 typename depth 0 index 0 ...
| | `-CXXRecordDecl 0xdd7dd0 <line:2307:5, line:2308:7> line:2307:12 struct __common_type_pack definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   `-CXXRecordDecl 0xdd8100 <col:5, col:12> col:12 implicit struct __common_type_pack
| |-ClassTemplateDecl 0xdd83f0 <line:2310:3, line:2311:12> col:12 __common_type_fold
| | |-TemplateTypeParmDecl 0xdd81a8 <line:2310:12> col:20 typename depth 0 index 0
| | |-TemplateTypeParmDecl 0xdd8228 <col:22> col:30 typename depth 0 index 1
| | |-TemplateTypeParmDecl 0xdd82b8 <col:32, col:43> col:41 typename depth 0 index 2
| | | `-TemplateArgument type 'void'
| | |   `-BuiltinType 0xbf61b0 'void'
| | `-CXXRecordDecl 0xdd8360 <line:2311:5, col:12> col:12 struct __common_type_fold
| |-ClassTemplatePartialSpecializationDecl 0xdd89c0 <line:2314:3, line:2318:7> line:2315:12 struct common_type definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__common_type_fold<common_type<_Tp1, _Tp2>, __common_type_pack<_Rp...>>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | | |-TemplateArgument type 'type-parameter-0-1'
| | | | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | | `-TemplateArgument type 'type-parameter-0-2...'
| | |   `-PackExpansionType 0xd8b190 'type-parameter-0-2...' dependent
| | |     `-TemplateTypeParmType 0xd8b0d0 'type-parameter-0-2' dependent contains_unexpanded_pack depth 0 index 2 pack
| | |-TemplateTypeParmDecl 0xdd8628 <line:2314:12, col:21> col:21 referenced typename depth 0 index 0 _Tp1
| | |-TemplateTypeParmDecl 0xdd86a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Tp2
| | |-TemplateTypeParmDecl 0xdd8728 <col:42, col:54> col:54 referenced typename depth 0 index 2 ... _Rp
| | `-CXXRecordDecl 0xdd9030 <line:2315:5, col:12> col:12 implicit struct common_type
| |-ClassTemplatePartialSpecializationDecl 0xdd9600 <line:2323:3, line:2327:7> line:2324:12 struct __common_type_fold definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'common_type<typename _CTp::type, _Rp...>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type '__common_type_pack<type-parameter-0-1...>'
| | | `-TemplateSpecializationType 0xdd9290 '__common_type_pack<type-parameter-0-1...>' dependent __common_type_pack
| | |   `-TemplateArgument pack
| | |     `-TemplateArgument type 'type-parameter-0-1...'
| | |       `-PackExpansionType 0xd08c60 'type-parameter-0-1...' dependent
| | |         `-TemplateTypeParmType 0xd14700 'type-parameter-0-1' dependent contains_unexpanded_pack depth 0 index 1 pack
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0xbf61b0 'void'
| | |-TemplateTypeParmDecl 0xdd90d8 <line:2323:12, col:21> col:21 referenced typename depth 0 index 0 _CTp
| | |-TemplateTypeParmDecl 0xdd9158 <col:27, col:39> col:39 referenced typename depth 0 index 1 ... _Rp
| | `-CXXRecordDecl 0xdd9a80 <line:2324:5, col:12> col:12 implicit struct __common_type_fold
| |-ClassTemplatePartialSpecializationDecl 0xdd9dd0 <line:2330:3, line:2332:7> line:2331:12 struct __common_type_fold definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0xbf61b0 'void'
| | |-TemplateTypeParmDecl 0xdd9b28 <line:2330:12, col:21> col:21 referenced typename depth 0 index 0 _CTp
| | |-TemplateTypeParmDecl 0xdd9ba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Rp
| | `-CXXRecordDecl 0xdda078 <line:2331:5, col:12> col:12 implicit struct __common_type_fold
| |-ClassTemplateDecl 0xdda3c0 <line:2334:3, line:2338:5> line:2335:12 __underlying_type_impl
| | |-TemplateTypeParmDecl 0xdda120 <line:2334:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xdda298 <col:26, col:47> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xdda2f8 <col:33, col:47> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xdda250 <col:33, col:47> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xdda330 <line:2335:5, line:2338:5> line:2335:12 struct __underlying_type_impl definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdda660 <col:5, col:12> col:12 implicit struct __underlying_type_impl
| |   `-TypeAliasDecl 0xdda790 <line:2337:7, col:41> col:13 type '__underlying_type(_Tp)'
| |     `-UnaryTransformType 0xdda740 '__underlying_type(_Tp)' dependent underlying_type
| |       `-TemplateTypeParmType 0xdda170 '_Tp' dependent depth 0 index 0
| |         `-TemplateTypeParm 0xdda120 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xdda9e8 <line:2340:3, line:2342:7> line:2341:12 struct __underlying_type_impl definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xdda808 <line:2340:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xddac68 <line:2341:5, col:12> col:12 implicit struct __underlying_type_impl
| |-ClassTemplateDecl 0xddae30 <line:2346:3, line:2349:7> line:2347:12 underlying_type
| | |-TemplateTypeParmDecl 0xddad10 <line:2346:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xddada0 <line:2347:5, line:2349:7> line:2347:12 struct underlying_type definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__underlying_type_impl<_Tp>'
| |   `-CXXRecordDecl 0xddc780 <col:5, col:12> col:12 implicit struct underlying_type
| |-ClassTemplateDecl 0xddc950 <line:2352:3, line:2356:5> line:2353:12 __declval_protector
| | |-TemplateTypeParmDecl 0xddc828 <line:2352:12, col:21> col:21 typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xddc8c0 <line:2353:5, line:2356:5> line:2353:12 struct __declval_protector definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xddcb90 <col:5, col:12> col:12 implicit struct __declval_protector
| |   `-VarDecl 0xddcc30 <line:2355:7, col:34> col:25 __stop 'const bool' static cinit
| |     `-CXXBoolLiteralExpr 0xddcc98 <col:34> 'bool' false
| |-FunctionTemplateDecl 0xddcfd0 prev 0xd292c0 <line:2363:3, line:2369:5> line:2364:10 declval
| | |-TemplateTypeParmDecl 0xddcd18 <line:2363:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xddcf30 prev 0xd29220 <line:2364:5, line:2369:5> line:2364:10 declval 'auto () noexcept -> decltype(__declval<_Tp>(0))'
| |   `-CompoundStmt 0xddd328 <line:2365:5, line:2369:5>
| |     |-DeclStmt 0xddd210 <line:2366:7, line:2367:37>
| |     | `-StaticAssertDecl 0xddd1d0 <line:2366:7, line:2367:36> line:2366:7
| |     |   |-DependentScopeDeclRefExpr 0xddd0e0 <col:21, col:47> '<dependent type>' lvalue
| |     |   `-StringLiteral 0xddd198 <line:2367:7> 'const char[28]' lvalue "declval() must not be used!"
| |     `-ReturnStmt 0xddd318 <line:2368:7, col:30>
| |       `-CallExpr 0xddd2f0 <col:14, col:30> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xddd250 <col:14, col:27> '<dependent type>' lvalue (ADL) = '__declval' 0xd28e80 0xd28468
| |         `-IntegerLiteral 0xddd2d0 <col:29> 'int' 0
| |-ClassTemplateDecl 0xddd470 <line:2372:3, line:2373:12> col:12 result_of
| | |-TemplateTypeParmDecl 0xddd348 <line:2372:12, col:21> col:21 typename depth 0 index 0 _Signature
| | `-CXXRecordDecl 0xddd3e0 <line:2373:5, col:12> col:12 struct result_of
| |-CXXRecordDecl 0xddd648 <line:2380:3, col:32> col:10 referenced struct __invoke_memfun_ref definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | `-CXXRecordDecl 0xddd768 <col:3, col:10> col:10 implicit struct __invoke_memfun_ref
| |-CXXRecordDecl 0xddd810 <line:2381:3, col:34> col:10 referenced struct __invoke_memfun_deref definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | `-CXXRecordDecl 0xddd928 <col:3, col:10> col:10 implicit struct __invoke_memfun_deref
| |-CXXRecordDecl 0xddd9d0 <line:2382:3, col:32> col:10 referenced struct __invoke_memobj_ref definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | `-CXXRecordDecl 0xdddae8 <col:3, col:10> col:10 implicit struct __invoke_memobj_ref
| |-CXXRecordDecl 0xdddb90 <line:2383:3, col:34> col:10 referenced struct __invoke_memobj_deref definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | `-CXXRecordDecl 0xdddca8 <col:3, col:10> col:10 implicit struct __invoke_memobj_deref
| |-CXXRecordDecl 0xdddd50 <line:2384:3, col:27> col:10 referenced struct __invoke_other definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | `-CXXRecordDecl 0xddde68 <col:3, col:10> col:10 implicit struct __invoke_other
| |-ClassTemplateDecl 0xdde0b8 <line:2387:3, line:2389:35> line:2388:12 __result_of_success
| | |-TemplateTypeParmDecl 0xdddf10 <line:2387:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xdddf88 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Tag
| | `-CXXRecordDecl 0xdde028 <line:2388:5, line:2389:35> line:2388:12 struct __result_of_success definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__success_type<_Tp>'
| |   |-CXXRecordDecl 0xdde3e0 <col:5, col:12> col:12 implicit struct __result_of_success
| |   `-TypeAliasDecl 0xdde480 <line:2389:7, col:29> col:13 __invoke_type '_Tag'
| |     `-TemplateTypeParmType 0xdddfe0 '_Tag' dependent depth 0 index 1
| |       `-TemplateTypeParm 0xdddf88 '_Tag'
| |-CXXRecordDecl 0xdde4f8 <line:2392:3, line:2401:3> line:2392:10 referenced struct __result_of_memfun_ref_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xdde618 <col:3, col:10> col:10 implicit struct __result_of_memfun_ref_impl
| | |-FunctionTemplateDecl 0xde0b90 <line:2394:5, line:2397:42> col:31 _S_test
| | | |-TemplateTypeParmDecl 0xdde6a8 <line:2394:14, col:23> col:23 referenced typename depth 0 index 0 _Fp
| | | |-TemplateTypeParmDecl 0xdde728 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Tp1
| | | |-TemplateTypeParmDecl 0xde0478 <col:43, col:55> col:55 referenced typename depth 0 index 2 ... _Args
| | | `-CXXMethodDecl 0xde0af0 <line:2395:7, line:2397:42> col:31 _S_test '__result_of_success<decltype((std::declval<_Tp1>() .* std::declval<_Fp>())(std::declval<_Args>()...)), std::__invoke_memfun_ref> (int)' static
| | |   `-ParmVarDecl 0xde09b8 <col:39> col:42 'int'
| | `-FunctionTemplateDecl 0xde0d40 <line:2399:5, line:2400:40> col:29 _S_test
| |   |-TemplateTypeParmDecl 0xde0bf0 <line:2399:14> col:25 typename depth 0 index 0 ...
| |   `-CXXMethodDecl 0xde0ca0 <line:2400:7, col:40> col:29 _S_test 'std::__failure_type (...)' static
| |-ClassTemplateDecl 0xde0ff0 <line:2403:3, line:2408:5> line:2404:12 __result_of_memfun_ref
| | |-TemplateTypeParmDecl 0xde0dc0 <line:2403:12, col:21> col:21 referenced typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xde0e38 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Arg
| | |-TemplateTypeParmDecl 0xde0eb8 <col:45, col:57> col:57 referenced typename depth 0 index 2 ... _Args
| | `-CXXRecordDecl 0xde0f60 <line:2404:5, line:2408:5> line:2404:12 struct __result_of_memfun_ref definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-private 'std::__result_of_memfun_ref_impl'
| |   |-CXXRecordDecl 0xde1330 <col:5, col:12> col:12 implicit struct __result_of_memfun_ref
| |   `-TypedefDecl 0xde1598 <line:2407:7, col:61> col:61 type 'decltype(_S_test<_MemPtr, _Arg, _Args...>(0))'
| |     `-DecltypeType 0xde1560 'decltype(_S_test<_MemPtr, _Arg, _Args...>(0))' dependent
| |       `-CallExpr 0xde14f8 <col:24, col:58> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xde1418 <col:24, col:55> '<dependent type>' lvalue (no ADL) = '_S_test' 0xde0b90 0xde0d40
| |         `-IntegerLiteral 0xde14d8 <col:57> 'int' 0
| |-CXXRecordDecl 0xde1608 <line:2411:3, line:2420:3> line:2411:10 referenced struct __result_of_memfun_deref_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xde1728 <col:3, col:10> col:10 implicit struct __result_of_memfun_deref_impl
| | |-FunctionTemplateDecl 0xde1fe0 <line:2413:5, line:2416:44> col:33 _S_test
| | | |-TemplateTypeParmDecl 0xde17b8 <line:2413:14, col:23> col:23 referenced typename depth 0 index 0 _Fp
| | | |-TemplateTypeParmDecl 0xde1838 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Tp1
| | | |-TemplateTypeParmDecl 0xde18b8 <col:43, col:55> col:55 referenced typename depth 0 index 2 ... _Args
| | | `-CXXMethodDecl 0xde1f40 <line:2414:7, line:2416:44> col:33 _S_test '__result_of_success<decltype(((*std::declval<_Tp1>()) .* std::declval<_Fp>())(std::declval<_Args>()...)), std::__invoke_memfun_deref> (int)' static
| | |   `-ParmVarDecl 0xde1e08 <col:41> col:44 'int'
| | `-FunctionTemplateDecl 0xde2190 <line:2418:5, line:2419:40> col:29 _S_test
| |   |-TemplateTypeParmDecl 0xde2040 <line:2418:14> col:25 typename depth 0 index 0 ...
| |   `-CXXMethodDecl 0xde20f0 <line:2419:7, col:40> col:29 _S_test 'std::__failure_type (...)' static
| |-ClassTemplateDecl 0xde2940 <line:2422:3, line:2427:5> line:2423:12 __result_of_memfun_deref
| | |-TemplateTypeParmDecl 0xde2210 <line:2422:12, col:21> col:21 referenced typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xde2288 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Arg
| | |-TemplateTypeParmDecl 0xde2308 <col:45, col:57> col:57 referenced typename depth 0 index 2 ... _Args
| | `-CXXRecordDecl 0xde23b0 <line:2423:5, line:2427:5> line:2423:12 struct __result_of_memfun_deref definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-private 'std::__result_of_memfun_deref_impl'
| |   |-CXXRecordDecl 0xde2c80 <col:5, col:12> col:12 implicit struct __result_of_memfun_deref
| |   `-TypedefDecl 0xde2ea8 <line:2426:7, col:61> col:61 type 'decltype(_S_test<_MemPtr, _Arg, _Args...>(0))'
| |     `-DecltypeType 0xde2e70 'decltype(_S_test<_MemPtr, _Arg, _Args...>(0))' dependent
| |       `-CallExpr 0xde2e48 <col:24, col:58> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xde2d68 <col:24, col:55> '<dependent type>' lvalue (no ADL) = '_S_test' 0xde1fe0 0xde2190
| |         `-IntegerLiteral 0xde2e28 <col:57> 'int' 0
| |-CXXRecordDecl 0xde2f18 <line:2430:3, line:2439:3> line:2430:10 referenced struct __result_of_memobj_ref_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xde3038 <col:3, col:10> col:10 implicit struct __result_of_memobj_ref_impl
| | |-FunctionTemplateDecl 0xde3700 <line:2432:5, line:2435:42> col:31 _S_test
| | | |-TemplateTypeParmDecl 0xde30c8 <line:2432:14, col:23> col:23 referenced typename depth 0 index 0 _Fp
| | | |-TemplateTypeParmDecl 0xde3148 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Tp1
| | | `-CXXMethodDecl 0xde3660 <line:2433:7, line:2435:42> col:31 _S_test '__result_of_success<decltype(std::declval<_Tp1>() .* std::declval<_Fp>()), std::__invoke_memobj_ref> (int)' static
| | |   `-ParmVarDecl 0xde3528 <col:39> col:42 'int'
| | `-FunctionTemplateDecl 0xde3938 <line:2437:5, line:2438:40> col:29 _S_test
| |   |-TemplateTypeParmDecl 0xde3760 <line:2437:14> col:22 typename depth 0 index 0
| |   |-TemplateTypeParmDecl 0xde37d8 <col:24> col:32 typename depth 0 index 1
| |   `-CXXMethodDecl 0xde3898 <line:2438:7, col:40> col:29 _S_test 'std::__failure_type (...)' static
| |-ClassTemplateDecl 0xde3b68 <line:2441:3, line:2446:5> line:2442:12 __result_of_memobj_ref
| | |-TemplateTypeParmDecl 0xde39b8 <line:2441:12, col:21> col:21 referenced typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xde3a38 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Arg
| | `-CXXRecordDecl 0xde3ad8 <line:2442:5, line:2446:5> line:2442:12 struct __result_of_memobj_ref definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-private 'std::__result_of_memobj_ref_impl'
| |   |-CXXRecordDecl 0xde3e30 <col:5, col:12> col:12 implicit struct __result_of_memobj_ref
| |   `-TypedefDecl 0xde4018 <line:2445:7, col:51> col:51 type 'decltype(_S_test<_MemPtr, _Arg>(0))'
| |     `-DecltypeType 0xde3fe0 'decltype(_S_test<_MemPtr, _Arg>(0))' dependent
| |       `-CallExpr 0xde3fb8 <col:24, col:48> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xde3ef8 <col:24, col:45> '<dependent type>' lvalue (no ADL) = '_S_test' 0xde3700 0xde3938
| |         `-IntegerLiteral 0xde3f98 <col:47> 'int' 0
| |-CXXRecordDecl 0xde4088 <line:2449:3, line:2458:3> line:2449:10 referenced struct __result_of_memobj_deref_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xde41a8 <col:3, col:10> col:10 implicit struct __result_of_memobj_deref_impl
| | |-FunctionTemplateDecl 0xde48a0 <line:2451:5, line:2454:44> col:33 _S_test
| | | |-TemplateTypeParmDecl 0xde4238 <line:2451:14, col:23> col:23 referenced typename depth 0 index 0 _Fp
| | | |-TemplateTypeParmDecl 0xde42b8 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Tp1
| | | `-CXXMethodDecl 0xde4800 <line:2452:7, line:2454:44> col:33 _S_test '__result_of_success<decltype((*std::declval<_Tp1>()) .* std::declval<_Fp>()), std::__invoke_memobj_deref> (int)' static
| | |   `-ParmVarDecl 0xde46c8 <col:41> col:44 'int'
| | `-FunctionTemplateDecl 0xde54e8 <line:2456:5, line:2457:40> col:29 _S_test
| |   |-TemplateTypeParmDecl 0xde5310 <line:2456:14> col:22 typename depth 0 index 0
| |   |-TemplateTypeParmDecl 0xde5388 <col:24> col:32 typename depth 0 index 1
| |   `-CXXMethodDecl 0xde5448 <line:2457:7, col:40> col:29 _S_test 'std::__failure_type (...)' static
| |-ClassTemplateDecl 0xde5718 <line:2460:3, line:2465:5> line:2461:12 __result_of_memobj_deref
| | |-TemplateTypeParmDecl 0xde5568 <line:2460:12, col:21> col:21 referenced typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xde55e8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Arg
| | `-CXXRecordDecl 0xde5688 <line:2461:5, line:2465:5> line:2461:12 struct __result_of_memobj_deref definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-private 'std::__result_of_memobj_deref_impl'
| |   |-CXXRecordDecl 0xde59e0 <col:5, col:12> col:12 implicit struct __result_of_memobj_deref
| |   `-TypedefDecl 0xde5bc8 <line:2464:7, col:51> col:51 type 'decltype(_S_test<_MemPtr, _Arg>(0))'
| |     `-DecltypeType 0xde5b90 'decltype(_S_test<_MemPtr, _Arg>(0))' dependent
| |       `-CallExpr 0xde5b68 <col:24, col:48> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xde5aa8 <col:24, col:45> '<dependent type>' lvalue (no ADL) = '_S_test' 0xde48a0 0xde54e8
| |         `-IntegerLiteral 0xde5b48 <col:47> 'int' 0
| |-ClassTemplateDecl 0xde5de8 <line:2467:3, line:2468:12> col:12 __result_of_memobj
| | |-TemplateTypeParmDecl 0xde5c38 <line:2467:12, col:21> col:21 typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xde5cb8 <col:30, col:39> col:39 typename depth 0 index 1 _Arg
| | `-CXXRecordDecl 0xde5d58 <line:2468:5, col:12> col:12 struct __result_of_memobj
| |-ClassTemplatePartialSpecializationDecl 0xde6358 <line:2470:3, line:2480:5> line:2471:12 struct __result_of_memobj definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| | | `-MemberPointerType 0xd02b50 'type-parameter-0-0 type-parameter-0-1::*' dependent
| | |   |-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-2'
| | | `-TemplateTypeParmType 0xce4d90 'type-parameter-0-2' dependent depth 0 index 2
| | |-TemplateTypeParmDecl 0xde6008 <line:2470:12, col:21> col:21 referenced typename depth 0 index 0 _Res
| | |-TemplateTypeParmDecl 0xde6088 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Class
| | |-TemplateTypeParmDecl 0xde6108 <col:44, col:53> col:53 referenced typename depth 0 index 2 _Arg
| | |-CXXRecordDecl 0xde65c8 <line:2471:5, col:12> col:12 implicit struct __result_of_memobj
| | |-TypedefDecl 0xde6aa8 <line:2473:7, col:38> col:38 referenced _Argval '__remove_cvref_t<_Arg>':'typename remove_cv<typename remove_reference<type-parameter-0-2>::type>::type'
| | | `-TemplateSpecializationType 0xde6a20 '__remove_cvref_t<_Arg>' sugar dependent alias __remove_cvref_t
| | |   |-TemplateArgument type '_Arg'
| | |   | `-TemplateTypeParmType 0xde6160 '_Arg' dependent depth 0 index 2
| | |   |   `-TemplateTypeParm 0xde6108 '_Arg'
| | |   `-DependentNameType 0xde69d0 'typename remove_cv<typename remove_reference<type-parameter-0-2>::type>::type' dependent
| | |-TypedefDecl 0xde6b48 <line:2474:7, col:30> col:30 referenced _MemPtr '_Res _Class::*'
| | | `-MemberPointerType 0xde61d0 '_Res _Class::*' dependent
| | |   |-TemplateTypeParmType 0xde60e0 '_Class' dependent depth 0 index 1
| | |   | `-TemplateTypeParm 0xde6088 '_Class'
| | |   `-TemplateTypeParmType 0xde6060 '_Res' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0xde6008 '_Res'
| | `-TypedefDecl 0xde8340 <line:2475:7, line:2479:21> col:21 type 'typename conditional<__or_<is_same<_Argval, _Class>, is_base_of<_Class, _Argval>>::value, __result_of_memobj_ref<_MemPtr, _Arg>, __result_of_memobj_deref<_MemPtr, _Arg>>::type::type'
| |   `-DependentNameType 0xde82d0 'typename conditional<__or_<is_same<_Argval, _Class>, is_base_of<_Class, _Argval>>::value, __result_of_memobj_ref<_MemPtr, _Arg>, __result_of_memobj_deref<_MemPtr, _Arg>>::type::type' dependent
| |-ClassTemplateDecl 0xde85e0 <line:2482:3, line:2483:12> col:12 __result_of_memfun
| | |-TemplateTypeParmDecl 0xde83b0 <line:2482:12, col:21> col:21 typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xde8428 <col:30, col:39> col:39 typename depth 0 index 1 _Arg
| | |-TemplateTypeParmDecl 0xde84a8 <col:45, col:57> col:57 typename depth 0 index 2 ... _Args
| | `-CXXRecordDecl 0xde8550 <line:2483:5, col:12> col:12 struct __result_of_memfun
| |-ClassTemplatePartialSpecializationDecl 0xde8d20 <line:2485:3, line:2494:5> line:2486:12 struct __result_of_memfun definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| | | `-MemberPointerType 0xd02b50 'type-parameter-0-0 type-parameter-0-1::*' dependent
| | |   |-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-2'
| | | `-TemplateTypeParmType 0xce4d90 'type-parameter-0-2' dependent depth 0 index 2
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-3...'
| | |   `-PackExpansionType 0xce9c60 'type-parameter-0-3...' dependent
| | |     `-TemplateTypeParmType 0xce9b90 'type-parameter-0-3' dependent contains_unexpanded_pack depth 0 index 3 pack
| | |-TemplateTypeParmDecl 0xde8878 <line:2485:12, col:21> col:21 referenced typename depth 0 index 0 _Res
| | |-TemplateTypeParmDecl 0xde88f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Class
| | |-TemplateTypeParmDecl 0xde8978 <col:44, col:53> col:53 referenced typename depth 0 index 2 _Arg
| | |-TemplateTypeParmDecl 0xde89f8 <col:59, col:71> col:71 referenced typename depth 0 index 3 ... _Args
| | |-CXXRecordDecl 0xde9008 <line:2486:5, col:12> col:12 implicit struct __result_of_memfun
| | |-TypedefDecl 0xde91a0 <line:2488:7, col:53> col:53 referenced _Argval 'typename remove_reference<_Arg>::type'
| | | `-DependentNameType 0xde9130 'typename remove_reference<_Arg>::type' dependent
| | |-TypedefDecl 0xde9240 <line:2489:7, col:30> col:30 referenced _MemPtr '_Res _Class::*'
| | | `-MemberPointerType 0xde8ad0 '_Res _Class::*' dependent
| | |   |-TemplateTypeParmType 0xde8950 '_Class' dependent depth 0 index 1
| | |   | `-TemplateTypeParm 0xde88f8 '_Class'
| | |   `-TemplateTypeParmType 0xde88d0 '_Res' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0xde8878 '_Res'
| | `-TypedefDecl 0xde9a20 <line:2490:7, line:2493:21> col:21 type 'typename conditional<is_base_of<_Class, _Argval>::value, __result_of_memfun_ref<_MemPtr, _Arg, _Args...>, __result_of_memfun_deref<_MemPtr, _Arg, _Args...>>::type::type'
| |   `-DependentNameType 0xde99b0 'typename conditional<is_base_of<_Class, _Argval>::value, __result_of_memfun_ref<_MemPtr, _Arg, _Args...>, __result_of_memfun_deref<_MemPtr, _Arg, _Args...>>::type::type' dependent
| |-ClassTemplateDecl 0xde9f88 <line:2501:3, line:2505:5> line:2502:12 __inv_unwrap
| | |-TemplateTypeParmDecl 0xde9a90 <line:2501:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xde9e58 <col:26, <scratch space>:85:1> /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:2501:35 typename depth 0 index 1 _Up
| | | `-TemplateArgument type '__remove_cvref_t<_Tp>':'typename remove_cv<typename remove_reference<type-parameter-0-0>::type>::type'
| | |   `-TemplateSpecializationType 0xde9dd0 '__remove_cvref_t<_Tp>' sugar dependent alias __remove_cvref_t
| | |     |-TemplateArgument type '_Tp'
| | |     | `-TemplateTypeParmType 0xde9ae0 '_Tp' dependent depth 0 index 0
| | |     |   `-TemplateTypeParm 0xde9a90 '_Tp'
| | |     `-DependentNameType 0xde9d80 'typename remove_cv<typename remove_reference<type-parameter-0-0>::type>::type' dependent
| | `-CXXRecordDecl 0xde9ef8 <line:2502:5, line:2505:5> line:2502:12 struct __inv_unwrap definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdebfe0 <col:5, col:12> col:12 implicit struct __inv_unwrap
| |   `-TypeAliasDecl 0xdec080 <line:2504:7, col:20> col:13 type '_Tp'
| |     `-TemplateTypeParmType 0xde9ae0 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xde9a90 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xdec408 <line:2507:3, line:2511:5> line:2508:12 struct __inv_unwrap definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'reference_wrapper<type-parameter-0-1>'
| | | `-TemplateSpecializationType 0xdec240 'reference_wrapper<type-parameter-0-1>' dependent reference_wrapper
| | |   `-TemplateArgument type 'type-parameter-0-1'
| | |     `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0xdec0f8 <line:2507:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xdec178 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | |-CXXRecordDecl 0xdec688 <line:2508:5, col:12> col:12 implicit struct __inv_unwrap
| | `-TypeAliasDecl 0xdec788 <line:2510:7, col:23> col:13 type '_Up &'
| |   `-LValueReferenceType 0xdec750 '_Up &' dependent
| |     `-TemplateTypeParmType 0xdec1d0 '_Up' dependent depth 0 index 1
| |       `-TemplateTypeParm 0xdec178 '_Up'
| |-ClassTemplateDecl 0xdeca98 <line:2513:3, line:2517:5> line:2514:12 __result_of_impl
| | |-NonTypeTemplateParmDecl 0xdec810 <line:2513:12> col:16 'bool' depth 0 index 0
| | |-NonTypeTemplateParmDecl 0xdec880 <col:18> col:22 'bool' depth 0 index 1
| | |-TemplateTypeParmDecl 0xdec8e0 <col:24, col:33> col:33 typename depth 0 index 2 _Functor
| | |-TemplateTypeParmDecl 0xdec958 <col:43, col:55> col:55 typename depth 0 index 3 ... _ArgTypes
| | `-CXXRecordDecl 0xdeca08 <line:2514:5, line:2517:5> line:2514:12 struct __result_of_impl definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdece20 <col:5, col:12> col:12 implicit struct __result_of_impl
| |   `-TypedefDecl 0xdecec0 <line:2516:7, col:30> col:30 type 'std::__failure_type'
| |     `-RecordType 0xcf36e0 'std::__failure_type'
| |       `-CXXRecord 0xcf3650 '__failure_type'
| |-ClassTemplatePartialSpecializationDecl 0xded2a8 <line:2519:3, line:2523:7> line:2520:12 struct __result_of_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__result_of_memobj<__decay_t<_MemPtr>, typename __inv_unwrap<_Arg>::type>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-1'
| | |   `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0xdecf30 <line:2519:12, col:21> col:21 referenced typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xdecfa8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Arg
| | `-CXXRecordDecl 0xdee8b0 <line:2520:5, col:12> col:12 implicit struct __result_of_impl
| |-ClassTemplatePartialSpecializationDecl 0xdeedf8 <line:2525:3, line:2529:7> line:2526:12 struct __result_of_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__result_of_memfun<__decay_t<_MemPtr>, typename __inv_unwrap<_Arg>::type, _Args...>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-1'
| | | | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | | `-TemplateArgument type 'type-parameter-0-2...'
| | |   `-PackExpansionType 0xd8b190 'type-parameter-0-2...' dependent
| | |     `-TemplateTypeParmType 0xd8b0d0 'type-parameter-0-2' dependent contains_unexpanded_pack depth 0 index 2 pack
| | |-TemplateTypeParmDecl 0xdee958 <line:2525:12, col:21> col:21 referenced typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xdee9d8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Arg
| | |-TemplateTypeParmDecl 0xdeea58 <col:45, col:57> col:57 referenced typename depth 0 index 2 ... _Args
| | `-CXXRecordDecl 0xdef940 <line:2526:5, col:12> col:12 implicit struct __result_of_impl
| |-CXXRecordDecl 0xdef9e8 <line:2532:3, line:2541:3> line:2532:10 referenced struct __result_of_other_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xdefb08 <col:3, col:10> col:10 implicit struct __result_of_other_impl
| | |-FunctionTemplateDecl 0xdf01f0 <line:2534:5, line:2537:37> col:26 _S_test
| | | |-TemplateTypeParmDecl 0xdefb98 <line:2534:14, col:23> col:23 referenced typename depth 0 index 0 _Fn
| | | |-TemplateTypeParmDecl 0xdefc18 <col:28, col:40> col:40 referenced typename depth 0 index 1 ... _Args
| | | `-CXXMethodDecl 0xdf0150 <line:2535:7, line:2537:37> col:26 _S_test '__result_of_success<decltype(std::declval<_Fn>()(std::declval<_Args>()...)), std::__invoke_other> (int)' static
| | |   `-ParmVarDecl 0xdf0018 <col:34> col:37 'int'
| | `-FunctionTemplateDecl 0xdf03a0 <line:2539:5, line:2540:40> col:29 _S_test
| |   |-TemplateTypeParmDecl 0xdf0250 <line:2539:14> col:25 typename depth 0 index 0 ...
| |   `-CXXMethodDecl 0xdf0300 <line:2540:7, col:40> col:29 _S_test 'std::__failure_type (...)' static
| |-ClassTemplatePartialSpecializationDecl 0xdf07d8 <line:2543:3, line:2548:5> line:2544:12 struct __result_of_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-private 'std::__result_of_other_impl'
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-1...'
| | |   `-PackExpansionType 0xd08c60 'type-parameter-0-1...' dependent
| | |     `-TemplateTypeParmType 0xd14700 'type-parameter-0-1' dependent contains_unexpanded_pack depth 0 index 1 pack
| | |-TemplateTypeParmDecl 0xdf0420 <line:2543:12, col:21> col:21 referenced typename depth 0 index 0 _Functor
| | |-TemplateTypeParmDecl 0xdf0498 <col:31, col:43> col:43 referenced typename depth 0 index 1 ... _ArgTypes
| | |-CXXRecordDecl 0xdf0ca8 <line:2544:5, col:12> col:12 implicit struct __result_of_impl
| | `-TypedefDecl 0xdf0ee8 <line:2547:7, col:60> col:60 type 'decltype(_S_test<_Functor, _ArgTypes...>(0))'
| |   `-DecltypeType 0xdf0eb0 'decltype(_S_test<_Functor, _ArgTypes...>(0))' dependent
| |     `-CallExpr 0xdf0e40 <col:24, col:57> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xdf0d80 <col:24, col:54> '<dependent type>' lvalue (no ADL) = '_S_test' 0xdf01f0 0xdf03a0
| |       `-IntegerLiteral 0xdf0e20 <col:56> 'int' 0
| |-ClassTemplateDecl 0xdf1108 <line:2551:3, line:2562:7> line:2552:12 __invoke_result
| | |-TemplateTypeParmDecl 0xdf0f58 <line:2551:12, col:21> col:21 referenced typename depth 0 index 0 _Functor
| | |-TemplateTypeParmDecl 0xdf0fd8 <col:31, col:43> col:43 referenced typename depth 0 index 1 ... _ArgTypes
| | `-CXXRecordDecl 0xdf1078 <line:2552:5, line:2562:7> line:2552:12 struct __invoke_result definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__result_of_impl<is_member_object_pointer<typename remove_reference<_Functor>::type>::value, is_member_function_pointer<typename remove_reference<_Functor>::type>::value, _Functor, _ArgTypes...>::type'
| |   `-CXXRecordDecl 0xdf1b70 <col:5, col:12> col:12 implicit struct __invoke_result
| |-ClassTemplatePartialSpecializationDecl 0xdf1f20 <line:2565:3, line:2568:7> line:2566:12 struct result_of definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__invoke_result<_Functor, _ArgTypes...>'
| | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1...)'
| | | `-FunctionProtoType 0xdf1de0 'type-parameter-0-0 (type-parameter-0-1...)' dependent cdecl
| | |   |-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |   `-PackExpansionType 0xd08c60 'type-parameter-0-1...' dependent
| | |     `-TemplateTypeParmType 0xd14700 'type-parameter-0-1' dependent contains_unexpanded_pack depth 0 index 1 pack
| | |-TemplateTypeParmDecl 0xdf1c18 <line:2565:12, col:21> col:21 referenced typename depth 0 index 0 _Functor
| | |-TemplateTypeParmDecl 0xdf1c98 <col:31, col:43> col:43 referenced typename depth 0 index 1 ... _ArgTypes
| | `-CXXRecordDecl 0xdf2260 <line:2566:5, col:12> col:12 implicit struct result_of
| |-TypeAliasTemplateDecl 0xdf2740 <line:2572:3, line:2574:71> col:5 aligned_storage_t
| | |-NonTypeTemplateParmDecl 0xdf2318 <line:2572:12, col:19> col:19 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Len
| | |-NonTypeTemplateParmDecl 0xdf24c0 <col:25, line:2573:62> line:2572:32 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Align
| | | `-TemplateArgument expr
| | |   `-UnaryExprOrTypeTraitExpr 0xdf2490 <line:2573:6, col:62> 'unsigned long' __alignof 'typename __aligned_storage_msa<_Len>::__type'
| | `-TypeAliasDecl 0xdf26e0 <line:2574:5, col:71> col:11 aligned_storage_t 'typename aligned_storage<_Len, _Align>::type'
| |   `-DependentNameType 0xdf2670 'typename aligned_storage<_Len, _Align>::type' dependent
| |-TypeAliasTemplateDecl 0xdf3060 <line:2576:3, line:2577:70> col:5 aligned_union_t
| | |-NonTypeTemplateParmDecl 0xdf27a8 <line:2576:13, col:20> col:20 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Len
| | |-TemplateTypeParmDecl 0xdf2808 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Types
| | `-TypeAliasDecl 0xdf3000 <line:2577:5, col:70> col:11 aligned_union_t 'typename aligned_union<_Len, _Types...>::type'
| |   `-DependentNameType 0xdf2f90 'typename aligned_union<_Len, _Types...>::type' dependent
| |-TypeAliasTemplateDecl 0xdf32b0 <line:2580:3, line:2581:42> col:5 decay_t
| | |-TemplateTypeParmDecl 0xdf30b8 <line:2580:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xdf3250 <line:2581:5, col:42> col:11 decay_t 'typename decay<_Tp>::type'
| |   `-DependentNameType 0xdf31e0 'typename decay<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xdf35d0 <line:2584:3, line:2585:57> col:5 enable_if_t
| | |-NonTypeTemplateParmDecl 0xdf3318 <line:2584:12, col:17> col:17 referenced 'bool' depth 0 index 0 _Cond
| | |-TemplateTypeParmDecl 0xdf3388 <col:24, col:39> col:33 referenced typename depth 0 index 1 _Tp
| | | `-TemplateArgument type 'void'
| | |   `-BuiltinType 0xbf61b0 'void'
| | `-TypeAliasDecl 0xdf3570 <line:2585:5, col:57> col:11 enable_if_t 'typename enable_if<_Cond, _Tp>::type'
| |   `-DependentNameType 0xdf3500 'typename enable_if<_Cond, _Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xdf39e0 <line:2588:3, line:2589:75> col:5 conditional_t
| | |-NonTypeTemplateParmDecl 0xdf3638 <line:2588:12, col:17> col:17 referenced 'bool' depth 0 index 0 _Cond
| | |-TemplateTypeParmDecl 0xdf3698 <col:24, col:33> col:33 referenced typename depth 0 index 1 _Iftrue
| | |-TemplateTypeParmDecl 0xdf3718 <col:42, col:51> col:51 referenced typename depth 0 index 2 _Iffalse
| | `-TypeAliasDecl 0xdf3980 <line:2589:5, col:75> col:11 conditional_t 'typename conditional<_Cond, _Iftrue, _Iffalse>::type'
| |   `-DependentNameType 0xdf3910 'typename conditional<_Cond, _Iftrue, _Iffalse>::type' dependent
| |-TypeAliasTemplateDecl 0xdf3cf0 <line:2592:3, line:2593:57> col:5 common_type_t
| | |-TemplateTypeParmDecl 0xdf3a38 <line:2592:12, col:24> col:24 referenced typename depth 0 index 0 ... _Tp
| | `-TypeAliasDecl 0xdf3c90 <line:2593:5, col:57> col:11 common_type_t 'typename common_type<_Tp...>::type'
| |   `-DependentNameType 0xdf3c20 'typename common_type<_Tp...>::type' dependent
| |-TypeAliasTemplateDecl 0xdf3f90 <line:2596:3, line:2597:62> col:5 underlying_type_t
| | |-TemplateTypeParmDecl 0xdf3d48 <line:2596:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xdf3f30 <line:2597:5, col:62> col:11 underlying_type_t 'typename underlying_type<_Tp>::type'
| |   `-DependentNameType 0xdf3ec0 'typename underlying_type<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xdf4230 <line:2600:3, line:2601:50> col:5 result_of_t
| | |-TemplateTypeParmDecl 0xdf3fe8 <line:2600:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xdf41d0 <line:2601:5, col:50> col:11 result_of_t 'typename result_of<_Tp>::type'
| |   `-DependentNameType 0xdf4160 'typename result_of<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xdf4390 <line:2607:3, col:40> col:25 void_t
| | |-TemplateTypeParmDecl 0xdf4288 <col:12> col:23 typename depth 0 index 0 ...
| | `-TypeAliasDecl 0xdf4330 <col:25, col:40> col:31 void_t 'void'
| |   `-BuiltinType 0xbf61b0 'void'
| |-ClassTemplateDecl 0xdf4748 <line:2613:3, line:2619:5> line:2615:12 __detector
| | |-TemplateTypeParmDecl 0xdf43e8 <line:2613:12, col:21> col:21 referenced typename depth 0 index 0 _Default
| | |-TemplateTypeParmDecl 0xdf4468 <col:31, col:40> col:40 typename depth 0 index 1 _AlwaysVoid
| | |-TemplateTemplateParmDecl 0xdf45b0 <line:2614:5, col:33> col:33 depth 0 index 2 _Op
| | | `-TemplateTypeParmDecl 0xdf44e8 <col:14> col:25 typename depth 1 index 0 ...
| | |-TemplateTypeParmDecl 0xdf4608 <col:38, col:50> col:50 typename depth 0 index 3 ... _Args
| | `-CXXRecordDecl 0xdf46b8 <line:2615:5, line:2619:5> line:2615:12 struct __detector definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdf4b80 <col:5, col:12> col:12 implicit struct __detector
| |   |-TypeAliasDecl 0xdf4c20 <line:2617:7, col:23> col:13 value_t 'std::false_type':'std::integral_constant<bool, false>'
| |   | `-TypedefType 0xce71c0 'std::false_type' sugar
| |   |   |-TypeAlias 0xce4928 'false_type'
| |   |   `-TemplateSpecializationType 0xce4880 'integral_constant<bool, false>' sugar integral_constant
| |   |     |-TemplateArgument type 'bool'
| |   |     | `-BuiltinType 0xbf61d0 'bool'
| |   |     |-TemplateArgument expr
| |   |     | `-ConstantExpr 0xce4748 <line:86:46> 'bool'
| |   |     |   |-value: Int 0
| |   |     |   `-CXXBoolLiteralExpr 0xce4718 <col:46> 'bool' false
| |   |     `-RecordType 0xce4860 'std::integral_constant<bool, false>'
| |   |       `-ClassTemplateSpecialization 0xce4768 'integral_constant'
| |   `-TypeAliasDecl 0xdf4c90 <line:2618:7, col:20> col:13 type '_Default'
| |     `-TemplateTypeParmType 0xdf4440 '_Default' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xdf43e8 '_Default'
| |-ClassTemplatePartialSpecializationDecl 0xdf5938 <line:2622:3, line:2628:5> line:2624:12 struct __detector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0xbf61b0 'void'
| | |-TemplateArgument template _Op
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-2...'
| | |   `-PackExpansionType 0xd8b190 'type-parameter-0-2...' dependent
| | |     `-TemplateTypeParmType 0xd8b0d0 'type-parameter-0-2' dependent contains_unexpanded_pack depth 0 index 2 pack
| | |-TemplateTypeParmDecl 0xdf4d08 <line:2622:12, col:21> col:21 referenced typename depth 0 index 0 _Default
| | |-TemplateTemplateParmDecl 0xdf4e20 <col:31, col:59> col:59 depth 0 index 1 _Op
| | | `-TemplateTypeParmDecl 0xdf4d88 <col:40> col:51 typename depth 1 index 0 ...
| | |-TemplateTypeParmDecl 0xdf4e78 <line:2623:6, col:18> col:18 referenced typename depth 0 index 2 ... _Args
| | |-CXXRecordDecl 0xdf5cf8 <line:2624:5, col:12> col:12 implicit struct __detector
| | |-TypeAliasDecl 0xdf5d98 <line:2626:7, col:23> col:13 value_t 'std::true_type':'std::integral_constant<bool, true>'
| | | `-TypedefType 0xceb0a0 'std::true_type' sugar
| | |   |-TypeAlias 0xce46a8 'true_type'
| | |   `-TemplateSpecializationType 0xce4600 'integral_constant<bool, true>' sugar integral_constant
| | |     |-TemplateArgument type 'bool'
| | |     | `-BuiltinType 0xbf61d0 'bool'
| | |     |-TemplateArgument expr
| | |     | `-ConstantExpr 0xce44c8 <line:83:46> 'bool'
| | |     |   |-value: Int 1
| | |     |   `-CXXBoolLiteralExpr 0xce4468 <col:46> 'bool' true
| | |     `-RecordType 0xce45e0 'std::integral_constant<bool, true>'
| | |       `-ClassTemplateSpecialization 0xce44e8 'integral_constant'
| | `-TypeAliasDecl 0xdf5ed0 <line:2627:7, col:32> col:13 type '_Op<_Args...>'
| |   `-TemplateSpecializationType 0xdf5e50 '_Op<_Args...>' dependent _Op
| |     `-TemplateArgument type '_Args...'
| |       `-PackExpansionType 0xdf53d0 '_Args...' dependent
| |         `-TemplateTypeParmType 0xdf4ed0 '_Args' dependent contains_unexpanded_pack depth 0 index 2 pack
| |           `-TemplateTypeParm 0xdf4e78 '_Args'
| |-TypeAliasTemplateDecl 0xdf63f8 <line:2631:3, line:2633:67> col:5 __detected_or
| | |-TemplateTypeParmDecl 0xdf5f48 <line:2631:12, col:21> col:21 referenced typename depth 0 index 0 _Default
| | |-TemplateTemplateParmDecl 0xdf6060 <col:31, col:59> col:59 depth 0 index 1 _Op
| | | `-TemplateTypeParmDecl 0xdf5fc8 <col:40> col:51 typename depth 1 index 0 ...
| | |-TemplateTypeParmDecl 0xdf60b8 <line:2632:5, col:17> col:17 referenced typename depth 0 index 2 ... _Args
| | `-TypeAliasDecl 0xdf6398 <line:2633:5, col:67> col:11 __detected_or '__detector<_Default, void, _Op, _Args...>'
| |   `-TemplateSpecializationType 0xdf62a0 '__detector<_Default, void, _Op, _Args...>' dependent __detector
| |     |-TemplateArgument type '_Default'
| |     | `-TemplateTypeParmType 0xdf5fa0 '_Default' dependent depth 0 index 0
| |     |   `-TemplateTypeParm 0xdf5f48 '_Default'
| |     |-TemplateArgument type 'void'
| |     | `-BuiltinType 0xbf61b0 'void'
| |     |-TemplateArgument template _Op
| |     `-TemplateArgument type '_Args...'
| |       `-PackExpansionType 0xdf6190 '_Args...' dependent
| |         `-TemplateTypeParmType 0xdf6110 '_Args' dependent contains_unexpanded_pack depth 0 index 2 pack
| |           `-TemplateTypeParm 0xdf60b8 '_Args'
| |-TypeAliasTemplateDecl 0xdf6c60 <line:2636:3, line:2639:58> line:2638:5 __detected_or_t
| | |-TemplateTypeParmDecl 0xdf6450 <line:2636:12, col:21> col:21 referenced typename depth 0 index 0 _Default
| | |-TemplateTemplateParmDecl 0xdf6560 <col:31, col:59> col:59 depth 0 index 1 _Op
| | | `-TemplateTypeParmDecl 0xdf64c8 <col:40> col:51 typename depth 1 index 0 ...
| | |-TemplateTypeParmDecl 0xdf65b8 <line:2637:5, col:17> col:17 referenced typename depth 0 index 2 ... _Args
| | `-TypeAliasDecl 0xdf6c00 <line:2638:5, line:2639:58> line:2638:11 __detected_or_t 'typename __detected_or<_Default, _Op, _Args...>::type'
| |   `-DependentNameType 0xdf6b90 'typename __detected_or<_Default, _Op, _Args...>::type' dependent
| |-ClassTemplateDecl 0xdf6de0 <line:2655:3, line:2656:12> col:12 __is_swappable
| | |-TemplateTypeParmDecl 0xdf6cb8 <line:2655:13, col:22> col:22 typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xdf6d50 <line:2656:5, col:12> col:12 struct __is_swappable
| |-ClassTemplateDecl 0xdf70e0 <line:2658:3, line:2659:12> col:12 __is_nothrow_swappable
| | |-TemplateTypeParmDecl 0xdf6fb8 <line:2658:13, col:22> col:22 typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xdf7050 <line:2659:5, col:12> col:12 struct __is_nothrow_swappable
| |-ClassTemplateDecl 0xdf87c0 <line:2661:3, line:2663:7> line:2662:12 __is_tuple_like_impl
| | |-TemplateTypeParmDecl 0xdf72b8 <line:2661:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xdf8730 <line:2662:5, line:2663:7> line:2662:12 struct __is_tuple_like_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0xdf8a40 <col:5, col:12> col:12 implicit struct __is_tuple_like_impl
| |-ClassTemplatePartialSpecializationDecl 0xdf8d30 <line:2665:3, line:2667:7> line:2666:12 struct __is_tuple_like_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'tuple<type-parameter-0-0...>'
| | | `-TemplateSpecializationType 0xcd8d70 'tuple<type-parameter-0-0...>' dependent tuple
| | |   `-TemplateArgument pack
| | |     `-TemplateArgument type 'type-parameter-0-0...'
| | |       `-PackExpansionType 0xcca9b0 'type-parameter-0-0...' dependent
| | |         `-TemplateTypeParmType 0xcca780 'type-parameter-0-0' dependent contains_unexpanded_pack depth 0 index 0 pack
| | |-TemplateTypeParmDecl 0xdf8ae8 <line:2665:12, col:24> col:24 referenced typename depth 0 index 0 ... _Tps
| | `-CXXRecordDecl 0xdf8f98 <line:2666:5, col:12> col:12 implicit struct __is_tuple_like_impl
| |-ClassTemplateDecl 0xdf9160 <line:2670:3, line:2673:7> line:2671:12 __is_tuple_like
| | |-TemplateTypeParmDecl 0xdf9040 <line:2670:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xdf90d0 <line:2671:5, line:2673:7> line:2671:12 struct __is_tuple_like definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_tuple_like_impl<__remove_cvref_t<_Tp>>::type'
| |   `-CXXRecordDecl 0xdf9870 <col:5, col:12> col:12 implicit struct __is_tuple_like
| |-FunctionTemplateDecl 0xdfc1a8 <line:2676:3, line:2684:53> line:2682:5 swap
| | |-TemplateTypeParmDecl 0xdf9918 <line:2676:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xdfc108 <line:2678:5, line:2684:53> line:2682:5 swap '_Require<__not_<__is_tuple_like<_Tp>>, is_move_constructible<_Tp>, is_move_assignable<_Tp>> (_Tp &, _Tp &) noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value)' inline
| |   |-ParmVarDecl 0xdfa2f8 <col:10, col:13> col:14 '_Tp &'
| |   `-ParmVarDecl 0xdfa370 <col:16, col:19> col:20 '_Tp &'
| |-FunctionTemplateDecl 0xdfccb8 <line:2686:3, line:2691:48> line:2690:5 swap
| | |-TemplateTypeParmDecl 0xdfc288 <line:2686:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xdfc318 <col:26, col:33> col:33 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Nm
| | `-FunctionDecl 0xdfcc18 <line:2688:5, line:2691:48> line:2690:5 swap '__enable_if_t<__is_swappable<_Tp>::value> (_Tp (&)[_Nm], _Tp (&)[_Nm]) noexcept(__is_nothrow_swappable<_Tp>::value)' inline
| |   |-ParmVarDecl 0xdfc898 <col:10, col:24> col:16 __a '_Tp (&)[_Nm]'
| |   `-ParmVarDecl 0xdfc9e8 <col:27, col:41> col:33 __b '_Tp (&)[_Nm]'
| |-NamespaceDecl 0xdfcda8 <line:2694:3, line:2718:3> line:2694:13 __swappable_details
| | |-UsingDecl 0xdfce20 <line:2695:5, col:16> col:16 std::swap
| | |-UsingShadowDecl 0xdfce78 <col:16> col:16 implicit FunctionTemplate 0xdfc1a8 'swap'
| | |-UsingShadowDecl 0xdfcec8 <col:16> col:16 implicit FunctionTemplate 0xdfccb8 'swap'
| | |-CXXRecordDecl 0xdfcf38 <line:2697:5, line:2705:5> line:2697:12 referenced struct __do_is_swappable_impl definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0xdfd058 <col:5, col:12> col:12 implicit struct __do_is_swappable_impl
| | | |-FunctionTemplateDecl 0xdfd640 <line:2699:7, line:2701:36> col:26 __test
| | | | |-TemplateTypeParmDecl 0xdfd0e8 <line:2699:16, col:25> col:25 referenced typename depth 0 index 0 _Tp
| | | | |-TemplateTypeParmDecl 0xdfd428 <col:30, line:2700:75> col:16 typename depth 0 index 1
| | | | | `-TemplateArgument type 'decltype(swap(std::declval<_Tp &>(), std::declval<_Tp &>()))'
| | | | |   `-DecltypeType 0xdfd3f0 'decltype(swap(std::declval<_Tp &>(), std::declval<_Tp &>()))' dependent
| | | | |     `-CallExpr 0xdfd378 <col:27, col:74> '<dependent type>'
| | | | |       |-UnresolvedLookupExpr 0xdfd168 <col:27> '<overloaded function type>' lvalue (ADL) = 'swap' 0xdfcec8 0xdfce78
| | | | |       |-CallExpr 0xdfd290 <col:32, col:51> '<dependent type>'
| | | | |       | `-UnresolvedLookupExpr 0xdfd218 <col:32, col:49> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| | | | |       `-CallExpr 0xdfd358 <col:54, col:73> '<dependent type>'
| | | | |         `-UnresolvedLookupExpr 0xdfd2e0 <col:54, col:71> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| | | | `-CXXMethodDecl 0xdfd5a0 <line:2701:9, col:36> col:26 __test 'std::true_type (int)' static
| | | |   `-ParmVarDecl 0xdfd4e0 <col:33> col:36 'int'
| | | `-FunctionTemplateDecl 0xdfd7f0 <line:2703:7, line:2704:37> col:27 __test
| | |   |-TemplateTypeParmDecl 0xdfd6a0 <line:2703:16> col:24 typename depth 0 index 0
| | |   `-CXXMethodDecl 0xdfd750 <line:2704:9, col:37> col:27 __test 'std::false_type (...)' static
| | `-CXXRecordDecl 0xdfd870 <line:2707:5, line:2716:5> line:2707:12 referenced struct __do_is_nothrow_swappable_impl definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xdfd988 <col:5, col:12> col:12 implicit struct __do_is_nothrow_swappable_impl
| |   |-FunctionTemplateDecl 0xdfeda0 <line:2709:7, line:2712:21> col:11 __test
| |   | |-TemplateTypeParmDecl 0xdfda18 <line:2709:16, col:25> col:25 referenced typename depth 0 index 0 _Tp
| |   | `-CXXMethodDecl 0xdfed00 <line:2710:9, line:2712:21> col:11 __test '__bool_constant<noexcept(swap(std::declval<_Tp &>(), std::declval<_Tp &>()))> (int)' static
| |   |   `-ParmVarDecl 0xdfdee0 <col:18> col:21 'int'
| |   `-FunctionTemplateDecl 0xdfef50 <line:2714:7, line:2715:37> col:27 __test
| |     |-TemplateTypeParmDecl 0xdfee00 <line:2714:16> col:24 typename depth 0 index 0
| |     `-CXXMethodDecl 0xdfeeb0 <line:2715:9, col:37> col:27 __test 'std::false_type (...)' static
| |-ClassTemplateDecl 0xdff0f0 <line:2720:3, line:2725:5> line:2721:12 __is_swappable_impl
| | |-TemplateTypeParmDecl 0xdfefd0 <line:2720:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xdff060 <line:2721:5, line:2725:5> line:2721:12 struct __is_swappable_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__swappable_details::__do_is_swappable_impl':'std::__swappable_details::__do_is_swappable_impl'
| |   |-CXXRecordDecl 0xdff3f8 <col:5, col:12> col:12 implicit struct __is_swappable_impl
| |   `-TypedefDecl 0xdff5b8 <line:2724:7, col:40> col:40 type 'decltype(__test<_Tp>(0))'
| |     `-DecltypeType 0xdff580 'decltype(__test<_Tp>(0))' dependent
| |       `-CallExpr 0xdff550 <col:24, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xdff4b0 <col:24, col:34> '<dependent type>' lvalue (no ADL) = '__test' 0xdfd640 0xdfd7f0
| |         `-IntegerLiteral 0xdff530 <col:36> 'int' 0
| |-ClassTemplateDecl 0xdff750 <line:2727:3, line:2732:5> line:2728:12 __is_nothrow_swappable_impl
| | |-TemplateTypeParmDecl 0xdff628 <line:2727:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xdff6c0 <line:2728:5, line:2732:5> line:2728:12 struct __is_nothrow_swappable_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__swappable_details::__do_is_nothrow_swappable_impl':'std::__swappable_details::__do_is_nothrow_swappable_impl'
| |   |-CXXRecordDecl 0xdffa38 <col:5, col:12> col:12 implicit struct __is_nothrow_swappable_impl
| |   `-TypedefDecl 0xdffbf8 <line:2731:7, col:40> col:40 type 'decltype(__test<_Tp>(0))'
| |     `-DecltypeType 0xdffbc0 'decltype(__test<_Tp>(0))' dependent
| |       `-CallExpr 0xdffb90 <col:24, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xdffaf0 <col:24, col:34> '<dependent type>' lvalue (no ADL) = '__test' 0xdfeda0 0xdfef50
| |         `-IntegerLiteral 0xdffb70 <col:36> 'int' 0
| |-ClassTemplateDecl 0xdffd90 prev 0xdf6de0 <line:2734:3, line:2737:7> line:2735:12 __is_swappable
| | |-TemplateTypeParmDecl 0xdffc68 <line:2734:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xdffd00 prev 0xdf6d50 <line:2735:5, line:2737:7> line:2735:12 struct __is_swappable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_swappable_impl<_Tp>::type'
| |   `-CXXRecordDecl 0xdfffd0 <col:5, col:12> col:12 implicit struct __is_swappable
| |-ClassTemplateDecl 0xe001a0 prev 0xdf70e0 <line:2739:3, line:2742:7> line:2740:12 __is_nothrow_swappable
| | |-TemplateTypeParmDecl 0xe00078 <line:2739:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xe00110 prev 0xdf7050 <line:2740:5, line:2742:7> line:2740:12 struct __is_nothrow_swappable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_swappable_impl<_Tp>::type'
| |   `-CXXRecordDecl 0xe003e0 <col:5, col:12> col:12 implicit struct __is_nothrow_swappable
| |-ClassTemplateDecl 0xe005b0 <line:2750:3, line:2756:5> line:2751:12 is_swappable
| | |-TemplateTypeParmDecl 0xe00488 <line:2750:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xe00520 <line:2751:5, line:2756:5> line:2751:12 struct is_swappable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_swappable_impl<_Tp>::type'
| |   |-CXXRecordDecl 0xe00920 <col:5, col:12> col:12 implicit struct is_swappable
| |   `-StaticAssertDecl 0xe00b98 <line:2754:7, line:2755:68> line:2754:7
| |     |-CallExpr 0xe00b18 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xe009d0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xe00af0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xe00ab0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xe00b40 <line:2755:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xe01be0 <line:2759:3, line:2765:5> line:2760:12 is_nothrow_swappable
| | |-TemplateTypeParmDecl 0xe00bf0 <line:2759:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xe01b50 <line:2760:5, line:2765:5> line:2760:12 struct is_nothrow_swappable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_swappable_impl<_Tp>::type'
| |   |-CXXRecordDecl 0xe01f50 <col:5, col:12> col:12 implicit struct is_nothrow_swappable
| |   `-StaticAssertDecl 0xe021c8 <line:2763:7, line:2764:68> line:2763:7
| |     |-CallExpr 0xe02148 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xe02000 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xe02120 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xe020e0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xe02170 <line:2764:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-VarTemplateDecl 0xe02328 <line:2769:3, line:2771:26> line:2770:38 is_swappable_v
| | |-TemplateTypeParmDecl 0xe02220 <line:2769:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-VarDecl 0xe022c0 <line:2770:23, line:2771:26> line:2770:38 is_swappable_v 'const bool' constexpr cinit
| |   `-DependentScopeDeclRefExpr 0xe02430 <line:2771:7, col:26> '<dependent type>' lvalue
| |-VarTemplateDecl 0xe02578 <line:2774:3, line:2776:34> line:2775:38 is_nothrow_swappable_v
| | |-TemplateTypeParmDecl 0xe02468 <line:2774:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-VarDecl 0xe02510 <line:2775:23, line:2776:34> line:2775:38 is_nothrow_swappable_v 'const bool' constexpr cinit
| |   `-DependentScopeDeclRefExpr 0xe02680 <line:2776:7, col:34> '<dependent type>' lvalue
| |-NamespaceDecl 0xe026b8 <line:2780:3, line:2808:3> line:2780:13 __swappable_with_details
| | |-UsingDecl 0xe02730 <line:2781:5, col:16> col:16 std::swap
| | |-UsingShadowDecl 0xe02788 <col:16> col:16 implicit FunctionTemplate 0xdfc1a8 'swap'
| | |-UsingShadowDecl 0xe027d8 <col:16> col:16 implicit FunctionTemplate 0xdfccb8 'swap'
| | |-CXXRecordDecl 0xe02848 <line:2783:5, line:2793:5> line:2783:12 referenced struct __do_is_swappable_with_impl definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0xe02968 <col:5, col:12> col:12 implicit struct __do_is_swappable_with_impl
| | | |-FunctionTemplateDecl 0xe032c0 <line:2785:7, line:2789:36> col:26 __test
| | | | |-TemplateTypeParmDecl 0xe029f8 <line:2785:16, col:25> col:25 referenced typename depth 0 index 0 _Tp
| | | | |-TemplateTypeParmDecl 0xe02a78 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Up
| | | | |-TemplateTypeParmDecl 0xe02d88 <col:44, line:2786:73> col:16 typename depth 0 index 2
| | | | | `-TemplateArgument type 'decltype(swap(std::declval<_Tp>(), std::declval<_Up>()))'
| | | | |   `-DecltypeType 0xe02d50 'decltype(swap(std::declval<_Tp>(), std::declval<_Up>()))' dependent
| | | | |     `-CallExpr 0xe02cd8 <col:27, col:72> '<dependent type>'
| | | | |       |-UnresolvedLookupExpr 0xe02af8 <col:27> '<overloaded function type>' lvalue (ADL) = 'swap' 0xe027d8 0xe02788
| | | | |       |-CallExpr 0xe02bf0 <col:32, col:50> '<dependent type>'
| | | | |       | `-UnresolvedLookupExpr 0xe02b78 <col:32, col:48> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| | | | |       `-CallExpr 0xe02cb8 <col:53, col:71> '<dependent type>'
| | | | |         `-UnresolvedLookupExpr 0xe02c40 <col:53, col:69> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| | | | |-TemplateTypeParmDecl 0xe03098 <line:2787:16, line:2788:73> col:16 typename depth 0 index 3
| | | | | `-TemplateArgument type 'decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))'
| | | | |   `-DecltypeType 0xe03060 'decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))' dependent
| | | | |     `-CallExpr 0xe02fe8 <col:27, col:72> '<dependent type>'
| | | | |       |-UnresolvedLookupExpr 0xe02e08 <col:27> '<overloaded function type>' lvalue (ADL) = 'swap' 0xe027d8 0xe02788
| | | | |       |-CallExpr 0xe02f00 <col:32, col:50> '<dependent type>'
| | | | |       | `-UnresolvedLookupExpr 0xe02e88 <col:32, col:48> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| | | | |       `-CallExpr 0xe02fc8 <col:53, col:71> '<dependent type>'
| | | | |         `-UnresolvedLookupExpr 0xe02f50 <col:53, col:69> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| | | | `-CXXMethodDecl 0xe03220 <line:2789:9, col:36> col:26 __test 'std::true_type (int)' static
| | | |   `-ParmVarDecl 0xe03160 <col:33> col:36 'int'
| | | `-FunctionTemplateDecl 0xe034f8 <line:2791:7, line:2792:37> col:27 __test
| | |   |-TemplateTypeParmDecl 0xe03320 <line:2791:16> col:24 typename depth 0 index 0
| | |   |-TemplateTypeParmDecl 0xe03398 <col:26> col:34 typename depth 0 index 1
| | |   `-CXXMethodDecl 0xe03458 <line:2792:9, col:37> col:27 __test 'std::false_type (...)' static
| | `-CXXRecordDecl 0xe03578 <line:2795:5, line:2806:5> line:2795:12 referenced struct __do_is_nothrow_swappable_with_impl definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xe03698 <col:5, col:12> col:12 implicit struct __do_is_nothrow_swappable_with_impl
| |   |-FunctionTemplateDecl 0xe05fc8 <line:2797:7, line:2802:21> col:11 __test
| |   | |-TemplateTypeParmDecl 0xe03728 <line:2797:16, col:25> col:25 referenced typename depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl 0xe037a8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Up
| |   | `-CXXMethodDecl 0xe05f28 <line:2798:9, line:2802:21> col:11 __test '__bool_constant<noexcept(swap(std::declval<_Tp>(), std::declval<_Up>())) && noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))> (int)' static
| |   |   `-ParmVarDecl 0xe05df0 <col:18> col:21 'int'
| |   `-FunctionTemplateDecl 0xe06208 <line:2804:7, line:2805:37> col:27 __test
| |     |-TemplateTypeParmDecl 0xe06028 <line:2804:16> col:24 typename depth 0 index 0
| |     |-TemplateTypeParmDecl 0xe060a8 <col:26> col:34 typename depth 0 index 1
| |     `-CXXMethodDecl 0xe06168 <line:2805:9, col:37> col:27 __test 'std::false_type (...)' static
| |-ClassTemplateDecl 0xe06438 <line:2810:3, line:2815:5> line:2811:12 __is_swappable_with_impl
| | |-TemplateTypeParmDecl 0xe06288 <line:2810:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xe06308 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0xe063a8 <line:2811:5, line:2815:5> line:2811:12 struct __is_swappable_with_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__swappable_with_details::__do_is_swappable_with_impl':'std::__swappable_with_details::__do_is_swappable_with_impl'
| |   |-CXXRecordDecl 0xe06788 <col:5, col:12> col:12 implicit struct __is_swappable_with_impl
| |   `-TypedefDecl 0xe06978 <line:2814:7, col:45> col:45 type 'decltype(__test<_Tp, _Up>(0))'
| |     `-DecltypeType 0xe06940 'decltype(__test<_Tp, _Up>(0))' dependent
| |       `-CallExpr 0xe06910 <col:24, col:42> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xe06850 <col:24, col:39> '<dependent type>' lvalue (no ADL) = '__test' 0xe032c0 0xe034f8
| |         `-IntegerLiteral 0xe068f0 <col:41> 'int' 0
| |-ClassTemplatePartialSpecializationDecl 0xe06bd8 <line:2818:3, line:2823:5> line:2819:12 struct __is_swappable_with_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__swappable_details::__do_is_swappable_impl':'std::__swappable_details::__do_is_swappable_impl'
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0xcc9f90 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0xcc9f90 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xe069e8 <line:2818:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xe06eb0 <line:2819:5, col:12> col:12 implicit struct __is_swappable_with_impl
| | `-TypedefDecl 0xe070a8 <line:2822:7, col:41> col:41 type 'decltype(__test<_Tp &>(0))'
| |   `-DecltypeType 0xe07070 'decltype(__test<_Tp &>(0))' dependent
| |     `-CallExpr 0xe07008 <col:24, col:38> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xe06f68 <col:24, col:35> '<dependent type>' lvalue (no ADL) = '__test' 0xdfd640 0xdfd7f0
| |       `-IntegerLiteral 0xe06fe8 <col:37> 'int' 0
| |-ClassTemplateDecl 0xe072c8 <line:2825:3, line:2830:5> line:2826:12 __is_nothrow_swappable_with_impl
| | |-TemplateTypeParmDecl 0xe07118 <line:2825:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xe07198 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0xe07238 <line:2826:5, line:2830:5> line:2826:12 struct __is_nothrow_swappable_with_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__swappable_with_details::__do_is_nothrow_swappable_with_impl':'std::__swappable_with_details::__do_is_nothrow_swappable_with_impl'
| |   |-CXXRecordDecl 0xe075f8 <col:5, col:12> col:12 implicit struct __is_nothrow_swappable_with_impl
| |   `-TypedefDecl 0xe077e8 <line:2829:7, col:45> col:45 type 'decltype(__test<_Tp, _Up>(0))'
| |     `-DecltypeType 0xe077b0 'decltype(__test<_Tp, _Up>(0))' dependent
| |       `-CallExpr 0xe07780 <col:24, col:42> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xe076c0 <col:24, col:39> '<dependent type>' lvalue (no ADL) = '__test' 0xe05fc8 0xe06208
| |         `-IntegerLiteral 0xe07760 <col:41> 'int' 0
| |-ClassTemplatePartialSpecializationDecl 0xe091b0 <line:2833:3, line:2838:5> line:2834:12 struct __is_nothrow_swappable_with_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__swappable_details::__do_is_nothrow_swappable_impl':'std::__swappable_details::__do_is_nothrow_swappable_impl'
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0xcc9f90 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0xcc9f90 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xe07858 <line:2833:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xe09480 <line:2834:5, col:12> col:12 implicit struct __is_nothrow_swappable_with_impl
| | `-TypedefDecl 0xe09638 <line:2837:7, col:41> col:41 type 'decltype(__test<_Tp &>(0))'
| |   `-DecltypeType 0xe09600 'decltype(__test<_Tp &>(0))' dependent
| |     `-CallExpr 0xe095d8 <col:24, col:38> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xe09538 <col:24, col:35> '<dependent type>' lvalue (no ADL) = '__test' 0xdfeda0 0xdfef50
| |       `-IntegerLiteral 0xe095b8 <col:37> 'int' 0
| |-ClassTemplateDecl 0xe09858 <line:2842:3, line:2850:5> line:2843:12 is_swappable_with
| | |-TemplateTypeParmDecl 0xe096a8 <line:2842:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xe09728 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0xe097c8 <line:2843:5, line:2850:5> line:2843:12 struct is_swappable_with definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_swappable_with_impl<_Tp, _Up>::type'
| |   |-CXXRecordDecl 0xe09c90 <col:5, col:12> col:12 implicit struct is_swappable_with
| |   |-StaticAssertDecl 0xe09f88 <line:2846:7, line:2847:74> line:2846:7
| |   | |-CallExpr 0xe09e88 <col:21, col:75> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0xe09d40 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |   | | `-CXXUnresolvedConstructExpr 0xe09e60 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |   | |   `-InitListExpr 0xe09e20 <col:73, col:74> 'void'
| |   | `-StringLiteral 0xe09f28 <line:2847:2> 'const char[71]' lvalue "first template argument must be a complete class or an unbounded array"
| |   `-StaticAssertDecl 0xe0a278 <line:2848:7, line:2849:75> line:2848:7
| |     |-CallExpr 0xe0a178 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xe09fe8 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xe0a150 <col:53, col:74> '__type_identity<_Up>' '__type_identity<_Up>' list
| |     |   `-InitListExpr 0xe0a110 <col:73, col:74> 'void'
| |     `-StringLiteral 0xe0a218 <line:2849:2> 'const char[72]' lvalue "second template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xe0a478 <line:2853:3, line:2861:5> line:2854:12 is_nothrow_swappable_with
| | |-TemplateTypeParmDecl 0xe0a2d0 <line:2853:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xe0a348 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0xe0a3e8 <line:2854:5, line:2861:5> line:2854:12 struct is_nothrow_swappable_with definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_swappable_with_impl<_Tp, _Up>::type'
| |   |-CXXRecordDecl 0xe0a8b0 <col:5, col:12> col:12 implicit struct is_nothrow_swappable_with
| |   |-StaticAssertDecl 0xe0ab30 <line:2857:7, line:2858:74> line:2857:7
| |   | |-CallExpr 0xe0aaa8 <col:21, col:75> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0xe0a960 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |   | | `-CXXUnresolvedConstructExpr 0xe0aa80 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |   | |   `-InitListExpr 0xe0aa40 <col:73, col:74> 'void'
| |   | `-StringLiteral 0xe0aad0 <line:2858:2> 'const char[71]' lvalue "first template argument must be a complete class or an unbounded array"
| |   `-StaticAssertDecl 0xe0ad60 <line:2859:7, line:2860:75> line:2859:7
| |     |-CallExpr 0xe0acd8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xe0ab90 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0xcf2068 0xcf2b58
| |     | `-CXXUnresolvedConstructExpr 0xe0acb0 <col:53, col:74> '__type_identity<_Up>' '__type_identity<_Up>' list
| |     |   `-InitListExpr 0xe0ac70 <col:73, col:74> 'void'
| |     `-StringLiteral 0xe0ad00 <line:2860:2> 'const char[72]' lvalue "second template argument must be a complete class or an unbounded array"
| |-VarTemplateDecl 0xe0af50 <line:2865:3, line:2867:36> line:2866:38 is_swappable_with_v
| | |-TemplateTypeParmDecl 0xe0adb8 <line:2865:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xe0ae38 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-VarDecl 0xe0aee8 <line:2866:23, line:2867:36> line:2866:38 is_swappable_with_v 'const bool' constexpr cinit
| |   `-DependentScopeDeclRefExpr 0xe0b090 <line:2867:7, col:36> '<dependent type>' lvalue
| |-VarTemplateDecl 0xe0b8b0 <line:2870:3, line:2872:44> line:2871:38 is_nothrow_swappable_with_v
| | |-TemplateTypeParmDecl 0xe0b0c8 <line:2870:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xe0b7a0 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-VarDecl 0xe0b848 <line:2871:23, line:2872:44> line:2871:38 is_nothrow_swappable_with_v 'const bool' constexpr cinit
| |   `-DependentScopeDeclRefExpr 0xe0b9f0 <line:2872:7, col:44> '<dependent type>' lvalue
| |-ClassTemplateDecl 0xe0bde8 <line:2882:3, line:2884:47> col:12 __is_invocable_impl
| | |-TemplateTypeParmDecl 0xe0ba28 <line:2882:12, col:21> col:21 typename depth 0 index 0 _Result
| | |-TemplateTypeParmDecl 0xe0baa8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Ret
| | |-NonTypeTemplateParmDecl 0xe0bc28 <line:2883:5, col:27> col:10 'bool' depth 0 index 2
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xe0bc88 <col:12, col:27> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xe0bbe0 <col:12, col:27> '<dependent type>' lvalue
| | |-TemplateTypeParmDecl 0xe0bcb0 <col:34, col:45> col:43 typename depth 0 index 3
| | | `-TemplateArgument type 'void'
| | |   `-BuiltinType 0xbf61b0 'void'
| | `-CXXRecordDecl 0xe0bd58 <line:2884:5, col:47> col:12 struct __is_invocable_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0xe0c130 <col:5, col:12> col:12 implicit struct __is_invocable_impl
| |-ClassTemplatePartialSpecializationDecl 0xe0c648 <line:2887:3, line:2892:7> line:2888:12 struct __is_invocable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0xbf61b0 'void'
| | |-TemplateTypeParmDecl 0xe0c1d8 <line:2887:12, col:21> col:21 referenced typename depth 0 index 0 _Result
| | |-TemplateTypeParmDecl 0xe0c258 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Ret
| | `-CXXRecordDecl 0xe0c998 <line:2888:5, col:12> col:12 implicit struct __is_invocable_impl
| |-ClassTemplatePartialSpecializationDecl 0xe0cea8 <line:2897:3, line:2921:5> line:2898:12 struct __is_invocable_impl definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0xce4ce0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0xbf61b0 'void'
| | |-TemplateTypeParmDecl 0xe0ca40 <line:2897:12, col:21> col:21 referenced typename depth 0 index 0 _Result
| | |-TemplateTypeParmDecl 0xe0cab8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Ret
| | |-CXXRecordDecl 0xe0d1b8 <line:2898:5, col:12> col:12 implicit struct __is_invocable_impl
| | |-AccessSpecDecl 0xe0d248 <line:2902:5, col:12> col:5 private
| | |-CXXMethodDecl 0xe0d368 <line:2905:7, col:44> col:37 referenced _S_get 'typename _Result::type ()' static
| | |-FunctionTemplateDecl 0xe0d618 <line:2907:7, line:2908:25> col:14 _S_conv
| | | |-TemplateTypeParmDecl 0xe0d408 <line:2907:16, col:25> col:25 referenced typename depth 1 index 0 _Tp
| | | `-CXXMethodDecl 0xe0d578 <line:2908:2, col:25> col:14 _S_conv 'void (_Tp)' static
| | |   `-ParmVarDecl 0xe0d4b0 <col:22> col:25 '_Tp'
| | |-FunctionTemplateDecl 0xe0f360 <line:2911:7, line:2913:13> col:2 _S_test
| | | |-TemplateTypeParmDecl 0xe0d678 <line:2911:16, col:25> col:25 referenced typename depth 1 index 0 _Tp
| | | |-TemplateTypeParmDecl 0xe0f178 <col:30, col:72> col:39 typename depth 1 index 1
| | | | `-TemplateArgument type 'decltype(_S_conv<_Tp>(_S_get()))'
| | | |   `-DecltypeType 0xe0f140 'decltype(_S_conv<_Tp>(_S_get()))' dependent
| | | |     `-CallExpr 0xe0f0d0 <col:50, col:71> '<dependent type>'
| | | |       |-UnresolvedLookupExpr 0xe0d708 <col:50, col:61> '<dependent type>' lvalue (no ADL) = '_S_conv' 0xe0d618
| | | |       `-CallExpr 0xe0f0b0 <col:63, col:70> '<dependent type>'
| | | |         `-DeclRefExpr 0xe0d780 <col:63> 'typename _Result::type ()' lvalue CXXMethod 0xe0d368 '_S_get' 'typename _Result::type ()' non_odr_use_unevaluated
| | | `-CXXMethodDecl 0xe0f2c0 <line:2912:2, line:2913:13> col:2 _S_test 'std::true_type (int)' static
| | |   `-ParmVarDecl 0xe0f230 <col:10> col:13 'int'
| | |-FunctionTemplateDecl 0xe0f510 <line:2915:7, line:2917:13> col:2 _S_test
| | | |-TemplateTypeParmDecl 0xe0f3c0 <line:2915:16, col:25> col:25 typename depth 1 index 0 _Tp
| | | `-CXXMethodDecl 0xe0f470 <line:2916:2, line:2917:13> col:2 _S_test 'std::false_type (...)' static
| | |-AccessSpecDecl 0xe0f578 <line:2919:5, col:11> col:5 public
| | `-TypeAliasDecl 0xe0f708 <line:2920:7, col:45> col:13 type 'decltype(_S_test<_Ret>(1))'
| |   `-DecltypeType 0xe0f6d0 'decltype(_S_test<_Ret>(1))' dependent
| |     `-CallExpr 0xe0f668 <col:29, col:44> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xe0f5c8 <col:29, col:41> '<dependent type>' lvalue (no ADL) = '_S_test' 0xe0f510 0xe0f360
| |       `-IntegerLiteral 0xe0f648 <col:43> 'int' 1
| |-ClassTemplateDecl 0xe0f928 <line:2924:3, line:2927:7> line:2925:12 __is_invocable
| | |-TemplateTypeParmDecl 0xe0f780 <line:2924:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xe0f7f8 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _ArgTypes
| | `-CXXRecordDecl 0xe0f898 <line:2925:5, line:2927:7> line:2925:12 struct __is_invocable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type'
| |   `-CXXRecordDecl 0xe10970 <col:5, col:12> col:12 implicit struct __is_invocable
| |-FunctionTemplateDecl 0xe10d38 <line:2929:3, line:2935:5> line:2930:20 __call_is_nt
| | |-TemplateTypeParmDecl 0xe10a18 <line:2929:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xe10a98 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Tp
| | |-TemplateTypeParmDecl 0xe10b18 <col:40, col:52> col:52 referenced typename depth 0 index 2 ... _Args
| | `-FunctionDecl 0xe10c98 <line:2930:5, line:2935:5> line:2930:20 constexpr __call_is_nt 'bool (std::__invoke_memfun_ref)'
| |   |-ParmVarDecl 0xe10bd0 <col:33> col:52 'std::__invoke_memfun_ref'
| |   `-CompoundStmt 0xe11d30 <line:2931:5, line:2935:5>
| |     |-DeclStmt 0xe119d0 <line:2932:7, col:51>
| |     | `-TypeAliasDecl 0xe11970 <col:7, col:47> col:13 referenced _Up 'typename __inv_unwrap<_Tp>::type'
| |     |   `-DependentNameType 0xe11900 'typename __inv_unwrap<_Tp>::type' dependent
| |     `-ReturnStmt 0xe11d20 <line:2933:7, line:2934:31>
| |       `-CXXNoexceptExpr 0xe11d00 <line:2933:14, line:2934:31> 'bool'
| |         `-CallExpr 0xe11cd8 <line:2933:23, line:2934:30> '<dependent type>'
| |           |-ParenExpr 0xe11bd0 <line:2933:23, col:64> '<dependent type>'
| |           | `-BinaryOperator 0xe11bb0 <col:24, col:63> '<dependent type>' '.*'
| |           |   |-CallExpr 0xe11ac8 <col:24, col:42> '<dependent type>'
| |           |   | `-UnresolvedLookupExpr 0xe11a50 <col:24, col:40> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| |           |   `-CallExpr 0xe11b90 <col:45, col:63> '<dependent type>'
| |           |     `-UnresolvedLookupExpr 0xe11b18 <col:45, col:61> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| |           `-PackExpansionExpr 0xe11cb8 <line:2934:6, col:27> '<dependent type>'
| |             `-CallExpr 0xe11c98 <col:6, col:26> '<dependent type>'
| |               `-UnresolvedLookupExpr 0xe11c20 <col:6, col:24> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| |-FunctionTemplateDecl 0xe12068 <line:2937:3, line:2942:5> line:2938:20 __call_is_nt
| | |-TemplateTypeParmDecl 0xe11d50 <line:2937:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xe11dc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Tp
| | |-TemplateTypeParmDecl 0xe11e48 <col:40, col:52> col:52 referenced typename depth 0 index 2 ... _Args
| | `-FunctionDecl 0xe11fc8 <line:2938:5, line:2942:5> line:2938:20 constexpr __call_is_nt 'bool (std::__invoke_memfun_deref)'
| |   |-ParmVarDecl 0xe11f00 <col:33> col:54 'std::__invoke_memfun_deref'
| |   `-CompoundStmt 0xe12498 <line:2939:5, line:2942:5>
| |     `-ReturnStmt 0xe12488 <line:2940:7, line:2941:31>
| |       `-CXXNoexceptExpr 0xe12468 <line:2940:14, line:2941:31> 'bool'
| |         `-CallExpr 0xe12440 <line:2940:23, line:2941:30> '<dependent type>'
| |           |-ParenExpr 0xe12338 <line:2940:23, col:67> '<dependent type>'
| |           | `-BinaryOperator 0xe12318 <col:24, col:66> '<dependent type>' '.*'
| |           |   |-ParenExpr 0xe12230 <col:24, col:45> '<dependent type>'
| |           |   | `-UnaryOperator 0xe12218 <col:25, col:44> '<dependent type>' prefix '*' cannot overflow
| |           |   |   `-CallExpr 0xe121f8 <col:26, col:44> '<dependent type>'
| |           |   |     `-UnresolvedLookupExpr 0xe12180 <col:26, col:42> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| |           |   `-CallExpr 0xe122f8 <col:48, col:66> '<dependent type>'
| |           |     `-UnresolvedLookupExpr 0xe12280 <col:48, col:64> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| |           `-PackExpansionExpr 0xe12420 <line:2941:6, col:27> '<dependent type>'
| |             `-CallExpr 0xe12400 <col:6, col:26> '<dependent type>'
| |               `-UnresolvedLookupExpr 0xe12388 <col:6, col:24> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| |-FunctionTemplateDecl 0xe12738 <line:2944:3, line:2949:5> line:2945:20 __call_is_nt
| | |-TemplateTypeParmDecl 0xe124b0 <line:2944:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xe12528 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Tp
| | `-FunctionDecl 0xe12698 <line:2945:5, line:2949:5> line:2945:20 constexpr __call_is_nt 'bool (std::__invoke_memobj_ref)'
| |   |-ParmVarDecl 0xe125d8 <col:33> col:52 'std::__invoke_memobj_ref'
| |   `-CompoundStmt 0xe12ea0 <line:2946:5, line:2949:5>
| |     |-DeclStmt 0xe12c80 <line:2947:7, col:51>
| |     | `-TypeAliasDecl 0xe12c20 <col:7, col:47> col:13 referenced _Up 'typename __inv_unwrap<_Tp>::type'
| |     |   `-DependentNameType 0xe12bb0 'typename __inv_unwrap<_Tp>::type' dependent
| |     `-ReturnStmt 0xe12e90 <line:2948:7, col:63>
| |       `-CXXNoexceptExpr 0xe12e70 <col:14, col:63> 'bool'
| |         `-BinaryOperator 0xe12e50 <col:23, col:62> '<dependent type>' '.*'
| |           |-CallExpr 0xe12d68 <col:23, col:41> '<dependent type>'
| |           | `-UnresolvedLookupExpr 0xe12cf0 <col:23, col:39> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| |           `-CallExpr 0xe12e30 <col:44, col:62> '<dependent type>'
| |             `-UnresolvedLookupExpr 0xe12db8 <col:44, col:60> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| |-FunctionTemplateDecl 0xe13148 <line:2951:3, line:2955:5> line:2952:20 __call_is_nt
| | |-TemplateTypeParmDecl 0xe12ec0 <line:2951:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xe12f38 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Tp
| | `-FunctionDecl 0xe130a8 <line:2952:5, line:2955:5> line:2952:20 constexpr __call_is_nt 'bool (std::__invoke_memobj_deref)'
| |   |-ParmVarDecl 0xe12fe8 <col:33> col:54 'std::__invoke_memobj_deref'
| |   `-CompoundStmt 0xe13448 <line:2953:5, line:2955:5>
| |     `-ReturnStmt 0xe13438 <line:2954:7, col:66>
| |       `-CXXNoexceptExpr 0xe13418 <col:14, col:66> 'bool'
| |         `-BinaryOperator 0xe133f8 <col:23, col:65> '<dependent type>' '.*'
| |           |-ParenExpr 0xe13310 <col:23, col:44> '<dependent type>'
| |           | `-UnaryOperator 0xe132f8 <col:24, col:43> '<dependent type>' prefix '*' cannot overflow
| |           |   `-CallExpr 0xe132d8 <col:25, col:43> '<dependent type>'
| |           |     `-UnresolvedLookupExpr 0xe13260 <col:25, col:41> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| |           `-CallExpr 0xe133d8 <col:47, col:65> '<dependent type>'
| |             `-UnresolvedLookupExpr 0xe13360 <col:47, col:63> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| |-FunctionTemplateDecl 0xe136e8 <line:2957:3, line:2961:5> line:2958:20 __call_is_nt
| | |-TemplateTypeParmDecl 0xe13460 <line:2957:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xe134d8 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-FunctionDecl 0xe13648 <line:2958:5, line:2961:5> line:2958:20 constexpr __call_is_nt 'bool (std::__invoke_other)'
| |   |-ParmVarDecl 0xe13588 <col:33> col:47 'std::__invoke_other'
| |   `-CompoundStmt 0xe14238 <line:2959:5, line:2961:5>
| |     `-ReturnStmt 0xe14228 <line:2960:7, col:68>
| |       `-CXXNoexceptExpr 0xe14208 <col:14, col:68> 'bool'
| |         `-CallExpr 0xe141e0 <col:23, col:67> '<dependent type>'
| |           |-CallExpr 0xe140d8 <col:23, col:41> '<dependent type>'
| |           | `-UnresolvedLookupExpr 0xe14060 <col:23, col:39> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| |           `-PackExpansionExpr 0xe141c0 <col:43, col:64> '<dependent type>'
| |             `-CallExpr 0xe141a0 <col:43, col:63> '<dependent type>'
| |               `-UnresolvedLookupExpr 0xe14128 <col:43, col:61> '<dependent type>' lvalue (no ADL) = 'declval' 0xddcfd0
| |-ClassTemplateDecl 0xe14480 <line:2963:3, line:2968:7> line:2964:12 __call_is_nothrow
| | |-TemplateTypeParmDecl 0xe14250 <line:2963:12, col:21> col:21 typename depth 0 index 0 _Result
| | |-TemplateTypeParmDecl 0xe142c8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Fn
| | |-TemplateTypeParmDecl 0xe14348 <col:44, col:56> col:56 referenced typename depth 0 index 2 ... _Args
| | `-CXXRecordDecl 0xe143f0 <line:2964:5, line:2968:7> line:2964:12 struct __call_is_nothrow definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type({}))>':'integral_constant<bool, std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type({}))>'
| |   `-CXXRecordDecl 0xe14c38 <col:5, col:12> col:12 implicit struct __call_is_nothrow
| |-TypeAliasTemplateDecl 0xe15140 <line:2970:3, line:2972:72> line:2971:5 __call_is_nothrow_
| | |-TemplateTypeParmDecl 0xe14ce0 <line:2970:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xe14d58 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-TypeAliasDecl 0xe150e0 <line:2971:5, line:2972:72> line:2971:11 __call_is_nothrow_ '__call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>'
| |   `-TemplateSpecializationType 0xe15010 '__call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>' dependent __call_is_nothrow
| |     |-TemplateArgument type '__invoke_result<_Fn, _Args...>'
| |     | `-TemplateSpecializationType 0xe14e90 '__invoke_result<_Fn, _Args...>' dependent __invoke_result
| |     |   |-TemplateArgument type '_Fn'
| |     |   | `-TemplateTypeParmType 0xe14d30 '_Fn' dependent depth 0 index 0
| |     |   |   `-TemplateTypeParm 0xe14ce0 '_Fn'
| |     |   `-TemplateArgument type '_Args...'
| |     |     `-PackExpansionType 0xe14e20 '_Args...' dependent
| |     |       `-TemplateTypeParmType 0xe14db0 '_Args' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |         `-TemplateTypeParm 0xe14d58 '_Args'
| |     |-TemplateArgument type '_Fn'
| |     | `-TemplateTypeParmType 0xe14d30 '_Fn' dependent depth 0 index 0
| |     |   `-TemplateTypeParm 0xe14ce0 '_Fn'
| |     `-TemplateArgument type '_Args...'
| |       `-PackExpansionType 0xe14e20 '_Args...' dependent
| |         `-TemplateTypeParmType 0xe14db0 '_Args' dependent contains_unexpanded_pack depth 0 index 1 pack
| |           `-TemplateTypeParm 0xe14d58 '_Args'
| |-ClassTemplateDecl 0xe15348 <line:2975:3, line:2979:7> line:2976:12 __is_nothrow_invocable
| | |-TemplateTypeParmDecl 0xe15198 <line:2975:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xe15218 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-CXXRecordDecl 0xe152b8 <line:2976:5, line:2979:7> line:2976:12 struct __is_nothrow_invocable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__and_<__is_invocable<_Fn, _Args...>, __call_is_nothrow_<_Fn, _Args...>>::type'
| |   `-CXXRecordDecl 0xe15d90 <col:5, col:12> col:12 implicit struct __is_nothrow_invocable
| |-CXXRecordDecl 0xe15e38 <line:2983:3, col:26> col:10 referenced struct __nonesuchbase definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment simple trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple trivial
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xe15f58 <col:3, col:10> col:10 implicit struct __nonesuchbase
| | |-CXXConstructorDecl 0xe17098 <col:10> col:10 implicit constexpr __nonesuchbase 'void (const std::__nonesuchbase &)' inline default trivial noexcept-unevaluated 0xe17098
| | | `-ParmVarDecl 0xe171a8 <col:10> col:10 'const std::__nonesuchbase &'
| | |-CXXConstructorDecl 0xe17248 <col:10> col:10 implicit constexpr __nonesuchbase 'void (std::__nonesuchbase &&)' inline default trivial noexcept-unevaluated 0xe17248
| | | `-ParmVarDecl 0xe17358 <col:10> col:10 'std::__nonesuchbase &&'
| | |-CXXMethodDecl 0xe17408 <col:10> col:10 implicit constexpr operator= 'std::__nonesuchbase &(const std::__nonesuchbase &)' inline default trivial noexcept-unevaluated 0xe17408
| | | `-ParmVarDecl 0xe17518 <col:10> col:10 'const std::__nonesuchbase &'
| | `-CXXMethodDecl 0xe17588 <col:10> col:10 implicit constexpr operator= 'std::__nonesuchbase &(std::__nonesuchbase &&)' inline default trivial noexcept-unevaluated 0xe17588
| |   `-ParmVarDecl 0xe17698 <col:10> col:10 'std::__nonesuchbase &&'
| `-CXXRecordDecl 0xe169d0 <line:2984:3, line:2988:3> line:2984:10 struct __nonesuch definition
|   |-DefinitionData empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor defaulted_is_constexpr
|   | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
|   | |-MoveConstructor
|   | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
|   | |-MoveAssignment
|   | `-Destructor trivial user_declared
|   |-private 'std::__nonesuchbase'
|   |-CXXRecordDecl 0xe16b28 <col:3, col:10> col:10 implicit referenced struct __nonesuch
|   |-CXXDestructorDecl 0xe16c58 <line:2985:5, col:26> col:5 ~__nonesuch 'void ()' delete trivial noexcept-unevaluated 0xe16c58
|   |-CXXConstructorDecl 0xe16e58 <line:2986:5, col:42> col:5 __nonesuch 'void (const std::__nonesuch &)' delete trivial
|   | `-ParmVarDecl 0xe16d78 <col:16, col:32> col:33 'const std::__nonesuch &'
|   `-CXXMethodDecl 0xe16fa8 <line:2987:5, col:46> col:10 operator= 'void (const std::__nonesuch &)' delete trivial
|     `-ParmVarDecl 0xe16f18 <col:20, col:36> col:37 'const std::__nonesuch &'
|-NamespaceDecl 0xe17738 prev 0xcca660 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/move.h:59:1, line:229:1> line:59:11 std
| |-original Namespace 0xc3b940 'std'
| |-VisibilityAttr 0xe177a8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:70:49, col:67> Default
| |-FunctionTemplateDecl 0xe17c00 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/move.h:74:3, line:78:39> line:77:5 forward
| | |-TemplateTypeParmDecl 0xe17800 <line:74:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xe17b60 <line:76:5, line:78:39> line:77:5 constexpr forward '_Tp &&(typename std::remove_reference<_Tp>::type &) noexcept'
| |   |-ParmVarDecl 0xe17a30 <col:13, col:56> col:56 referenced __t 'typename std::remove_reference<_Tp>::type &'
| |   `-CompoundStmt 0xe17d48 <line:78:5, col:39>
| |     `-ReturnStmt 0xe17d38 <col:7, col:36>
| |       `-CXXStaticCastExpr 0xe17d08 <col:14, col:36> '_Tp' xvalue static_cast<_Tp &&> <Dependent>
| |         `-DeclRefExpr 0xe17cd8 <col:33> 'typename std::remove_reference<_Tp>::type' lvalue ParmVar 0xe17a30 '__t' 'typename std::remove_reference<_Tp>::type &'
| |-FunctionTemplateDecl 0xe18130 <line:86:3, line:94:5> line:89:5 forward
| | |-TemplateTypeParmDecl 0xe17d60 <line:86:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xe18090 <line:88:5, line:94:5> line:89:5 constexpr forward '_Tp &&(typename std::remove_reference<_Tp>::type &&) noexcept'
| |   |-ParmVarDecl 0xe17f60 <col:13, col:57> col:57 referenced __t 'typename std::remove_reference<_Tp>::type &&'
| |   `-CompoundStmt 0xe184d8 <line:90:5, line:94:5>
| |     |-DeclStmt 0xe18450 <line:91:7, line:92:70>
| |     | `-StaticAssertDecl 0xe18410 <line:91:7, line:92:69> line:91:7
| |     |   |-UnaryOperator 0xe18328 <col:21, col:53> '<dependent type>' prefix '!' cannot overflow
| |     |   | `-DependentScopeDeclRefExpr 0xe182f0 <col:22, col:53> '<dependent type>' lvalue
| |     |   `-StringLiteral 0xe183b8 <line:92:4> 'const char[64]' lvalue "std::forward must not be used to convert an rvalue to an lvalue"
| |     `-ReturnStmt 0xe184c8 <line:93:7, col:36>
| |       `-CXXStaticCastExpr 0xe18498 <col:14, col:36> '_Tp' xvalue static_cast<_Tp &&> <Dependent>
| |         `-DeclRefExpr 0xe18468 <col:33> 'typename std::remove_reference<_Tp>::type' lvalue ParmVar 0xe17f60 '__t' 'typename std::remove_reference<_Tp>::type &&'
| |-FunctionTemplateDecl 0xe18898 <line:101:3, line:105:77> line:104:5 move
| | |-TemplateTypeParmDecl 0xe184f8 <line:101:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xe187f8 <line:103:5, line:105:77> line:104:5 constexpr move 'typename std::remove_reference<_Tp>::type &&(_Tp &&) noexcept'
| |   |-ParmVarDecl 0xe186b8 <col:10, col:16> col:16 referenced __t '_Tp &&'
| |   `-CompoundStmt 0xe1a1f0 <line:105:5, col:77>
| |     `-ReturnStmt 0xe1a1e0 <col:7, col:74>
| |       `-CXXStaticCastExpr 0xe1a1b0 <col:14, col:74> 'typename std::remove_reference<_Tp>::type' xvalue static_cast<typename std::remove_reference<_Tp>::type &&> <Dependent>
| |         `-DeclRefExpr 0xe1a140 <col:71> '_Tp' lvalue ParmVar 0xe186b8 '__t' '_Tp &&'
| |-ClassTemplateDecl 0xe1a330 <line:108:3, line:111:57> line:109:12 __move_if_noexcept_cond
| | |-TemplateTypeParmDecl 0xe1a208 <line:108:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xe1a2a0 <line:109:5, line:111:57> line:109:12 struct __move_if_noexcept_cond definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__and_<__not_<is_nothrow_move_constructible<_Tp>>, is_copy_constructible<_Tp>>::type'
| |   `-CXXRecordDecl 0xe1a980 <col:5, col:12> col:12 implicit struct __move_if_noexcept_cond
| |-FunctionTemplateDecl 0xe1b020 <line:121:3, line:126:30> line:125:5 move_if_noexcept
| | |-TemplateTypeParmDecl 0xe1aa28 <line:121:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xe1af80 <line:123:5, line:126:30> line:125:5 constexpr move_if_noexcept 'typename conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp &, _Tp &&>::type (_Tp &) noexcept'
| |   |-ParmVarDecl 0xe1ae78 <col:22, col:27> col:27 referenced __x '_Tp &'
| |   `-CompoundStmt 0xe1b1b8 <line:126:5, col:30>
| |     `-ReturnStmt 0xe1b1a8 <col:7, col:27>
| |       `-CallExpr 0xe1b180 <col:14, col:27> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xe1b118 <col:14, col:19> '<overloaded function type>' lvalue (no ADL) = 'move' 0xe18898
| |         `-DeclRefExpr 0xe1b160 <col:24> '_Tp' lvalue ParmVar 0xe1ae78 '__x' '_Tp &'
| |-FunctionTemplateDecl 0xe1b430 <line:142:3, line:146:37> line:145:5 addressof
| | |-TemplateTypeParmDecl 0xe1b1d0 <line:142:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xe1b390 <line:144:5, line:146:37> line:145:5 addressof '_Tp *(_Tp &) noexcept' inline
| |   |-ParmVarDecl 0xe1b298 <col:15, col:20> col:20 referenced __r '_Tp &'
| |   `-CompoundStmt 0xe1b5c8 <line:146:5, col:37>
| |     `-ReturnStmt 0xe1b5b8 <col:7, col:34>
| |       `-CallExpr 0xe1b590 <col:14, col:34> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xe1b528 <col:14, col:19> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| |         `-DeclRefExpr 0xe1b570 <col:31> '_Tp' lvalue ParmVar 0xe1b298 '__r' '_Tp &'
| |-FunctionTemplateDecl 0xe1b8c8 <line:150:3, line:151:37> col:16 addressof
| | |-TemplateTypeParmDecl 0xe1b5e0 <line:150:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xe1b828 <line:151:5, col:37> col:16 addressof 'const _Tp *(const _Tp &&)' delete
| |   `-ParmVarDecl 0xe1b6d8 <col:26, col:35> col:37 'const _Tp &&'
| |-FunctionTemplateDecl 0xe1bd98 <line:154:3, line:162:5> line:157:5 __exchange
| | |-TemplateTypeParmDecl 0xe1b9b0 <line:154:13, col:22> col:22 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xe1ba38 <col:27, col:42> col:36 referenced typename depth 0 index 1 _Up
| | | `-TemplateArgument type '_Tp'
| | |   `-TemplateTypeParmType 0xe1ba00 '_Tp' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0xe1b9b0 '_Tp'
| | `-FunctionDecl 0xe1bcf8 <line:156:5, line:162:5> line:157:5 __exchange '_Tp (_Tp &, _Up &&)' inline
| |   |-ParmVarDecl 0xe1bb18 <col:16, col:21> col:21 referenced __obj '_Tp &'
| |   |-ParmVarDecl 0xe1bbe8 <col:28, col:34> col:34 referenced __new_val '_Up &&'
| |   `-CompoundStmt 0xe1ce40 <line:158:5, line:162:5>
| |     |-DeclStmt 0xe1bfa0 <line:159:7, col:39>
| |     | `-VarDecl 0xe1be88 <col:7, col:38> col:11 referenced __old_val '_Tp' nrvo cinit
| |     |   `-CallExpr 0xe1bf78 <col:23, col:38> '<dependent type>'
| |     |     |-UnresolvedLookupExpr 0xe1bf10 <col:23, col:28> '<overloaded function type>' lvalue (no ADL) = 'move' 0xe18898
| |     |     `-DeclRefExpr 0xe1bf58 <col:33> '_Tp' lvalue ParmVar 0xe1bb18 '__obj' '_Tp &'
| |     |-BinaryOperator 0xe1cde8 <line:160:7, col:42> '<dependent type>' '='
| |     | |-DeclRefExpr 0xe1bfb8 <col:7> '_Tp' lvalue ParmVar 0xe1bb18 '__obj' '_Tp &'
| |     | `-CallExpr 0xe1cdc0 <col:15, col:42> '<dependent type>'
| |     |   |-UnresolvedLookupExpr 0xe1c020 <col:15, col:31> '<dependent type>' lvalue (no ADL) = 'forward' 0xe17c00 0xe18130
| |     |   `-DeclRefExpr 0xe1cda0 <col:33> '_Up' lvalue ParmVar 0xe1bbe8 '__new_val' '_Up &&'
| |     `-ReturnStmt 0xe1ce28 <line:161:7, col:14>
| |       `-DeclRefExpr 0xe1ce08 <col:14> '_Tp' lvalue Var 0xe1be88 '__old_val' '_Tp'
| |-FunctionTemplateDecl 0xe1d8a8 prev 0xdfc1a8 <line:186:3, line:207:5> line:196:5 swap
| | |-TemplateTypeParmDecl 0xe1ce68 <line:186:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xe1d808 prev 0xdfc108 <line:188:5, line:207:5> line:196:5 swap 'typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>, is_move_constructible<_Tp>, is_move_assignable<_Tp>>::value>::type (_Tp &, _Tp &) noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value)' inline
| |   |-ParmVarDecl 0xe1d418 <col:10, col:15> col:15 referenced __a '_Tp &'
| |   |-ParmVarDecl 0xe1d490 <col:20, col:25> col:25 referenced __b '_Tp &'
| |   `-CompoundStmt 0xe1dc30 <line:199:5, line:207:5>
| |     |-DeclStmt 0xe1da38 <line:204:7, col:37>
| |     | `-VarDecl 0xe1d920 <col:7, line:167:45> line:204:11 referenced __tmp '_Tp' cinit
| |     |   `-CallExpr 0xe1da10 <line:167:30, col:45> '<dependent type>'
| |     |     |-UnresolvedLookupExpr 0xe1d9a8 <col:30, col:35> '<overloaded function type>' lvalue (no ADL) = 'move' 0xe18898
| |     |     `-DeclRefExpr 0xe1d9f0 <line:204:33> '_Tp' lvalue ParmVar 0xe1d418 '__a' '_Tp &'
| |     |-BinaryOperator 0xe1db20 <line:205:7, line:167:45> '<dependent type>' '='
| |     | |-DeclRefExpr 0xe1da50 <line:205:7> '_Tp' lvalue ParmVar 0xe1d418 '__a' '_Tp &'
| |     | `-CallExpr 0xe1daf8 <line:167:30, col:45> '<dependent type>'
| |     |   |-UnresolvedLookupExpr 0xe1da90 <col:30, col:35> '<overloaded function type>' lvalue (no ADL) = 'move' 0xe18898
| |     |   `-DeclRefExpr 0xe1dad8 <line:205:27> '_Tp' lvalue ParmVar 0xe1d490 '__b' '_Tp &'
| |     `-BinaryOperator 0xe1dc10 <line:206:7, line:167:45> '<dependent type>' '='
| |       |-DeclRefExpr 0xe1db40 <line:206:7> '_Tp' lvalue ParmVar 0xe1d490 '__b' '_Tp &'
| |       `-CallExpr 0xe1dbe8 <line:167:30, col:45> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xe1db80 <col:30, col:35> '<overloaded function type>' lvalue (no ADL) = 'move' 0xe18898
| |         `-DeclRefExpr 0xe1dbc8 <line:206:27> '_Tp' lvalue Var 0xe1d920 '__tmp' '_Tp'
| `-FunctionTemplateDecl 0xe1e418 prev 0xdfccb8 <line:212:3, line:225:5> line:220:5 swap
|   |-TemplateTypeParmDecl 0xe1dc58 <line:212:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
|   |-NonTypeTemplateParmDecl 0xe1dce8 <col:26, col:33> col:33 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Nm
|   `-FunctionDecl 0xe1e378 prev 0xdfcc18 <line:214:5, line:225:5> line:220:5 swap 'typename enable_if<__is_swappable<_Tp>::value>::type (_Tp (&)[_Nm], _Tp (&)[_Nm]) noexcept(__is_nothrow_swappable<_Tp>::value)' inline
|     |-ParmVarDecl 0xe1e048 <col:10, col:24> col:16 referenced __a '_Tp (&)[_Nm]'
|     |-ParmVarDecl 0xe1e198 <col:27, col:41> col:33 referenced __b '_Tp (&)[_Nm]'
|     `-CompoundStmt 0xe1e770 <line:222:5, line:225:5>
|       `-ForStmt 0xe1e738 <line:223:7, line:224:25>
|         |-DeclStmt 0xe1e530 <line:223:12, col:26>
|         | `-VarDecl 0xe1e490 <col:12, col:25> col:19 referenced __n 'std::size_t':'unsigned long' cinit
|         |   `-ImplicitCastExpr 0xe1e518 <col:25> 'std::size_t':'unsigned long' <IntegralCast>
|         |     `-IntegerLiteral 0xe1e4f8 <col:25> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0xe1e5a0 <col:28, col:34> 'bool' '<'
|         | |-ImplicitCastExpr 0xe1e588 <col:28> 'std::size_t':'unsigned long' <LValueToRValue>
|         | | `-DeclRefExpr 0xe1e548 <col:28> 'std::size_t':'unsigned long' lvalue Var 0xe1e490 '__n' 'std::size_t':'unsigned long'
|         | `-DeclRefExpr 0xe1e568 <col:34> 'std::size_t':'unsigned long' NonTypeTemplateParm 0xe1dce8 '_Nm' 'std::size_t':'unsigned long'
|         |-UnaryOperator 0xe1e5e0 <col:39, col:41> 'std::size_t':'unsigned long' lvalue prefix '++'
|         | `-DeclRefExpr 0xe1e5c0 <col:41> 'std::size_t':'unsigned long' lvalue Var 0xe1e490 '__n' 'std::size_t':'unsigned long'
|         `-CallExpr 0xe1e708 <line:224:2, col:25> '<dependent type>'
|           |-UnresolvedLookupExpr 0xe1e5f8 <col:2> '<overloaded function type>' lvalue (ADL) = 'swap' 0xe1e418 0xe1d8a8
|           |-ArraySubscriptExpr 0xe1e688 <col:7, col:14> '_Tp' lvalue
|           | |-DeclRefExpr 0xe1e648 <col:7> '_Tp[_Nm]':'_Tp[_Nm]' lvalue ParmVar 0xe1e048 '__a' '_Tp (&)[_Nm]'
|           | `-DeclRefExpr 0xe1e668 <col:11> 'std::size_t':'unsigned long' lvalue Var 0xe1e490 '__n' 'std::size_t':'unsigned long'
|           `-ArraySubscriptExpr 0xe1e6e8 <col:17, col:24> '_Tp' lvalue
|             |-DeclRefExpr 0xe1e6a8 <col:17> '_Tp[_Nm]':'_Tp[_Nm]' lvalue ParmVar 0xe1e198 '__b' '_Tp (&)[_Nm]'
|             `-DeclRefExpr 0xe1e6c8 <col:21> 'std::size_t':'unsigned long' lvalue Var 0xe1e490 '__n' 'std::size_t':'unsigned long'
|-NamespaceDecl 0xe1e7a8 prev 0xe17738 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:48:1, line:1949:1> line:48:11 std
| |-original Namespace 0xc3b940 'std'
| |-VisibilityAttr 0xe1e818 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:70:49, col:67> Default
| |-EnumDecl 0xe1e870 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:78:11, line:86:5> line:78:16 memory_order
| | |-EnumConstantDecl 0xe1e930 <line:80:7> col:7 referenced memory_order_relaxed 'std::memory_order'
| | |-EnumConstantDecl 0xe1e980 <line:81:7> col:7 referenced memory_order_consume 'std::memory_order'
| | |-EnumConstantDecl 0xe1e9d0 <line:82:7> col:7 referenced memory_order_acquire 'std::memory_order'
| | |-EnumConstantDecl 0xe1ea20 <line:83:7> col:7 referenced memory_order_release 'std::memory_order'
| | |-EnumConstantDecl 0xe1ea70 <line:84:7> col:7 referenced memory_order_acq_rel 'std::memory_order'
| | `-EnumConstantDecl 0xe1eac0 <line:85:7> col:7 referenced memory_order_seq_cst 'std::memory_order'
| |-TypedefDecl 0xe1eb68 <line:78:3, line:86:7> col:7 referenced memory_order 'enum memory_order':'std::memory_order'
| | `-ElaboratedType 0xe1eb10 'enum memory_order' sugar
| |   `-EnumType 0xe1e910 'std::memory_order'
| |     `-Enum 0xe1e870 'memory_order'
| |-EnumDecl 0xe1ebe8 <line:89:3, line:95:5> line:89:8 referenced __memory_order_modifier
| | |-EnumConstantDecl 0xe1ecf0 <line:91:7, col:38> col:7 referenced __memory_order_mask 'std::__memory_order_modifier'
| | | `-ImplicitCastExpr 0xe1f130 <col:38> 'unsigned int' <IntegralCast>
| | |   `-ConstantExpr 0xe1ecd0 <col:38> 'int'
| | |     |-value: Int 65535
| | |     `-IntegerLiteral 0xe1ecb0 <col:38> 'int' 65535
| | |-EnumConstantDecl 0xe1efc0 <line:92:7, col:38> col:7 referenced __memory_order_modifier_mask 'std::__memory_order_modifier'
| | | `-ConstantExpr 0xe1ed60 <col:38> 'unsigned int'
| | |   |-value: Int 4294901760
| | |   `-IntegerLiteral 0xe1ed40 <col:38> 'unsigned int' 4294901760
| | |-EnumConstantDecl 0xe1f050 <line:93:7, col:38> col:7 __memory_order_hle_acquire 'std::__memory_order_modifier'
| | | `-ImplicitCastExpr 0xe1f148 <col:38> 'unsigned int' <IntegralCast>
| | |   `-ConstantExpr 0xe1f030 <col:38> 'int'
| | |     |-value: Int 65536
| | |     `-IntegerLiteral 0xe1f010 <col:38> 'int' 65536
| | `-EnumConstantDecl 0xe1f0e0 <line:94:7, col:38> col:7 __memory_order_hle_release 'std::__memory_order_modifier'
| |   `-ImplicitCastExpr 0xe1f160 <col:38> 'unsigned int' <IntegralCast>
| |     `-ConstantExpr 0xe1f0c0 <col:38> 'int'
| |       |-value: Int 131072
| |       `-IntegerLiteral 0xe1f0a0 <col:38> 'int' 131072
| |-FunctionDecl 0xe1f338 <line:97:3, line:101:3> line:98:3 used constexpr operator| 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | |-ParmVarDecl 0xe1f1b0 <col:13, col:26> col:26 used __m 'std::memory_order':'std::memory_order'
| | |-ParmVarDecl 0xe1f228 <col:31, col:55> col:55 used __mod 'std::__memory_order_modifier'
| | `-CompoundStmt 0xe1f570 <line:99:3, line:101:3>
| |   `-ReturnStmt 0xe1f560 <line:100:5, col:46>
| |     `-CXXFunctionalCastExpr 0xe1f538 <col:12, col:46> 'std::memory_order':'std::memory_order' functional cast to std::memory_order <IntegralCast>
| |       `-BinaryOperator 0xe1f518 <col:25, col:45> 'int' '|'
| |         |-CXXFunctionalCastExpr 0xe1f460 <col:25, col:32> 'int' functional cast to int <NoOp>
| |         | `-ImplicitCastExpr 0xe1f448 <col:29> 'int' <IntegralCast> part_of_explicit_cast
| |         |   `-ImplicitCastExpr 0xe1f430 <col:29> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| |         |     `-DeclRefExpr 0xe1f410 <col:29> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe1f1b0 '__m' 'std::memory_order':'std::memory_order'
| |         `-CXXFunctionalCastExpr 0xe1f4f0 <col:36, col:45> 'int' functional cast to int <NoOp>
| |           `-ImplicitCastExpr 0xe1f4d8 <col:40> 'int' <IntegralCast> part_of_explicit_cast
| |             `-ImplicitCastExpr 0xe1f4c0 <col:40> 'std::__memory_order_modifier' <LValueToRValue> part_of_explicit_cast
| |               `-DeclRefExpr 0xe1f4a0 <col:40> 'std::__memory_order_modifier' lvalue ParmVar 0xe1f228 '__mod' 'std::__memory_order_modifier'
| |-FunctionDecl 0xe1f6a8 <line:103:3, line:107:3> line:104:3 used constexpr operator& 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | |-ParmVarDecl 0xe1f598 <col:13, col:26> col:26 used __m 'std::memory_order':'std::memory_order'
| | |-ParmVarDecl 0xe1f610 <col:31, col:55> col:55 used __mod 'std::__memory_order_modifier'
| | `-CompoundStmt 0xe1f8e0 <line:105:3, line:107:3>
| |   `-ReturnStmt 0xe1f8d0 <line:106:5, col:46>
| |     `-CXXFunctionalCastExpr 0xe1f8a8 <col:12, col:46> 'std::memory_order':'std::memory_order' functional cast to std::memory_order <IntegralCast>
| |       `-BinaryOperator 0xe1f888 <col:25, col:45> 'int' '&'
| |         |-CXXFunctionalCastExpr 0xe1f7d0 <col:25, col:32> 'int' functional cast to int <NoOp>
| |         | `-ImplicitCastExpr 0xe1f7b8 <col:29> 'int' <IntegralCast> part_of_explicit_cast
| |         |   `-ImplicitCastExpr 0xe1f7a0 <col:29> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| |         |     `-DeclRefExpr 0xe1f780 <col:29> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe1f598 '__m' 'std::memory_order':'std::memory_order'
| |         `-CXXFunctionalCastExpr 0xe1f860 <col:36, col:45> 'int' functional cast to int <NoOp>
| |           `-ImplicitCastExpr 0xe1f848 <col:40> 'int' <IntegralCast> part_of_explicit_cast
| |             `-ImplicitCastExpr 0xe1f830 <col:40> 'std::__memory_order_modifier' <LValueToRValue> part_of_explicit_cast
| |               `-DeclRefExpr 0xe1f810 <col:40> 'std::__memory_order_modifier' lvalue ParmVar 0xe1f610 '__mod' 'std::__memory_order_modifier'
| |-FunctionDecl 0xe1fa00 <line:110:3, line:115:3> line:111:3 used constexpr __cmpexch_failure_order2 'std::memory_order (std::memory_order) noexcept'
| | |-ParmVarDecl 0xe1f908 <col:28, col:41> col:41 used __m 'std::memory_order':'std::memory_order'
| | `-CompoundStmt 0xe1fce0 <line:112:3, line:115:3>
| |   `-ReturnStmt 0xe1fcd0 <line:113:5, line:114:62>
| |     `-ConditionalOperator 0xe1fca0 <line:113:12, line:114:62> 'std::memory_order'
| |       |-BinaryOperator 0xe1fb30 <line:113:12, col:19> 'bool' '=='
| |       | |-ImplicitCastExpr 0xe1fb00 <col:12> 'int' <IntegralCast>
| |       | | `-ImplicitCastExpr 0xe1fae8 <col:12> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |       | |   `-DeclRefExpr 0xe1faa8 <col:12> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe1f908 '__m' 'std::memory_order':'std::memory_order'
| |       | `-ImplicitCastExpr 0xe1fb18 <col:19> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0xe1fac8 <col:19> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| |       |-DeclRefExpr 0xe1fb50 <col:42> 'std::memory_order' EnumConstant 0xe1e9d0 'memory_order_acquire' 'std::memory_order'
| |       `-ConditionalOperator 0xe1fc70 <line:114:9, col:62> 'std::memory_order'
| |         |-BinaryOperator 0xe1fbf8 <col:9, col:16> 'bool' '=='
| |         | |-ImplicitCastExpr 0xe1fbc8 <col:9> 'int' <IntegralCast>
| |         | | `-ImplicitCastExpr 0xe1fbb0 <col:9> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |         | |   `-DeclRefExpr 0xe1fb70 <col:9> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe1f908 '__m' 'std::memory_order':'std::memory_order'
| |         | `-ImplicitCastExpr 0xe1fbe0 <col:16> 'int' <IntegralCast>
| |         |   `-DeclRefExpr 0xe1fb90 <col:16> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| |         |-DeclRefExpr 0xe1fc18 <col:39> 'std::memory_order' EnumConstant 0xe1e930 'memory_order_relaxed' 'std::memory_order'
| |         `-ImplicitCastExpr 0xe1fc58 <col:62> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |           `-DeclRefExpr 0xe1fc38 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe1f908 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionDecl 0xe1fda0 <line:117:3, line:122:3> line:118:3 used constexpr __cmpexch_failure_order 'std::memory_order (std::memory_order) noexcept'
| | |-ParmVarDecl 0xe1fd08 <col:27, col:40> col:40 used __m 'std::memory_order':'std::memory_order'
| | `-CompoundStmt 0xe20230 <line:119:3, line:122:3>
| |   `-ReturnStmt 0xe20220 <line:120:5, line:121:68>
| |     `-CXXFunctionalCastExpr 0xe201f8 <line:120:12, line:121:68> 'std::memory_order':'std::memory_order' functional cast to std::memory_order <NoOp>
| |       `-CXXOperatorCallExpr 0xe201c0 <line:120:25, line:121:67> 'std::memory_order':'std::memory_order' '|'
| |         |-ImplicitCastExpr 0xe201a8 <col:7> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0xe20188 <col:7> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f338 'operator|' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| |         |-CallExpr 0xe20060 <line:120:25, col:75> 'std::memory_order':'std::memory_order'
| |         | |-ImplicitCastExpr 0xe20048 <col:25> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| |         | | `-DeclRefExpr 0xe1ffc8 <col:25> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fa00 '__cmpexch_failure_order2' 'std::memory_order (std::memory_order) noexcept'
| |         | `-CXXOperatorCallExpr 0xe1ff90 <col:50, col:56> 'std::memory_order':'std::memory_order' '&'
| |         |   |-ImplicitCastExpr 0xe1ff78 <col:54> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| |         |   | `-DeclRefExpr 0xe1fef8 <col:54> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| |         |   |-ImplicitCastExpr 0xe1fee0 <col:50> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |         |   | `-DeclRefExpr 0xe1fea0 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe1fd08 '__m' 'std::memory_order':'std::memory_order'
| |         |   `-DeclRefExpr 0xe1fec0 <col:56> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| |         `-CXXFunctionalCastExpr 0xe20160 <line:121:9, col:67> 'std::__memory_order_modifier' functional cast to enum std::__memory_order_modifier <IntegralCast>
| |           `-CXXOperatorCallExpr 0xe20128 <col:33, col:39> 'std::memory_order':'std::memory_order' '&'
| |             |-ImplicitCastExpr 0xe20110 <col:37> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| |             | `-DeclRefExpr 0xe200f0 <col:37> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| |             |-ImplicitCastExpr 0xe200d8 <col:33> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |             | `-DeclRefExpr 0xe20098 <col:33> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe1fd08 '__m' 'std::memory_order':'std::memory_order'
| |             `-DeclRefExpr 0xe200b8 <col:39> 'std::__memory_order_modifier' EnumConstant 0xe1efc0 '__memory_order_modifier_mask' 'std::__memory_order_modifier'
| |-FunctionDecl 0xe20350 <line:45:32, line:126:38> line:125:3 atomic_thread_fence 'void (std::memory_order) noexcept' inline
| | |-ParmVarDecl 0xe20258 <col:23, col:36> col:36 used __m 'std::memory_order':'std::memory_order'
| | |-CompoundStmt 0xe207d8 <line:126:3, col:38>
| | | `-CallExpr 0xe207b0 <col:5, col:35> 'void'
| | |   |-ImplicitCastExpr 0xe20798 <col:5> 'void (*)(int) noexcept' <BuiltinFnToFnPtr>
| | |   | `-DeclRefExpr 0xe20690 <col:5> '<builtin fn type>' Function 0xe20500 '__atomic_thread_fence' 'void (int) noexcept'
| | |   `-CXXFunctionalCastExpr 0xe20718 <col:27, col:34> 'int' functional cast to int <NoOp>
| | |     `-ImplicitCastExpr 0xe20700 <col:31> 'int' <IntegralCast> part_of_explicit_cast
| | |       `-ImplicitCastExpr 0xe206e8 <col:31> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | |         `-DeclRefExpr 0xe206c8 <col:31> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe20258 '__m' 'std::memory_order':'std::memory_order'
| | `-AlwaysInlineAttr 0xe203f8 <line:45:54> always_inline
| |-FunctionDecl 0xe20898 <col:32, line:130:38> line:129:3 atomic_signal_fence 'void (std::memory_order) noexcept' inline
| | |-ParmVarDecl 0xe20800 <col:23, col:36> col:36 used __m 'std::memory_order':'std::memory_order'
| | |-CompoundStmt 0xe20c68 <line:130:3, col:38>
| | | `-CallExpr 0xe20c40 <col:5, col:35> 'void'
| | |   |-ImplicitCastExpr 0xe20c28 <col:5> 'void (*)(int) noexcept' <BuiltinFnToFnPtr>
| | |   | `-DeclRefExpr 0xe20b78 <col:5> '<builtin fn type>' Function 0xe209e8 '__atomic_signal_fence' 'void (int) noexcept'
| | |   `-CXXFunctionalCastExpr 0xe20c00 <col:27, col:34> 'int' functional cast to int <NoOp>
| | |     `-ImplicitCastExpr 0xe20be8 <col:31> 'int' <IntegralCast> part_of_explicit_cast
| | |       `-ImplicitCastExpr 0xe20bd0 <col:31> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | |         `-DeclRefExpr 0xe20bb0 <col:31> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe20800 '__m' 'std::memory_order':'std::memory_order'
| | `-AlwaysInlineAttr 0xe20940 <line:45:54> always_inline
| |-FunctionTemplateDecl 0xe20ec0 <line:133:3, line:139:5> line:135:5 kill_dependency
| | |-TemplateTypeParmDecl 0xe20c80 <line:133:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xe20e20 <line:134:5, line:139:5> line:135:5 kill_dependency '_Tp (_Tp) noexcept' inline
| |   |-ParmVarDecl 0xe20d20 <col:21, col:25> col:25 referenced __y '_Tp'
| |   `-CompoundStmt 0xe22698 <line:136:5, line:139:5>
| |     |-DeclStmt 0xe22648 <line:137:7, col:21>
| |     | `-VarDecl 0xe22580 <col:7, col:20> col:11 referenced __ret '_Tp' nrvo callinit
| |     |   `-ParenListExpr 0xe22628 <col:16, col:20> 'NULL TYPE'
| |     |     `-DeclRefExpr 0xe225e8 <col:17> '_Tp' lvalue ParmVar 0xe20d20 '__y' '_Tp'
| |     `-ReturnStmt 0xe22680 <line:138:7, col:14>
| |       `-DeclRefExpr 0xe22660 <col:14> '_Tp' lvalue Var 0xe22580 '__ret' '_Tp'
| |-ClassTemplateDecl 0xe227e0 <line:142:3, line:143:12> col:12 __atomic_base
| | |-TemplateTypeParmDecl 0xe226b8 <line:142:12, col:21> col:21 typename depth 0 index 0 _IntTp
| | |-CXXRecordDecl 0xe22750 <line:143:5, col:12> col:12 struct __atomic_base
| | |-ClassTemplateSpecializationDecl 0xe61040 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'bool'
| | | | `-BuiltinType 0xbf61d0 'bool'
| | | |-CXXRecordDecl 0xe61268 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xe61338 <line:319:7, col:26> col:13 value_type 'bool':'bool'
| | | | `-SubstTemplateTypeParmType 0xe61300 'bool' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf61d0 'bool'
| | | |-TypeAliasDecl 0xe613d0 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<bool>::value_type':'bool'
| | | | `-TypedefType 0xe613a0 'std::__atomic_base<bool>::value_type' sugar
| | | |   |-TypeAlias 0xe61338 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xe61300 'bool' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf61d0 'bool'
| | | |-AccessSpecDecl 0xe61430 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xe61468 <line:323:7, col:21> col:21 __int_type 'bool':'bool'
| | | | `-SubstTemplateTypeParmType 0xe61300 'bool' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf61d0 'bool'
| | | |-VarDecl 0xe614c0 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 1
| | | | `-ImplicitCastExpr 0xe61648 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xe61618 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xe61598 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xe61548 <col:2, col:13> 'unsigned long' sizeof 'bool':'bool'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xe61578 <col:17, col:29> 'unsigned long' alignof 'bool':'bool'
| | | |     |-UnaryExprOrTypeTraitExpr 0xe615c8 <col:33, col:44> 'unsigned long' sizeof 'bool':'bool'
| | | |     `-UnaryExprOrTypeTraitExpr 0xe615f8 <col:48, col:60> 'unsigned long' alignof 'bool':'bool'
| | | |-FieldDecl 0xe616f0 <line:328:29, col:40> col:40 referenced _M_i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-AlignedAttr 0xe617b8 <col:7> alignas
| | | |   `-ConstantExpr 0xe61798 <col:15> 'int'
| | | |     |-value: Int 1
| | | |     `-ImplicitCastExpr 0xe61780 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xe61760 <col:15> 'const int' lvalue Var 0xe614c0 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xe61818 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xe61878 <line:331:7, col:40> col:7 used __atomic_base 'void () noexcept' default trivial
| | | | `-CompoundStmt 0xf2c2c0 <col:40>
| | | |-CXXDestructorDecl 0xe61958 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xe61b38 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<bool> &)' delete trivial
| | | | `-ParmVarDecl 0xe61a58 <col:21, col:40> col:41 'const std::__atomic_base<bool> &'
| | | |-CXXMethodDecl 0xe61d08 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<bool> &(const std::__atomic_base<bool> &)' delete trivial
| | | | `-ParmVarDecl 0xe61c48 <col:32, col:51> col:52 'const std::__atomic_base<bool> &'
| | | |-CXXMethodDecl 0xe61e98 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<bool> &(const std::__atomic_base<bool> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xe61dd0 <col:32, col:51> col:52 'const std::__atomic_base<bool> &'
| | | |-CXXConstructorDecl 0xe62060 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<bool>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xe61f70 <col:31, col:42> col:42 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-CXXCtorInitializer Field 0xe616f0 '_M_i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | | `-ImplicitCastExpr 0xe6b6d0 <col:64> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xe6b690 <col:64> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe61f70 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xe62190 <line:340:7, line:341:24> line:340:7 operator bool 'std::__atomic_base<bool>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xe622b0 <line:343:7, line:344:24> line:343:7 operator bool 'std::__atomic_base<bool>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xe62460 <line:346:7, line:351:7> line:347:7 used operator= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xe62398 <col:17, col:28> col:28 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-CompoundStmt 0xf33f08 <line:348:7, line:351:7>
| | | |   |-CXXMemberCallExpr 0xf33e58 <line:349:2, col:11> 'void'
| | | |   | |-MemberExpr 0xf33e28 <col:2> '<bound member function type>' ->store 0xe64260
| | | |   | | `-CXXThisExpr 0xf33e18 <col:2> 'std::__atomic_base<bool> *' implicit this
| | | |   | |-ImplicitCastExpr 0xf33e88 <col:8> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0xf33df8 <col:8> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe62398 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | |   | `-CXXDefaultArgExpr 0xf33ea0 <<invalid sloc>> 'std::memory_order'
| | | |   `-ReturnStmt 0xf33ef8 <line:350:2, col:9>
| | | |     `-ImplicitCastExpr 0xf33ee0 <col:9> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | |       `-DeclRefExpr 0xf33ec0 <col:9> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe62398 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xe62630 <line:353:7, line:358:7> line:354:7 used operator= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xe62538 <col:17, col:28> col:28 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-CompoundStmt 0xf340b8 <line:355:7, line:358:7>
| | | |   |-CXXMemberCallExpr 0xf34008 <line:356:2, col:11> 'void'
| | | |   | |-MemberExpr 0xf33fd8 <col:2> '<bound member function type>' ->store 0xe64530
| | | |   | | `-CXXThisExpr 0xf33fc8 <col:2> 'volatile std::__atomic_base<bool> *' implicit this
| | | |   | |-ImplicitCastExpr 0xf34038 <col:8> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0xf33fa8 <col:8> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe62538 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | |   | `-CXXDefaultArgExpr 0xf34050 <<invalid sloc>> 'std::memory_order'
| | | |   `-ReturnStmt 0xf340a8 <line:357:2, col:9>
| | | |     `-ImplicitCastExpr 0xf34090 <col:9> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | |       `-DeclRefExpr 0xf34070 <col:9> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe62538 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xe627f0 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<bool>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xe626f8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xe629a0 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<bool>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xe628a8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xe62b00 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<bool>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xe62a68 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xe62c50 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<bool>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xe62bb8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xe62d70 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<bool>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xe62eb0 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<bool>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xe62f98 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<bool>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xe63080 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<bool>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xe631f8 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe63160 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xe63358 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe632c0 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xe634c8 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe63430 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xe63628 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe63590 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xe63798 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe63700 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xe638f8 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe63860 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xe63a68 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe639d0 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xe63bc8 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe63b30 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xe63d38 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe63ca0 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xe63e98 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe63e00 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xe63f60 <line:432:7, line:438:7> line:433:7 used is_lock_free 'bool () const noexcept'
| | | | `-CompoundStmt 0xf350f8 <line:434:7, line:438:7>
| | | |   `-ReturnStmt 0xf350e8 <line:436:2, line:437:45>
| | | |     `-CallExpr 0xf350a0 <line:436:9, line:437:45> 'bool'
| | | |       |-ImplicitCastExpr 0xf35088 <line:436:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
| | | |       | `-DeclRefExpr 0xe48028 <col:9> '<builtin fn type>' Function 0xe47e28 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
| | | |       |-UnaryExprOrTypeTraitExpr 0xf34fc8 <col:31, col:42> 'unsigned long' sizeof
| | | |       | `-ParenExpr 0xf34fa8 <col:37, col:42> 'const std::__atomic_base<bool>::__int_type':'const bool' lvalue
| | | |       |   `-MemberExpr 0xf34f78 <col:38> 'const std::__atomic_base<bool>::__int_type':'const bool' lvalue ->_M_i 0xe616f0 non_odr_use_unevaluated
| | | |       |     `-CXXThisExpr 0xf34f68 <col:38> 'const std::__atomic_base<bool> *' implicit this
| | | |       `-ImplicitCastExpr 0xf350d0 <line:437:6, col:44> 'const volatile void *' <NoOp>
| | | |         `-CXXReinterpretCastExpr 0xf35058 <col:6, col:44> 'void *' reinterpret_cast<void *> <IntegralToPointer>
| | | |           `-UnaryOperator 0xf35040 <col:31, col:32> 'int' prefix '-'
| | | |             `-ImplicitCastExpr 0xf35028 <col:32> 'int' <LValueToRValue>
| | | |               `-DeclRefExpr 0xf35008 <col:32> 'const int' lvalue Var 0xe614c0 '_S_alignment' 'const int' non_odr_use_constant
| | | |-CXXMethodDecl 0xe64010 <line:440:7, line:446:7> line:441:7 used is_lock_free 'bool () const volatile noexcept'
| | | | `-CompoundStmt 0xf352a0 <line:442:7, line:446:7>
| | | |   `-ReturnStmt 0xf35290 <line:444:2, line:445:45>
| | | |     `-CallExpr 0xf35248 <line:444:9, line:445:45> 'bool'
| | | |       |-ImplicitCastExpr 0xf35230 <line:444:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
| | | |       | `-DeclRefExpr 0xe48290 <col:9> '<builtin fn type>' Function 0xe47e28 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
| | | |       |-UnaryExprOrTypeTraitExpr 0xf35170 <col:31, col:42> 'unsigned long' sizeof
| | | |       | `-ParenExpr 0xf35150 <col:37, col:42> 'const volatile std::__atomic_base<bool>::__int_type':'const volatile bool' lvalue
| | | |       |   `-MemberExpr 0xf35120 <col:38> 'const volatile std::__atomic_base<bool>::__int_type':'const volatile bool' lvalue ->_M_i 0xe616f0 non_odr_use_unevaluated
| | | |       |     `-CXXThisExpr 0xf35110 <col:38> 'const volatile std::__atomic_base<bool> *' implicit this
| | | |       `-ImplicitCastExpr 0xf35278 <line:445:6, col:44> 'const volatile void *' <NoOp>
| | | |         `-CXXReinterpretCastExpr 0xf35200 <col:6, col:44> 'void *' reinterpret_cast<void *> <IntegralToPointer>
| | | |           `-UnaryOperator 0xf351e8 <col:31, col:32> 'int' prefix '-'
| | | |             `-ImplicitCastExpr 0xf351d0 <col:32> 'int' <LValueToRValue>
| | | |               `-DeclRefExpr 0xf351b0 <col:32> 'const int' lvalue Var 0xe614c0 '_S_alignment' 'const int' non_odr_use_constant
| | | |-CXXMethodDecl 0xe64260 <line:45:32, line:458:7> line:449:7 used store 'void (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe640e0 <col:13, col:24> col:24 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe64148 <col:29, col:48> col:42 used __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42a50 <col:48> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xf35b68 <line:450:7, line:458:7>
| | | | | |-DeclStmt 0xf35420 <line:451:2, line:452:31>
| | | | | | `-VarDecl 0xf352b8 <line:451:2, line:452:12> line:451:15 used __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xf353e8 <line:452:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xf353d0 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xf353b0 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xf35398 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xf35378 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe64148 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe48588 <col:12> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xf35320 <line:451:35> unused
| | | | | |-DoStmt 0xf355c8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xf355b0 <col:6, col:42>
| | | | | | | `-IfStmt 0xf35590 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf35538 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf35450 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf35438 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe48648 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf35520 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf354f8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf354d8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:453:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf354a8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf35490 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf35470 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf352b8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf354c0 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe486d0 <col:26> 'std::memory_order' EnumConstant 0xe1e9d0 'memory_order_acquire' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf35570 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf35558 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe487b8 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe48848 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf35778 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf35760 <col:6, col:42>
| | | | | | | `-IfStmt 0xf35740 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf356e8 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf35600 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf355e8 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe48878 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf356d0 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf356a8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf35688 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:454:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf35658 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf35640 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf35620 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf352b8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf35670 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe48900 <col:26> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf35720 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf35708 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe489e8 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe48a78 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf35928 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf35910 <col:6, col:42>
| | | | | | | `-IfStmt 0xf358f0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf35898 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf357b0 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf35798 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe48aa8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf35880 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf35858 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf35838 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:455:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf35808 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf357f0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf357d0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf352b8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf35820 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe48b30 <col:26> 'std::memory_order' EnumConstant 0xe1e980 'memory_order_consume' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf358d0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf358b8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe48c18 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe48ca8 <line:531:51> 'bool' false
| | | | | `-AtomicExpr 0xf35b10 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:457:2, col:39> 'void'
| | | | |   |-UnaryOperator 0xf359f8 <col:19, col:20> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |   | `-MemberExpr 0xf359a0 <col:20> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ->_M_i 0xe616f0
| | | | |   |   `-CXXThisExpr 0xf35990 <col:20> 'std::__atomic_base<bool> *' implicit this
| | | | |   |-CXXFunctionalCastExpr 0xf35a80 <col:31, col:38> 'int' functional cast to int <NoOp>
| | | | |   | `-ImplicitCastExpr 0xf35a68 <col:35> 'int' <IntegralCast> part_of_explicit_cast
| | | | |   |   `-ImplicitCastExpr 0xf35a50 <col:35> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |   |     `-DeclRefExpr 0xf35a30 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe64148 '__m' 'std::memory_order':'std::memory_order'
| | | | |   `-ImplicitCastExpr 0xf35af8 <col:26> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     `-DeclRefExpr 0xf35a10 <col:26> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe640e0 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-AlwaysInlineAttr 0xe64348 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe64530 <col:32, line:471:7> line:461:7 used store 'void (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe643b0 <col:13, col:24> col:24 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe64418 <line:462:6, col:25> col:19 used __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42a70 <col:25> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xf36478 <line:463:7, line:471:7>
| | | | | |-DeclStmt 0xf35d08 <line:464:2, line:465:31>
| | | | | | `-VarDecl 0xf35ba0 <line:464:2, line:465:12> line:464:15 used __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xf35cd0 <line:465:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xf35cb8 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xf35c98 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xf35c80 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xf35c60 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe64418 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe492d0 <col:12> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xf35c08 <line:464:35> unused
| | | | | |-DoStmt 0xf35ed0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xf35eb8 <col:6, col:42>
| | | | | | | `-IfStmt 0xf35e98 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf35e40 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf35d38 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf35d20 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe49390 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf35e28 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf35e00 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf35dc0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:466:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf35d90 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf35d78 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf35d58 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf35ba0 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf35da8 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe49418 <col:26> 'std::memory_order' EnumConstant 0xe1e9d0 'memory_order_acquire' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf35e78 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf35e60 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe49500 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe49590 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf36080 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf36068 <col:6, col:42>
| | | | | | | `-IfStmt 0xf36048 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf35ff0 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf35f08 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf35ef0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe495c0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf35fd8 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf35fb0 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf35f90 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:467:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf35f60 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf35f48 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf35f28 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf35ba0 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf35f78 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe49648 <col:26> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf36028 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf36010 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe49730 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe497c0 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf36230 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf36218 <col:6, col:42>
| | | | | | | `-IfStmt 0xf361f8 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf361a0 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf360b8 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf360a0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe497f0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf36188 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf36160 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf36140 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:468:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf36110 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf360f8 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf360d8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf35ba0 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf36128 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe49878 <col:26> 'std::memory_order' EnumConstant 0xe1e980 'memory_order_consume' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf361d8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf361c0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe49960 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe499f0 <line:531:51> 'bool' false
| | | | | `-AtomicExpr 0xf36420 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:470:2, col:39> 'void'
| | | | |   |-UnaryOperator 0xf36308 <col:19, col:20> 'volatile std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |   | `-MemberExpr 0xf362a8 <col:20> 'volatile std::__atomic_base<bool>::__int_type':'volatile bool' lvalue ->_M_i 0xe616f0
| | | | |   |   `-CXXThisExpr 0xf36298 <col:20> 'volatile std::__atomic_base<bool> *' implicit this
| | | | |   |-CXXFunctionalCastExpr 0xf36390 <col:31, col:38> 'int' functional cast to int <NoOp>
| | | | |   | `-ImplicitCastExpr 0xf36378 <col:35> 'int' <IntegralCast> part_of_explicit_cast
| | | | |   |   `-ImplicitCastExpr 0xf36360 <col:35> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |   |     `-DeclRefExpr 0xf36340 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe64418 '__m' 'std::memory_order':'std::memory_order'
| | | | |   `-ImplicitCastExpr 0xf36408 <col:26> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     `-DeclRefExpr 0xf36320 <col:26> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe643b0 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-AlwaysInlineAttr 0xe645f0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe64750 <col:32, line:482:7> line:474:7 used load 'std::__atomic_base<bool>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xe64658 <col:12, col:31> col:25 used __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42a90 <col:31> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xf34808 <line:475:7, line:482:7>
| | | | | |-DeclStmt 0xf34240 <line:476:2, line:477:31>
| | | | | | `-VarDecl 0xf340d8 <line:476:2, line:477:12> line:476:15 used __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xf34208 <line:477:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xf341f0 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xf341d0 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xf341b8 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xf34198 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe64658 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe49d08 <col:12> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xf34140 <line:476:35> unused
| | | | | |-DoStmt 0xf343e8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xf343d0 <col:6, col:42>
| | | | | | | `-IfStmt 0xf343b0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf34358 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf34270 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf34258 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe49dc8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf34340 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf34318 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf342f8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:478:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf342c8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf342b0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf34290 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf340d8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf342e0 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe49e50 <col:26> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf34390 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf34378 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe49f38 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe49fc8 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf34598 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf34580 <col:6, col:42>
| | | | | | | `-IfStmt 0xf34560 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf34508 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf34420 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf34408 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe49ff8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf344f0 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf344c8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf344a8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:479:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf34478 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf34460 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf34440 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf340d8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf34490 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4a080 <col:26> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf34540 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf34528 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4a168 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4a1f8 <line:531:51> 'bool' false
| | | | | `-ReturnStmt 0xf347f8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:481:2, col:40>
| | | | |   `-AtomicExpr 0xf347a0 <col:9, col:40> 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-UnaryOperator 0xf34698 <col:25, col:26> 'const std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xf34610 <col:26> 'const std::__atomic_base<bool>::__int_type':'const bool' lvalue ->_M_i 0xe616f0
| | | | |     |   `-CXXThisExpr 0xf34600 <col:26> 'const std::__atomic_base<bool> *' implicit this
| | | | |     `-CXXFunctionalCastExpr 0xf34700 <col:32, col:39> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xf346e8 <col:36> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xf346d0 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xf346b0 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe64658 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe64808 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe64960 <col:32, line:493:7> line:485:7 used load 'std::__atomic_base<bool>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xe64860 <col:12, col:31> col:25 used __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42ab0 <col:31> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xf34f38 <line:486:7, line:493:7>
| | | | | |-DeclStmt 0xf349a0 <line:487:2, line:488:31>
| | | | | | `-VarDecl 0xf34838 <line:487:2, line:488:12> line:487:15 used __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xf34968 <line:488:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xf34950 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xf34930 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xf34918 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xf348f8 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe64860 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4a638 <col:12> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xf348a0 <line:487:35> unused
| | | | | |-DoStmt 0xf34b48 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xf34b30 <col:6, col:42>
| | | | | | | `-IfStmt 0xf34b10 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf34ab8 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf349d0 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf349b8 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4a6f8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf34aa0 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf34a78 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf34a58 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:489:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf34a28 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf34a10 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf349f0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf34838 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf34a40 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4a780 <col:26> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf34af0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf34ad8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4a868 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4a8f8 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf34cf8 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf34ce0 <col:6, col:42>
| | | | | | | `-IfStmt 0xf34cc0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf34c68 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf34b80 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf34b68 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4a928 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf34c50 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf34c28 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf34c08 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:490:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf34bd8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf34bc0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf34ba0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf34838 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf34bf0 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4a9b0 <col:26> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf34ca0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf34c88 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4aa98 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4ab28 <line:531:51> 'bool' false
| | | | | `-ReturnStmt 0xf34f28 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:492:2, col:40>
| | | | |   `-AtomicExpr 0xf34ed0 <col:9, col:40> 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-UnaryOperator 0xf34df8 <col:25, col:26> 'const volatile std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xf34d70 <col:26> 'const volatile std::__atomic_base<bool>::__int_type':'const volatile bool' lvalue ->_M_i 0xe616f0
| | | | |     |   `-CXXThisExpr 0xf34d60 <col:26> 'const volatile std::__atomic_base<bool> *' implicit this
| | | | |     `-CXXFunctionalCastExpr 0xf34e60 <col:32, col:39> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xf34e48 <col:36> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xf34e30 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xf34e10 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe64860 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe64a18 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe64c10 <col:32, line:500:7> line:496:7 used exchange 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe64a90 <col:16, col:27> col:27 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe64af8 <line:497:9, col:28> col:22 used __m 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xf366b8 <line:498:7, line:500:7>
| | | | | `-ReturnStmt 0xf366a8 <line:499:2, col:49>
| | | | |   `-AtomicExpr 0xf36650 <col:9, col:49> 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-UnaryOperator 0xf36538 <col:29, col:30> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xf36508 <col:30> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ->_M_i 0xe616f0
| | | | |     |   `-CXXThisExpr 0xf364f8 <col:30> 'std::__atomic_base<bool> *' implicit this
| | | | |     |-CXXFunctionalCastExpr 0xf365c0 <col:41, col:48> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xf365a8 <col:45> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xf36590 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xf36570 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe64af8 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-ImplicitCastExpr 0xf36638 <col:36> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |       `-DeclRefExpr 0xf36550 <col:36> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe64a90 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-AlwaysInlineAttr 0xe64cd0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe64ec0 <col:32, line:508:7> line:504:7 used exchange 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe64d38 <col:16, col:27> col:27 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe64da0 <line:505:9, col:28> col:22 used __m 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xf368d8 <line:506:7, line:508:7>
| | | | | `-ReturnStmt 0xf368c8 <line:507:2, col:49>
| | | | |   `-AtomicExpr 0xf36870 <col:9, col:49> 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-UnaryOperator 0xf36758 <col:29, col:30> 'volatile std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xf36728 <col:30> 'volatile std::__atomic_base<bool>::__int_type':'volatile bool' lvalue ->_M_i 0xe616f0
| | | | |     |   `-CXXThisExpr 0xf36718 <col:30> 'volatile std::__atomic_base<bool> *' implicit this
| | | | |     |-CXXFunctionalCastExpr 0xf367e0 <col:41, col:48> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xf367c8 <col:45> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xf367b0 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xf36790 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe64da0 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-ImplicitCastExpr 0xf36858 <col:36> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |       `-DeclRefExpr 0xf36770 <col:36> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe64d38 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-AlwaysInlineAttr 0xe64f80 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe65320 <col:32, line:524:7> line:511:7 used compare_exchange_weak 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe65058 <col:29, col:41> col:41 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xe650d0 <col:47, col:58> col:58 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe65170 <line:512:8, col:21> col:21 used __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe651d8 <col:27, col:40> col:40 used __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xf37468 <line:513:7, line:524:7>
| | | | | |-DeclStmt 0xf36a58 <line:514:2, line:515:32>
| | | | | | `-VarDecl 0xf368f0 <line:514:2, line:515:13> line:514:15 used __b2 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xf36a20 <line:515:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xf36a08 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xf369e8 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xf369d0 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xf369b0 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe651d8 '__m2' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4dd10 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xf36958 <line:514:36> unused
| | | | | |-DeclStmt 0xf36bd8 <line:516:2, line:517:32>
| | | | | | `-VarDecl 0xf36a70 <line:516:2, line:517:13> line:516:15 used __b1 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xf36ba0 <line:517:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xf36b88 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xf36b68 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xf36b50 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xf36b30 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe65170 '__m1' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4dec0 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xf36ad8 <line:516:36> unused
| | | | | |-DoStmt 0xf36d80 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xf36d68 <col:6, col:42>
| | | | | | | `-IfStmt 0xf36d48 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf36cf0 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf36c08 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf36bf0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4df80 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf36cd8 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf36cb0 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf36c90 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:518:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf36c60 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf36c48 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf36c28 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf368f0 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf36c78 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4e008 <col:27> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf36d28 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf36d10 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4e0f0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4e180 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf36f30 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf36f18 <col:6, col:42>
| | | | | | | `-IfStmt 0xf36ef8 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf36ea0 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf36db8 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf36da0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4e1b0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf36e88 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf36e60 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf36e40 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:519:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf36e10 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf36df8 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf36dd8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf368f0 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf36e28 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4e238 <col:27> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf36ed8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf36ec0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4e320 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4e3b0 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf37118 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf37100 <col:6, col:42>
| | | | | | | `-IfStmt 0xf370e0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf37088 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf36f68 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf36f50 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4e3e0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf37070 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf37048 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf37028 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:520:19, col:27> 'bool' '<='
| | | | | | |   |       |-ImplicitCastExpr 0xf36ff8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf36fc8 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf36f88 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf368f0 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf37010 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-ImplicitCastExpr 0xf36fe0 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |           `-DeclRefExpr 0xf36fa8 <col:27> 'std::memory_order':'std::memory_order' lvalue Var 0xf36a70 '__b1' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xf370c0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf370a8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4e568 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4e5f8 <line:531:51> 'bool' false
| | | | | `-ReturnStmt 0xf37458 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:522:2, line:523:29>
| | | | |   `-AtomicExpr 0xf37400 <line:522:9, line:523:29> 'bool'
| | | | |     |-UnaryOperator 0xf371c0 <line:522:37, col:38> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xf37190 <col:38> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ->_M_i 0xe616f0
| | | | |     |   `-CXXThisExpr 0xf37180 <col:38> 'std::__atomic_base<bool> *' implicit this
| | | | |     |-CXXFunctionalCastExpr 0xf372c8 <line:523:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xf372b0 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xf37298 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xf37278 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe65170 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     |-UnaryOperator 0xf37240 <line:522:44, col:45> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-DeclRefExpr 0xf37220 <col:45> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe65058 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-CXXFunctionalCastExpr 0xf37340 <line:523:20, col:28> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xf37328 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xf37310 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xf372f0 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe651d8 '__m2' 'std::memory_order':'std::memory_order'
| | | | |     |-ImplicitCastExpr 0xf373d0 <line:522:51> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xf37258 <col:51> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe650d0 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     `-ImplicitCastExpr 0xf373e8 <col:57> 'bool' <IntegralToBoolean>
| | | | |       `-IntegerLiteral 0xe4e900 <col:57> 'int' 1
| | | | `-AlwaysInlineAttr 0xe653f0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe656f0 <col:32, line:541:7> line:527:7 used compare_exchange_weak 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe65458 <col:29, col:41> col:41 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xe654d0 <col:47, col:58> col:58 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe65538 <line:528:8, col:21> col:21 used __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe655a0 <line:529:8, col:21> col:21 used __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xf38020 <line:530:7, line:541:7>
| | | | | |-DeclStmt 0xf37610 <line:531:2, line:532:32>
| | | | | | `-VarDecl 0xf374a8 <line:531:2, line:532:13> line:531:15 used __b2 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xf375d8 <line:532:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xf375c0 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xf375a0 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xf37588 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xf37568 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe655a0 '__m2' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4ebd0 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xf37510 <line:531:36> unused
| | | | | |-DeclStmt 0xf37790 <line:533:2, line:534:32>
| | | | | | `-VarDecl 0xf37628 <line:533:2, line:534:13> line:533:15 used __b1 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xf37758 <line:534:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xf37740 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xf37720 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xf37708 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xf376e8 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe65538 '__m1' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4ed80 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xf37690 <line:533:36> unused
| | | | | |-DoStmt 0xf37938 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xf37920 <col:6, col:42>
| | | | | | | `-IfStmt 0xf37900 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf378a8 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf377c0 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf377a8 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4ee40 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf37890 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf37868 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf37848 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:535:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf37818 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf37800 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf377e0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf374a8 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf37830 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4eec8 <col:27> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf378e0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf378c8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4efb0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4f040 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf37ae8 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf37ad0 <col:6, col:42>
| | | | | | | `-IfStmt 0xf37ab0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf37a58 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf37970 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf37958 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4f070 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf37a40 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf37a18 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf379f8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:536:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf379c8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf379b0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf37990 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf374a8 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf379e0 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4f0f8 <col:27> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf37a90 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf37a78 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4f1e0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4f270 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf37cd0 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf37cb8 <col:6, col:42>
| | | | | | | `-IfStmt 0xf37c98 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf37c40 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf37b20 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf37b08 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4f2a0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf37c28 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf37c00 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf37be0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:537:19, col:27> 'bool' '<='
| | | | | | |   |       |-ImplicitCastExpr 0xf37bb0 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf37b80 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf37b40 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf374a8 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf37bc8 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-ImplicitCastExpr 0xf37b98 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |           `-DeclRefExpr 0xf37b60 <col:27> 'std::memory_order':'std::memory_order' lvalue Var 0xf37628 '__b1' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xf37c78 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf37c60 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4f428 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4f4b8 <line:531:51> 'bool' false
| | | | | `-ReturnStmt 0xf38010 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:539:2, line:540:29>
| | | | |   `-AtomicExpr 0xf37fb8 <line:539:9, line:540:29> 'bool'
| | | | |     |-UnaryOperator 0xf37d78 <line:539:37, col:38> 'volatile std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xf37d48 <col:38> 'volatile std::__atomic_base<bool>::__int_type':'volatile bool' lvalue ->_M_i 0xe616f0
| | | | |     |   `-CXXThisExpr 0xf37d38 <col:38> 'volatile std::__atomic_base<bool> *' implicit this
| | | | |     |-CXXFunctionalCastExpr 0xf37e80 <line:540:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xf37e68 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xf37e50 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xf37e30 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe65538 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     |-UnaryOperator 0xf37df8 <line:539:44, col:45> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-DeclRefExpr 0xf37dd8 <col:45> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe65458 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-CXXFunctionalCastExpr 0xf37ef8 <line:540:20, col:28> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xf37ee0 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xf37ec8 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xf37ea8 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe655a0 '__m2' 'std::memory_order':'std::memory_order'
| | | | |     |-ImplicitCastExpr 0xf37f88 <line:539:51> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xf37e10 <col:51> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe654d0 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     `-ImplicitCastExpr 0xf37fa0 <col:57> 'bool' <IntegralToBoolean>
| | | | |       `-IntegerLiteral 0xe4f678 <col:57> 'int' 1
| | | | `-AlwaysInlineAttr 0xe657c0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe65a40 <col:32, line:549:7> line:544:7 used compare_exchange_weak 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe65838 <col:29, col:41> col:41 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xe658b0 <col:47, col:58> col:58 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe65918 <line:545:8, col:27> col:21 used __m 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xf38288 <line:546:7, line:549:7>
| | | | | `-ReturnStmt 0xf38278 <line:547:2, line:548:38>
| | | | |   `-CXXMemberCallExpr 0xf38208 <line:547:9, line:548:38> 'bool'
| | | | |     |-MemberExpr 0xf381d8 <line:547:9> '<bound member function type>' ->compare_exchange_weak 0xe65320
| | | | |     | `-CXXThisExpr 0xf381c8 <col:9> 'std::__atomic_base<bool> *' implicit this
| | | | |     |-DeclRefExpr 0xf380f0 <col:31> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe65838 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-ImplicitCastExpr 0xf38248 <col:37> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xf38110 <col:37> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe658b0 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-ImplicitCastExpr 0xf38260 <col:43> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xf38130 <col:43> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe65918 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xf38188 <line:548:10, col:37> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xf38170 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xe4f9d8 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xf381b0 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xf38150 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe65918 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe65b08 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe65d90 <col:32, line:557:7> line:552:7 used compare_exchange_weak 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe65b80 <col:29, col:41> col:41 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xe65bf8 <col:47, col:58> col:58 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe65c60 <line:553:6, col:25> col:19 used __m 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xf384c8 <line:554:7, line:557:7>
| | | | | `-ReturnStmt 0xf384b8 <line:555:2, line:556:38>
| | | | |   `-CXXMemberCallExpr 0xf38448 <line:555:9, line:556:38> 'bool'
| | | | |     |-MemberExpr 0xf38418 <line:555:9> '<bound member function type>' ->compare_exchange_weak 0xe656f0
| | | | |     | `-CXXThisExpr 0xf38408 <col:9> 'volatile std::__atomic_base<bool> *' implicit this
| | | | |     |-DeclRefExpr 0xf38330 <col:31> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe65b80 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-ImplicitCastExpr 0xf38488 <col:37> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xf38350 <col:37> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe65bf8 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-ImplicitCastExpr 0xf384a0 <col:43> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xf38370 <col:43> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe65c60 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xf383c8 <line:556:10, col:37> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xf383b0 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xe4fc00 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xf383f0 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xf38390 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe65c60 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe65e58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe660c8 <col:32, line:573:7> line:560:7 used compare_exchange_strong 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe65ed0 <col:31, col:43> col:43 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xe65f48 <col:49, col:60> col:60 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe65fb0 <line:561:10, col:23> col:23 used __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe66018 <col:29, col:42> col:42 used __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xf39058 <line:562:7, line:573:7>
| | | | | |-DeclStmt 0xf38648 <line:563:2, line:564:32>
| | | | | | `-VarDecl 0xf384e0 <line:563:2, line:564:13> line:563:15 used __b2 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xf38610 <line:564:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xf385f8 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xf385d8 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xf385c0 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xf385a0 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe66018 '__m2' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4fdd0 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xf38548 <line:563:36> unused
| | | | | |-DeclStmt 0xf387c8 <line:565:2, line:566:32>
| | | | | | `-VarDecl 0xf38660 <line:565:2, line:566:13> line:565:15 used __b1 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xf38790 <line:566:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xf38778 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xf38758 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xf38740 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xf38720 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe65fb0 '__m1' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4ff80 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xf386c8 <line:565:36> unused
| | | | | |-DoStmt 0xf38970 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xf38958 <col:6, col:42>
| | | | | | | `-IfStmt 0xf38938 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf388e0 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf387f8 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf387e0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe50040 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf388c8 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf388a0 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf38880 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:567:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf38850 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf38838 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf38818 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf384e0 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf38868 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe500c8 <col:27> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf38918 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf38900 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe501b0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe50240 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf38b20 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf38b08 <col:6, col:42>
| | | | | | | `-IfStmt 0xf38ae8 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf38a90 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf389a8 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf38990 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe50270 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf38a78 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf38a50 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf38a30 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:568:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf38a00 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf389e8 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf389c8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf384e0 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf38a18 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe502f8 <col:27> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf38ac8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf38ab0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe503e0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe50470 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf38d08 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf38cf0 <col:6, col:42>
| | | | | | | `-IfStmt 0xf38cd0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf38c78 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf38b58 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf38b40 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe504a0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf38c60 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf38c38 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf38c18 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:569:19, col:27> 'bool' '<='
| | | | | | |   |       |-ImplicitCastExpr 0xf38be8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf38bb8 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf38b78 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf384e0 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf38c00 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-ImplicitCastExpr 0xf38bd0 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |           `-DeclRefExpr 0xf38b98 <col:27> 'std::memory_order':'std::memory_order' lvalue Var 0xf38660 '__b1' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xf38cb0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf38c98 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe50628 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe506b8 <line:531:51> 'bool' false
| | | | | `-ReturnStmt 0xf39048 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:571:2, line:572:29>
| | | | |   `-AtomicExpr 0xf38ff0 <line:571:9, line:572:29> 'bool'
| | | | |     |-UnaryOperator 0xf38db0 <line:571:37, col:38> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xf38d80 <col:38> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ->_M_i 0xe616f0
| | | | |     |   `-CXXThisExpr 0xf38d70 <col:38> 'std::__atomic_base<bool> *' implicit this
| | | | |     |-CXXFunctionalCastExpr 0xf38eb8 <line:572:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xf38ea0 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xf38e88 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xf38e68 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe65fb0 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     |-UnaryOperator 0xf38e30 <line:571:44, col:45> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-DeclRefExpr 0xf38e10 <col:45> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe65ed0 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-CXXFunctionalCastExpr 0xf38f30 <line:572:20, col:28> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xf38f18 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xf38f00 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xf38ee0 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe66018 '__m2' 'std::memory_order':'std::memory_order'
| | | | |     |-ImplicitCastExpr 0xf38fc0 <line:571:51> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xf38e48 <col:51> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe65f48 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     `-ImplicitCastExpr 0xf38fd8 <col:57> 'bool' <IntegralToBoolean>
| | | | |       `-IntegerLiteral 0xe50878 <col:57> 'int' 0
| | | | `-AlwaysInlineAttr 0xe66198 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe663f8 <col:32, line:591:7> line:576:7 used compare_exchange_strong 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe66200 <col:31, col:43> col:43 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xe66278 <col:49, col:60> col:60 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe662e0 <line:577:10, col:23> col:23 used __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe66348 <line:578:10, col:23> col:23 used __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xf39c10 <line:579:7, line:591:7>
| | | | | |-DeclStmt 0xf39200 <line:580:2, line:581:32>
| | | | | | `-VarDecl 0xf39098 <line:580:2, line:581:13> line:580:15 used __b2 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xf391c8 <line:581:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xf391b0 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xf39190 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xf39178 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xf39158 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe66348 '__m2' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe50b48 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xf39100 <line:580:36> unused
| | | | | |-DeclStmt 0xf39380 <line:582:2, line:583:32>
| | | | | | `-VarDecl 0xf39218 <line:582:2, line:583:13> line:582:15 used __b1 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xf39348 <line:583:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xf39330 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xf39310 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xf392f8 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xf392d8 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe662e0 '__m1' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe50cf8 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xf39280 <line:582:36> unused
| | | | | |-DoStmt 0xf39528 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xf39510 <col:6, col:42>
| | | | | | | `-IfStmt 0xf394f0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf39498 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf393b0 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf39398 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe50db8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf39480 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf39458 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf39438 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:585:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf39408 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf393f0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf393d0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf39098 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf39420 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe50e40 <col:27> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf394d0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf394b8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe50f28 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe50fb8 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf396d8 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf396c0 <col:6, col:42>
| | | | | | | `-IfStmt 0xf396a0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf39648 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf39560 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf39548 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe50fe8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf39630 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf39608 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf395e8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:586:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf395b8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf395a0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf39580 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf39098 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf395d0 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe51070 <col:27> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf39680 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf39668 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe51158 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe511e8 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf398c0 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf398a8 <col:6, col:42>
| | | | | | | `-IfStmt 0xf39888 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf39830 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf39710 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf396f8 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe51218 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf39818 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf397f0 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf397d0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:587:19, col:27> 'bool' '<='
| | | | | | |   |       |-ImplicitCastExpr 0xf397a0 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf39770 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf39730 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf39098 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf397b8 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-ImplicitCastExpr 0xf39788 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |           `-DeclRefExpr 0xf39750 <col:27> 'std::memory_order':'std::memory_order' lvalue Var 0xf39218 '__b1' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xf39868 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf39850 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe513a0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe51430 <line:531:51> 'bool' false
| | | | | `-ReturnStmt 0xf39c00 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:589:2, line:590:29>
| | | | |   `-AtomicExpr 0xf39ba8 <line:589:9, line:590:29> 'bool'
| | | | |     |-UnaryOperator 0xf39968 <line:589:37, col:38> 'volatile std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xf39938 <col:38> 'volatile std::__atomic_base<bool>::__int_type':'volatile bool' lvalue ->_M_i 0xe616f0
| | | | |     |   `-CXXThisExpr 0xf39928 <col:38> 'volatile std::__atomic_base<bool> *' implicit this
| | | | |     |-CXXFunctionalCastExpr 0xf39a70 <line:590:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xf39a58 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xf39a40 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xf39a20 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe662e0 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     |-UnaryOperator 0xf399e8 <line:589:44, col:45> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-DeclRefExpr 0xf399c8 <col:45> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe66200 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-CXXFunctionalCastExpr 0xf39ae8 <line:590:20, col:28> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xf39ad0 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xf39ab8 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xf39a98 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe66348 '__m2' 'std::memory_order':'std::memory_order'
| | | | |     |-ImplicitCastExpr 0xf39b78 <line:589:51> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xf39a00 <col:51> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe66278 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     `-ImplicitCastExpr 0xf39b90 <col:57> 'bool' <IntegralToBoolean>
| | | | |       `-IntegerLiteral 0xe515f0 <col:57> 'int' 0
| | | | `-AlwaysInlineAttr 0xe664c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe666c8 <col:32, line:599:7> line:594:7 used compare_exchange_strong 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe66540 <col:31, col:43> col:43 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xe665b8 <col:49, col:60> col:60 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe66620 <line:595:10, col:29> col:23 used __m 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xf39e90 <line:596:7, line:599:7>
| | | | | `-ReturnStmt 0xf39e80 <line:597:2, line:598:40>
| | | | |   `-CXXMemberCallExpr 0xf39e10 <line:597:9, line:598:40> 'bool'
| | | | |     |-MemberExpr 0xf39dc8 <line:597:9> '<bound member function type>' ->compare_exchange_strong 0xe660c8
| | | | |     | `-CXXThisExpr 0xf39db8 <col:9> 'std::__atomic_base<bool> *' implicit this
| | | | |     |-DeclRefExpr 0xf39ce0 <col:33> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe66540 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-ImplicitCastExpr 0xf39e50 <col:39> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xf39d00 <col:39> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe665b8 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-ImplicitCastExpr 0xf39e68 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xf39d20 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe66620 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xf39d78 <line:598:12, col:39> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xf39d60 <col:12> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xe51918 <col:12> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xf39da0 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xf39d40 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe66620 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe66790 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe66990 <col:32, line:607:7> line:602:7 used compare_exchange_strong 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe66808 <col:31, col:43> col:43 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xe66880 <col:49, col:60> col:60 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe668e8 <line:603:4, col:23> col:17 used __m 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xf3a0d0 <line:604:7, line:607:7>
| | | | | `-ReturnStmt 0xf3a0c0 <line:605:2, line:606:40>
| | | | |   `-CXXMemberCallExpr 0xf3a050 <line:605:9, line:606:40> 'bool'
| | | | |     |-MemberExpr 0xf3a020 <line:605:9> '<bound member function type>' ->compare_exchange_strong 0xe663f8
| | | | |     | `-CXXThisExpr 0xf3a010 <col:9> 'volatile std::__atomic_base<bool> *' implicit this
| | | | |     |-DeclRefExpr 0xf39f38 <col:33> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe66808 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-ImplicitCastExpr 0xf3a090 <col:39> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xf39f58 <col:39> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xe66880 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-ImplicitCastExpr 0xf3a0a8 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xf39f78 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe668e8 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xf39fd0 <line:606:12, col:39> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xf39fb8 <col:12> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xe52120 <col:12> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xf39ff8 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xf39f98 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe668e8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe66a58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe66bd8 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe66ad0 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe66b38 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe66c98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe66e08 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe66d00 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe66d68 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe66ec8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe67048 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe66f40 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe66fa8 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe67108 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe67288 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe67180 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe671e8 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe67348 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe674c8 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe673c0 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe67428 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe67588 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe676f8 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe675f0 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe67658 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe677b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe67938 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe67830 <col:16, col:27> col:27 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe67898 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe679f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe67b68 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe67a60 <col:16, col:27> col:27 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe67ac8 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe67c28 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe67da8 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe67ca0 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xe67d08 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe67e68 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xe67fd8 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xe67ed0 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | |   |-ParmVarDecl 0xe67f38 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xe68098 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xe7d848 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'char'
| | | | `-BuiltinType 0xbf61f0 'char'
| | | |-CXXRecordDecl 0xe7da48 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xe7db18 <line:319:7, col:26> col:13 value_type 'char':'char'
| | | | `-SubstTemplateTypeParmType 0xe7dae0 'char' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf61f0 'char'
| | | |-TypeAliasDecl 0xe7dbb0 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<char>::value_type':'char'
| | | | `-TypedefType 0xe7db80 'std::__atomic_base<char>::value_type' sugar
| | | |   |-TypeAlias 0xe7db18 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xe7dae0 'char' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf61f0 'char'
| | | |-AccessSpecDecl 0xe7dc10 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xe7dc48 <line:323:7, col:21> col:21 __int_type 'char':'char'
| | | | `-SubstTemplateTypeParmType 0xe7dae0 'char' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf61f0 'char'
| | | |-VarDecl 0xe7dca0 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 1
| | | | `-ImplicitCastExpr 0xe7de28 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xe7ddf8 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xe7dd78 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xe7dd28 <col:2, col:13> 'unsigned long' sizeof 'char':'char'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xe7dd58 <col:17, col:29> 'unsigned long' alignof 'char':'char'
| | | |     |-UnaryExprOrTypeTraitExpr 0xe7dda8 <col:33, col:44> 'unsigned long' sizeof 'char':'char'
| | | |     `-UnaryExprOrTypeTraitExpr 0xe7ddd8 <col:48, col:60> 'unsigned long' alignof 'char':'char'
| | | |-FieldDecl 0xe7ded0 <line:328:29, col:40> col:40 _M_i 'std::__atomic_base<char>::__int_type':'char'
| | | | `-AlignedAttr 0xe7df98 <col:7> alignas
| | | |   `-ConstantExpr 0xe7df78 <col:15> 'int'
| | | |     |-value: Int 1
| | | |     `-ImplicitCastExpr 0xe7df60 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xe7df40 <col:15> 'const int' lvalue Var 0xe7dca0 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xe7dff8 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xe7e058 <line:331:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xe7e138 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xe7e318 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<char> &)' delete trivial
| | | | `-ParmVarDecl 0xe7e238 <col:21, col:40> col:41 'const std::__atomic_base<char> &'
| | | |-CXXMethodDecl 0xe7e4e8 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<char> &(const std::__atomic_base<char> &)' delete trivial
| | | | `-ParmVarDecl 0xe7e428 <col:32, col:51> col:52 'const std::__atomic_base<char> &'
| | | |-CXXMethodDecl 0xe7e678 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<char> &(const std::__atomic_base<char> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xe7e5b0 <col:32, col:51> col:52 'const std::__atomic_base<char> &'
| | | |-CXXConstructorDecl 0xe7e870 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<char>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xe7e750 <col:31, col:42> col:42 used __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-CXXCtorInitializer Field 0xe7ded0 '_M_i' 'std::__atomic_base<char>::__int_type':'char'
| | | | | `-ImplicitCastExpr 0xd96db0 <col:64> 'std::__atomic_base<char>::__int_type':'char' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xd96d70 <col:64> 'std::__atomic_base<char>::__int_type':'char' lvalue ParmVar 0xe7e750 '__i' 'std::__atomic_base<char>::__int_type':'char'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xe7e9e8 <line:340:7, line:341:24> line:340:7 operator char 'std::__atomic_base<char>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xe7eb40 <line:343:7, line:344:24> line:343:7 operator char 'std::__atomic_base<char>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xe7ed20 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe7ec28 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xe7eef0 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe7edf8 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xe7f0b0 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<char>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xe7efb8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xe7f270 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<char>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xe7f168 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xe7f3d0 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<char>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xe7f338 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xe7f520 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<char>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xe7f488 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xe7f670 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<char>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xe7f7b0 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<char>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xe7f898 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<char>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xe7f980 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<char>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xe7fae8 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe7fa50 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xe7fc48 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe7fbb0 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xe7fdb8 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe7fd20 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xe7ff18 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe7fe80 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xe80088 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe7fff0 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xe801e8 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe80150 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xe80358 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe802c0 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xe804b8 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe80420 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xe80628 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe80590 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xe80788 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe806f0 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xe80850 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xe80900 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xe80b50 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe809d0 <col:13, col:24> col:24 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xe80a38 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe80c38 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe80e20 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe80ca0 <col:13, col:24> col:24 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xe80d08 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe80ee0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe81040 <col:32, line:482:7> line:474:7 load 'std::__atomic_base<char>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xe80f48 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe810f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe81280 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<char>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xe81150 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe81338 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe81530 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe813b0 <col:16, col:27> col:27 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xe81418 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe815f0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe817e0 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe81658 <col:16, col:27> col:27 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xe816c0 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe818a0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe81c10 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe81978 <col:29, col:41> col:41 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0xe819f0 <col:47, col:58> col:58 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xe81a58 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe81ac0 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe81ce0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe81fe0 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe81d48 <col:29, col:41> col:41 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0xe81dc0 <col:47, col:58> col:58 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xe81e28 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe81e90 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe820b0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe82330 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe82128 <col:29, col:41> col:41 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0xe821a0 <col:47, col:58> col:58 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xe82208 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe823f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe82680 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe82470 <col:29, col:41> col:41 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0xe824e8 <col:47, col:58> col:58 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xe82550 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe82748 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe829b8 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe827c0 <col:31, col:43> col:43 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0xe82838 <col:49, col:60> col:60 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xe828a0 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe82908 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe82a88 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe82ce8 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe82af0 <col:31, col:43> col:43 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0xe82b68 <col:49, col:60> col:60 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xe82bd0 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe82c38 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe82db8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe82fb8 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe82e30 <col:31, col:43> col:43 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0xe82ea8 <col:49, col:60> col:60 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xe82f10 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe83080 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xd945d0 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe830f8 <col:31, col:43> col:43 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0xe83170 <col:49, col:60> col:60 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xe831d8 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xd94698 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xd94818 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xd94710 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xd94778 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xd948d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xd94a48 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xd94940 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xd949a8 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xd94b08 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xd94c88 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xd94b80 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xd94be8 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xd94d48 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xd94eb8 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xd94db0 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xd94e18 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xd94f78 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xd950f8 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xd94ff0 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xd95058 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xd951b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xd95328 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xd95220 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xd95288 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xd953e8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xd95568 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xd95460 <col:16, col:27> col:27 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xd954c8 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xd95628 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xd95798 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xd95690 <col:16, col:27> col:27 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xd956f8 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xd95858 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xd959d8 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xd958d0 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0xd95938 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xd95a98 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xd95c08 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xd95b00 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | |   |-ParmVarDecl 0xd95b68 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xd95cc8 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xd97160 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'signed char'
| | | | `-BuiltinType 0xbf6210 'signed char'
| | | |-CXXRecordDecl 0xd97358 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xd97428 <line:319:7, col:26> col:13 value_type 'signed char':'signed char'
| | | | `-SubstTemplateTypeParmType 0xd973f0 'signed char' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6210 'signed char'
| | | |-TypeAliasDecl 0xd974c0 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<signed char>::value_type':'signed char'
| | | | `-TypedefType 0xd97490 'std::__atomic_base<signed char>::value_type' sugar
| | | |   |-TypeAlias 0xd97428 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xd973f0 'signed char' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf6210 'signed char'
| | | |-AccessSpecDecl 0xd97520 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xd97558 <line:323:7, col:21> col:21 __int_type 'signed char':'signed char'
| | | | `-SubstTemplateTypeParmType 0xd973f0 'signed char' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6210 'signed char'
| | | |-VarDecl 0xd975b0 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 1
| | | | `-ImplicitCastExpr 0xd97738 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xd97708 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xd97688 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xd97638 <col:2, col:13> 'unsigned long' sizeof 'signed char':'signed char'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xd97668 <col:17, col:29> 'unsigned long' alignof 'signed char':'signed char'
| | | |     |-UnaryExprOrTypeTraitExpr 0xd976b8 <col:33, col:44> 'unsigned long' sizeof 'signed char':'signed char'
| | | |     `-UnaryExprOrTypeTraitExpr 0xd976e8 <col:48, col:60> 'unsigned long' alignof 'signed char':'signed char'
| | | |-FieldDecl 0xd977e0 <line:328:29, col:40> col:40 _M_i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | `-AlignedAttr 0xd978a8 <col:7> alignas
| | | |   `-ConstantExpr 0xd97888 <col:15> 'int'
| | | |     |-value: Int 1
| | | |     `-ImplicitCastExpr 0xd97870 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xd97850 <col:15> 'const int' lvalue Var 0xd975b0 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xd97908 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xd97968 <line:331:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xd97a48 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xd97c28 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<signed char> &)' delete trivial
| | | | `-ParmVarDecl 0xd97b48 <col:21, col:40> col:41 'const std::__atomic_base<signed char> &'
| | | |-CXXMethodDecl 0xd97df8 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<signed char> &(const std::__atomic_base<signed char> &)' delete trivial
| | | | `-ParmVarDecl 0xd97d38 <col:32, col:51> col:52 'const std::__atomic_base<signed char> &'
| | | |-CXXMethodDecl 0xd97f88 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<signed char> &(const std::__atomic_base<signed char> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xd97ec0 <col:32, col:51> col:52 'const std::__atomic_base<signed char> &'
| | | |-CXXConstructorDecl 0xd98180 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xd98060 <col:31, col:42> col:42 used __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-CXXCtorInitializer Field 0xd977e0 '_M_i' 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | | `-ImplicitCastExpr 0xe98050 <col:64> 'std::__atomic_base<signed char>::__int_type':'signed char' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xe98010 <col:64> 'std::__atomic_base<signed char>::__int_type':'signed char' lvalue ParmVar 0xd98060 '__i' 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xd982f8 <line:340:7, line:341:24> line:340:7 operator signed char 'std::__atomic_base<signed char>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xd98450 <line:343:7, line:344:24> line:343:7 operator signed char 'std::__atomic_base<signed char>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xd98640 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xd98538 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xd98810 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xd98718 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xd989d0 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<signed char>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xd988d8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xd98b80 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<signed char>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xd98a88 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xd98ce0 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<signed char>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xd98c48 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xd98e30 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<signed char>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xd98d98 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xd98f80 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<signed char>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xd990c0 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<signed char>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xd991a8 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<signed char>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xd99290 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<signed char>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xd993f8 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xd99360 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xd99558 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xd994c0 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xd996c8 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xd99630 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xd99828 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xd99790 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xd99998 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xd99900 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xd99af8 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xd99a60 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xd99c68 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xd99bd0 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xd99dc8 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xd99d30 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xd99f38 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xd99ea0 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xd9a098 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xd9a000 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xd9a160 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xd9a210 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xd9a460 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xd9a2e0 <col:13, col:24> col:24 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xd9a348 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xd9a548 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe933e0 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe93260 <col:13, col:24> col:24 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe932c8 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe934a0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe93600 <col:32, line:482:7> line:474:7 load 'std::__atomic_base<signed char>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xe93508 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe936b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe93810 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<signed char>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xe93710 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe938c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe93ac0 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe93940 <col:16, col:27> col:27 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe939a8 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe93b80 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe93d70 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe93be8 <col:16, col:27> col:27 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe93c50 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe93e30 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe941a0 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe93f08 <col:29, col:41> col:41 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xe93f80 <col:47, col:58> col:58 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe93fe8 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe94050 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe94270 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe94570 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe942d8 <col:29, col:41> col:41 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xe94350 <col:47, col:58> col:58 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe943b8 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe94420 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe94640 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe948c0 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe946b8 <col:29, col:41> col:41 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xe94730 <col:47, col:58> col:58 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe94798 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe94988 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe94c10 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe94a00 <col:29, col:41> col:41 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xe94a78 <col:47, col:58> col:58 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe94ae0 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe94cd8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe94f48 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe94d50 <col:31, col:43> col:43 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xe94dc8 <col:49, col:60> col:60 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe94e30 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe94e98 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe95018 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe952b8 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe95080 <col:31, col:43> col:43 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xe950f8 <col:49, col:60> col:60 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe95160 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe951c8 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe95388 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe95588 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe95400 <col:31, col:43> col:43 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xe95478 <col:49, col:60> col:60 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe954e0 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe95650 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe95850 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe956c8 <col:31, col:43> col:43 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xe95740 <col:49, col:60> col:60 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe957a8 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe95918 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe95a98 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe95990 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe959f8 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe95b58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe95cc8 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe95bc0 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe95c28 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe95d88 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe95f08 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe95e00 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe95e68 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe95fc8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe96138 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe96030 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe96098 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe961f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe96378 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe96270 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe962d8 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe96438 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe965a8 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe964a0 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe96508 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe96668 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe967e8 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe966e0 <col:16, col:27> col:27 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe96748 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe968a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe96a18 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe96910 <col:16, col:27> col:27 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe96978 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe96ad8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe96c58 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe96b50 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xe96bb8 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe96d18 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xe96e88 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xe96d80 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | |   |-ParmVarDecl 0xe96de8 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xe96f48 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xe98400 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'unsigned char'
| | | | `-BuiltinType 0xbf62b0 'unsigned char'
| | | |-CXXRecordDecl 0xe985f8 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xe986c8 <line:319:7, col:26> col:13 value_type 'unsigned char':'unsigned char'
| | | | `-SubstTemplateTypeParmType 0xe98690 'unsigned char' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf62b0 'unsigned char'
| | | |-TypeAliasDecl 0xe98760 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<unsigned char>::value_type':'unsigned char'
| | | | `-TypedefType 0xe98730 'std::__atomic_base<unsigned char>::value_type' sugar
| | | |   |-TypeAlias 0xe986c8 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xe98690 'unsigned char' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf62b0 'unsigned char'
| | | |-AccessSpecDecl 0xe987c0 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xe987f8 <line:323:7, col:21> col:21 __int_type 'unsigned char':'unsigned char'
| | | | `-SubstTemplateTypeParmType 0xe98690 'unsigned char' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf62b0 'unsigned char'
| | | |-VarDecl 0xe98850 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 1
| | | | `-ImplicitCastExpr 0xe989d8 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xe989a8 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xe98928 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xe988d8 <col:2, col:13> 'unsigned long' sizeof 'unsigned char':'unsigned char'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xe98908 <col:17, col:29> 'unsigned long' alignof 'unsigned char':'unsigned char'
| | | |     |-UnaryExprOrTypeTraitExpr 0xe98958 <col:33, col:44> 'unsigned long' sizeof 'unsigned char':'unsigned char'
| | | |     `-UnaryExprOrTypeTraitExpr 0xe98988 <col:48, col:60> 'unsigned long' alignof 'unsigned char':'unsigned char'
| | | |-FieldDecl 0xe98a80 <line:328:29, col:40> col:40 _M_i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | `-AlignedAttr 0xe98b48 <col:7> alignas
| | | |   `-ConstantExpr 0xe98b28 <col:15> 'int'
| | | |     |-value: Int 1
| | | |     `-ImplicitCastExpr 0xe98b10 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xe98af0 <col:15> 'const int' lvalue Var 0xe98850 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xe98ba8 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xe98c08 <line:331:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xe98ce8 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xe98ec8 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<unsigned char> &)' delete trivial
| | | | `-ParmVarDecl 0xe98de8 <col:21, col:40> col:41 'const std::__atomic_base<unsigned char> &'
| | | |-CXXMethodDecl 0xe99098 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<unsigned char> &(const std::__atomic_base<unsigned char> &)' delete trivial
| | | | `-ParmVarDecl 0xe98fd8 <col:32, col:51> col:52 'const std::__atomic_base<unsigned char> &'
| | | |-CXXMethodDecl 0xe99290 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<unsigned char> &(const std::__atomic_base<unsigned char> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xe99160 <col:32, col:51> col:52 'const std::__atomic_base<unsigned char> &'
| | | |-CXXConstructorDecl 0xe99480 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xe99368 <col:31, col:42> col:42 used __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-CXXCtorInitializer Field 0xe98a80 '_M_i' 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | | `-ImplicitCastExpr 0xea2720 <col:64> 'std::__atomic_base<unsigned char>::__int_type':'unsigned char' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xea26e0 <col:64> 'std::__atomic_base<unsigned char>::__int_type':'unsigned char' lvalue ParmVar 0xe99368 '__i' 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xe995f8 <line:340:7, line:341:24> line:340:7 operator unsigned char 'std::__atomic_base<unsigned char>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xe99750 <line:343:7, line:344:24> line:343:7 operator unsigned char 'std::__atomic_base<unsigned char>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xe99930 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe99838 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xe99b00 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe99a08 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xe99cc0 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<unsigned char>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xe99bc8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xe99e70 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<unsigned char>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xe99d78 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xe99fd0 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<unsigned char>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xe99f38 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xe9a120 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<unsigned char>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xe9a088 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xe9a270 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<unsigned char>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xe9a3b0 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<unsigned char>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xe9a498 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<unsigned char>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xe9a580 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<unsigned char>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xe9a6e8 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe9a650 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xe9a848 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe9a7b0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xe9a9b8 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe9a920 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xe9ab18 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe9aa80 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xe9ac88 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe9abf0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xe9ade8 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe9ad50 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xe9af58 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe9aec0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xe9b0b8 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe9b020 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xe9b2a0 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xe9b190 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xe9b400 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xe9b368 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xe9b4c8 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xe9b578 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xe9b7d0 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe9b648 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xe9b6b0 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9b8b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe9baa0 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe9b920 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xe9b988 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9bb60 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe9bcc0 <col:32, line:482:7> line:474:7 load 'std::__atomic_base<unsigned char>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xe9bbc8 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9bd78 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe9bed0 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<unsigned char>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xe9bdd0 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9bf88 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe9c180 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe9c000 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xe9c068 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9c240 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe9c430 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe9c2a8 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xe9c310 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9c4f0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe9c860 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe9c5c8 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xe9c640 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xe9c6a8 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe9c710 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9c930 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe9cc30 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe9c998 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xe9ca10 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xe9ca78 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe9cae0 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9cd00 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe9cf80 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe9cd78 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xe9cdf0 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xe9ce58 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9d048 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe9f300 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe9d0c0 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xe9d138 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xe9d1a0 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9f3c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe9f638 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe9f440 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xe9f4b8 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xe9f520 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe9f588 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9f708 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe9f968 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe9f770 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xe9f7e8 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xe9f850 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe9f8b8 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9fa38 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe9fc38 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe9fab0 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xe9fb28 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xe9fb90 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9fd00 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe9ff00 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe9fd78 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xe9fdf0 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xe9fe58 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe9ffc8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea0148 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea0040 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xea00a8 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea0208 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea0378 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea0270 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xea02d8 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea0438 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea05b8 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea04b0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xea0518 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea0678 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea07e8 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea06e0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xea0748 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea08a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea0a28 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea0920 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xea0988 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea0ae8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea0c58 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea0b50 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xea0bb8 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea0d18 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea0e98 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea0d90 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xea0df8 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea0f58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea10c8 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea0fc0 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xea1028 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea1188 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea1370 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea1200 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xea12d0 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea1430 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xea15a0 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xea1498 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | |   |-ParmVarDecl 0xea1500 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xea1660 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xea2ad0 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'short'
| | | | `-BuiltinType 0xbf6230 'short'
| | | |-CXXRecordDecl 0xea2cc8 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xea2d98 <line:319:7, col:26> col:13 value_type 'short':'short'
| | | | `-SubstTemplateTypeParmType 0xea2d60 'short' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6230 'short'
| | | |-TypeAliasDecl 0xea2e30 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<short>::value_type':'short'
| | | | `-TypedefType 0xea2e00 'std::__atomic_base<short>::value_type' sugar
| | | |   |-TypeAlias 0xea2d98 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xea2d60 'short' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf6230 'short'
| | | |-AccessSpecDecl 0xea2e90 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xea2ec8 <line:323:7, col:21> col:21 __int_type 'short':'short'
| | | | `-SubstTemplateTypeParmType 0xea2d60 'short' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6230 'short'
| | | |-VarDecl 0xea2f20 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 2
| | | | `-ImplicitCastExpr 0xea30a8 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xea3078 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xea2ff8 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xea2fa8 <col:2, col:13> 'unsigned long' sizeof 'short':'short'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xea2fd8 <col:17, col:29> 'unsigned long' alignof 'short':'short'
| | | |     |-UnaryExprOrTypeTraitExpr 0xea3028 <col:33, col:44> 'unsigned long' sizeof 'short':'short'
| | | |     `-UnaryExprOrTypeTraitExpr 0xea3058 <col:48, col:60> 'unsigned long' alignof 'short':'short'
| | | |-FieldDecl 0xea3150 <line:328:29, col:40> col:40 _M_i 'std::__atomic_base<short>::__int_type':'short'
| | | | `-AlignedAttr 0xea3218 <col:7> alignas
| | | |   `-ConstantExpr 0xea31f8 <col:15> 'int'
| | | |     |-value: Int 2
| | | |     `-ImplicitCastExpr 0xea31e0 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xea31c0 <col:15> 'const int' lvalue Var 0xea2f20 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xea3278 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xea32f8 <line:331:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xea33d8 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xea35b8 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<short> &)' delete trivial
| | | | `-ParmVarDecl 0xea34d8 <col:21, col:40> col:41 'const std::__atomic_base<short> &'
| | | |-CXXMethodDecl 0xea3788 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<short> &(const std::__atomic_base<short> &)' delete trivial
| | | | `-ParmVarDecl 0xea36c8 <col:32, col:51> col:52 'const std::__atomic_base<short> &'
| | | |-CXXMethodDecl 0xea3918 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<short> &(const std::__atomic_base<short> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xea3850 <col:32, col:51> col:52 'const std::__atomic_base<short> &'
| | | |-CXXConstructorDecl 0xea3b10 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<short>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xea39f0 <col:31, col:42> col:42 used __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-CXXCtorInitializer Field 0xea3150 '_M_i' 'std::__atomic_base<short>::__int_type':'short'
| | | | | `-ImplicitCastExpr 0xeaad70 <col:64> 'std::__atomic_base<short>::__int_type':'short' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xeaad30 <col:64> 'std::__atomic_base<short>::__int_type':'short' lvalue ParmVar 0xea39f0 '__i' 'std::__atomic_base<short>::__int_type':'short'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xea3c88 <line:340:7, line:341:24> line:340:7 operator short 'std::__atomic_base<short>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xea3de0 <line:343:7, line:344:24> line:343:7 operator short 'std::__atomic_base<short>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xea3fc0 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xea3ec8 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xea4190 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xea4098 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xea4350 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<short>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xea4258 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xea4500 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<short>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xea4408 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xea4660 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<short>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xea45c8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xea47b0 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<short>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xea4718 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xea4900 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<short>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xea4a40 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<short>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xea4b28 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<short>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xea4c10 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<short>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xea4d78 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xea4ce0 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xea4ed8 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xea4e40 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xea5048 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xea4fb0 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xea51a8 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xea5110 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xea5388 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xea52f0 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xea54e8 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xea5450 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xea5658 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xea55c0 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xea57b8 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xea5720 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xea5928 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xea5890 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xea5a88 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xea59f0 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xea5b50 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xea5c00 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xea5e50 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea5cd0 <col:13, col:24> col:24 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea5d38 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea5f38 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea6120 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea5fa0 <col:13, col:24> col:24 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea6008 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea61e0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea6340 <col:32, line:482:7> line:474:7 load 'std::__atomic_base<short>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xea6248 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea63f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea6550 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<short>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xea6450 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea6608 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea6800 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea6680 <col:16, col:27> col:27 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea66e8 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea68c0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea6ab0 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea6928 <col:16, col:27> col:27 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea6990 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea6b70 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea6ee0 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea6c48 <col:29, col:41> col:41 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xea6cc0 <col:47, col:58> col:58 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea6d28 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xea6d90 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea6fb0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea7300 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea7018 <col:29, col:41> col:41 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xea7090 <col:47, col:58> col:58 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea70f8 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xea7160 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea73d0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea7650 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea7448 <col:29, col:41> col:41 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xea74c0 <col:47, col:58> col:58 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea7528 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea7718 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea79a0 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea7790 <col:29, col:41> col:41 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xea7808 <col:47, col:58> col:58 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea7870 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea7a68 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea7cd8 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea7ae0 <col:31, col:43> col:43 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xea7b58 <col:49, col:60> col:60 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea7bc0 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xea7c28 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea7da8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea8008 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea7e10 <col:31, col:43> col:43 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xea7e88 <col:49, col:60> col:60 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea7ef0 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xea7f58 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea80d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea82d8 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea8150 <col:31, col:43> col:43 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xea81c8 <col:49, col:60> col:60 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea8230 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea83a0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea85a0 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea8418 <col:31, col:43> col:43 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xea8490 <col:49, col:60> col:60 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea84f8 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea8668 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea87e8 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea86e0 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea8748 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea88a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea8a18 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea8910 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea8978 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea8ad8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea8c58 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea8b50 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea8bb8 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea8d18 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea8e88 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea8d80 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea8de8 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea8f48 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea90c8 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea8fc0 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea9028 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea9188 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea9310 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea91f0 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea9258 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea93d0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea9550 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea9448 <col:16, col:27> col:27 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea94b0 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea9610 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea9780 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xea9678 <col:16, col:27> col:27 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea96e0 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea9840 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xea99c0 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xea98b8 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xea9920 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xea9a80 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xea9bf0 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xea9ae8 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | |   |-ParmVarDecl 0xea9b50 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xea9cb0 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xeab120 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0xbf62d0 'unsigned short'
| | | |-CXXRecordDecl 0xeab388 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xeab458 <line:319:7, col:26> col:13 value_type 'unsigned short':'unsigned short'
| | | | `-SubstTemplateTypeParmType 0xeab420 'unsigned short' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf62d0 'unsigned short'
| | | |-TypeAliasDecl 0xeab4f0 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<unsigned short>::value_type':'unsigned short'
| | | | `-TypedefType 0xeab4c0 'std::__atomic_base<unsigned short>::value_type' sugar
| | | |   |-TypeAlias 0xeab458 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xeab420 'unsigned short' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf62d0 'unsigned short'
| | | |-AccessSpecDecl 0xeab550 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xeab588 <line:323:7, col:21> col:21 __int_type 'unsigned short':'unsigned short'
| | | | `-SubstTemplateTypeParmType 0xeab420 'unsigned short' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf62d0 'unsigned short'
| | | |-VarDecl 0xeab5e0 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 2
| | | | `-ImplicitCastExpr 0xeab768 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xeab738 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xeab6b8 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xeab668 <col:2, col:13> 'unsigned long' sizeof 'unsigned short':'unsigned short'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xeab698 <col:17, col:29> 'unsigned long' alignof 'unsigned short':'unsigned short'
| | | |     |-UnaryExprOrTypeTraitExpr 0xeab6e8 <col:33, col:44> 'unsigned long' sizeof 'unsigned short':'unsigned short'
| | | |     `-UnaryExprOrTypeTraitExpr 0xeab718 <col:48, col:60> 'unsigned long' alignof 'unsigned short':'unsigned short'
| | | |-FieldDecl 0xeab810 <line:328:29, col:40> col:40 _M_i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | `-AlignedAttr 0xeab8d8 <col:7> alignas
| | | |   `-ConstantExpr 0xeab8b8 <col:15> 'int'
| | | |     |-value: Int 2
| | | |     `-ImplicitCastExpr 0xeab8a0 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xeab880 <col:15> 'const int' lvalue Var 0xeab5e0 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xeab938 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xeab998 <line:331:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xeaba78 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xeabc58 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<unsigned short> &)' delete trivial
| | | | `-ParmVarDecl 0xeabb78 <col:21, col:40> col:41 'const std::__atomic_base<unsigned short> &'
| | | |-CXXMethodDecl 0xeabe28 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<unsigned short> &(const std::__atomic_base<unsigned short> &)' delete trivial
| | | | `-ParmVarDecl 0xeabd68 <col:32, col:51> col:52 'const std::__atomic_base<unsigned short> &'
| | | |-CXXMethodDecl 0xeabfb8 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<unsigned short> &(const std::__atomic_base<unsigned short> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xeabef0 <col:32, col:51> col:52 'const std::__atomic_base<unsigned short> &'
| | | |-CXXConstructorDecl 0xeac1b0 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xeac090 <col:31, col:42> col:42 used __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-CXXCtorInitializer Field 0xeab810 '_M_i' 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | | `-ImplicitCastExpr 0xeb3468 <col:64> 'std::__atomic_base<unsigned short>::__int_type':'unsigned short' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xeb3428 <col:64> 'std::__atomic_base<unsigned short>::__int_type':'unsigned short' lvalue ParmVar 0xeac090 '__i' 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xeac328 <line:340:7, line:341:24> line:340:7 operator unsigned short 'std::__atomic_base<unsigned short>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xeac480 <line:343:7, line:344:24> line:343:7 operator unsigned short 'std::__atomic_base<unsigned short>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xeac660 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xeac568 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xeac830 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xeac738 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xeac9f0 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<unsigned short>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xeac8f8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xeacba0 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<unsigned short>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xeacaa8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xeacd00 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<unsigned short>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xeacc68 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xeace50 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<unsigned short>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xeacdb8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xeacfa0 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<unsigned short>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xead0e0 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<unsigned short>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xead1c8 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<unsigned short>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xead330 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<unsigned short>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xead498 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xead400 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xead5f8 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xead560 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xead768 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xead6d0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xead8c8 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xead830 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xeada38 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xead9a0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xeadb98 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xeadb00 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xeadd08 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xeadc70 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xeade68 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xeaddd0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xeadfd8 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xeadf40 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xeae138 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xeae0a0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xeae200 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xeae2b0 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xeae500 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeae380 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeae3e8 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeae5e8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeae7d0 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeae650 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeae6b8 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeae890 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeae9f0 <col:32, line:482:7> line:474:7 load 'std::__atomic_base<unsigned short>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xeae8f8 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeaeaa8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeaec00 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<unsigned short>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xeaeb00 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeaecb8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeaeeb0 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeaed30 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeaed98 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeaef70 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeaf160 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeaefd8 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeaf040 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeaf220 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeaf5d0 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeaf340 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xeaf3b8 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeaf420 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xeaf488 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeaf6a0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeaf9a0 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeaf708 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xeaf780 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeaf7e8 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xeaf850 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeafa70 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeafcf0 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeafae8 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xeafb60 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeafbc8 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeafdb8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb0040 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeafe30 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xeafea8 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeaff10 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb0108 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb0378 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb0180 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xeb01f8 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeb0260 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xeb02c8 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb0448 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb06a8 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb04b0 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xeb0528 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeb0590 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xeb05f8 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb0778 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb0978 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb07f0 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xeb0868 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeb08d0 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb0a40 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb0c40 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb0ab8 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xeb0b30 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeb0b98 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb0d08 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb0e88 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb0d80 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeb0de8 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb0f48 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb10b8 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb0fb0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeb1018 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb1178 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb1350 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb11f0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeb1258 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb1410 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb1580 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb1478 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeb14e0 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb1640 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb17c0 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb16b8 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeb1720 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb1880 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb19f0 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb18e8 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeb1950 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb1ab0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb1c30 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb1b28 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeb1b90 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb1cf0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb1e60 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb1d58 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeb1dc0 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb1f20 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb20a0 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb1f98 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xeb2000 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb2160 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xeb22d0 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xeb21c8 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | |   |-ParmVarDecl 0xeb2230 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xeb2390 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xeb3820 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'int'
| | | | `-BuiltinType 0xbf6250 'int'
| | | |-CXXRecordDecl 0xeb3a18 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xeb3ae8 <line:319:7, col:26> col:13 value_type 'int':'int'
| | | | `-SubstTemplateTypeParmType 0xeb3ab0 'int' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6250 'int'
| | | |-TypeAliasDecl 0xeb3b80 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<int>::value_type':'int'
| | | | `-TypedefType 0xeb3b50 'std::__atomic_base<int>::value_type' sugar
| | | |   |-TypeAlias 0xeb3ae8 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xeb3ab0 'int' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf6250 'int'
| | | |-AccessSpecDecl 0xeb3be0 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xeb3c18 <line:323:7, col:21> col:21 __int_type 'int':'int'
| | | | `-SubstTemplateTypeParmType 0xeb3ab0 'int' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6250 'int'
| | | |-VarDecl 0xeb3c70 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 4
| | | | `-ImplicitCastExpr 0xeb3df8 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xeb3dc8 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xeb3d48 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xeb3cf8 <col:2, col:13> 'unsigned long' sizeof 'int':'int'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xeb3d28 <col:17, col:29> 'unsigned long' alignof 'int':'int'
| | | |     |-UnaryExprOrTypeTraitExpr 0xeb3d78 <col:33, col:44> 'unsigned long' sizeof 'int':'int'
| | | |     `-UnaryExprOrTypeTraitExpr 0xeb3da8 <col:48, col:60> 'unsigned long' alignof 'int':'int'
| | | |-FieldDecl 0xeb3ea0 <line:328:29, col:40> col:40 referenced _M_i 'std::__atomic_base<int>::__int_type':'int'
| | | | `-AlignedAttr 0xeb3f68 <col:7> alignas
| | | |   `-ConstantExpr 0xeb3f48 <col:15> 'int'
| | | |     |-value: Int 4
| | | |     `-ImplicitCastExpr 0xeb3f30 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xeb3f10 <col:15> 'const int' lvalue Var 0xeb3c70 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xeb3fc8 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xeb4028 <line:331:7, col:40> col:7 used __atomic_base 'void () noexcept' default trivial
| | | | `-CompoundStmt 0xf2be48 <col:40>
| | | |-CXXDestructorDecl 0xeb4108 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xeb42e8 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<int> &)' delete trivial
| | | | `-ParmVarDecl 0xeb4208 <col:21, col:40> col:41 'const std::__atomic_base<int> &'
| | | |-CXXMethodDecl 0xeb44b8 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<int> &(const std::__atomic_base<int> &)' delete trivial
| | | | `-ParmVarDecl 0xeb43f8 <col:32, col:51> col:52 'const std::__atomic_base<int> &'
| | | |-CXXMethodDecl 0xeb4648 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<int> &(const std::__atomic_base<int> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xeb4580 <col:32, col:51> col:52 'const std::__atomic_base<int> &'
| | | |-CXXConstructorDecl 0xeb4810 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<int>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xeb4720 <col:31, col:42> col:42 used __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-CXXCtorInitializer Field 0xeb3ea0 '_M_i' 'std::__atomic_base<int>::__int_type':'int'
| | | | | `-ImplicitCastExpr 0xebba70 <col:64> 'std::__atomic_base<int>::__int_type':'int' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xebba30 <col:64> 'std::__atomic_base<int>::__int_type':'int' lvalue ParmVar 0xeb4720 '__i' 'std::__atomic_base<int>::__int_type':'int'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xeb4988 <line:340:7, line:341:24> line:340:7 used operator int 'std::__atomic_base<int>::__int_type () const noexcept'
| | | | `-CompoundStmt 0xf3a200 <line:341:7, col:24>
| | | |   `-ReturnStmt 0xf3a1f0 <col:9, col:21>
| | | |     `-CXXMemberCallExpr 0xf3a1a8 <col:16, col:21> 'std::__atomic_base<int>::__int_type':'int'
| | | |       |-MemberExpr 0xf3a178 <col:16> '<bound member function type>' ->load 0xeb6fe0
| | | |       | `-CXXThisExpr 0xf3a168 <col:16> 'const std::__atomic_base<int> *' implicit this
| | | |       `-CXXDefaultArgExpr 0xf3a1d0 <<invalid sloc>> 'std::memory_order'
| | | |-CXXConversionDecl 0xeb4ae0 <line:343:7, line:344:24> line:343:7 operator int 'std::__atomic_base<int>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xeb4cc0 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xeb4bc8 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xeb4e90 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xeb4d98 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xeb5020 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<int>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xeb4f58 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xeb51a0 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<int>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xeb50d8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xeb5370 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<int>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xeb5268 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xeb54c0 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<int>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xeb5428 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xeb5610 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<int>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xeb5750 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<int>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xeb5838 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<int>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xeb5920 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<int>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xeb5a88 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xeb59f0 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xeb5be8 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xeb5b50 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xeb5d58 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xeb5cc0 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xeb5eb8 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xeb5e20 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xeb6028 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xeb5f90 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xeb6188 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xeb60f0 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xeb62f8 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xeb6260 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xeb6458 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xeb63c0 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xeb65c8 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xeb6530 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xeb6728 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xeb6690 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xeb67f0 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xeb68a0 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xeb6af0 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb6970 <col:13, col:24> col:24 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb69d8 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb6bd8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb6dc0 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb6c40 <col:13, col:24> col:24 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb6ca8 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb6e80 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb6fe0 <col:32, line:482:7> line:474:7 used load 'std::__atomic_base<int>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xeb6ee8 <col:12, col:31> col:25 used __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42a90 <col:31> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xf3a8e8 <line:475:7, line:482:7>
| | | | | |-DeclStmt 0xf3a380 <line:476:2, line:477:31>
| | | | | | `-VarDecl 0xf3a218 <line:476:2, line:477:12> line:476:15 used __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xf3a348 <line:477:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xf3a330 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xf3a310 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xf3a2f8 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xf3a2d8 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xeb6ee8 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe49d08 <col:12> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xf3a280 <line:476:35> unused
| | | | | |-DoStmt 0xf3a528 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xf3a510 <col:6, col:42>
| | | | | | | `-IfStmt 0xf3a4f0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf3a498 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf3a3b0 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf3a398 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe49dc8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf3a480 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf3a458 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf3a438 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:478:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf3a408 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf3a3f0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf3a3d0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf3a218 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf3a420 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe49e50 <col:26> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf3a4d0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf3a4b8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe49f38 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe49fc8 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xf3a6d8 <col:3, col:56>
| | | | | | |-CompoundStmt 0xf3a6c0 <col:6, col:42>
| | | | | | | `-IfStmt 0xf3a6a0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xf3a648 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xf3a560 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xf3a548 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe49ff8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xf3a630 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xf3a608 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xf3a5e8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:479:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xf3a5b8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xf3a5a0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xf3a580 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xf3a218 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xf3a5d0 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4a080 <col:26> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xf3a680 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xf3a668 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4a168 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4a1f8 <line:531:51> 'bool' false
| | | | | `-ReturnStmt 0xf3a8d8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:481:2, col:40>
| | | | |   `-AtomicExpr 0xf3a880 <col:9, col:40> 'std::__atomic_base<int>::__int_type':'int'
| | | | |     |-UnaryOperator 0xf3a7a8 <col:25, col:26> 'const std::__atomic_base<int>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xf3a750 <col:26> 'const std::__atomic_base<int>::__int_type':'const int' lvalue ->_M_i 0xeb3ea0
| | | | |     |   `-CXXThisExpr 0xf3a740 <col:26> 'const std::__atomic_base<int> *' implicit this
| | | | |     `-CXXFunctionalCastExpr 0xf3a810 <col:32, col:39> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xf3a7f8 <col:36> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xf3a7e0 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xf3a7c0 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xeb6ee8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb7098 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb71f0 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<int>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb70f0 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb72a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb7500 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb7380 <col:16, col:27> col:27 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb73e8 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb75c0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb77b0 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb7628 <col:16, col:27> col:27 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb7690 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb7870 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb7be0 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb7948 <col:29, col:41> col:41 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xeb79c0 <col:47, col:58> col:58 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb7a28 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xeb7a90 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb7cb0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb7fb0 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb7d18 <col:29, col:41> col:41 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xeb7d90 <col:47, col:58> col:58 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb7df8 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xeb7e60 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb8080 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb8300 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb80f8 <col:29, col:41> col:41 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xeb8170 <col:47, col:58> col:58 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb81d8 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb83c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb8650 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb8440 <col:29, col:41> col:41 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xeb84b8 <col:47, col:58> col:58 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb8520 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb8718 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb8988 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb8790 <col:31, col:43> col:43 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xeb8808 <col:49, col:60> col:60 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb8870 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xeb88d8 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb8a58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb8cb8 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb8ac0 <col:31, col:43> col:43 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xeb8b38 <col:49, col:60> col:60 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb8ba0 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xeb8c08 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb8d88 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb8f88 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb8e00 <col:31, col:43> col:43 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xeb8e78 <col:49, col:60> col:60 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb8ee0 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb9050 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb9250 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb90c8 <col:31, col:43> col:43 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xeb9140 <col:49, col:60> col:60 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb91a8 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb9318 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb94a8 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb93a0 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb9408 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb9568 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb96d8 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb95d0 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb9638 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb9798 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb9918 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb9810 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb9878 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb99d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb9b48 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb9a40 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb9aa8 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb9c08 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb9d88 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeb9c80 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb9ce8 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeb9e48 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeb9fb8 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeb9eb0 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeb9f18 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeba078 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeba1f8 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeba0f0 <col:16, col:27> col:27 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeba158 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeba2b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeba428 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeba320 <col:16, col:27> col:27 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeba388 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeba4e8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeba668 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeba560 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xeba5c8 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeba728 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xeba898 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xeba790 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | |   |-ParmVarDecl 0xeba7f8 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xeba958 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xebbe20 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-CXXRecordDecl 0xebc018 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xebc0e8 <line:319:7, col:26> col:13 value_type 'unsigned int':'unsigned int'
| | | | `-SubstTemplateTypeParmType 0xebc0b0 'unsigned int' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-TypeAliasDecl 0xebc180 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<unsigned int>::value_type':'unsigned int'
| | | | `-TypedefType 0xebc150 'std::__atomic_base<unsigned int>::value_type' sugar
| | | |   |-TypeAlias 0xebc0e8 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xebc0b0 'unsigned int' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-AccessSpecDecl 0xebc1e0 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xebc218 <line:323:7, col:21> col:21 __int_type 'unsigned int':'unsigned int'
| | | | `-SubstTemplateTypeParmType 0xebc0b0 'unsigned int' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf62f0 'unsigned int'
| | | |-VarDecl 0xebc270 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 4
| | | | `-ImplicitCastExpr 0xebc3f8 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xebc3c8 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xebc348 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xebc2f8 <col:2, col:13> 'unsigned long' sizeof 'unsigned int':'unsigned int'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xebc328 <col:17, col:29> 'unsigned long' alignof 'unsigned int':'unsigned int'
| | | |     |-UnaryExprOrTypeTraitExpr 0xebc378 <col:33, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
| | | |     `-UnaryExprOrTypeTraitExpr 0xebc3a8 <col:48, col:60> 'unsigned long' alignof 'unsigned int':'unsigned int'
| | | |-FieldDecl 0xebc4a0 <line:328:29, col:40> col:40 _M_i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | `-AlignedAttr 0xebc568 <col:7> alignas
| | | |   `-ConstantExpr 0xebc548 <col:15> 'int'
| | | |     |-value: Int 4
| | | |     `-ImplicitCastExpr 0xebc530 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xebc510 <col:15> 'const int' lvalue Var 0xebc270 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xebc5c8 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xebc628 <line:331:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xebc708 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xebc8e8 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<unsigned int> &)' delete trivial
| | | | `-ParmVarDecl 0xebc808 <col:21, col:40> col:41 'const std::__atomic_base<unsigned int> &'
| | | |-CXXMethodDecl 0xebcab8 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<unsigned int> &(const std::__atomic_base<unsigned int> &)' delete trivial
| | | | `-ParmVarDecl 0xebc9f8 <col:32, col:51> col:52 'const std::__atomic_base<unsigned int> &'
| | | |-CXXMethodDecl 0xebcc48 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<unsigned int> &(const std::__atomic_base<unsigned int> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xebcb80 <col:32, col:51> col:52 'const std::__atomic_base<unsigned int> &'
| | | |-CXXConstructorDecl 0xebce40 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xebcd20 <col:31, col:42> col:42 used __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-CXXCtorInitializer Field 0xebc4a0 '_M_i' 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | | `-ImplicitCastExpr 0xec44c0 <col:64> 'std::__atomic_base<unsigned int>::__int_type':'unsigned int' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xec4480 <col:64> 'std::__atomic_base<unsigned int>::__int_type':'unsigned int' lvalue ParmVar 0xebcd20 '__i' 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xebcfb8 <line:340:7, line:341:24> line:340:7 operator unsigned int 'std::__atomic_base<unsigned int>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xebd110 <line:343:7, line:344:24> line:343:7 operator unsigned int 'std::__atomic_base<unsigned int>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xebd2f0 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xebd1f8 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xebd8e0 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xebd7e8 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xebdaa0 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<unsigned int>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xebd9a8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xebdc50 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<unsigned int>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xebdb58 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xebddb0 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<unsigned int>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xebdd18 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xebdf00 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<unsigned int>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xebde68 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xebe050 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<unsigned int>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xebe190 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<unsigned int>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xebe278 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<unsigned int>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xebe360 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<unsigned int>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xebe4c8 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xebe430 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xebe628 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xebe590 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xebe798 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xebe700 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xebe8f8 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xebe860 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xebea68 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xebe9d0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xebebc8 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xebeb30 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xebed38 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xebeca0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xebee98 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xebee00 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xebf008 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xebef70 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xebf168 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xebf0d0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xebf230 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xebf2e0 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xebf530 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xebf3b0 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xebf418 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xebf618 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xebf840 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xebf680 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xebf6e8 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xebf900 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xebfa60 <col:32, line:482:7> line:474:7 load 'std::__atomic_base<unsigned int>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xebf968 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xebfb18 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xebfc70 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<unsigned int>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xebfb70 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xebfd28 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xebff20 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xebfda0 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xebfe08 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xebffe0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec01d0 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xec0048 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec00b0 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec0290 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec0600 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xec0368 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xec03e0 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec0448 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xec04b0 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec06d0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec09d0 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xec0738 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xec07b0 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec0818 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xec0880 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec0aa0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec0d20 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xec0b18 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xec0b90 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec0bf8 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec0de8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec1070 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xec0e60 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xec0ed8 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec0f40 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec1138 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec13a8 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xec11b0 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xec1228 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec1290 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xec12f8 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec1478 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec16d8 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xec14e0 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xec1558 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec15c0 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xec1628 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec17a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec19b8 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xec1830 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xec18a8 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec1910 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec1a80 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec1c80 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xec1af8 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xec1b70 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec1bd8 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec1d48 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec1ec8 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xec1dc0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec1e28 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec1f88 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec20f8 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xec1ff0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec2058 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec21b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec2338 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xec2230 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec2298 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec23f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec2568 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xec2460 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec24c8 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec2628 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec27a8 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xec26a0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec2708 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec2868 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec29d8 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xec28d0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec2938 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec2a98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec2c18 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xec2b10 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec2b78 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec2cd8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec2e48 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xec2d40 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec2da8 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec2f08 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec3088 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xec2f80 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xec2fe8 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec3148 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xec32b8 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xec31b0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | |   |-ParmVarDecl 0xec3218 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xec3378 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xec4870 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'long'
| | | | `-BuiltinType 0xbf6270 'long'
| | | |-CXXRecordDecl 0xec4a68 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xec4b38 <line:319:7, col:26> col:13 value_type 'long':'long'
| | | | `-SubstTemplateTypeParmType 0xec4b00 'long' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6270 'long'
| | | |-TypeAliasDecl 0xec4bd0 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<long>::value_type':'long'
| | | | `-TypedefType 0xec4ba0 'std::__atomic_base<long>::value_type' sugar
| | | |   |-TypeAlias 0xec4b38 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xec4b00 'long' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf6270 'long'
| | | |-AccessSpecDecl 0xec4c30 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xec4c68 <line:323:7, col:21> col:21 __int_type 'long':'long'
| | | | `-SubstTemplateTypeParmType 0xec4b00 'long' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6270 'long'
| | | |-VarDecl 0xec4cc0 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 8
| | | | `-ImplicitCastExpr 0xec4e48 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xec4e18 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xec4d98 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xec4d48 <col:2, col:13> 'unsigned long' sizeof 'long':'long'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xec4d78 <col:17, col:29> 'unsigned long' alignof 'long':'long'
| | | |     |-UnaryExprOrTypeTraitExpr 0xec4dc8 <col:33, col:44> 'unsigned long' sizeof 'long':'long'
| | | |     `-UnaryExprOrTypeTraitExpr 0xec4df8 <col:48, col:60> 'unsigned long' alignof 'long':'long'
| | | |-FieldDecl 0xec4ef0 <line:328:29, col:40> col:40 _M_i 'std::__atomic_base<long>::__int_type':'long'
| | | | `-AlignedAttr 0xec4fb8 <col:7> alignas
| | | |   `-ConstantExpr 0xec4f98 <col:15> 'int'
| | | |     |-value: Int 8
| | | |     `-ImplicitCastExpr 0xec4f80 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xec4f60 <col:15> 'const int' lvalue Var 0xec4cc0 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xec5018 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xec5078 <line:331:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xec5158 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xec5338 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<long> &)' delete trivial
| | | | `-ParmVarDecl 0xec5258 <col:21, col:40> col:41 'const std::__atomic_base<long> &'
| | | |-CXXMethodDecl 0xec5508 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<long> &(const std::__atomic_base<long> &)' delete trivial
| | | | `-ParmVarDecl 0xec5448 <col:32, col:51> col:52 'const std::__atomic_base<long> &'
| | | |-CXXMethodDecl 0xec5698 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<long> &(const std::__atomic_base<long> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xec55d0 <col:32, col:51> col:52 'const std::__atomic_base<long> &'
| | | |-CXXConstructorDecl 0xec76e0 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<long>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xec5770 <col:31, col:42> col:42 used __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-CXXCtorInitializer Field 0xec4ef0 '_M_i' 'std::__atomic_base<long>::__int_type':'long'
| | | | | `-ImplicitCastExpr 0xece8f0 <col:64> 'std::__atomic_base<long>::__int_type':'long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xece8b0 <col:64> 'std::__atomic_base<long>::__int_type':'long' lvalue ParmVar 0xec5770 '__i' 'std::__atomic_base<long>::__int_type':'long'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xec7858 <line:340:7, line:341:24> line:340:7 operator long 'std::__atomic_base<long>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xec79b0 <line:343:7, line:344:24> line:343:7 operator long 'std::__atomic_base<long>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xec7b90 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xec7a98 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xec7d60 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xec7c68 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xec7f20 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xec7e28 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xec80d0 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xec7fd8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xec8230 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xec8198 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xec8380 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xec82e8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xec84d0 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xec8610 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xec86f8 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xec87e0 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xec8948 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xec88b0 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xec8aa8 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xec8a10 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xec8c18 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xec8b80 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xec8d78 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xec8ce0 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xec8ee8 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xec8e50 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xec9048 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xec8fb0 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xec91b8 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xec9120 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xec9318 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xec9280 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xec9488 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xec93f0 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xec9640 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xec9550 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xec9708 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xec97b8 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xec9a10 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xec9888 <col:13, col:24> col:24 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xec98f0 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec9af8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec9ce0 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xec9b60 <col:13, col:24> col:24 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xec9bc8 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec9da0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xec9f00 <col:32, line:482:7> line:474:7 load 'std::__atomic_base<long>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xec9e08 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xec9fb8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeca110 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<long>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xeca010 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeca1c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeca3c0 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeca240 <col:16, col:27> col:27 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xeca2a8 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeca480 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeca670 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeca4e8 <col:16, col:27> col:27 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xeca550 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeca730 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecaaa0 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeca808 <col:29, col:41> col:41 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xeca880 <col:47, col:58> col:58 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xeca8e8 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xeca950 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecab70 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecae70 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xecabd8 <col:29, col:41> col:41 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xecac50 <col:47, col:58> col:58 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecacb8 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xecad20 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecaf40 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecb1c0 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xecafb8 <col:29, col:41> col:41 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xecb030 <col:47, col:58> col:58 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecb098 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecb288 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecb510 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xecb300 <col:29, col:41> col:41 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xecb378 <col:47, col:58> col:58 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecb3e0 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecb5d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecb858 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xecb660 <col:31, col:43> col:43 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xecb6d8 <col:49, col:60> col:60 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecb740 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xecb7a8 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecb928 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecbb88 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xecb990 <col:31, col:43> col:43 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xecba08 <col:49, col:60> col:60 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecba70 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xecbad8 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecbc58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecbe58 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xecbcd0 <col:31, col:43> col:43 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xecbd48 <col:49, col:60> col:60 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecbdb0 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecbf20 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecc120 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xecbf98 <col:31, col:43> col:43 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xecc010 <col:49, col:60> col:60 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecc078 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecc1e8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecc368 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xecc260 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecc2c8 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecc428 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecc598 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xecc490 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecc4f8 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecc658 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecc7d8 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xecc6d0 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecc738 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecc898 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecca08 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xecc900 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecc968 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeccac8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeccc48 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeccb40 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xeccba8 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeccd08 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecce78 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeccd70 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xeccdd8 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeccf38 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecd0b8 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeccfb0 <col:16, col:27> col:27 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecd018 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecd178 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecd2e8 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xecd1e0 <col:16, col:27> col:27 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecd248 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecd3a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xecd528 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xecd420 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xecd488 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xecd5e8 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xecd768 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xecd660 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | |   |-ParmVarDecl 0xecd6c8 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xecd828 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xececa0 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'unsigned long'
| | | | `-BuiltinType 0xbf6310 'unsigned long'
| | | |-CXXRecordDecl 0xecee98 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xecef68 <line:319:7, col:26> col:13 value_type 'unsigned long':'unsigned long'
| | | | `-SubstTemplateTypeParmType 0xecef30 'unsigned long' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6310 'unsigned long'
| | | |-TypeAliasDecl 0xecf000 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<unsigned long>::value_type':'unsigned long'
| | | | `-TypedefType 0xecefd0 'std::__atomic_base<unsigned long>::value_type' sugar
| | | |   |-TypeAlias 0xecef68 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xecef30 'unsigned long' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf6310 'unsigned long'
| | | |-AccessSpecDecl 0xecf060 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xecf098 <line:323:7, col:21> col:21 __int_type 'unsigned long':'unsigned long'
| | | | `-SubstTemplateTypeParmType 0xecef30 'unsigned long' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6310 'unsigned long'
| | | |-VarDecl 0xecf0f0 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 8
| | | | `-ImplicitCastExpr 0xecf278 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xecf248 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xecf1c8 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xecf178 <col:2, col:13> 'unsigned long' sizeof 'unsigned long':'unsigned long'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xecf1a8 <col:17, col:29> 'unsigned long' alignof 'unsigned long':'unsigned long'
| | | |     |-UnaryExprOrTypeTraitExpr 0xecf1f8 <col:33, col:44> 'unsigned long' sizeof 'unsigned long':'unsigned long'
| | | |     `-UnaryExprOrTypeTraitExpr 0xecf228 <col:48, col:60> 'unsigned long' alignof 'unsigned long':'unsigned long'
| | | |-FieldDecl 0xecf320 <line:328:29, col:40> col:40 _M_i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | `-AlignedAttr 0xecf3e8 <col:7> alignas
| | | |   `-ConstantExpr 0xecf3c8 <col:15> 'int'
| | | |     |-value: Int 8
| | | |     `-ImplicitCastExpr 0xecf3b0 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xecf390 <col:15> 'const int' lvalue Var 0xecf0f0 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xecf448 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xecf4a8 <line:331:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xecf588 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xed0ba8 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<unsigned long> &)' delete trivial
| | | | `-ParmVarDecl 0xed0ac8 <col:21, col:40> col:41 'const std::__atomic_base<unsigned long> &'
| | | |-CXXMethodDecl 0xed0d78 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<unsigned long> &(const std::__atomic_base<unsigned long> &)' delete trivial
| | | | `-ParmVarDecl 0xed0cb8 <col:32, col:51> col:52 'const std::__atomic_base<unsigned long> &'
| | | |-CXXMethodDecl 0xed0f08 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<unsigned long> &(const std::__atomic_base<unsigned long> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xed0e40 <col:32, col:51> col:52 'const std::__atomic_base<unsigned long> &'
| | | |-CXXConstructorDecl 0xed1100 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xed0fe0 <col:31, col:42> col:42 used __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-CXXCtorInitializer Field 0xecf320 '_M_i' 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | | `-ImplicitCastExpr 0xed8320 <col:64> 'std::__atomic_base<unsigned long>::__int_type':'unsigned long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xed82e0 <col:64> 'std::__atomic_base<unsigned long>::__int_type':'unsigned long' lvalue ParmVar 0xed0fe0 '__i' 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xed1230 <line:340:7, line:341:24> line:340:7 operator unsigned long 'std::__atomic_base<unsigned long>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xed1380 <line:343:7, line:344:24> line:343:7 operator unsigned long 'std::__atomic_base<unsigned long>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xed1560 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xed1468 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xed1730 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xed1638 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xed18f0 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<unsigned long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xed17f8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xed1aa0 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<unsigned long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xed19a8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xed1c00 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<unsigned long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xed1b68 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xed1d50 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<unsigned long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xed1cb8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xed1ea0 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<unsigned long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xed1fe0 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<unsigned long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xed20c8 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<unsigned long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xed21b0 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<unsigned long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xed2318 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xed2280 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xed2478 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xed23e0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xed25e8 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xed2550 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xed2748 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xed26b0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xed28b8 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xed2820 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xed2aa0 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xed2980 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xed2c10 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xed2b78 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xed2d70 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xed2cd8 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xed2ee0 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xed2e48 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xed3040 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xed2fa8 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xed3108 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xed31b8 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xed3410 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xed3288 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed32f0 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed34f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed36e0 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xed3560 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed35c8 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed37a0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed3900 <col:32, line:482:7> line:474:7 load 'std::__atomic_base<unsigned long>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xed3808 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed39b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed3b10 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<unsigned long>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xed3a10 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed3bc8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed3dc0 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xed3c40 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed3ca8 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed3e80 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed4070 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xed3ee8 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed3f50 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed4130 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed44a0 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xed4208 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xed4280 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed42e8 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xed4350 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed4570 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed4870 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xed45d8 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xed4650 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed46b8 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xed4720 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed4940 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed4be0 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xed49b8 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xed4a30 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed4ab0 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed4ca8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed4f30 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xed4d20 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xed4d98 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed4e00 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed4ff8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed5268 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xed5070 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xed50e8 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed5150 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xed51b8 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed5338 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed5598 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xed53a0 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xed5418 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed5480 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xed54e8 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed5668 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed5868 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xed56e0 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xed5758 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed57c0 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed5930 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed5b30 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xed59a8 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xed5a20 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed5a88 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed5bf8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed5d78 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xed5c70 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed5cd8 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed5e38 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed5fa8 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xed5ea0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed5f08 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed6068 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed61e8 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xed60e0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed6148 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed62a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed6418 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xed6310 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed6378 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed64d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed6658 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xed6550 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed65b8 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed6718 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed6888 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xed6780 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed67e8 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed6948 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed6af8 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xed69c0 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed6a28 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed6bb8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed6d28 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xed6c20 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed6c88 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed6de8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xed6f68 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xed6e60 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xed6ec8 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xed7028 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xed7198 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xed7090 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | |   |-ParmVarDecl 0xed70f8 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xed7258 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xed86d0 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'long long'
| | | | `-BuiltinType 0xbf6290 'long long'
| | | |-CXXRecordDecl 0xed88c8 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xed8998 <line:319:7, col:26> col:13 value_type 'long long':'long long'
| | | | `-SubstTemplateTypeParmType 0xed8960 'long long' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6290 'long long'
| | | |-TypeAliasDecl 0xed8a30 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<long long>::value_type':'long long'
| | | | `-TypedefType 0xed8a00 'std::__atomic_base<long long>::value_type' sugar
| | | |   |-TypeAlias 0xed8998 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xed8960 'long long' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf6290 'long long'
| | | |-AccessSpecDecl 0xed8a90 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xed8ae0 <line:323:7, col:21> col:21 __int_type 'long long':'long long'
| | | | `-SubstTemplateTypeParmType 0xed8960 'long long' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6290 'long long'
| | | |-VarDecl 0xed8b38 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 8
| | | | `-ImplicitCastExpr 0xed8cc0 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xed8c90 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xed8c10 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xed8bc0 <col:2, col:13> 'unsigned long' sizeof 'long long':'long long'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xed8bf0 <col:17, col:29> 'unsigned long' alignof 'long long':'long long'
| | | |     |-UnaryExprOrTypeTraitExpr 0xed8c40 <col:33, col:44> 'unsigned long' sizeof 'long long':'long long'
| | | |     `-UnaryExprOrTypeTraitExpr 0xed8c70 <col:48, col:60> 'unsigned long' alignof 'long long':'long long'
| | | |-FieldDecl 0xed8d60 <line:328:29, col:40> col:40 _M_i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | `-AlignedAttr 0xed8e28 <col:7> alignas
| | | |   `-ConstantExpr 0xed8e08 <col:15> 'int'
| | | |     |-value: Int 8
| | | |     `-ImplicitCastExpr 0xed8df0 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xed8dd0 <col:15> 'const int' lvalue Var 0xed8b38 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xed8e88 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xed8ee8 <line:331:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xed8fc8 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xed91a8 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<long long> &)' delete trivial
| | | | `-ParmVarDecl 0xed90c8 <col:21, col:40> col:41 'const std::__atomic_base<long long> &'
| | | |-CXXMethodDecl 0xed9378 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<long long> &(const std::__atomic_base<long long> &)' delete trivial
| | | | `-ParmVarDecl 0xed92b8 <col:32, col:51> col:52 'const std::__atomic_base<long long> &'
| | | |-CXXMethodDecl 0xed9508 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<long long> &(const std::__atomic_base<long long> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xed9440 <col:32, col:51> col:52 'const std::__atomic_base<long long> &'
| | | |-CXXConstructorDecl 0xed9700 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<long long>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xed95e0 <col:31, col:42> col:42 used __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-CXXCtorInitializer Field 0xed8d60 '_M_i' 'std::__atomic_base<long long>::__int_type':'long long'
| | | | | `-ImplicitCastExpr 0xee0930 <col:64> 'std::__atomic_base<long long>::__int_type':'long long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xee08f0 <col:64> 'std::__atomic_base<long long>::__int_type':'long long' lvalue ParmVar 0xed95e0 '__i' 'std::__atomic_base<long long>::__int_type':'long long'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xed9878 <line:340:7, line:341:24> line:340:7 operator long long 'std::__atomic_base<long long>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xed99d0 <line:343:7, line:344:24> line:343:7 operator long long 'std::__atomic_base<long long>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xed9bb0 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xed9ab8 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xed9d80 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xed9c88 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xed9f40 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<long long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xed9e48 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xeda0f0 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<long long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xed9ff8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xeda250 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<long long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xeda1b8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xeda3a0 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<long long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xeda308 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xeda4f0 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<long long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xeda630 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<long long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xeda718 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<long long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xeda800 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<long long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xeda968 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xeda8d0 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xedaae0 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xedaa30 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xedac50 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xedabb8 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xedadb0 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xedad18 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xedaf20 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xedae88 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xedb080 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xedafe8 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xedb1f0 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xedb158 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xedb350 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xedb2b8 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xedb4c0 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xedb428 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xedb620 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xedb588 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xedb6e8 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xedb798 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xedb9f0 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xedb868 <col:13, col:24> col:24 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedb8d0 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedbad8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedbcc0 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xedbb40 <col:13, col:24> col:24 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedbba8 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedbd80 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedbee0 <col:32, line:482:7> line:474:7 load 'std::__atomic_base<long long>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xedbde8 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedbf98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedc0f0 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<long long>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xedbff0 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedc1a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedc3a0 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xedc220 <col:16, col:27> col:27 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedc288 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedc460 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedc650 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xedc4c8 <col:16, col:27> col:27 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedc530 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedc710 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedcaf0 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xedc7e8 <col:29, col:41> col:41 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xedc860 <col:47, col:58> col:58 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedc8c8 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xedc930 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedcbc0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedcec0 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xedcc28 <col:29, col:41> col:41 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xedcca0 <col:47, col:58> col:58 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedcd08 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xedcd70 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedcf90 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedd210 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xedd008 <col:29, col:41> col:41 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xedd080 <col:47, col:58> col:58 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedd0e8 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedd2d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedd560 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xedd350 <col:29, col:41> col:41 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xedd3c8 <col:47, col:58> col:58 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedd430 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedd628 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedd898 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xedd6a0 <col:31, col:43> col:43 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xedd718 <col:49, col:60> col:60 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedd780 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xedd7e8 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedd968 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeddbc8 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xedd9d0 <col:31, col:43> col:43 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xedda48 <col:49, col:60> col:60 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xeddab0 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xeddb18 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeddc98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedde98 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeddd10 <col:31, col:43> col:43 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xeddd88 <col:49, col:60> col:60 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedddf0 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeddf60 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xede160 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeddfd8 <col:31, col:43> col:43 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xede050 <col:49, col:60> col:60 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xede0b8 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xede228 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xede3a8 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xede2a0 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xede308 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xede468 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xede5d8 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xede4d0 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xede538 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xede698 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xede818 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xede710 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xede778 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xede8d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedea48 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xede940 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xede9a8 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedeb20 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedeca0 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xedeb98 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedec00 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeded60 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedeed0 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xededc8 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedee30 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedef90 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedf110 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xedf008 <col:16, col:27> col:27 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedf070 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedf1d0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedf340 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xedf238 <col:16, col:27> col:27 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedf2a0 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedf400 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xedf580 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xedf478 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xedf4e0 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xedf640 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xedf7b0 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xedf6a8 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | |   |-ParmVarDecl 0xedf710 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xedf870 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xee4d40 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'unsigned long long'
| | | | `-BuiltinType 0xbf6330 'unsigned long long'
| | | |-CXXRecordDecl 0xee4f38 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xee5008 <line:319:7, col:26> col:13 value_type 'unsigned long long':'unsigned long long'
| | | | `-SubstTemplateTypeParmType 0xee4fd0 'unsigned long long' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6330 'unsigned long long'
| | | |-TypeAliasDecl 0xee50a0 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<unsigned long long>::value_type':'unsigned long long'
| | | | `-TypedefType 0xee5070 'std::__atomic_base<unsigned long long>::value_type' sugar
| | | |   |-TypeAlias 0xee5008 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xee4fd0 'unsigned long long' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf6330 'unsigned long long'
| | | |-AccessSpecDecl 0xee5100 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xee5138 <line:323:7, col:21> col:21 __int_type 'unsigned long long':'unsigned long long'
| | | | `-SubstTemplateTypeParmType 0xee4fd0 'unsigned long long' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6330 'unsigned long long'
| | | |-VarDecl 0xee5190 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 8
| | | | `-ImplicitCastExpr 0xee5318 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xee52e8 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xee5268 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xee5218 <col:2, col:13> 'unsigned long' sizeof 'unsigned long long':'unsigned long long'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xee5248 <col:17, col:29> 'unsigned long' alignof 'unsigned long long':'unsigned long long'
| | | |     |-UnaryExprOrTypeTraitExpr 0xee5298 <col:33, col:44> 'unsigned long' sizeof 'unsigned long long':'unsigned long long'
| | | |     `-UnaryExprOrTypeTraitExpr 0xee52c8 <col:48, col:60> 'unsigned long' alignof 'unsigned long long':'unsigned long long'
| | | |-FieldDecl 0xee53c0 <line:328:29, col:40> col:40 _M_i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | `-AlignedAttr 0xee5488 <col:7> alignas
| | | |   `-ConstantExpr 0xee5468 <col:15> 'int'
| | | |     |-value: Int 8
| | | |     `-ImplicitCastExpr 0xee5450 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xee5430 <col:15> 'const int' lvalue Var 0xee5190 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xee54e8 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xee5548 <line:331:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xee5628 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xee5808 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<unsigned long long> &)' delete trivial
| | | | `-ParmVarDecl 0xee5728 <col:21, col:40> col:41 'const std::__atomic_base<unsigned long long> &'
| | | |-CXXMethodDecl 0xee59d8 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<unsigned long long> &(const std::__atomic_base<unsigned long long> &)' delete trivial
| | | | `-ParmVarDecl 0xee5918 <col:32, col:51> col:52 'const std::__atomic_base<unsigned long long> &'
| | | |-CXXMethodDecl 0xee5b68 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<unsigned long long> &(const std::__atomic_base<unsigned long long> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xee5aa0 <col:32, col:51> col:52 'const std::__atomic_base<unsigned long long> &'
| | | |-CXXConstructorDecl 0xee5d60 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xee5c40 <col:31, col:42> col:42 used __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-CXXCtorInitializer Field 0xee53c0 '_M_i' 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | | `-ImplicitCastExpr 0xeecfd0 <col:64> 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xeecf90 <col:64> 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long' lvalue ParmVar 0xee5c40 '__i' 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xee5ed8 <line:340:7, line:341:24> line:340:7 operator unsigned long long 'std::__atomic_base<unsigned long long>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xee6030 <line:343:7, line:344:24> line:343:7 operator unsigned long long 'std::__atomic_base<unsigned long long>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xee6210 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xee6118 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xee63e0 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xee62e8 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xee65a0 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<unsigned long long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xee64a8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xee6750 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<unsigned long long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xee6658 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xee68b0 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<unsigned long long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xee6818 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xee6a00 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<unsigned long long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xee6968 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xee6b80 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<unsigned long long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xee6cc0 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<unsigned long long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xee6da8 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<unsigned long long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xee6e90 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<unsigned long long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xee6ff8 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xee6f60 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xee7158 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xee70c0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xee72c8 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xee7230 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xee7428 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xee7390 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xee7598 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xee7500 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xee76f8 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xee7660 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xee7868 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xee77d0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xee79c8 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xee7930 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xee7b38 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xee7aa0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xee7c98 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xee7c00 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xee7d60 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xee7e10 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xee8060 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xee7ee0 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xee7f48 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xee8148 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xee8330 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xee81b0 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xee8218 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xee83f0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xee8550 <col:32, line:482:7> line:474:7 load 'std::__atomic_base<unsigned long long>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xee8458 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xee8608 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xee8760 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<unsigned long long>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xee8660 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xee8818 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xee8a10 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xee8890 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xee88f8 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xee8ad0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xee8cd0 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xee8b50 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xee8bb8 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xee8d90 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xee9100 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xee8e68 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xee8ee0 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xee8f48 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xee8fb0 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xee91d0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xee94d0 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xee9238 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xee92b0 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xee9318 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xee9380 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xee95a0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xee9820 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xee9618 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xee9690 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xee96f8 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xee98e8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xee9b70 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xee9960 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xee99d8 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xee9a40 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xee9c38 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xee9ea8 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xee9cb0 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xee9d28 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xee9d90 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xee9df8 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xee9f78 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeea1d8 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xee9fe0 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xeea058 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xeea0c0 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xeea128 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeea2a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeea4a8 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeea320 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xeea398 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xeea400 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeea570 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeea770 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeea5e8 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xeea660 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xeea6c8 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeea838 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeea9b8 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeea8b0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xeea918 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeeaa78 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeeac58 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeeab50 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xeeabb8 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeead18 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeeae98 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeead90 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xeeadf8 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeeaf58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeeb0c8 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeeafc0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xeeb028 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeeb188 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeeb308 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeeb200 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xeeb268 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeeb3c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeeb538 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeeb430 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xeeb498 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeeb5f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeeb778 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeeb670 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xeeb6d8 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeeb838 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeeb9a8 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xeeb8a0 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xeeb908 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeeba68 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xeebbe8 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xeebae0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xeebb48 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xeebca8 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xeebe18 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xeebd10 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | |   |-ParmVarDecl 0xeebd78 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xeebed8 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xeed378 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0xbf6750 'wchar_t'
| | | |-CXXRecordDecl 0xeed578 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xeed648 <line:319:7, col:26> col:13 value_type 'wchar_t':'wchar_t'
| | | | `-SubstTemplateTypeParmType 0xeed610 'wchar_t' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6750 'wchar_t'
| | | |-TypeAliasDecl 0xeed6e0 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<wchar_t>::value_type':'wchar_t'
| | | | `-TypedefType 0xeed6b0 'std::__atomic_base<wchar_t>::value_type' sugar
| | | |   |-TypeAlias 0xeed648 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xeed610 'wchar_t' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf6750 'wchar_t'
| | | |-AccessSpecDecl 0xeed740 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xeed778 <line:323:7, col:21> col:21 __int_type 'wchar_t':'wchar_t'
| | | | `-SubstTemplateTypeParmType 0xeed610 'wchar_t' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6750 'wchar_t'
| | | |-VarDecl 0xeed7d0 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 4
| | | | `-ImplicitCastExpr 0xeed958 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xeed928 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xeed8a8 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xeed858 <col:2, col:13> 'unsigned long' sizeof 'wchar_t':'wchar_t'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xeed888 <col:17, col:29> 'unsigned long' alignof 'wchar_t':'wchar_t'
| | | |     |-UnaryExprOrTypeTraitExpr 0xeed8d8 <col:33, col:44> 'unsigned long' sizeof 'wchar_t':'wchar_t'
| | | |     `-UnaryExprOrTypeTraitExpr 0xeed908 <col:48, col:60> 'unsigned long' alignof 'wchar_t':'wchar_t'
| | | |-FieldDecl 0xeeda00 <line:328:29, col:40> col:40 _M_i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | `-AlignedAttr 0xeedac8 <col:7> alignas
| | | |   `-ConstantExpr 0xeedaa8 <col:15> 'int'
| | | |     |-value: Int 4
| | | |     `-ImplicitCastExpr 0xeeda90 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xeeda70 <col:15> 'const int' lvalue Var 0xeed7d0 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xeedb28 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xeedb88 <line:331:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xeedc68 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xeede48 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<wchar_t> &)' delete trivial
| | | | `-ParmVarDecl 0xeedd68 <col:21, col:40> col:41 'const std::__atomic_base<wchar_t> &'
| | | |-CXXMethodDecl 0xeee018 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<wchar_t> &(const std::__atomic_base<wchar_t> &)' delete trivial
| | | | `-ParmVarDecl 0xeedf58 <col:32, col:51> col:52 'const std::__atomic_base<wchar_t> &'
| | | |-CXXMethodDecl 0xeee1a8 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<wchar_t> &(const std::__atomic_base<wchar_t> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xeee0e0 <col:32, col:51> col:52 'const std::__atomic_base<wchar_t> &'
| | | |-CXXConstructorDecl 0xeee3a0 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xeee280 <col:31, col:42> col:42 used __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-CXXCtorInitializer Field 0xeeda00 '_M_i' 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | | `-ImplicitCastExpr 0xef7450 <col:64> 'std::__atomic_base<wchar_t>::__int_type':'wchar_t' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xef7410 <col:64> 'std::__atomic_base<wchar_t>::__int_type':'wchar_t' lvalue ParmVar 0xeee280 '__i' 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xeee518 <line:340:7, line:341:24> line:340:7 operator wchar_t 'std::__atomic_base<wchar_t>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xeee670 <line:343:7, line:344:24> line:343:7 operator wchar_t 'std::__atomic_base<wchar_t>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xeee850 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xeee758 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xeeea20 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xeee928 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xef0a30 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<wchar_t>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xeeeae8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xef0be0 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<wchar_t>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xef0ae8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xef0d40 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<wchar_t>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xef0ca8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xef0e90 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<wchar_t>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xef0df8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xef0fe0 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<wchar_t>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xef1120 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<wchar_t>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xef1208 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<wchar_t>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xef12f0 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<wchar_t>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xef1458 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xef13c0 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xef15b8 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xef1520 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xef1728 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xef1690 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xef1888 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xef17f0 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xef19f8 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xef1960 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xef1b58 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xef1ac0 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xef1cc8 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xef1c30 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xef1e28 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xef1d90 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xef1f98 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xef1f00 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xef20f8 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xef2060 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xef21c0 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xef2270 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xef24c0 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xef2340 <col:13, col:24> col:24 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef23a8 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef25a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef2790 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xef2610 <col:13, col:24> col:24 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef2678 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef2850 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef29e0 <col:32, line:482:7> line:474:7 load 'std::__atomic_base<wchar_t>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xef28b8 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef2a98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef2bf0 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<wchar_t>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xef2af0 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef2ca8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef2ea0 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xef2d20 <col:16, col:27> col:27 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef2d88 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef2f60 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef3150 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xef2fc8 <col:16, col:27> col:27 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef3030 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef3210 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef3580 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xef32e8 <col:29, col:41> col:41 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xef3360 <col:47, col:58> col:58 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef33c8 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xef3430 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef3650 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef3950 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xef36b8 <col:29, col:41> col:41 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xef3730 <col:47, col:58> col:58 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef3798 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xef3800 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef3a20 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef3ca0 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xef3a98 <col:29, col:41> col:41 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xef3b10 <col:47, col:58> col:58 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef3b78 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef3d68 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef3ff0 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xef3de0 <col:29, col:41> col:41 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xef3e58 <col:47, col:58> col:58 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef3ec0 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef40b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef4328 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xef4130 <col:31, col:43> col:43 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xef41a8 <col:49, col:60> col:60 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef4210 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xef4278 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef43f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef4658 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xef4460 <col:31, col:43> col:43 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xef44d8 <col:49, col:60> col:60 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef4540 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xef45a8 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef4728 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef49c0 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xef47a0 <col:31, col:43> col:43 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xef4818 <col:49, col:60> col:60 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef4880 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef4a88 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef4c88 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xef4b00 <col:31, col:43> col:43 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xef4b78 <col:49, col:60> col:60 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef4be0 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef4d50 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef4ed0 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xef4dc8 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef4e30 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef4f90 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef5100 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xef4ff8 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef5060 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef51c0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef5340 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xef5238 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef52a0 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef5400 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef5570 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xef5468 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef54d0 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef5630 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef57b0 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xef56a8 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef5710 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef5870 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef59e0 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xef58d8 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef5940 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef5aa0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef5c20 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xef5b18 <col:16, col:27> col:27 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef5b80 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef5ce0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef5e50 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xef5d48 <col:16, col:27> col:27 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef5db0 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef5f10 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xef6090 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xef5f88 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xef5ff0 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xef6150 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xef62c0 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xef61b8 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | |   |-ParmVarDecl 0xef6220 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xef6380 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xef77f8 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0xbf6790 'char16_t'
| | | |-CXXRecordDecl 0xef79f8 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xef7ac8 <line:319:7, col:26> col:13 value_type 'char16_t':'char16_t'
| | | | `-SubstTemplateTypeParmType 0xef7a90 'char16_t' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6790 'char16_t'
| | | |-TypeAliasDecl 0xef7b60 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<char16_t>::value_type':'char16_t'
| | | | `-TypedefType 0xef7b30 'std::__atomic_base<char16_t>::value_type' sugar
| | | |   |-TypeAlias 0xef7ac8 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xef7a90 'char16_t' sugar
| | | |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |     `-BuiltinType 0xbf6790 'char16_t'
| | | |-AccessSpecDecl 0xef7bc0 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xef7bf8 <line:323:7, col:21> col:21 __int_type 'char16_t':'char16_t'
| | | | `-SubstTemplateTypeParmType 0xef7a90 'char16_t' sugar
| | | |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |   `-BuiltinType 0xbf6790 'char16_t'
| | | |-VarDecl 0xef7c50 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 2
| | | | `-ImplicitCastExpr 0xef7dd8 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xef7da8 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xef7d28 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xef7cd8 <col:2, col:13> 'unsigned long' sizeof 'char16_t':'char16_t'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xef7d08 <col:17, col:29> 'unsigned long' alignof 'char16_t':'char16_t'
| | | |     |-UnaryExprOrTypeTraitExpr 0xef7d58 <col:33, col:44> 'unsigned long' sizeof 'char16_t':'char16_t'
| | | |     `-UnaryExprOrTypeTraitExpr 0xef7d88 <col:48, col:60> 'unsigned long' alignof 'char16_t':'char16_t'
| | | |-FieldDecl 0xef7e80 <line:328:29, col:40> col:40 _M_i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | `-AlignedAttr 0xef7f48 <col:7> alignas
| | | |   `-ConstantExpr 0xef7f28 <col:15> 'int'
| | | |     |-value: Int 2
| | | |     `-ImplicitCastExpr 0xef7f10 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xef7ef0 <col:15> 'const int' lvalue Var 0xef7c50 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xef7fa8 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xef8008 <line:331:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xef80e8 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xef82c8 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<char16_t> &)' delete trivial
| | | | `-ParmVarDecl 0xef81e8 <col:21, col:40> col:41 'const std::__atomic_base<char16_t> &'
| | | |-CXXMethodDecl 0xef8498 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<char16_t> &(const std::__atomic_base<char16_t> &)' delete trivial
| | | | `-ParmVarDecl 0xef83d8 <col:32, col:51> col:52 'const std::__atomic_base<char16_t> &'
| | | |-CXXMethodDecl 0xef8628 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<char16_t> &(const std::__atomic_base<char16_t> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xef8560 <col:32, col:51> col:52 'const std::__atomic_base<char16_t> &'
| | | |-CXXConstructorDecl 0xef8820 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xef8700 <col:31, col:42> col:42 used __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-CXXCtorInitializer Field 0xef7e80 '_M_i' 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | | `-ImplicitCastExpr 0xeffaa0 <col:64> 'std::__atomic_base<char16_t>::__int_type':'char16_t' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xeffa60 <col:64> 'std::__atomic_base<char16_t>::__int_type':'char16_t' lvalue ParmVar 0xef8700 '__i' 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xef89e0 <line:340:7, line:341:24> line:340:7 operator char16_t 'std::__atomic_base<char16_t>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xef8b30 <line:343:7, line:344:24> line:343:7 operator char16_t 'std::__atomic_base<char16_t>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xef8d10 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xef8c18 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xef8ee0 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xef8de8 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xef90a0 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<char16_t>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xef8fa8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xef9250 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<char16_t>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xef9158 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xef93b0 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<char16_t>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xef9318 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xef9500 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<char16_t>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xef9468 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xef9650 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<char16_t>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xef9790 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<char16_t>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xef9878 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<char16_t>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xef9960 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<char16_t>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xef9ac8 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xef9a30 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xef9c28 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xef9b90 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xef9d98 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xef9d00 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xef9ef8 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xef9e60 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xefa068 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xef9fd0 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xefa1c8 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xefa130 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xefa338 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xefa2a0 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xefa498 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xefa400 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xefa608 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xefa570 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xefa768 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xefa6d0 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xefa830 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xefa8e0 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xefab70 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xefa9f0 <col:13, col:24> col:24 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefaa58 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefac58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefae40 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xefacc0 <col:13, col:24> col:24 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefad28 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefaf00 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefb060 <col:32, line:482:7> line:474:7 load 'std::__atomic_base<char16_t>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xefaf68 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefb118 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefb270 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<char16_t>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xefb170 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefb328 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefb520 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xefb3a0 <col:16, col:27> col:27 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefb408 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefb5e0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefb7d0 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xefb648 <col:16, col:27> col:27 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefb6b0 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefb890 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefbc00 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xefb968 <col:29, col:41> col:41 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xefb9e0 <col:47, col:58> col:58 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefba48 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xefbab0 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefbcd0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefbfd0 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xefbd38 <col:29, col:41> col:41 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xefbdb0 <col:47, col:58> col:58 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefbe18 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xefbe80 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefc0a0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefc320 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xefc118 <col:29, col:41> col:41 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xefc190 <col:47, col:58> col:58 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefc1f8 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefc3e8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefc670 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xefc460 <col:29, col:41> col:41 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xefc4d8 <col:47, col:58> col:58 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefc540 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefc738 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefca00 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xefc7b0 <col:31, col:43> col:43 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xefc828 <col:49, col:60> col:60 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefc890 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xefc8f8 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefcad0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefcd30 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xefcb38 <col:31, col:43> col:43 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xefcbb0 <col:49, col:60> col:60 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefcc18 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xefcc80 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefce00 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefd000 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xefce78 <col:31, col:43> col:43 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xefcef0 <col:49, col:60> col:60 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefcf58 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefd0c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefd2c8 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xefd140 <col:31, col:43> col:43 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xefd1b8 <col:49, col:60> col:60 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefd220 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefd390 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefd510 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xefd408 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefd470 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefd5d0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefd740 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xefd638 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefd6a0 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefd800 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefd980 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xefd878 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefd8e0 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefda40 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefdbb0 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xefdaa8 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefdb10 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefdc70 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefddf0 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xefdce8 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefdd50 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefdeb0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefe020 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xefdf18 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefdf80 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefe0e0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefe260 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xefe158 <col:16, col:27> col:27 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefe1c0 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefe320 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefe490 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xefe388 <col:16, col:27> col:27 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefe3f0 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefe550 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xefe6d0 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xefe5c8 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xefe630 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xefe790 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xefe900 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xefe7f8 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | |   |-ParmVarDecl 0xefe860 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xefe9c0 <line:45:54> always_inline
| | `-ClassTemplateSpecializationDecl 0xeffe48 <line:316:3, line:682:5> line:317:12 struct __atomic_base definition
| |   |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| |   | |-DefaultConstructor exists trivial
| |   | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| |   | |-MoveConstructor
| |   | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| |   | |-MoveAssignment
| |   | `-Destructor irrelevant trivial user_declared
| |   |-TemplateArgument type 'char32_t'
| |   | `-BuiltinType 0xbf67b0 'char32_t'
| |   |-CXXRecordDecl 0xf00048 <col:5, col:12> col:12 implicit struct __atomic_base
| |   |-TypeAliasDecl 0xf00118 <line:319:7, col:26> col:13 value_type 'char32_t':'char32_t'
| |   | `-SubstTemplateTypeParmType 0xf000e0 'char32_t' sugar
| |   |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| |   |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| |   |   `-BuiltinType 0xbf67b0 'char32_t'
| |   |-TypeAliasDecl 0xf001b0 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base<char32_t>::value_type':'char32_t'
| |   | `-TypedefType 0xf00180 'std::__atomic_base<char32_t>::value_type' sugar
| |   |   |-TypeAlias 0xf00118 'value_type'
| |   |   `-SubstTemplateTypeParmType 0xf000e0 'char32_t' sugar
| |   |     |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| |   |     | `-TemplateTypeParm 0xe383a8 '_ITp'
| |   |     `-BuiltinType 0xbf67b0 'char32_t'
| |   |-AccessSpecDecl 0xf00210 <line:322:5, col:12> col:5 private
| |   |-TypedefDecl 0xf00248 <line:323:7, col:21> col:21 __int_type 'char32_t':'char32_t'
| |   | `-SubstTemplateTypeParmType 0xf000e0 'char32_t' sugar
| |   |   |-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| |   |   | `-TemplateTypeParm 0xe383a8 '_ITp'
| |   |   `-BuiltinType 0xbf67b0 'char32_t'
| |   |-VarDecl 0xf002a0 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| |   | |-value: Int 4
| |   | `-ImplicitCastExpr 0xf00428 <line:326:2, col:60> 'const int' <IntegralCast>
| |   |   `-ConditionalOperator 0xf003f8 <col:2, col:60> 'unsigned long'
| |   |     |-BinaryOperator 0xf00378 <col:2, col:29> 'bool' '>'
| |   |     | |-UnaryExprOrTypeTraitExpr 0xf00328 <col:2, col:13> 'unsigned long' sizeof 'char32_t':'char32_t'
| |   |     | `-UnaryExprOrTypeTraitExpr 0xf00358 <col:17, col:29> 'unsigned long' alignof 'char32_t':'char32_t'
| |   |     |-UnaryExprOrTypeTraitExpr 0xf003a8 <col:33, col:44> 'unsigned long' sizeof 'char32_t':'char32_t'
| |   |     `-UnaryExprOrTypeTraitExpr 0xf003d8 <col:48, col:60> 'unsigned long' alignof 'char32_t':'char32_t'
| |   |-FieldDecl 0xf004d0 <line:328:29, col:40> col:40 _M_i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | `-AlignedAttr 0xf00598 <col:7> alignas
| |   |   `-ConstantExpr 0xf00578 <col:15> 'int'
| |   |     |-value: Int 4
| |   |     `-ImplicitCastExpr 0xf00560 <col:15> 'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0xf00540 <col:15> 'const int' lvalue Var 0xf002a0 '_S_alignment' 'const int' non_odr_use_constant
| |   |-AccessSpecDecl 0xf005f8 <line:330:5, col:11> col:5 public
| |   |-CXXConstructorDecl 0xf00658 <line:331:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| |   |-CXXDestructorDecl 0xf00738 <line:332:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| |   |-CXXConstructorDecl 0xf00918 <line:333:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<char32_t> &)' delete trivial
| |   | `-ParmVarDecl 0xf00838 <col:21, col:40> col:41 'const std::__atomic_base<char32_t> &'
| |   |-CXXMethodDecl 0xf00ae8 <line:334:7, col:61> col:22 operator= 'std::__atomic_base<char32_t> &(const std::__atomic_base<char32_t> &)' delete trivial
| |   | `-ParmVarDecl 0xf00a28 <col:32, col:51> col:52 'const std::__atomic_base<char32_t> &'
| |   |-CXXMethodDecl 0xf00c78 <line:335:7, col:70> col:22 operator= 'std::__atomic_base<char32_t> &(const std::__atomic_base<char32_t> &) volatile' delete trivial
| |   | `-ParmVarDecl 0xf00bb0 <col:32, col:51> col:52 'const std::__atomic_base<char32_t> &'
| |   |-CXXConstructorDecl 0xf00e70 <line:338:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | |-ParmVarDecl 0xf00d50 <col:31, col:42> col:42 used __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-CXXCtorInitializer Field 0xf004d0 '_M_i' 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | | `-ImplicitCastExpr 0xf09e40 <col:64> 'std::__atomic_base<char32_t>::__int_type':'char32_t' <LValueToRValue>
| |   | |   `-DeclRefExpr 0xf09e00 <col:64> 'std::__atomic_base<char32_t>::__int_type':'char32_t' lvalue ParmVar 0xf00d50 '__i' 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | `-CompoundStmt 0xe42d38 <col:69, col:71>
| |   |-CXXConversionDecl 0xf00fe8 <line:340:7, line:341:24> line:340:7 operator char32_t 'std::__atomic_base<char32_t>::__int_type () const noexcept'
| |   |-CXXConversionDecl 0xf01140 <line:343:7, line:344:24> line:343:7 operator char32_t 'std::__atomic_base<char32_t>::__int_type () const volatile noexcept'
| |   |-CXXMethodDecl 0xf01320 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | `-ParmVarDecl 0xf01228 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xf014f0 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |   | `-ParmVarDecl 0xf013f8 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xf016b0 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base<char32_t>::__int_type (int) noexcept'
| |   | `-ParmVarDecl 0xf015b8 <col:18> col:21 'int'
| |   |-CXXMethodDecl 0xf01860 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base<char32_t>::__int_type (int) volatile noexcept'
| |   | `-ParmVarDecl 0xf01768 <col:18> col:21 'int'
| |   |-CXXMethodDecl 0xf019c0 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base<char32_t>::__int_type (int) noexcept'
| |   | `-ParmVarDecl 0xf01928 <col:18> col:21 'int'
| |   |-CXXMethodDecl 0xf01b10 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base<char32_t>::__int_type (int) volatile noexcept'
| |   | `-ParmVarDecl 0xf01a78 <col:18> col:21 'int'
| |   |-CXXMethodDecl 0xf01c60 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base<char32_t>::__int_type () noexcept'
| |   |-CXXMethodDecl 0xf01da0 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base<char32_t>::__int_type () volatile noexcept'
| |   |-CXXMethodDecl 0xf01e88 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base<char32_t>::__int_type () noexcept'
| |   |-CXXMethodDecl 0xf01f70 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base<char32_t>::__int_type () volatile noexcept'
| |   |-CXXMethodDecl 0xf020d8 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | `-ParmVarDecl 0xf02040 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xf02238 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |   | `-ParmVarDecl 0xf021a0 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xf023a8 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | `-ParmVarDecl 0xf02310 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xf02508 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |   | `-ParmVarDecl 0xf02470 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xf02678 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | `-ParmVarDecl 0xf025e0 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xf027d8 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |   | `-ParmVarDecl 0xf02740 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xf02948 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | `-ParmVarDecl 0xf028b0 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xf048e8 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |   | `-ParmVarDecl 0xf04850 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xf04a58 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | `-ParmVarDecl 0xf049c0 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xf04bb8 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |   | `-ParmVarDecl 0xf04b20 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xf04c80 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| |   |-CXXMethodDecl 0xf04d30 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| |   |-CXXMethodDecl 0xf04f80 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xf04e00 <col:13, col:24> col:24 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf04e68 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf05068 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf05250 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xf050d0 <col:13, col:24> col:24 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf05138 <line:462:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf05310 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf05470 <col:32, line:482:7> line:474:7 load 'std::__atomic_base<char32_t>::__int_type (std::memory_order) const noexcept' inline
| |   | |-ParmVarDecl 0xf05378 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf05528 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf05680 <col:32, line:493:7> line:485:7 load 'std::__atomic_base<char32_t>::__int_type (std::memory_order) const volatile noexcept' inline
| |   | |-ParmVarDecl 0xf05580 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf05738 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf05930 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xf057b0 <col:16, col:27> col:27 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf05818 <line:497:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf059f0 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf05be0 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xf05a58 <col:16, col:27> col:27 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf05ac0 <line:505:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf05ca0 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf06010 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xf05d78 <col:29, col:41> col:41 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xf05df0 <col:47, col:58> col:58 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf05e58 <line:512:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| |   | |-ParmVarDecl 0xf05ec0 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf060e0 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf063e0 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xf06148 <col:29, col:41> col:41 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xf061c0 <col:47, col:58> col:58 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf06228 <line:528:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| |   | |-ParmVarDecl 0xf06290 <line:529:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf064b0 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf06730 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xf06528 <col:29, col:41> col:41 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xf065a0 <col:47, col:58> col:58 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf06608 <line:545:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf067f8 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf06a80 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xf06870 <col:29, col:41> col:41 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xf068e8 <col:47, col:58> col:58 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf06950 <line:553:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf06b48 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf06db8 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xf06bc0 <col:31, col:43> col:43 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xf06c38 <col:49, col:60> col:60 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf06ca0 <line:561:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| |   | |-ParmVarDecl 0xf06d08 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf06e88 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf070e8 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xf06ef0 <col:31, col:43> col:43 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xf06f68 <col:49, col:60> col:60 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf06fd0 <line:577:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| |   | |-ParmVarDecl 0xf07038 <line:578:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf071b8 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf073b8 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xf07230 <col:31, col:43> col:43 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xf072a8 <col:49, col:60> col:60 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf07310 <line:595:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf07480 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf07680 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xf074f8 <col:31, col:43> col:43 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xf07570 <col:49, col:60> col:60 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf075d8 <line:603:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf07748 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf078c8 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xf077c0 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf07828 <line:635:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf07988 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf07af8 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xf079f0 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf07a58 <line:640:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf07bb8 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf07d38 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xf07c30 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf07c98 <line:645:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf07df8 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf07f68 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xf07e60 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf07ec8 <line:650:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf08028 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf081a8 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xf080a0 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf08108 <line:655:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf08268 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf083d8 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xf082d0 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf08338 <line:660:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf08498 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf08618 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xf08510 <col:16, col:27> col:27 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf08578 <line:665:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf086d8 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf08860 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xf08740 <col:16, col:27> col:27 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf087a8 <line:670:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf08920 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xf08aa0 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xf08998 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xf08a00 <line:675:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xf08b60 <line:45:54> always_inline
| |   `-CXXMethodDecl 0xf08cd0 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |     |-ParmVarDecl 0xf08bc8 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |     |-ParmVarDecl 0xf08c30 <line:680:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |     `-AlwaysInlineAttr 0xf08d90 <line:45:54> always_inline
| |-ClassTemplateDecl 0xe22ae0 <line:154:3, line:155:12> col:12 atomic
| | |-TemplateTypeParmDecl 0xe229b8 <line:154:12, col:21> col:21 typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xe22a50 <line:155:5, col:12> col:12 struct atomic
| | |-ClassTemplateSpecialization 0xe60cf8 'atomic'
| | |-ClassTemplateSpecialization 0xe7d628 'atomic'
| | |-ClassTemplateSpecialization 0xd96f40 'atomic'
| | |-ClassTemplateSpecialization 0xe981e0 'atomic'
| | |-ClassTemplateSpecialization 0xea28b0 'atomic'
| | |-ClassTemplateSpecialization 0xeaaf00 'atomic'
| | |-ClassTemplateSpecialization 0xeb35f8 'atomic'
| | |-ClassTemplateSpecialization 0xebbc00 'atomic'
| | |-ClassTemplateSpecialization 0xec4650 'atomic'
| | |-ClassTemplateSpecialization 0xecea80 'atomic'
| | |-ClassTemplateSpecialization 0xed84b0 'atomic'
| | |-ClassTemplateSpecialization 0xee4b20 'atomic'
| | |-ClassTemplateSpecialization 0xeed158 'atomic'
| | |-ClassTemplateSpecialization 0xef75d8 'atomic'
| | |-ClassTemplateSpecialization 0xeffc28 'atomic'
| | `-ClassTemplateSpecializationDecl 0xf2c410 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/atomic:195:3, line:402:5> line:196:12 struct atomic definition
| |   |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| |   | |-DefaultConstructor exists trivial
| |   | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |   | |-MoveConstructor needs_overload_resolution
| |   | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |   | |-MoveAssignment needs_overload_resolution
| |   | `-Destructor irrelevant trivial user_declared
| |   |-TemplateArgument type 'testStruct'
| |   | `-RecordType 0xf29db0 'testStruct'
| |   |   `-CXXRecord 0xf29d20 'testStruct'
| |   |-CXXRecordDecl 0xf2c6e0 <col:5, col:12> col:12 implicit struct atomic
| |   |-TypeAliasDecl 0xf2c7a8 <line:198:7, col:26> col:13 value_type 'testStruct':'testStruct'
| |   | `-SubstTemplateTypeParmType 0xf2c770 'testStruct' sugar
| |   |   |-TemplateTypeParmType 0xe6da50 '_Tp' dependent depth 0 index 0
| |   |   | `-TemplateTypeParm 0xe6da00 '_Tp'
| |   |   `-RecordType 0xf29db0 'testStruct'
| |   |     `-CXXRecord 0xf29d20 'testStruct'
| |   |-AccessSpecDecl 0xf2c808 <line:200:5, col:12> col:5 private
| |   |-VarDecl 0xf2c830 <line:202:7, line:204:18> line:202:28 referenced _S_min_alignment 'const int' static constexpr cinit
| |   | |-value: Int 0
| |   | `-ImplicitCastExpr 0xf2cab8 <line:203:4, line:204:18> 'const int' <IntegralCast>
| |   |   `-ConditionalOperator 0xf2ca88 <line:203:4, line:204:18> 'unsigned long'
| |   |     |-BinaryOperator 0xf2ca20 <line:203:4, col:55> 'bool' '||'
| |   |     | |-ImplicitCastExpr 0xf2ca08 <col:4, col:36> 'bool' <IntegralToBoolean>
| |   |     | | `-ParenExpr 0xf2c980 <col:4, col:36> 'unsigned long'
| |   |     | |   `-BinaryOperator 0xf2c960 <col:5, col:35> 'unsigned long' '&'
| |   |     | |     |-UnaryExprOrTypeTraitExpr 0xf2c8b8 <col:5, col:15> 'unsigned long' sizeof 'testStruct':'testStruct'
| |   |     | |     `-ParenExpr 0xf2c940 <col:19, col:35> 'unsigned long'
| |   |     | |       `-BinaryOperator 0xf2c920 <col:20, col:34> 'unsigned long' '-'
| |   |     | |         |-UnaryExprOrTypeTraitExpr 0xf2c8e8 <col:20, col:30> 'unsigned long' sizeof 'testStruct':'testStruct'
| |   |     | |         `-ImplicitCastExpr 0xf2c908 <col:34> 'unsigned long' <IntegralCast>
| |   |     | |           `-IntegerLiteral 0xe6dde8 <col:34> 'int' 1
| |   |     | `-BinaryOperator 0xf2c9e8 <col:41, col:55> 'bool' '>'
| |   |     |   |-UnaryExprOrTypeTraitExpr 0xf2c9b0 <col:41, col:51> 'unsigned long' sizeof 'testStruct':'testStruct'
| |   |     |   `-ImplicitCastExpr 0xf2c9d0 <col:55> 'unsigned long' <IntegralCast>
| |   |     |     `-IntegerLiteral 0xe6ded0 <col:55> 'int' 16
| |   |     |-ImplicitCastExpr 0xf2ca70 <line:204:4> 'unsigned long' <IntegralCast>
| |   |     | `-IntegerLiteral 0xe6df60 <col:4> 'int' 0
| |   |     `-UnaryExprOrTypeTraitExpr 0xf2ca50 <col:8, col:18> 'unsigned long' sizeof 'testStruct':'testStruct'
| |   |-VarDecl 0xf2cc00 <line:206:7, line:207:75> line:206:28 referenced _S_alignment 'const int' static constexpr cinit
| |   | |-value: Int 8
| |   | `-ImplicitCastExpr 0xf2ce08 <line:207:11, col:75> 'const int' <IntegralCast>
| |   |   `-ConditionalOperator 0xf2cdd8 <col:11, col:75> 'unsigned long'
| |   |     |-BinaryOperator 0xf2cd18 <col:11, col:41> 'bool' '>'
| |   |     | |-ImplicitCastExpr 0xf2cd00 <col:11> 'unsigned long' <IntegralCast>
| |   |     | | `-ImplicitCastExpr 0xf2cce8 <col:11> 'int' <LValueToRValue>
| |   |     | |   `-DeclRefExpr 0xf2ccc8 <col:11> 'const int' lvalue Var 0xf2c830 '_S_min_alignment' 'const int' non_odr_use_constant
| |   |     | `-UnaryExprOrTypeTraitExpr 0xf2cca8 <col:30, col:41> 'unsigned long' alignof 'testStruct':'testStruct'
| |   |     |-ImplicitCastExpr 0xf2cdc0 <col:45> 'unsigned long' <IntegralCast>
| |   |     | `-ImplicitCastExpr 0xf2cda8 <col:45> 'int' <LValueToRValue>
| |   |     |   `-DeclRefExpr 0xf2cd88 <col:45> 'const int' lvalue Var 0xf2c830 '_S_min_alignment' 'const int' non_odr_use_constant
| |   |     `-UnaryExprOrTypeTraitExpr 0xf2cd68 <col:64, col:75> 'unsigned long' alignof 'testStruct':'testStruct'
| |   |-FieldDecl 0xf2ce88 <line:209:29, col:33> col:33 _M_i 'testStruct':'testStruct'
| |   | `-AlignedAttr 0xf2cf50 <col:7> alignas
| |   |   `-ConstantExpr 0xf2cf30 <col:15> 'int'
| |   |     |-value: Int 8
| |   |     `-ImplicitCastExpr 0xf2cf18 <col:15> 'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0xf2cef8 <col:15> 'const int' lvalue Var 0xf2cc00 '_S_alignment' 'const int' non_odr_use_constant
| |   |-StaticAssertDecl 0xf2d000 <line:211:7, line:212:55> line:211:7
| |   | |-TypeTraitExpr 0xf2cfc0 <col:21, col:48> 'bool' __is_trivially_copyable
| |   | `-StringLiteral 0xe6e3c8 <line:212:7> 'const char[47]' lvalue "std::atomic requires a trivially copyable type"
| |   |-StaticAssertDecl 0xf2d0c8 <line:214:7, line:215:57> line:214:7
| |   | |-BinaryOperator 0xf2d088 <col:21, col:35> 'bool' '>'
| |   | | |-UnaryExprOrTypeTraitExpr 0xf2d050 <col:21, col:31> 'unsigned long' sizeof 'testStruct':'testStruct'
| |   | | `-ImplicitCastExpr 0xf2d070 <col:35> 'unsigned long' <IntegralCast>
| |   | |   `-IntegerLiteral 0xe6e480 <col:35> 'int' 0
| |   | `-StringLiteral 0xe6e558 <line:215:7> 'const char[49]' lvalue "Incomplete or zero-sized types are not supported"
| |   |-AccessSpecDecl 0xf2d108 <line:224:5, col:11> col:5 public
| |   |-CXXConstructorDecl 0xf2d168 <line:225:7, col:24> col:7 used atomic 'void () noexcept' default trivial
| |   | |-CXXCtorInitializer Field 0xf2ce88 '_M_i' 'testStruct':'testStruct'
| |   | | `-CXXConstructExpr 0xf33138 <col:7> 'testStruct':'testStruct' 'void () noexcept'
| |   | `-CompoundStmt 0xf33188 <col:24>
| |   |-CXXDestructorDecl 0xf2d248 <line:226:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| |   |-CXXConstructorDecl 0xf2d428 <line:227:7, col:36> col:7 atomic 'void (const std::atomic<testStruct> &)' delete trivial
| |   | `-ParmVarDecl 0xf2d348 <col:14, col:26> col:27 'const std::atomic<testStruct> &'
| |   |-CXXMethodDecl 0xf2d5f8 <line:228:7, col:47> col:15 operator= 'std::atomic<testStruct> &(const std::atomic<testStruct> &)' delete trivial
| |   | `-ParmVarDecl 0xf2d538 <col:25, col:37> col:38 'const std::atomic<testStruct> &'
| |   |-CXXMethodDecl 0xf2d788 <line:229:7, col:56> col:15 operator= 'std::atomic<testStruct> &(const std::atomic<testStruct> &) volatile' delete trivial
| |   | `-ParmVarDecl 0xf2d6c0 <col:25, col:37> col:38 'const std::atomic<testStruct> &'
| |   |-CXXConstructorDecl 0xf2d980 <line:231:7, col:56> col:17 constexpr atomic 'void (testStruct) noexcept'
| |   | `-ParmVarDecl 0xf2d860 <col:24, col:28> col:28 __i 'testStruct':'testStruct'
| |   |-CXXConversionDecl 0xf2daf8 <line:233:7, line:234:24> line:233:7 operator testStruct 'testStruct () const noexcept'
| |   |-CXXConversionDecl 0xf2dc50 <line:236:7, line:237:24> line:236:7 operator testStruct 'testStruct () const volatile noexcept'
| |   |-CXXMethodDecl 0xf2de30 <line:239:7, line:241:33> line:240:7 operator= 'testStruct (testStruct) noexcept'
| |   | `-ParmVarDecl 0xf2dd38 <col:17, col:21> col:21 __i 'testStruct':'testStruct'
| |   |-CXXMethodDecl 0xf2e000 <line:243:7, line:245:33> line:244:7 operator= 'testStruct (testStruct) volatile noexcept'
| |   | `-ParmVarDecl 0xf2df08 <col:17, col:21> col:21 __i 'testStruct':'testStruct'
| |   |-CXXMethodDecl 0xf2e0c8 <line:247:7, line:253:7> line:248:7 is_lock_free 'bool () const noexcept'
| |   |-CXXMethodDecl 0xf2e178 <line:255:7, line:261:7> line:256:7 is_lock_free 'bool () const volatile noexcept'
| |   |-CXXMethodDecl 0xf2e3d0 <line:268:7, line:272:7> line:269:7 store 'void (testStruct, std::memory_order) noexcept'
| |   | |-ParmVarDecl 0xf2e248 <col:13, col:17> col:17 __i 'testStruct':'testStruct'
| |   | `-ParmVarDecl 0xf2e2b0 <col:22, col:41> col:35 __m 'std::memory_order':'std::memory_order'
| |   |-CXXMethodDecl 0xf2e620 <line:274:7, line:278:7> line:275:7 store 'void (testStruct, std::memory_order) volatile noexcept'
| |   | |-ParmVarDecl 0xf2e4a0 <col:13, col:17> col:17 __i 'testStruct':'testStruct'
| |   | `-ParmVarDecl 0xf2e508 <col:22, col:41> col:35 __m 'std::memory_order':'std::memory_order'
| |   |-CXXMethodDecl 0xf2e7f0 <line:280:7, line:287:7> line:281:7 load 'testStruct (std::memory_order) const noexcept'
| |   | `-ParmVarDecl 0xf2e6f0 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| |   |-CXXMethodDecl 0xf2e9a0 <line:289:7, line:296:7> line:290:7 load 'testStruct (std::memory_order) const volatile noexcept'
| |   | `-ParmVarDecl 0xf2e8a8 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| |   |-CXXMethodDecl 0xf2ec00 <line:298:7, line:306:7> line:299:7 exchange 'testStruct (testStruct, std::memory_order) noexcept'
| |   | |-ParmVarDecl 0xf2ea78 <col:16, col:20> col:20 __i 'testStruct':'testStruct'
| |   | `-ParmVarDecl 0xf2eae0 <col:25, col:44> col:38 __m 'std::memory_order':'std::memory_order'
| |   |-CXXMethodDecl 0xf2ee50 <line:308:7, line:317:7> line:309:7 exchange 'testStruct (testStruct, std::memory_order) volatile noexcept'
| |   | |-ParmVarDecl 0xf2ecd0 <col:16, col:20> col:20 __i 'testStruct':'testStruct'
| |   | `-ParmVarDecl 0xf2ed38 <line:310:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| |   |-CXXMethodDecl 0xf2f1f0 <line:319:7, line:327:7> line:320:7 compare_exchange_weak 'bool (testStruct &, testStruct, std::memory_order, std::memory_order) noexcept'
| |   | |-ParmVarDecl 0xf2ef58 <col:29, col:34> col:34 __e 'testStruct &'
| |   | |-ParmVarDecl 0xf2efd0 <col:39, col:43> col:43 __i 'testStruct':'testStruct'
| |   | |-ParmVarDecl 0xf2f038 <col:48, col:61> col:61 __s 'std::memory_order':'std::memory_order'
| |   | `-ParmVarDecl 0xf2f0a0 <line:321:8, col:21> col:21 __f 'std::memory_order':'std::memory_order'
| |   |-CXXMethodDecl 0xf31df0 <line:329:7, line:337:7> line:330:7 compare_exchange_weak 'bool (testStruct &, testStruct, std::memory_order, std::memory_order) volatile noexcept'
| |   | |-ParmVarDecl 0xf2f2d0 <col:29, col:34> col:34 __e 'testStruct &'
| |   | |-ParmVarDecl 0xf2f348 <col:39, col:43> col:43 __i 'testStruct':'testStruct'
| |   | |-ParmVarDecl 0xf2f3b0 <col:48, col:61> col:61 __s 'std::memory_order':'std::memory_order'
| |   | `-ParmVarDecl 0xf2f418 <line:331:8, col:21> col:21 __f 'std::memory_order':'std::memory_order'
| |   |-CXXMethodDecl 0xf320f0 <line:339:7, line:343:69> line:340:7 compare_exchange_weak 'bool (testStruct &, testStruct, std::memory_order) noexcept'
| |   | |-ParmVarDecl 0xf31ee0 <col:29, col:34> col:34 __e 'testStruct &'
| |   | |-ParmVarDecl 0xf31f58 <col:39, col:43> col:43 __i 'testStruct':'testStruct'
| |   | `-ParmVarDecl 0xf31fc0 <line:341:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| |   |-CXXMethodDecl 0xf323e0 <line:345:7, line:349:69> line:346:7 compare_exchange_weak 'bool (testStruct &, testStruct, std::memory_order) volatile noexcept'
| |   | |-ParmVarDecl 0xf321d8 <col:29, col:34> col:34 __e 'testStruct &'
| |   | |-ParmVarDecl 0xf32250 <col:39, col:43> col:43 __i 'testStruct':'testStruct'
| |   | `-ParmVarDecl 0xf322b8 <line:347:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| |   |-CXXMethodDecl 0xf326c0 <line:351:7, line:359:7> line:352:7 compare_exchange_strong 'bool (testStruct &, testStruct, std::memory_order, std::memory_order) noexcept'
| |   | |-ParmVarDecl 0xf324c8 <col:31, col:36> col:36 __e 'testStruct &'
| |   | |-ParmVarDecl 0xf32540 <col:41, col:45> col:45 __i 'testStruct':'testStruct'
| |   | |-ParmVarDecl 0xf325a8 <col:50, col:63> col:63 __s 'std::memory_order':'std::memory_order'
| |   | `-ParmVarDecl 0xf32610 <line:353:10, col:23> col:23 __f 'std::memory_order':'std::memory_order'
| |   |-CXXMethodDecl 0xf32998 <line:361:7, line:369:7> line:362:7 compare_exchange_strong 'bool (testStruct &, testStruct, std::memory_order, std::memory_order) volatile noexcept'
| |   | |-ParmVarDecl 0xf327a0 <col:31, col:36> col:36 __e 'testStruct &'
| |   | |-ParmVarDecl 0xf32818 <col:41, col:45> col:45 __i 'testStruct':'testStruct'
| |   | |-ParmVarDecl 0xf32880 <col:50, col:63> col:63 __s 'std::memory_order':'std::memory_order'
| |   | `-ParmVarDecl 0xf328e8 <line:363:10, col:23> col:23 __f 'std::memory_order':'std::memory_order'
| |   |-CXXMethodDecl 0xf32c10 <line:371:7, line:375:71> line:372:7 compare_exchange_strong 'bool (testStruct &, testStruct, std::memory_order) noexcept'
| |   | |-ParmVarDecl 0xf32a88 <col:31, col:36> col:36 __e 'testStruct &'
| |   | |-ParmVarDecl 0xf32b00 <col:41, col:45> col:45 __i 'testStruct':'testStruct'
| |   | `-ParmVarDecl 0xf32b68 <line:373:11, col:30> col:24 __m 'std::memory_order':'std::memory_order'
| |   `-CXXMethodDecl 0xf32e80 <line:377:7, line:381:71> line:378:7 compare_exchange_strong 'bool (testStruct &, testStruct, std::memory_order) volatile noexcept'
| |     |-ParmVarDecl 0xf32cf8 <col:31, col:36> col:36 __e 'testStruct &'
| |     |-ParmVarDecl 0xf32d70 <col:41, col:45> col:45 __i 'testStruct':'testStruct'
| |     `-ParmVarDecl 0xf32dd8 <line:379:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| |-ClassTemplatePartialSpecializationDecl 0xe22e40 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:157:3, line:158:23> col:12 struct atomic
| | |-TemplateArgument type 'type-parameter-0-0 *'
| | | `-PointerType 0xcca060 'type-parameter-0-0 *' dependent
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | `-TemplateTypeParmDecl 0xe22cb8 <line:157:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| |-TypedefDecl 0xe23000 <line:162:5, col:18> col:18 referenced __atomic_flag_data_type 'bool'
| | `-BuiltinType 0xbf61d0 'bool'
| |-LinkageSpecDecl 0xe230f8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:563:34, line:564:32> line:563:41 C
| | `-CXXRecordDecl 0xe23148 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:179:3, line:182:3> line:179:10 referenced struct __atomic_flag_base definition
| |   |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |   | |-DefaultConstructor exists trivial
| |   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial
| |   | |-CopyAssignment simple trivial has_const_param implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial
| |   | `-Destructor simple irrelevant trivial
| |   |-CXXRecordDecl 0xe23268 <col:3, col:10> col:10 implicit referenced struct __atomic_flag_base
| |   |-FieldDecl 0xe23330 <line:181:5, col:29> col:29 referenced _M_i 'std::__atomic_flag_data_type':'bool'
| |   |-CXXDestructorDecl 0xe27860 <line:179:10> col:10 implicit ~__atomic_flag_base 'void ()' inline default trivial noexcept-unevaluated 0xe27860
| |   |-CXXConstructorDecl 0xe27958 <col:10> col:10 implicit __atomic_flag_base 'void ()' inline default trivial noexcept-unevaluated 0xe27958
| |   |-CXXConstructorDecl 0xe27a58 <col:10> col:10 implicit constexpr __atomic_flag_base 'void (const std::__atomic_flag_base &)' inline default trivial noexcept-unevaluated 0xe27a58
| |   | `-ParmVarDecl 0xe27b68 <col:10> col:10 'const std::__atomic_flag_base &'
| |   |-CXXConstructorDecl 0xe27c18 <col:10> col:10 implicit constexpr __atomic_flag_base 'void (std::__atomic_flag_base &&)' inline default trivial noexcept-unevaluated 0xe27c18
| |   | `-ParmVarDecl 0xe27d28 <col:10> col:10 'std::__atomic_flag_base &&'
| |   |-CXXMethodDecl 0xe27dd8 <col:10> col:10 implicit constexpr operator= 'std::__atomic_flag_base &(const std::__atomic_flag_base &)' inline default trivial noexcept-unevaluated 0xe27dd8
| |   | `-ParmVarDecl 0xe27ee8 <col:10> col:10 'const std::__atomic_flag_base &'
| |   `-CXXMethodDecl 0xe27f58 <col:10> col:10 implicit constexpr operator= 'std::__atomic_flag_base &(std::__atomic_flag_base &&)' inline default trivial noexcept-unevaluated 0xe27f58
| |     `-ParmVarDecl 0xe28068 <col:10> col:10 'std::__atomic_flag_base &&'
| |-CXXRecordDecl 0xe23398 <line:189:3, line:289:3> line:189:10 referenced struct atomic_flag definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | |-MoveConstructor
| | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | |-MoveAssignment
| | | `-Destructor irrelevant trivial user_declared
| | |-public 'std::__atomic_flag_base'
| | |-CXXRecordDecl 0xe234f8 <col:3, col:10> col:10 implicit referenced struct atomic_flag
| | |-CXXConstructorDecl 0xe23620 <line:191:5, col:36> col:5 atomic_flag 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xe23718 <line:192:5, col:37> col:5 ~atomic_flag 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xe238c8 <line:193:5, col:44> col:5 atomic_flag 'void (const std::atomic_flag &)' delete trivial
| | | `-ParmVarDecl 0xe23808 <col:17, col:34> col:35 'const std::atomic_flag &'
| | |-CXXMethodDecl 0xe23a88 <line:194:5, col:55> col:18 operator= 'std::atomic_flag &(const std::atomic_flag &)' delete trivial
| | | `-ParmVarDecl 0xe23998 <col:28, col:45> col:46 'const std::atomic_flag &'
| | |-CXXMethodDecl 0xe23c38 <line:195:5, col:64> col:18 operator= 'std::atomic_flag &(const std::atomic_flag &) volatile' delete trivial
| | | `-ParmVarDecl 0xe23b40 <col:28, col:45> col:46 'const std::atomic_flag &'
| | |-CXXConstructorDecl 0xe23e00 <line:198:5, line:200:7> line:198:15 constexpr atomic_flag 'void (bool) noexcept'
| | | |-ParmVarDecl 0xe23d00 <col:27, col:32> col:32 used __i 'bool'
| | | |-CXXCtorInitializer 'std::__atomic_flag_base'
| | | | `-InitListExpr 0xe282b8 <line:199:27, col:42> 'std::__atomic_flag_base'
| | | |   `-CallExpr 0xe28220 <col:29, col:40> 'std::__atomic_flag_data_type':'bool'
| | | |     |-ImplicitCastExpr 0xe28208 <col:29> 'std::__atomic_flag_data_type (*)(bool)' <FunctionToPointerDecay>
| | | |     | `-DeclRefExpr 0xe28168 <col:29> 'std::__atomic_flag_data_type (bool)' lvalue CXXMethod 0xe277b8 '_S_init' 'std::__atomic_flag_data_type (bool)'
| | | |     `-ImplicitCastExpr 0xe28248 <col:37> 'bool' <LValueToRValue>
| | | |       `-DeclRefExpr 0xe28188 <col:37> 'bool' lvalue ParmVar 0xe23d00 '__i' 'bool'
| | | `-CompoundStmt 0xe28328 <line:200:5, col:7>
| | |-CXXMethodDecl 0xe23fd0 <line:45:32, line:206:5> line:203:5 used test_and_set 'bool (std::memory_order) noexcept' inline
| | | |-ParmVarDecl 0xe23ed0 <col:18, col:37> col:31 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe280e8 <col:37> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CompoundStmt 0xe28a38 <line:204:5, line:206:5>
| | | | `-ReturnStmt 0xe28a28 <line:205:7, col:52>
| | | |   `-CallExpr 0xe289e0 <col:14, col:52> 'bool'
| | | |     |-ImplicitCastExpr 0xe289c8 <col:14> 'bool (*)(volatile void *, int) noexcept' <BuiltinFnToFnPtr>
| | | |     | `-DeclRefExpr 0xe287b8 <col:14> '<builtin fn type>' Function 0xe285b8 '__atomic_test_and_set' 'bool (volatile void *, int) noexcept'
| | | |     |-ImplicitCastExpr 0xe28a10 <col:37, col:38> 'volatile void *' <BitCast>
| | | |     | `-UnaryOperator 0xe288c8 <col:37, col:38> 'std::__atomic_flag_data_type *' prefix '&' cannot overflow
| | | |     |   `-MemberExpr 0xe28838 <col:38> 'std::__atomic_flag_data_type':'bool' lvalue ->_M_i 0xe23330
| | | |     |     `-ImplicitCastExpr 0xe28818 <col:38> 'std::__atomic_flag_base *' <UncheckedDerivedToBase (__atomic_flag_base)>
| | | |     |       `-CXXThisExpr 0xe287d8 <col:38> 'std::atomic_flag *' implicit this
| | | |     `-CXXFunctionalCastExpr 0xe28948 <col:44, col:51> 'int' functional cast to int <NoOp>
| | | |       `-ImplicitCastExpr 0xe28930 <col:48> 'int' <IntegralCast> part_of_explicit_cast
| | | |         `-ImplicitCastExpr 0xe28918 <col:48> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe288f8 <col:48> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe23ed0 '__m' 'std::memory_order':'std::memory_order'
| | | `-AlwaysInlineAttr 0xe24078 <line:45:54> always_inline
| | |-CXXMethodDecl 0xe241e0 <col:32, line:212:5> line:209:5 used test_and_set 'bool (std::memory_order) volatile noexcept' inline
| | | |-ParmVarDecl 0xe240e0 <col:18, col:37> col:31 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe28108 <col:37> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CompoundStmt 0xe28c40 <line:210:5, line:212:5>
| | | | `-ReturnStmt 0xe28c30 <line:211:7, col:52>
| | | |   `-CallExpr 0xe28be8 <col:14, col:52> 'bool'
| | | |     |-ImplicitCastExpr 0xe28bd0 <col:14> 'bool (*)(volatile void *, int) noexcept' <BuiltinFnToFnPtr>
| | | |     | `-DeclRefExpr 0xe28a50 <col:14> '<builtin fn type>' Function 0xe285b8 '__atomic_test_and_set' 'bool (volatile void *, int) noexcept'
| | | |     |-ImplicitCastExpr 0xe28c18 <col:37, col:38> 'volatile void *' <BitCast>
| | | |     | `-UnaryOperator 0xe28b28 <col:37, col:38> 'volatile std::__atomic_flag_data_type *' prefix '&' cannot overflow
| | | |     |   `-MemberExpr 0xe28aa0 <col:38> 'volatile std::__atomic_flag_data_type':'volatile bool' lvalue ->_M_i 0xe23330
| | | |     |     `-ImplicitCastExpr 0xe28a80 <col:38> 'std::__atomic_flag_base *' <UncheckedDerivedToBase (__atomic_flag_base)>
| | | |     |       `-CXXThisExpr 0xe28a70 <col:38> 'volatile std::atomic_flag *' implicit this
| | | |     `-CXXFunctionalCastExpr 0xe28ba8 <col:44, col:51> 'int' functional cast to int <NoOp>
| | | |       `-ImplicitCastExpr 0xe28b90 <col:48> 'int' <IntegralCast> part_of_explicit_cast
| | | |         `-ImplicitCastExpr 0xe28b78 <col:48> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe28b58 <col:48> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe240e0 '__m' 'std::memory_order':'std::memory_order'
| | | `-AlwaysInlineAttr 0xe24288 <line:45:54> always_inline
| | |-CXXMethodDecl 0xe24398 <col:32, line:271:5> line:262:5 used clear 'void (std::memory_order) noexcept' inline
| | | |-ParmVarDecl 0xe24300 <col:11, col:30> col:24 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe28128 <col:30> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CompoundStmt 0xe37888 <line:263:5, line:271:5>
| | | | |-DeclStmt 0xe28df0 <line:264:7, line:265:29>
| | | | | `-VarDecl 0xe28c68 <line:264:7, line:265:10> line:264:20 used __b 'std::memory_order':'std::memory_order' cinit
| | | | |   |-CXXOperatorCallExpr 0xe28db8 <line:265:4, col:10> 'std::memory_order':'std::memory_order' '&'
| | | | |   | |-ImplicitCastExpr 0xe28da0 <col:8> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | |   | | `-DeclRefExpr 0xe28d80 <col:8> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | |   | |-ImplicitCastExpr 0xe28d68 <col:4> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |   | | `-DeclRefExpr 0xe28d28 <col:4> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe24300 '__m' 'std::memory_order':'std::memory_order'
| | | | |   | `-DeclRefExpr 0xe28d48 <col:10> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | |   `-UnusedAttr 0xe28cd0 <line:264:40> unused
| | | | |-DoStmt 0xe29478 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | |-CompoundStmt 0xe29450 <col:6, col:42>
| | | | | | `-IfStmt 0xe29430 <line:493:3, line:494:27>
| | | | | |   |-BinaryOperator 0xe29188 <line:493:7, col:54> 'bool' '&&'
| | | | | |   | |-CallExpr 0xe29070 <col:7, col:39> 'bool'
| | | | | |   | | `-ImplicitCastExpr 0xe29058 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | |   | |   `-DeclRefExpr 0xe28fd8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | |   | `-UnaryOperator 0xe29170 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | |   |   `-CXXFunctionalCastExpr 0xe29148 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | |   |     `-BinaryOperator 0xe29128 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:266:24, col:31> 'bool' '!='
| | | | | |   |       |-ImplicitCastExpr 0xe290f8 <col:24> 'int' <IntegralCast>
| | | | | |   |       | `-ImplicitCastExpr 0xe290e0 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   |       |   `-DeclRefExpr 0xe290a0 <col:24> 'std::memory_order':'std::memory_order' lvalue Var 0xe28c68 '__b' 'std::memory_order':'std::memory_order'
| | | | | |   |       `-ImplicitCastExpr 0xe29110 <col:31> 'int' <IntegralCast>
| | | | | |   |         `-DeclRefExpr 0xe290c0 <col:31> 'std::memory_order' EnumConstant 0xe1e980 'memory_order_consume' 'std::memory_order'
| | | | | |   `-CallExpr 0xe29410 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | |     `-ImplicitCastExpr 0xe293f8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | |       `-DeclRefExpr 0xe29378 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | `-CXXBoolLiteralExpr 0xe29468 <line:531:51> 'bool' false
| | | | |-DoStmt 0xe37188 <col:3, col:56>
| | | | | |-CompoundStmt 0xe37160 <col:6, col:42>
| | | | | | `-IfStmt 0xe37140 <line:493:3, line:494:27>
| | | | | |   |-BinaryOperator 0xe370c8 <line:493:7, col:54> 'bool' '&&'
| | | | | |   | |-CallExpr 0xe294d0 <col:7, col:39> 'bool'
| | | | | |   | | `-ImplicitCastExpr 0xe294b8 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | |   | |   `-DeclRefExpr 0xe29498 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | |   | `-UnaryOperator 0xe370b0 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | |   |   `-CXXFunctionalCastExpr 0xe37088 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | |   |     `-BinaryOperator 0xe37068 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:267:24, col:31> 'bool' '!='
| | | | | |   |       |-ImplicitCastExpr 0xe37038 <col:24> 'int' <IntegralCast>
| | | | | |   |       | `-ImplicitCastExpr 0xe37020 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   |       |   `-DeclRefExpr 0xe29500 <col:24> 'std::memory_order':'std::memory_order' lvalue Var 0xe28c68 '__b' 'std::memory_order':'std::memory_order'
| | | | | |   |       `-ImplicitCastExpr 0xe37050 <col:31> 'int' <IntegralCast>
| | | | | |   |         `-DeclRefExpr 0xe29520 <col:31> 'std::memory_order' EnumConstant 0xe1e9d0 'memory_order_acquire' 'std::memory_order'
| | | | | |   `-CallExpr 0xe37120 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | |     `-ImplicitCastExpr 0xe37108 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | |       `-DeclRefExpr 0xe370e8 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | `-CXXBoolLiteralExpr 0xe37178 <line:531:51> 'bool' false
| | | | |-DoStmt 0xe373b8 <col:3, col:56>
| | | | | |-CompoundStmt 0xe37390 <col:6, col:42>
| | | | | | `-IfStmt 0xe37370 <line:493:3, line:494:27>
| | | | | |   |-BinaryOperator 0xe372f8 <line:493:7, col:54> 'bool' '&&'
| | | | | |   | |-CallExpr 0xe371e0 <col:7, col:39> 'bool'
| | | | | |   | | `-ImplicitCastExpr 0xe371c8 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | |   | |   `-DeclRefExpr 0xe371a8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | |   | `-UnaryOperator 0xe372e0 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | |   |   `-CXXFunctionalCastExpr 0xe372b8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | |   |     `-BinaryOperator 0xe37298 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:268:24, col:31> 'bool' '!='
| | | | | |   |       |-ImplicitCastExpr 0xe37268 <col:24> 'int' <IntegralCast>
| | | | | |   |       | `-ImplicitCastExpr 0xe37250 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   |       |   `-DeclRefExpr 0xe37210 <col:24> 'std::memory_order':'std::memory_order' lvalue Var 0xe28c68 '__b' 'std::memory_order':'std::memory_order'
| | | | | |   |       `-ImplicitCastExpr 0xe37280 <col:31> 'int' <IntegralCast>
| | | | | |   |         `-DeclRefExpr 0xe37230 <col:31> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | |   `-CallExpr 0xe37350 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | |     `-ImplicitCastExpr 0xe37338 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | |       `-DeclRefExpr 0xe37318 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | `-CXXBoolLiteralExpr 0xe373a8 <line:531:51> 'bool' false
| | | | `-CallExpr 0xe37840 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:270:7, col:38> 'void'
| | | |   |-ImplicitCastExpr 0xe37828 <col:7> 'void (*)(volatile void *, int) noexcept' <BuiltinFnToFnPtr>
| | | |   | `-DeclRefExpr 0xe376a8 <col:7> '<builtin fn type>' Function 0xe374a8 '__atomic_clear' 'void (volatile void *, int) noexcept'
| | | |   |-ImplicitCastExpr 0xe37870 <col:23, col:24> 'volatile void *' <BitCast>
| | | |   | `-UnaryOperator 0xe37728 <col:23, col:24> 'std::__atomic_flag_data_type *' prefix '&' cannot overflow
| | | |   |   `-MemberExpr 0xe376f8 <col:24> 'std::__atomic_flag_data_type':'bool' lvalue ->_M_i 0xe23330
| | | |   |     `-ImplicitCastExpr 0xe376d8 <col:24> 'std::__atomic_flag_base *' <UncheckedDerivedToBase (__atomic_flag_base)>
| | | |   |       `-CXXThisExpr 0xe376c8 <col:24> 'std::atomic_flag *' implicit this
| | | |   `-CXXFunctionalCastExpr 0xe377a8 <col:30, col:37> 'int' functional cast to int <NoOp>
| | | |     `-ImplicitCastExpr 0xe37790 <col:34> 'int' <IntegralCast> part_of_explicit_cast
| | | |       `-ImplicitCastExpr 0xe37778 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |         `-DeclRefExpr 0xe37758 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe24300 '__m' 'std::memory_order':'std::memory_order'
| | | `-AlwaysInlineAttr 0xe24440 <line:45:54> always_inline
| | |-CXXMethodDecl 0xe27580 <col:32, line:283:5> line:274:5 used clear 'void (std::memory_order) volatile noexcept' inline
| | | |-ParmVarDecl 0xe244a8 <col:11, col:30> col:24 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe28148 <col:30> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CompoundStmt 0xe38288 <line:275:5, line:283:5>
| | | | |-DeclStmt 0xe37a58 <line:276:7, line:277:29>
| | | | | `-VarDecl 0xe378d0 <line:276:7, line:277:10> line:276:20 used __b 'std::memory_order':'std::memory_order' cinit
| | | | |   |-CXXOperatorCallExpr 0xe37a20 <line:277:4, col:10> 'std::memory_order':'std::memory_order' '&'
| | | | |   | |-ImplicitCastExpr 0xe37a08 <col:8> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | |   | | `-DeclRefExpr 0xe379e8 <col:8> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | |   | |-ImplicitCastExpr 0xe379d0 <col:4> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |   | | `-DeclRefExpr 0xe37990 <col:4> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe244a8 '__m' 'std::memory_order':'std::memory_order'
| | | | |   | `-DeclRefExpr 0xe379b0 <col:10> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | |   `-UnusedAttr 0xe37938 <line:276:40> unused
| | | | |-DoStmt 0xe37c80 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | |-CompoundStmt 0xe37c58 <col:6, col:42>
| | | | | | `-IfStmt 0xe37c38 <line:493:3, line:494:27>
| | | | | |   |-BinaryOperator 0xe37bc0 <line:493:7, col:54> 'bool' '&&'
| | | | | |   | |-CallExpr 0xe37aa8 <col:7, col:39> 'bool'
| | | | | |   | | `-ImplicitCastExpr 0xe37a90 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | |   | |   `-DeclRefExpr 0xe37a70 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | |   | `-UnaryOperator 0xe37ba8 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | |   |   `-CXXFunctionalCastExpr 0xe37b80 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | |   |     `-BinaryOperator 0xe37b60 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:278:24, col:31> 'bool' '!='
| | | | | |   |       |-ImplicitCastExpr 0xe37b30 <col:24> 'int' <IntegralCast>
| | | | | |   |       | `-ImplicitCastExpr 0xe37b18 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   |       |   `-DeclRefExpr 0xe37ad8 <col:24> 'std::memory_order':'std::memory_order' lvalue Var 0xe378d0 '__b' 'std::memory_order':'std::memory_order'
| | | | | |   |       `-ImplicitCastExpr 0xe37b48 <col:31> 'int' <IntegralCast>
| | | | | |   |         `-DeclRefExpr 0xe37af8 <col:31> 'std::memory_order' EnumConstant 0xe1e980 'memory_order_consume' 'std::memory_order'
| | | | | |   `-CallExpr 0xe37c18 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | |     `-ImplicitCastExpr 0xe37c00 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | |       `-DeclRefExpr 0xe37be0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | `-CXXBoolLiteralExpr 0xe37c70 <line:531:51> 'bool' false
| | | | |-DoStmt 0xe37eb0 <col:3, col:56>
| | | | | |-CompoundStmt 0xe37e88 <col:6, col:42>
| | | | | | `-IfStmt 0xe37e68 <line:493:3, line:494:27>
| | | | | |   |-BinaryOperator 0xe37df0 <line:493:7, col:54> 'bool' '&&'
| | | | | |   | |-CallExpr 0xe37cd8 <col:7, col:39> 'bool'
| | | | | |   | | `-ImplicitCastExpr 0xe37cc0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | |   | |   `-DeclRefExpr 0xe37ca0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | |   | `-UnaryOperator 0xe37dd8 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | |   |   `-CXXFunctionalCastExpr 0xe37db0 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | |   |     `-BinaryOperator 0xe37d90 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:279:24, col:31> 'bool' '!='
| | | | | |   |       |-ImplicitCastExpr 0xe37d60 <col:24> 'int' <IntegralCast>
| | | | | |   |       | `-ImplicitCastExpr 0xe37d48 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   |       |   `-DeclRefExpr 0xe37d08 <col:24> 'std::memory_order':'std::memory_order' lvalue Var 0xe378d0 '__b' 'std::memory_order':'std::memory_order'
| | | | | |   |       `-ImplicitCastExpr 0xe37d78 <col:31> 'int' <IntegralCast>
| | | | | |   |         `-DeclRefExpr 0xe37d28 <col:31> 'std::memory_order' EnumConstant 0xe1e9d0 'memory_order_acquire' 'std::memory_order'
| | | | | |   `-CallExpr 0xe37e48 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | |     `-ImplicitCastExpr 0xe37e30 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | |       `-DeclRefExpr 0xe37e10 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | `-CXXBoolLiteralExpr 0xe37ea0 <line:531:51> 'bool' false
| | | | |-DoStmt 0xe380e0 <col:3, col:56>
| | | | | |-CompoundStmt 0xe380b8 <col:6, col:42>
| | | | | | `-IfStmt 0xe38098 <line:493:3, line:494:27>
| | | | | |   |-BinaryOperator 0xe38020 <line:493:7, col:54> 'bool' '&&'
| | | | | |   | |-CallExpr 0xe37f08 <col:7, col:39> 'bool'
| | | | | |   | | `-ImplicitCastExpr 0xe37ef0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | |   | |   `-DeclRefExpr 0xe37ed0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | |   | `-UnaryOperator 0xe38008 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | |   |   `-CXXFunctionalCastExpr 0xe37fe0 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | |   |     `-BinaryOperator 0xe37fc0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:280:24, col:31> 'bool' '!='
| | | | | |   |       |-ImplicitCastExpr 0xe37f90 <col:24> 'int' <IntegralCast>
| | | | | |   |       | `-ImplicitCastExpr 0xe37f78 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   |       |   `-DeclRefExpr 0xe37f38 <col:24> 'std::memory_order':'std::memory_order' lvalue Var 0xe378d0 '__b' 'std::memory_order':'std::memory_order'
| | | | | |   |       `-ImplicitCastExpr 0xe37fa8 <col:31> 'int' <IntegralCast>
| | | | | |   |         `-DeclRefExpr 0xe37f58 <col:31> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | |   `-CallExpr 0xe38078 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | |     `-ImplicitCastExpr 0xe38060 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | |       `-DeclRefExpr 0xe38040 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | `-CXXBoolLiteralExpr 0xe380d0 <line:531:51> 'bool' false
| | | | `-CallExpr 0xe38240 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:282:7, col:38> 'void'
| | | |   |-ImplicitCastExpr 0xe38228 <col:7> 'void (*)(volatile void *, int) noexcept' <BuiltinFnToFnPtr>
| | | |   | `-DeclRefExpr 0xe38100 <col:7> '<builtin fn type>' Function 0xe374a8 '__atomic_clear' 'void (volatile void *, int) noexcept'
| | | |   |-ImplicitCastExpr 0xe38270 <col:23, col:24> 'volatile void *' <BitCast>
| | | |   | `-UnaryOperator 0xe38180 <col:23, col:24> 'volatile std::__atomic_flag_data_type *' prefix '&' cannot overflow
| | | |   |   `-MemberExpr 0xe38150 <col:24> 'volatile std::__atomic_flag_data_type':'volatile bool' lvalue ->_M_i 0xe23330
| | | |   |     `-ImplicitCastExpr 0xe38130 <col:24> 'std::__atomic_flag_base *' <UncheckedDerivedToBase (__atomic_flag_base)>
| | | |   |       `-CXXThisExpr 0xe38120 <col:24> 'volatile std::atomic_flag *' implicit this
| | | |   `-CXXFunctionalCastExpr 0xe38200 <col:30, col:37> 'int' functional cast to int <NoOp>
| | | |     `-ImplicitCastExpr 0xe381e8 <col:34> 'int' <IntegralCast> part_of_explicit_cast
| | | |       `-ImplicitCastExpr 0xe381d0 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |         `-DeclRefExpr 0xe381b0 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe244a8 '__m' 'std::memory_order':'std::memory_order'
| | | `-AlwaysInlineAttr 0xe27628 <line:45:54> always_inline
| | |-AccessSpecDecl 0xe27690 <line:285:3, col:10> col:3 private
| | `-CXXMethodDecl 0xe277b8 <line:286:5, line:288:59> line:287:5 used constexpr _S_init 'std::__atomic_flag_data_type (bool)' static
| |   |-ParmVarDecl 0xe276c8 <col:13, col:18> col:18 used __i 'bool'
| |   `-CompoundStmt 0xe38390 <line:288:5, col:59>
| |     `-ReturnStmt 0xe38380 <col:7, col:56>
| |       `-ImplicitCastExpr 0xe38368 <col:14, col:56> 'bool' <IntegralToBoolean>
| |         `-ConditionalOperator 0xe38338 <col:14, col:56> 'int'
| |           |-ImplicitCastExpr 0xe38320 <col:14> 'bool' <LValueToRValue>
| |           | `-DeclRefExpr 0xe382c0 <col:14> 'bool' lvalue ParmVar 0xe276c8 '__i' 'bool'
| |           |-IntegerLiteral 0xe382e0 <<built-in>:330:43> 'int' 1
| |           `-IntegerLiteral 0xe38300 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:288:56> 'int' 0
| |-ClassTemplateDecl 0xe384d0 prev 0xe227e0 <line:316:3, line:682:5> line:317:12 __atomic_base
| | |-TemplateTypeParmDecl 0xe383a8 <line:316:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | |-CXXRecordDecl 0xe38440 prev 0xe22750 <line:317:5, line:682:5> line:317:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists
| | | | |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant non_trivial user_declared
| | | |-CXXRecordDecl 0xe38590 <col:5, col:12> col:12 implicit referenced struct __atomic_base
| | | |-TypeAliasDecl 0xe38630 <line:319:7, col:26> col:13 referenced value_type '_ITp'
| | | | `-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |-TypeAliasDecl 0xe386c0 <line:320:7, col:31> col:13 difference_type 'std::__atomic_base::value_type':'_ITp'
| | | | `-TypedefType 0xe38690 'std::__atomic_base::value_type' sugar dependent
| | | |   |-TypeAlias 0xe38630 'value_type'
| | | |   `-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |-AccessSpecDecl 0xe38720 <line:322:5, col:12> col:5 private
| | | |-TypedefDecl 0xe38758 <line:323:7, col:21> col:21 referenced __int_type '_ITp'
| | | | `-TemplateTypeParmType 0xe38400 '_ITp' dependent depth 0 index 0
| | | |   `-TemplateTypeParm 0xe383a8 '_ITp'
| | | |-VarDecl 0xe387c8 <line:325:7, line:326:60> line:325:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | `-ImplicitCastExpr 0xe38940 <line:326:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xe38910 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xe38890 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xe38840 <col:2, col:13> 'unsigned long' sizeof '_ITp'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xe38870 <col:17, col:29> 'unsigned long' alignof '_ITp'
| | | |     |-UnaryExprOrTypeTraitExpr 0xe388c0 <col:33, col:44> 'unsigned long' sizeof '_ITp'
| | | |     `-UnaryExprOrTypeTraitExpr 0xe388f0 <col:48, col:60> 'unsigned long' alignof '_ITp'
| | | |-FieldDecl 0xe389f0 <line:328:29, col:40> col:40 referenced _M_i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-AlignedAttr 0xe38a40 <col:7> alignas
| | | |   `-DeclRefExpr 0xe389a0 <col:15> 'const int' lvalue Var 0xe387c8 '_S_alignment' 'const int'
| | | |-AccessSpecDecl 0xe38aa0 <line:330:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xe38b38 <line:331:7, col:40> col:7 __atomic_base<_IntTp> 'void () noexcept' default
| | | |-CXXDestructorDecl 0xe38c30 <line:332:7, col:41> col:7 ~__atomic_base<_IntTp> 'void () noexcept' default
| | | |-CXXConstructorDecl 0xe38dd8 <line:333:7, col:50> col:7 __atomic_base<_IntTp> 'void (const __atomic_base<_IntTp> &)' delete
| | | | `-ParmVarDecl 0xe38d18 <col:21, col:40> col:41 'const __atomic_base<_IntTp> &'
| | | |-CXXMethodDecl 0xe344c0 <line:334:7, col:61> col:22 operator= '__atomic_base<_IntTp> &(const __atomic_base<_IntTp> &)' delete
| | | | `-ParmVarDecl 0xe38ea8 <col:32, col:51> col:52 'const __atomic_base<_IntTp> &'
| | | |-CXXMethodDecl 0xe34668 <line:335:7, col:70> col:22 operator= '__atomic_base<_IntTp> &(const __atomic_base<_IntTp> &) volatile' delete
| | | | `-ParmVarDecl 0xe34578 <col:32, col:51> col:52 'const __atomic_base<_IntTp> &'
| | | |-CXXConstructorDecl 0xe34830 <line:338:7, col:71> col:17 constexpr __atomic_base<_IntTp> 'void (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xe34730 <col:31, col:42> col:42 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-CXXCtorInitializer Field 0xe389f0 '_M_i' 'std::__atomic_base::__int_type':'_ITp'
| | | | | `-ParenListExpr 0xe42cf0 <col:63, col:67> 'NULL TYPE'
| | | | |   `-DeclRefExpr 0xe42cd0 <col:64> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe34730 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xe42d38 <col:69, col:71>
| | | |-CXXConversionDecl 0xe34980 <line:340:7, line:341:24> line:340:7 operator type-parameter-0-0 'std::__atomic_base::__int_type () const noexcept'
| | | | `-CompoundStmt 0xe42de8 <line:341:7, col:24>
| | | |   `-ReturnStmt 0xe42dd8 <col:9, col:21>
| | | |     `-CallExpr 0xe42db8 <col:16, col:21> '<dependent type>'
| | | |       `-UnresolvedMemberExpr 0xe42d58 <col:16> '<bound member function type>' lvalue
| | | |-CXXConversionDecl 0xe34af0 <line:343:7, line:344:24> line:343:7 operator type-parameter-0-0 'std::__atomic_base::__int_type () const volatile noexcept'
| | | | `-CompoundStmt 0xe42ea0 <line:344:7, col:24>
| | | |   `-ReturnStmt 0xe42e90 <col:9, col:21>
| | | |     `-CallExpr 0xe42e70 <col:16, col:21> '<dependent type>'
| | | |       `-UnresolvedMemberExpr 0xe42e10 <col:16> '<bound member function type>' lvalue
| | | |-CXXMethodDecl 0xe34c90 <line:346:7, line:351:7> line:347:7 operator= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xe34bc8 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xe42ff0 <line:348:7, line:351:7>
| | | |   |-CallExpr 0xe42f98 <line:349:2, col:11> '<dependent type>'
| | | |   | |-UnresolvedMemberExpr 0xe42f18 <col:2> '<bound member function type>' lvalue
| | | |   | `-DeclRefExpr 0xe42f78 <col:8> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe34bc8 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |   `-ReturnStmt 0xe42fe0 <line:350:2, col:9>
| | | |     `-DeclRefExpr 0xe42fc0 <col:9> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe34bc8 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |-CXXMethodDecl 0xe34e50 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xe34d58 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xe43148 <line:355:7, line:358:7>
| | | |   |-CallExpr 0xe430f0 <line:356:2, col:11> '<dependent type>'
| | | |   | |-UnresolvedMemberExpr 0xe43070 <col:2> '<bound member function type>' lvalue
| | | |   | `-DeclRefExpr 0xe430d0 <col:8> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe34d58 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |   `-ReturnStmt 0xe43138 <line:357:2, col:9>
| | | |     `-DeclRefExpr 0xe43118 <col:9> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe34d58 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |-CXXMethodDecl 0xe35020 <line:360:7, line:362:30> line:361:7 operator++ 'std::__atomic_base::__int_type (int) noexcept'
| | | | |-ParmVarDecl 0xe34f20 <col:18> col:21 'int'
| | | | `-CompoundStmt 0xe43230 <line:362:7, col:30>
| | | |   `-ReturnStmt 0xe43220 <col:9, col:27>
| | | |     `-CallExpr 0xe431f8 <col:16, col:27> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xe43178 <col:16> '<bound member function type>' lvalue
| | | |       `-IntegerLiteral 0xe431d8 <col:26> 'int' 1
| | | |-CXXMethodDecl 0xe351e0 <line:364:7, line:366:30> line:365:7 operator++ 'std::__atomic_base::__int_type (int) volatile noexcept'
| | | | |-ParmVarDecl 0xe350e0 <col:18> col:21 'int'
| | | | `-CompoundStmt 0xe43310 <line:366:7, col:30>
| | | |   `-ReturnStmt 0xe43300 <col:9, col:27>
| | | |     `-CallExpr 0xe432d8 <col:16, col:27> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xe43258 <col:16> '<bound member function type>' lvalue
| | | |       `-IntegerLiteral 0xe432b8 <col:26> 'int' 1
| | | |-CXXMethodDecl 0xe35348 <line:368:7, line:370:30> line:369:7 operator-- 'std::__atomic_base::__int_type (int) noexcept'
| | | | |-ParmVarDecl 0xe352b0 <col:18> col:21 'int'
| | | | `-CompoundStmt 0xe433f0 <line:370:7, col:30>
| | | |   `-ReturnStmt 0xe433e0 <col:9, col:27>
| | | |     `-CallExpr 0xe433b8 <col:16, col:27> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xe43338 <col:16> '<bound member function type>' lvalue
| | | |       `-IntegerLiteral 0xe43398 <col:26> 'int' 1
| | | |-CXXMethodDecl 0xe354a0 <line:372:7, line:374:30> line:373:7 operator-- 'std::__atomic_base::__int_type (int) volatile noexcept'
| | | | |-ParmVarDecl 0xe35408 <col:18> col:21 'int'
| | | | `-CompoundStmt 0xe434d0 <line:374:7, col:30>
| | | |   `-ReturnStmt 0xe434c0 <col:9, col:27>
| | | |     `-CallExpr 0xe43498 <col:16, col:27> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xe43418 <col:16> '<bound member function type>' lvalue
| | | |       `-IntegerLiteral 0xe43478 <col:26> 'int' 1
| | | |-CXXMethodDecl 0xe355e0 <line:376:7, line:378:73> line:377:7 operator++ 'std::__atomic_base::__int_type () noexcept'
| | | | `-CompoundStmt 0xe43820 <line:378:7, col:73>
| | | |   `-ReturnStmt 0xe43810 <col:9, col:70>
| | | |     `-CallExpr 0xe437d8 <col:16, col:70> '<dependent type>'
| | | |       |-DeclRefExpr 0xe43668 <col:16> '<builtin fn type>' Function 0xe43570 '__atomic_add_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe43710 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe436c8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe43698 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe43688 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | |       |-IntegerLiteral 0xe43740 <col:42> 'int' 1
| | | |       `-CXXFunctionalCastExpr 0xe437b0 <col:45, col:69> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe43798 <col:49> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe43778 <col:49> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe35710 <line:380:7, line:382:73> line:381:7 operator++ 'std::__atomic_base::__int_type () volatile noexcept'
| | | | `-CompoundStmt 0xe439f0 <line:382:7, col:73>
| | | |   `-ReturnStmt 0xe439e0 <col:9, col:70>
| | | |     `-CallExpr 0xe439a8 <col:16, col:70> '<dependent type>'
| | | |       |-DeclRefExpr 0xe43838 <col:16> '<builtin fn type>' Function 0xe43570 '__atomic_add_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe438e0 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe43898 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe43868 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe43858 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-IntegerLiteral 0xe43910 <col:42> 'int' 1
| | | |       `-CXXFunctionalCastExpr 0xe43980 <col:45, col:69> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe43968 <col:49> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe43948 <col:49> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe357e8 <line:384:7, line:386:73> line:385:7 operator-- 'std::__atomic_base::__int_type () noexcept'
| | | | `-CompoundStmt 0xe43d08 <line:386:7, col:73>
| | | |   `-ReturnStmt 0xe43cf8 <col:9, col:70>
| | | |     `-CallExpr 0xe43cc0 <col:16, col:70> '<dependent type>'
| | | |       |-DeclRefExpr 0xe43b50 <col:16> '<builtin fn type>' Function 0xe43a58 '__atomic_sub_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe43bf8 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe43bb0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe43b80 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe43b70 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | |       |-IntegerLiteral 0xe43c28 <col:42> 'int' 1
| | | |       `-CXXFunctionalCastExpr 0xe43c98 <col:45, col:69> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe43c80 <col:49> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe43c60 <col:49> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe358c0 <line:388:7, line:390:73> line:389:7 operator-- 'std::__atomic_base::__int_type () volatile noexcept'
| | | | `-CompoundStmt 0xe43ed8 <line:390:7, col:73>
| | | |   `-ReturnStmt 0xe43ec8 <col:9, col:70>
| | | |     `-CallExpr 0xe43e90 <col:16, col:70> '<dependent type>'
| | | |       |-DeclRefExpr 0xe43d20 <col:16> '<builtin fn type>' Function 0xe43a58 '__atomic_sub_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe43dc8 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe43d80 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe43d50 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe43d40 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-IntegerLiteral 0xe43df8 <col:42> 'int' 1
| | | |       `-CXXFunctionalCastExpr 0xe43e68 <col:45, col:69> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe43e50 <col:49> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe43e30 <col:49> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe35a18 <line:392:7, line:394:75> line:393:7 operator+= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xe35980 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xe440a8 <line:394:7, col:75>
| | | |   `-ReturnStmt 0xe44098 <col:9, col:72>
| | | |     `-CallExpr 0xe44060 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xe43ef0 <col:16> '<builtin fn type>' Function 0xe43570 '__atomic_add_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe43f98 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe43f50 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe43f20 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe43f10 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xe43fc8 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe35980 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xe44038 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe44020 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe44000 <col:51> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe35b68 <line:396:7, line:398:75> line:397:7 operator+= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xe35ad0 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xe44278 <line:398:7, col:75>
| | | |   `-ReturnStmt 0xe44268 <col:9, col:72>
| | | |     `-CallExpr 0xe44230 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xe440c0 <col:16> '<builtin fn type>' Function 0xe43570 '__atomic_add_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe44168 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe44120 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe440f0 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe440e0 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xe44198 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe35ad0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xe44208 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe441f0 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe441d0 <col:51> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe35cc8 <line:400:7, line:402:75> line:401:7 operator-= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xe35c30 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xe44448 <line:402:7, col:75>
| | | |   `-ReturnStmt 0xe44438 <col:9, col:72>
| | | |     `-CallExpr 0xe44400 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xe44290 <col:16> '<builtin fn type>' Function 0xe43a58 '__atomic_sub_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe44338 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe442f0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe442c0 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe442b0 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xe44368 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe35c30 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xe443d8 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe443c0 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe443a0 <col:51> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe35e18 <line:404:7, line:406:75> line:405:7 operator-= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xe35d80 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xe46e58 <line:406:7, col:75>
| | | |   `-ReturnStmt 0xe46e48 <col:9, col:72>
| | | |     `-CallExpr 0xe46e10 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xe44460 <col:16> '<builtin fn type>' Function 0xe43a58 '__atomic_sub_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe44508 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe444c0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe44490 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe44480 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xe44538 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe35d80 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xe46de8 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe46dd0 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe44570 <col:51> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe35f78 <line:408:7, line:410:75> line:409:7 operator&= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xe35ee0 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xe47170 <line:410:7, col:75>
| | | |   `-ReturnStmt 0xe47160 <col:9, col:72>
| | | |     `-CallExpr 0xe47128 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xe46fb8 <col:16> '<builtin fn type>' Function 0xe46ec0 '__atomic_and_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe47060 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe47018 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe46fe8 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe46fd8 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xe47090 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe35ee0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xe47100 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe470e8 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe470c8 <col:51> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe360c8 <line:412:7, line:414:75> line:413:7 operator&= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xe36030 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xe47340 <line:414:7, col:75>
| | | |   `-ReturnStmt 0xe47330 <col:9, col:72>
| | | |     `-CallExpr 0xe472f8 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xe47188 <col:16> '<builtin fn type>' Function 0xe46ec0 '__atomic_and_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe47230 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe471e8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe471b8 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe471a8 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xe47260 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe36030 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xe472d0 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe472b8 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe47298 <col:51> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe36228 <line:416:7, line:418:74> line:417:7 operator|= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xe36190 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xe47658 <line:418:7, col:74>
| | | |   `-ReturnStmt 0xe47648 <col:9, col:71>
| | | |     `-CallExpr 0xe47610 <col:16, col:71> '<dependent type>'
| | | |       |-DeclRefExpr 0xe474a0 <col:16> '<builtin fn type>' Function 0xe473a8 '__atomic_or_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe47548 <col:34, col:35> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe47500 <col:34> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe474d0 <col:35> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe474c0 <col:35> '__atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xe47578 <col:41> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe36190 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xe475e8 <col:46, col:70> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe475d0 <col:50> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe475b0 <col:50> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe36378 <line:420:7, line:422:74> line:421:7 operator|= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xe362e0 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xe47828 <line:422:7, col:74>
| | | |   `-ReturnStmt 0xe47818 <col:9, col:71>
| | | |     `-CallExpr 0xe477e0 <col:16, col:71> '<dependent type>'
| | | |       |-DeclRefExpr 0xe47670 <col:16> '<builtin fn type>' Function 0xe473a8 '__atomic_or_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe47718 <col:34, col:35> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe476d0 <col:34> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe476a0 <col:35> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe47690 <col:35> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xe47748 <col:41> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe362e0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xe477b8 <col:46, col:70> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe477a0 <col:50> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe47780 <col:50> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe30410 <line:424:7, line:426:75> line:425:7 operator^= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xe36440 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xe47b40 <line:426:7, col:75>
| | | |   `-ReturnStmt 0xe47b30 <col:9, col:72>
| | | |     `-CallExpr 0xe47af8 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xe47988 <col:16> '<builtin fn type>' Function 0xe47890 '__atomic_xor_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe47a30 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe479e8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe479b8 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe479a8 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xe47a60 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe36440 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xe47ad0 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe47ab8 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe47a98 <col:51> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe30560 <line:428:7, line:430:75> line:429:7 operator^= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xe304c8 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xe47d10 <line:430:7, col:75>
| | | |   `-ReturnStmt 0xe47d00 <col:9, col:72>
| | | |     `-CallExpr 0xe47cc8 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xe47b58 <col:16> '<builtin fn type>' Function 0xe47890 '__atomic_xor_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xe47c00 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xe47bb8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | |       | `-MemberExpr 0xe47b88 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | |       |   `-CXXThisExpr 0xe47b78 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xe47c30 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe304c8 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xe47ca0 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe47c88 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe47c68 <col:51> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xe30670 <line:432:7, line:438:7> line:433:7 is_lock_free 'bool () const noexcept'
| | | | `-CompoundStmt 0xe48278 <line:434:7, line:438:7>
| | | |   `-ReturnStmt 0xe48268 <line:436:2, line:437:45>
| | | |     `-CallExpr 0xe48220 <line:436:9, line:437:45> 'bool'
| | | |       |-ImplicitCastExpr 0xe48208 <line:436:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
| | | |       | `-DeclRefExpr 0xe48028 <col:9> '<builtin fn type>' Function 0xe47e28 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
| | | |       |-UnaryExprOrTypeTraitExpr 0xe480f0 <col:31, col:42> 'unsigned long' sizeof
| | | |       | `-ParenExpr 0xe480d0 <col:37, col:42> 'const std::__atomic_base::__int_type':'const _ITp' lvalue
| | | |       |   `-MemberExpr 0xe480a0 <col:38> 'const std::__atomic_base::__int_type':'const _ITp' lvalue ->_M_i 0xe389f0 non_odr_use_unevaluated
| | | |       |     `-CXXThisExpr 0xe48090 <col:38> 'const __atomic_base<_IntTp> *' implicit this
| | | |       `-ImplicitCastExpr 0xe48250 <line:437:6, col:44> 'const volatile void *' <NoOp>
| | | |         `-CXXReinterpretCastExpr 0xe48178 <col:6, col:44> 'void *' reinterpret_cast<void *> <IntegralToPointer>
| | | |           `-UnaryOperator 0xe48148 <col:31, col:32> 'int' prefix '-'
| | | |             `-ImplicitCastExpr 0xe48130 <col:32> 'int' <LValueToRValue>
| | | |               `-DeclRefExpr 0xe48110 <col:32> 'const int' lvalue Var 0xe387c8 '_S_alignment' 'const int'
| | | |-CXXMethodDecl 0xe30790 <line:440:7, line:446:7> line:441:7 is_lock_free 'bool () const volatile noexcept'
| | | | `-CompoundStmt 0xe48480 <line:442:7, line:446:7>
| | | |   `-ReturnStmt 0xe48470 <line:444:2, line:445:45>
| | | |     `-CallExpr 0xe48428 <line:444:9, line:445:45> 'bool'
| | | |       |-ImplicitCastExpr 0xe48410 <line:444:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
| | | |       | `-DeclRefExpr 0xe48290 <col:9> '<builtin fn type>' Function 0xe47e28 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
| | | |       |-UnaryExprOrTypeTraitExpr 0xe48358 <col:31, col:42> 'unsigned long' sizeof
| | | |       | `-ParenExpr 0xe48338 <col:37, col:42> 'const volatile std::__atomic_base::__int_type':'const volatile _ITp' lvalue
| | | |       |   `-MemberExpr 0xe48308 <col:38> 'const volatile std::__atomic_base::__int_type':'const volatile _ITp' lvalue ->_M_i 0xe389f0 non_odr_use_unevaluated
| | | |       |     `-CXXThisExpr 0xe482f8 <col:38> 'const volatile __atomic_base<_IntTp> *' implicit this
| | | |       `-ImplicitCastExpr 0xe48458 <line:445:6, col:44> 'const volatile void *' <NoOp>
| | | |         `-CXXReinterpretCastExpr 0xe483e0 <col:6, col:44> 'void *' reinterpret_cast<void *> <IntegralToPointer>
| | | |           `-UnaryOperator 0xe483b0 <col:31, col:32> 'int' prefix '-'
| | | |             `-ImplicitCastExpr 0xe48398 <col:32> 'int' <LValueToRValue>
| | | |               `-DeclRefExpr 0xe48378 <col:32> 'const int' lvalue Var 0xe387c8 '_S_alignment' 'const int'
| | | |-CXXMethodDecl 0xe309e0 <line:45:32, line:458:7> line:449:7 store 'void (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe30850 <col:13, col:24> col:24 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe308c8 <col:29, col:48> col:42 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42a50 <col:48> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe491a8 <line:450:7, line:458:7>
| | | | | |-DeclStmt 0xe48630 <line:451:2, line:452:31>
| | | | | | `-VarDecl 0xe484a8 <line:451:2, line:452:12> line:451:15 referenced __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xe485f8 <line:452:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xe485e0 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xe485c0 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xe485a8 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xe48568 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe308c8 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe48588 <col:12> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xe48510 <line:451:35> unused
| | | | | |-DoStmt 0xe48858 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xe48830 <col:6, col:42>
| | | | | | | `-IfStmt 0xe48810 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe48798 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe48680 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe48668 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe48648 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe48780 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe48758 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe48738 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:453:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe48708 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe486f0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe486b0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe484a8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe48720 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe486d0 <col:26> 'std::memory_order' EnumConstant 0xe1e9d0 'memory_order_acquire' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe487f0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe487d8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe487b8 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe48848 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe48a88 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe48a60 <col:6, col:42>
| | | | | | | `-IfStmt 0xe48a40 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe489c8 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe488b0 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe48898 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe48878 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe489b0 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe48988 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe48968 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:454:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe48938 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe48920 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe488e0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe484a8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe48950 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe48900 <col:26> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe48a20 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe48a08 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe489e8 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe48a78 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe48cb8 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe48c90 <col:6, col:42>
| | | | | | | `-IfStmt 0xe48c70 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe48bf8 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe48ae0 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe48ac8 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe48aa8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe48be0 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe48bb8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe48b98 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:455:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe48b68 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe48b50 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe48b10 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe484a8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe48b80 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe48b30 <col:26> 'std::memory_order' EnumConstant 0xe1e980 'memory_order_consume' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe48c50 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe48c38 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe48c18 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe48ca8 <line:531:51> 'bool' false
| | | | | `-CallExpr 0xe49170 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:457:2, col:39> '<dependent type>'
| | | | |   |-DeclRefExpr 0xe48fe8 <col:2> '<builtin fn type>' Function 0xe48d28 '__atomic_store_n' 'void (...)'
| | | | |   |-CXXOperatorCallExpr 0xe49090 <col:19, col:20> '<dependent type>' '&'
| | | | |   | |-UnresolvedLookupExpr 0xe49048 <col:19> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |   | `-MemberExpr 0xe49018 <col:20> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | | |   |   `-CXXThisExpr 0xe49008 <col:20> '__atomic_base<_IntTp> *' implicit this
| | | | |   |-DeclRefExpr 0xe490c0 <col:26> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe30850 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |   `-CXXFunctionalCastExpr 0xe49148 <col:31, col:38> 'int' functional cast to int <NoOp>
| | | | |     `-ImplicitCastExpr 0xe49130 <col:35> 'int' <IntegralCast> part_of_explicit_cast
| | | | |       `-ImplicitCastExpr 0xe49118 <col:35> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |         `-DeclRefExpr 0xe490f8 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe308c8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe30a90 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe30c90 <col:32, line:471:7> line:461:7 store 'void (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe30af8 <col:13, col:24> col:24 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe30b70 <line:462:6, col:25> col:19 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42a70 <col:25> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe49be0 <line:463:7, line:471:7>
| | | | | |-DeclStmt 0xe49378 <line:464:2, line:465:31>
| | | | | | `-VarDecl 0xe491f0 <line:464:2, line:465:12> line:464:15 referenced __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xe49340 <line:465:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xe49328 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xe49308 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xe492f0 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xe492b0 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe30b70 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe492d0 <col:12> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xe49258 <line:464:35> unused
| | | | | |-DoStmt 0xe495a0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xe49578 <col:6, col:42>
| | | | | | | `-IfStmt 0xe49558 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe494e0 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe493c8 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe493b0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe49390 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe494c8 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe494a0 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe49480 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:466:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe49450 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe49438 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe493f8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe491f0 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe49468 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe49418 <col:26> 'std::memory_order' EnumConstant 0xe1e9d0 'memory_order_acquire' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe49538 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe49520 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe49500 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe49590 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe497d0 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe497a8 <col:6, col:42>
| | | | | | | `-IfStmt 0xe49788 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe49710 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe495f8 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe495e0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe495c0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe496f8 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe496d0 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe496b0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:467:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe49680 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe49668 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe49628 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe491f0 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe49698 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe49648 <col:26> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe49768 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe49750 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe49730 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe497c0 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe49a00 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe499d8 <col:6, col:42>
| | | | | | | `-IfStmt 0xe499b8 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe49940 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe49828 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe49810 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe497f0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe49928 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe49900 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe498e0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:468:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe498b0 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe49898 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe49858 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe491f0 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe498c8 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe49878 <col:26> 'std::memory_order' EnumConstant 0xe1e980 'memory_order_consume' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe49998 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe49980 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe49960 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe499f0 <line:531:51> 'bool' false
| | | | | `-CallExpr 0xe49ba8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:470:2, col:39> '<dependent type>'
| | | | |   |-DeclRefExpr 0xe49a20 <col:2> '<builtin fn type>' Function 0xe48d28 '__atomic_store_n' 'void (...)'
| | | | |   |-CXXOperatorCallExpr 0xe49ac8 <col:19, col:20> '<dependent type>' '&'
| | | | |   | |-UnresolvedLookupExpr 0xe49a80 <col:19> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |   | `-MemberExpr 0xe49a50 <col:20> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | | |   |   `-CXXThisExpr 0xe49a40 <col:20> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |   |-DeclRefExpr 0xe49af8 <col:26> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe30af8 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |   `-CXXFunctionalCastExpr 0xe49b80 <col:31, col:38> 'int' functional cast to int <NoOp>
| | | | |     `-ImplicitCastExpr 0xe49b68 <col:35> 'int' <IntegralCast> part_of_explicit_cast
| | | | |       `-ImplicitCastExpr 0xe49b50 <col:35> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |         `-DeclRefExpr 0xe49b30 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe30b70 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe30d40 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe30eb0 <col:32, line:482:7> line:474:7 load 'std::__atomic_base::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xe30db8 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42a90 <col:31> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe4a518 <line:475:7, line:482:7>
| | | | | |-DeclStmt 0xe49db0 <line:476:2, line:477:31>
| | | | | | `-VarDecl 0xe49c28 <line:476:2, line:477:12> line:476:15 referenced __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xe49d78 <line:477:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xe49d60 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xe49d40 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xe49d28 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xe49ce8 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe30db8 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe49d08 <col:12> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xe49c90 <line:476:35> unused
| | | | | |-DoStmt 0xe49fd8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xe49fb0 <col:6, col:42>
| | | | | | | `-IfStmt 0xe49f90 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe49f18 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe49e00 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe49de8 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe49dc8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe49f00 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe49ed8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe49eb8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:478:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe49e88 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe49e70 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe49e30 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe49c28 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe49ea0 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe49e50 <col:26> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe49f70 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe49f58 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe49f38 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe49fc8 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe4a208 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe4a1e0 <col:6, col:42>
| | | | | | | `-IfStmt 0xe4a1c0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe4a148 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe4a030 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe4a018 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe49ff8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe4a130 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe4a108 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe4a0e8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:479:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe4a0b8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe4a0a0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe4a060 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe49c28 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe4a0d0 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4a080 <col:26> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe4a1a0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe4a188 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4a168 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4a1f8 <line:531:51> 'bool' false
| | | | | `-ReturnStmt 0xe4a508 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:481:2, col:40>
| | | | |   `-CallExpr 0xe4a4d8 <col:9, col:40> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe4a370 <col:9> '<builtin fn type>' Function 0xe4a278 '__atomic_load_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe4a418 <col:25, col:26> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe4a3d0 <col:25> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe4a3a0 <col:26> 'const std::__atomic_base::__int_type':'const _ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe4a390 <col:26> 'const __atomic_base<_IntTp> *' implicit this
| | | | |     `-CXXFunctionalCastExpr 0xe4a4b0 <col:32, col:39> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe4a498 <col:36> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe4a480 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe4a460 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe30db8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe30f58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe310c0 <col:32, line:493:7> line:485:7 load 'std::__atomic_base::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xe30fc0 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42ab0 <col:31> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe4ad00 <line:486:7, line:493:7>
| | | | | |-DeclStmt 0xe4a6e0 <line:487:2, line:488:31>
| | | | | | `-VarDecl 0xe4a558 <line:487:2, line:488:12> line:487:15 referenced __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xe4a6a8 <line:488:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xe4a690 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xe4a670 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xe4a658 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xe4a618 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe30fc0 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4a638 <col:12> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xe4a5c0 <line:487:35> unused
| | | | | |-DoStmt 0xe4a908 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xe4a8e0 <col:6, col:42>
| | | | | | | `-IfStmt 0xe4a8c0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe4a848 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe4a730 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe4a718 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4a6f8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe4a830 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe4a808 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe4a7e8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:489:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe4a7b8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe4a7a0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe4a760 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe4a558 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe4a7d0 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4a780 <col:26> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe4a8a0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe4a888 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4a868 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4a8f8 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe4ab38 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe4ab10 <col:6, col:42>
| | | | | | | `-IfStmt 0xe4aaf0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe4aa78 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe4a960 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe4a948 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4a928 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe4aa60 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe4aa38 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe4aa18 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:490:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe4a9e8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe4a9d0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe4a990 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe4a558 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe4aa00 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4a9b0 <col:26> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe4aad0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe4aab8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4aa98 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4ab28 <line:531:51> 'bool' false
| | | | | `-ReturnStmt 0xe4acf0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:492:2, col:40>
| | | | |   `-CallExpr 0xe4acc0 <col:9, col:40> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe4ab58 <col:9> '<builtin fn type>' Function 0xe4a278 '__atomic_load_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe4ac00 <col:25, col:26> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe4abb8 <col:25> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe4ab88 <col:26> 'const volatile std::__atomic_base::__int_type':'const volatile _ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe4ab78 <col:26> 'const volatile __atomic_base<_IntTp> *' implicit this
| | | | |     `-CXXFunctionalCastExpr 0xe4ac98 <col:32, col:39> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe4ac80 <col:36> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe4ac68 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe4ac48 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe30fc0 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe31168 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe31370 <col:32, line:500:7> line:496:7 exchange 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe311e0 <col:16, col:27> col:27 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe31258 <line:497:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42ad0 <col:28> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe4da20 <line:498:7, line:500:7>
| | | | | `-ReturnStmt 0xe4da10 <line:499:2, col:49>
| | | | |   `-CallExpr 0xe4d9d8 <col:9, col:49> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe4ae78 <col:9> '<builtin fn type>' Function 0xe4ad80 '__atomic_exchange_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe4af20 <col:29, col:30> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe4aed8 <col:29> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe4aea8 <col:30> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe4ae98 <col:30> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xe4af50 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe311e0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xe4d9b0 <col:41, col:48> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe4d998 <col:45> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe4d980 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe4d960 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe31258 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe31420 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe31620 <col:32, line:508:7> line:504:7 exchange 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe31488 <col:16, col:27> col:27 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe31500 <line:505:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42af0 <col:28> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe4dc08 <line:506:7, line:508:7>
| | | | | `-ReturnStmt 0xe4dbf8 <line:507:2, col:49>
| | | | |   `-CallExpr 0xe4dbc0 <col:9, col:49> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe4da38 <col:9> '<builtin fn type>' Function 0xe4ad80 '__atomic_exchange_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe4dae0 <col:29, col:30> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe4da98 <col:29> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe4da68 <col:30> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe4da58 <col:30> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xe4db10 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe31488 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xe4db98 <col:41, col:48> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe4db80 <col:45> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe4db68 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe4db48 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe31500 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe316d0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe31a30 <col:32, line:524:7> line:511:7 compare_exchange_weak 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe31778 <col:29, col:41> col:41 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xe317f0 <col:47, col:58> col:58 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe31868 <line:512:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe318e0 <col:27, col:40> col:40 referenced __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xe4eaa0 <line:513:7, line:524:7>
| | | | | |-DeclStmt 0xe4ddb8 <line:514:2, line:515:32>
| | | | | | `-VarDecl 0xe4dc30 <line:514:2, line:515:13> line:514:15 referenced __b2 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xe4dd80 <line:515:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xe4dd68 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xe4dd48 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xe4dd30 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xe4dcf0 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe318e0 '__m2' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4dd10 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xe4dc98 <line:514:36> unused
| | | | | |-DeclStmt 0xe4df68 <line:516:2, line:517:32>
| | | | | | `-VarDecl 0xe4dde0 <line:516:2, line:517:13> line:516:15 referenced __b1 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xe4df30 <line:517:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xe4df18 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xe4def8 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xe4dee0 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xe4dea0 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe31868 '__m1' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4dec0 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xe4de48 <line:516:36> unused
| | | | | |-DoStmt 0xe4e190 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xe4e168 <col:6, col:42>
| | | | | | | `-IfStmt 0xe4e148 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe4e0d0 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe4dfb8 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe4dfa0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4df80 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe4e0b8 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe4e090 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe4e070 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:518:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe4e040 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe4e028 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe4dfe8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe4dc30 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe4e058 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4e008 <col:27> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe4e128 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe4e110 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4e0f0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4e180 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe4e3c0 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe4e398 <col:6, col:42>
| | | | | | | `-IfStmt 0xe4e378 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe4e300 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe4e1e8 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe4e1d0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4e1b0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe4e2e8 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe4e2c0 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe4e2a0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:519:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe4e270 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe4e258 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe4e218 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe4dc30 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe4e288 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4e238 <col:27> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe4e358 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe4e340 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4e320 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4e3b0 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe4e608 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe4e5e0 <col:6, col:42>
| | | | | | | `-IfStmt 0xe4e5c0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe4e548 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe4e418 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe4e400 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4e3e0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe4e530 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe4e508 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe4e4e8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:520:19, col:27> 'bool' '<='
| | | | | | |   |       |-ImplicitCastExpr 0xe4e4b8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe4e488 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe4e448 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe4dc30 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe4e4d0 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-ImplicitCastExpr 0xe4e4a0 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |           `-DeclRefExpr 0xe4e468 <col:27> 'std::memory_order':'std::memory_order' lvalue Var 0xe4dde0 '__b1' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xe4e5a0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe4e588 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4e568 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4e5f8 <line:531:51> 'bool' false
| | | | | `-ReturnStmt 0xe4ea90 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:522:2, line:523:29>
| | | | |   `-CallExpr 0xe4ea40 <line:522:9, line:523:29> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe4e770 <line:522:9> '<builtin fn type>' Function 0xe4e678 '__atomic_compare_exchange_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe4e818 <col:37, col:38> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe4e7d0 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe4e7a0 <col:38> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe4e790 <col:38> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-CXXOperatorCallExpr 0xe4e8b0 <col:44, col:45> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe4e868 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-DeclRefExpr 0xe4e848 <col:45> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe31778 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xe4e8e0 <col:51> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe317f0 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-IntegerLiteral 0xe4e900 <col:57> 'int' 1
| | | | |     |-CXXFunctionalCastExpr 0xe4e988 <line:523:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xe4e970 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xe4e958 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xe4e938 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe31868 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     `-CXXFunctionalCastExpr 0xe4ea18 <col:20, col:28> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe4ea00 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe4e9e8 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe4e9c8 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe318e0 '__m2' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe31af0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe31e10 <col:32, line:541:7> line:527:7 compare_exchange_weak 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe31b58 <col:29, col:41> col:41 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xe31bd0 <col:47, col:58> col:58 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe31c48 <line:528:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe31cc0 <line:529:8, col:21> col:21 referenced __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xe4f818 <line:530:7, line:541:7>
| | | | | |-DeclStmt 0xe4ec78 <line:531:2, line:532:32>
| | | | | | `-VarDecl 0xe4eaf0 <line:531:2, line:532:13> line:531:15 referenced __b2 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xe4ec40 <line:532:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xe4ec28 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xe4ec08 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xe4ebf0 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xe4ebb0 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe31cc0 '__m2' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4ebd0 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xe4eb58 <line:531:36> unused
| | | | | |-DeclStmt 0xe4ee28 <line:533:2, line:534:32>
| | | | | | `-VarDecl 0xe4eca0 <line:533:2, line:534:13> line:533:15 referenced __b1 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xe4edf0 <line:534:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xe4edd8 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xe4edb8 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xe4eda0 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xe4ed60 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe31c48 '__m1' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4ed80 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xe4ed08 <line:533:36> unused
| | | | | |-DoStmt 0xe4f050 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xe4f028 <col:6, col:42>
| | | | | | | `-IfStmt 0xe4f008 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe4ef90 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe4ee78 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe4ee60 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4ee40 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe4ef78 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe4ef50 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe4ef30 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:535:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe4ef00 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe4eee8 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe4eea8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe4eaf0 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe4ef18 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4eec8 <col:27> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe4efe8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe4efd0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4efb0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4f040 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe4f280 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe4f258 <col:6, col:42>
| | | | | | | `-IfStmt 0xe4f238 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe4f1c0 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe4f0a8 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe4f090 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4f070 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe4f1a8 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe4f180 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe4f160 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:536:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe4f130 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe4f118 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe4f0d8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe4eaf0 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe4f148 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe4f0f8 <col:27> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe4f218 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe4f200 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4f1e0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4f270 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe4f4c8 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe4f4a0 <col:6, col:42>
| | | | | | | `-IfStmt 0xe4f480 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe4f408 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe4f2d8 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe4f2c0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe4f2a0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe4f3f0 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe4f3c8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe4f3a8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:537:19, col:27> 'bool' '<='
| | | | | | |   |       |-ImplicitCastExpr 0xe4f378 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe4f348 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe4f308 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe4eaf0 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe4f390 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-ImplicitCastExpr 0xe4f360 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |           `-DeclRefExpr 0xe4f328 <col:27> 'std::memory_order':'std::memory_order' lvalue Var 0xe4eca0 '__b1' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xe4f460 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe4f448 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe4f428 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe4f4b8 <line:531:51> 'bool' false
| | | | | `-ReturnStmt 0xe4f808 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:539:2, line:540:29>
| | | | |   `-CallExpr 0xe4f7b8 <line:539:9, line:540:29> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe4f4e8 <line:539:9> '<builtin fn type>' Function 0xe4e678 '__atomic_compare_exchange_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe4f590 <col:37, col:38> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe4f548 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe4f518 <col:38> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe4f508 <col:38> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-CXXOperatorCallExpr 0xe4f628 <col:44, col:45> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe4f5e0 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-DeclRefExpr 0xe4f5c0 <col:45> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe31b58 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xe4f658 <col:51> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe31bd0 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-IntegerLiteral 0xe4f678 <col:57> 'int' 1
| | | | |     |-CXXFunctionalCastExpr 0xe4f700 <line:540:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xe4f6e8 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xe4f6d0 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xe4f6b0 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe31c48 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     `-CXXFunctionalCastExpr 0xe4f790 <col:20, col:28> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe4f778 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe4f760 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe4f740 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe31cc0 '__m2' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe31ed0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe32160 <col:32, line:549:7> line:544:7 compare_exchange_weak 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe31f48 <col:29, col:41> col:41 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xe31fc0 <col:47, col:58> col:58 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe32038 <line:545:8, col:27> col:21 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42b10 <col:27> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe4faa0 <line:546:7, line:549:7>
| | | | | `-ReturnStmt 0xe4fa90 <line:547:2, line:548:38>
| | | | |   `-CallExpr 0xe4fa50 <line:547:9, line:548:38> '<dependent type>'
| | | | |     |-UnresolvedMemberExpr 0xe4f868 <line:547:9> '<bound member function type>' lvalue
| | | | |     |-DeclRefExpr 0xe4f8d8 <col:31> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe31f48 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xe4f8f8 <col:37> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe31fc0 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-DeclRefExpr 0xe4f918 <col:43> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe32038 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xe4fa10 <line:548:10, col:37> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xe4f9f8 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xe4f9d8 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xe4fa38 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xe4f9b8 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe32038 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe32218 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe3b870 <col:32, line:557:7> line:552:7 compare_exchange_weak 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe32290 <col:29, col:41> col:41 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xe32308 <col:47, col:58> col:58 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe3b740 <line:553:6, col:25> col:19 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42b30 <col:25> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe4fcc8 <line:554:7, line:557:7>
| | | | | `-ReturnStmt 0xe4fcb8 <line:555:2, line:556:38>
| | | | |   `-CallExpr 0xe4fc78 <line:555:9, line:556:38> '<dependent type>'
| | | | |     |-UnresolvedMemberExpr 0xe4fac8 <line:555:9> '<bound member function type>' lvalue
| | | | |     |-DeclRefExpr 0xe4fb38 <col:31> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe32290 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xe4fb58 <col:37> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe32308 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-DeclRefExpr 0xe4fb78 <col:43> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3b740 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xe4fc38 <line:556:10, col:37> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xe4fc20 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xe4fc00 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xe4fc60 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xe4fbe0 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3b740 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe3b928 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe3bbb8 <col:32, line:573:7> line:560:7 compare_exchange_strong 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe3b9a0 <col:31, col:43> col:43 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xe3ba18 <col:49, col:60> col:60 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe3ba90 <line:561:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe3bb08 <col:29, col:42> col:42 referenced __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xe50a18 <line:562:7, line:573:7>
| | | | | |-DeclStmt 0xe4fe78 <line:563:2, line:564:32>
| | | | | | `-VarDecl 0xe4fcf0 <line:563:2, line:564:13> line:563:15 referenced __b2 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xe4fe40 <line:564:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xe4fe28 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xe4fe08 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xe4fdf0 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xe4fdb0 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3bb08 '__m2' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4fdd0 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xe4fd58 <line:563:36> unused
| | | | | |-DeclStmt 0xe50028 <line:565:2, line:566:32>
| | | | | | `-VarDecl 0xe4fea0 <line:565:2, line:566:13> line:565:15 referenced __b1 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xe4fff0 <line:566:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xe4ffd8 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xe4ffb8 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xe4ffa0 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xe4ff60 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3ba90 '__m1' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe4ff80 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xe4ff08 <line:565:36> unused
| | | | | |-DoStmt 0xe50250 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xe50228 <col:6, col:42>
| | | | | | | `-IfStmt 0xe50208 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe50190 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe50078 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe50060 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe50040 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe50178 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe50150 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe50130 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:567:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe50100 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe500e8 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe500a8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe4fcf0 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe50118 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe500c8 <col:27> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe501e8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe501d0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe501b0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe50240 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe50480 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe50458 <col:6, col:42>
| | | | | | | `-IfStmt 0xe50438 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe503c0 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe502a8 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe50290 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe50270 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe503a8 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe50380 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe50360 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:568:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe50330 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe50318 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe502d8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe4fcf0 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe50348 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe502f8 <col:27> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe50418 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe50400 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe503e0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe50470 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe506c8 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe506a0 <col:6, col:42>
| | | | | | | `-IfStmt 0xe50680 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe50608 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe504d8 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe504c0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe504a0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe505f0 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe505c8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe505a8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:569:19, col:27> 'bool' '<='
| | | | | | |   |       |-ImplicitCastExpr 0xe50578 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe50548 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe50508 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe4fcf0 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe50590 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-ImplicitCastExpr 0xe50560 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |           `-DeclRefExpr 0xe50528 <col:27> 'std::memory_order':'std::memory_order' lvalue Var 0xe4fea0 '__b1' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xe50660 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe50648 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe50628 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe506b8 <line:531:51> 'bool' false
| | | | | `-ReturnStmt 0xe50a08 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:571:2, line:572:29>
| | | | |   `-CallExpr 0xe509b8 <line:571:9, line:572:29> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe506e8 <line:571:9> '<builtin fn type>' Function 0xe4e678 '__atomic_compare_exchange_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe50790 <col:37, col:38> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe50748 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe50718 <col:38> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe50708 <col:38> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-CXXOperatorCallExpr 0xe50828 <col:44, col:45> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe507e0 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-DeclRefExpr 0xe507c0 <col:45> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3b9a0 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xe50858 <col:51> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3ba18 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-IntegerLiteral 0xe50878 <col:57> 'int' 0
| | | | |     |-CXXFunctionalCastExpr 0xe50900 <line:572:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xe508e8 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xe508d0 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xe508b0 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3ba90 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     `-CXXFunctionalCastExpr 0xe50990 <col:20, col:28> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe50978 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe50960 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe50940 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3bb08 '__m2' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe3bc78 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe3bef8 <col:32, line:591:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe3bce0 <col:31, col:43> col:43 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xe3bd58 <col:49, col:60> col:60 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe3bdd0 <line:577:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe3be48 <line:578:10, col:23> col:23 referenced __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xe51790 <line:579:7, line:591:7>
| | | | | |-DeclStmt 0xe50bf0 <line:580:2, line:581:32>
| | | | | | `-VarDecl 0xe50a68 <line:580:2, line:581:13> line:580:15 referenced __b2 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xe50bb8 <line:581:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xe50ba0 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xe50b80 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xe50b68 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xe50b28 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3be48 '__m2' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe50b48 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xe50ad0 <line:580:36> unused
| | | | | |-DeclStmt 0xe50da0 <line:582:2, line:583:32>
| | | | | | `-VarDecl 0xe50c18 <line:582:2, line:583:13> line:582:15 referenced __b1 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xe50d68 <line:583:6, col:13> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xe50d50 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xe50d30 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xe50d18 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xe50cd8 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3bdd0 '__m1' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xe50cf8 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xe50c80 <line:582:36> unused
| | | | | |-DoStmt 0xe50fc8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
| | | | | | |-CompoundStmt 0xe50fa0 <col:6, col:42>
| | | | | | | `-IfStmt 0xe50f80 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe50f08 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe50df0 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe50dd8 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe50db8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe50ef0 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe50ec8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe50ea8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:585:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe50e78 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe50e60 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe50e20 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe50a68 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe50e90 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe50e40 <col:27> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe50f60 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe50f48 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe50f28 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe50fb8 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe511f8 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe511d0 <col:6, col:42>
| | | | | | | `-IfStmt 0xe511b0 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe51138 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe51020 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe51008 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe50fe8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe51120 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe510f8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe510d8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:586:19, col:27> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xe510a8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe51090 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe51050 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe50a68 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe510c0 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xe51070 <col:27> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xe51190 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe51178 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe51158 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe511e8 <line:531:51> 'bool' false
| | | | | |-DoStmt 0xe51440 <col:3, col:56>
| | | | | | |-CompoundStmt 0xe51418 <col:6, col:42>
| | | | | | | `-IfStmt 0xe513f8 <line:493:3, line:494:27>
| | | | | | |   |-BinaryOperator 0xe51380 <line:493:7, col:54> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xe51250 <col:7, col:39> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xe51238 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
| | | | | | |   | |   `-DeclRefExpr 0xe51218 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xe51368 <col:44, col:54> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xe51340 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xe51320 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:587:19, col:27> 'bool' '<='
| | | | | | |   |       |-ImplicitCastExpr 0xe512f0 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xe512c0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xe51280 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe50a68 '__b2' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xe51308 <col:27> 'int' <IntegralCast>
| | | | | | |   |         `-ImplicitCastExpr 0xe512d8 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |           `-DeclRefExpr 0xe512a0 <col:27> 'std::memory_order':'std::memory_order' lvalue Var 0xe50c18 '__b1' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xe513d8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xe513c0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xe513a0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xe51430 <line:531:51> 'bool' false
| | | | | `-ReturnStmt 0xe51780 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:589:2, line:590:29>
| | | | |   `-CallExpr 0xe51730 <line:589:9, line:590:29> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe51460 <line:589:9> '<builtin fn type>' Function 0xe4e678 '__atomic_compare_exchange_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe51508 <col:37, col:38> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe514c0 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe51490 <col:38> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe51480 <col:38> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-CXXOperatorCallExpr 0xe515a0 <col:44, col:45> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe51558 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-DeclRefExpr 0xe51538 <col:45> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3bce0 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xe515d0 <col:51> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3bd58 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-IntegerLiteral 0xe515f0 <col:57> 'int' 0
| | | | |     |-CXXFunctionalCastExpr 0xe51678 <line:590:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xe51660 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xe51648 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xe51628 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3bdd0 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     `-CXXFunctionalCastExpr 0xe51708 <col:20, col:28> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe516f0 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe516d8 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe516b8 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3be48 '__m2' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe3bfb8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe3c1c8 <col:32, line:599:7> line:594:7 compare_exchange_strong 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe3c030 <col:31, col:43> col:43 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xe3c0a8 <col:49, col:60> col:60 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe3c120 <line:595:10, col:29> col:23 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42b50 <col:29> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe51fc0 <line:596:7, line:599:7>
| | | | | `-ReturnStmt 0xe51fb0 <line:597:2, line:598:40>
| | | | |   `-CallExpr 0xe51f70 <line:597:9, line:598:40> '<dependent type>'
| | | | |     |-UnresolvedMemberExpr 0xe517e0 <line:597:9> '<bound member function type>' lvalue
| | | | |     |-DeclRefExpr 0xe51850 <col:33> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3c030 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xe51870 <col:39> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3c0a8 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-DeclRefExpr 0xe51890 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3c120 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xe51f30 <line:598:12, col:39> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xe51938 <col:12> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xe51918 <col:12> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xe51f58 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xe518f8 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3c120 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe3c280 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe3c490 <col:32, line:607:7> line:602:7 compare_exchange_strong 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe3c2f8 <col:31, col:43> col:43 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xe3c370 <col:49, col:60> col:60 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe3c3e8 <line:603:4, col:23> col:17 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42b70 <col:23> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe521e8 <line:604:7, line:607:7>
| | | | | `-ReturnStmt 0xe521d8 <line:605:2, line:606:40>
| | | | |   `-CallExpr 0xe52198 <line:605:9, line:606:40> '<dependent type>'
| | | | |     |-UnresolvedMemberExpr 0xe51fe8 <line:605:9> '<bound member function type>' lvalue
| | | | |     |-DeclRefExpr 0xe52058 <col:33> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3c2f8 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xe52078 <col:39> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3c370 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-DeclRefExpr 0xe52098 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3c3e8 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xe52158 <line:606:12, col:39> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xe52140 <col:12> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xe52120 <col:12> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xe52180 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xe52100 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3c3e8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe3c548 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe3c6d8 <col:32, line:636:58> line:634:7 fetch_add 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe3c5c0 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe3c638 <line:635:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42b90 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe52518 <line:636:7, col:58>
| | | | | `-ReturnStmt 0xe52508 <col:9, col:55>
| | | | |   `-CallExpr 0xe524d0 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe52348 <col:16> '<builtin fn type>' Function 0xe52250 '__atomic_fetch_add' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe523f0 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe523a8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe52378 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe52368 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xe52420 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3c5c0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xe524a8 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe52490 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe52478 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe52458 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3c638 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe3c788 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe3c908 <col:32, line:641:58> line:639:7 fetch_add 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe3c7f0 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe3c868 <line:640:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42bb0 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe52700 <line:641:7, col:58>
| | | | | `-ReturnStmt 0xe526f0 <col:9, col:55>
| | | | |   `-CallExpr 0xe526b8 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe52530 <col:16> '<builtin fn type>' Function 0xe52250 '__atomic_fetch_add' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe525d8 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe52590 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe52560 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe52550 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xe52608 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3c7f0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xe52690 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe52678 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe52660 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe52640 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3c868 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe3c9b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe3cb48 <col:32, line:646:58> line:644:7 fetch_sub 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe3ca30 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe3caa8 <line:645:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42bd0 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe52a30 <line:646:7, col:58>
| | | | | `-ReturnStmt 0xe52a20 <col:9, col:55>
| | | | |   `-CallExpr 0xe529e8 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe52860 <col:16> '<builtin fn type>' Function 0xe52768 '__atomic_fetch_sub' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe52908 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe528c0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe52890 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe52880 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xe52938 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3ca30 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xe529c0 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe529a8 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe52990 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe52970 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3caa8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe3cbf8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe3cd78 <col:32, line:651:58> line:649:7 fetch_sub 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe3cc60 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe3ccd8 <line:650:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42bf0 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe52c18 <line:651:7, col:58>
| | | | | `-ReturnStmt 0xe52c08 <col:9, col:55>
| | | | |   `-CallExpr 0xe52bd0 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe52a48 <col:16> '<builtin fn type>' Function 0xe52768 '__atomic_fetch_sub' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe52af0 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe52aa8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe52a78 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe52a68 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xe52b20 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3cc60 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xe52ba8 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe52b90 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe52b78 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe52b58 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3ccd8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe3ce28 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe3cfb8 <col:32, line:656:58> line:654:7 fetch_and 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe3cea0 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe3cf18 <line:655:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42c10 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe52f48 <line:656:7, col:58>
| | | | | `-ReturnStmt 0xe52f38 <col:9, col:55>
| | | | |   `-CallExpr 0xe52f00 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe52d78 <col:16> '<builtin fn type>' Function 0xe52c80 '__atomic_fetch_and' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe52e20 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe52dd8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe52da8 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe52d98 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xe52e50 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3cea0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xe52ed8 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe52ec0 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe52ea8 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe52e88 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3cf18 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe3d068 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe3d1e8 <col:32, line:661:58> line:659:7 fetch_and 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe3d0d0 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe3d148 <line:660:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42c30 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe53130 <line:661:7, col:58>
| | | | | `-ReturnStmt 0xe53120 <col:9, col:55>
| | | | |   `-CallExpr 0xe530e8 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe52f60 <col:16> '<builtin fn type>' Function 0xe52c80 '__atomic_fetch_and' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe53008 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe52fc0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe52f90 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe52f80 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xe53038 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3d0d0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xe530c0 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe530a8 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe53090 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe53070 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3d148 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe3d298 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe3d428 <col:32, line:666:57> line:664:7 fetch_or 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe3d310 <col:16, col:27> col:27 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe3d388 <line:665:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42c50 <col:28> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe53460 <line:666:7, col:57>
| | | | | `-ReturnStmt 0xe53450 <col:9, col:54>
| | | | |   `-CallExpr 0xe53418 <col:16, col:54> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe53290 <col:16> '<builtin fn type>' Function 0xe53198 '__atomic_fetch_or' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe53338 <col:34, col:35> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe532f0 <col:34> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe532c0 <col:35> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe532b0 <col:35> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xe53368 <col:41> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3d310 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xe533f0 <col:46, col:53> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe533d8 <col:50> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe533c0 <col:50> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe533a0 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3d388 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe3d4d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe3d658 <col:32, line:671:57> line:669:7 fetch_or 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xe3d540 <col:16, col:27> col:27 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe3d5b8 <line:670:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42c70 <col:28> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe53648 <line:671:7, col:57>
| | | | | `-ReturnStmt 0xe53638 <col:9, col:54>
| | | | |   `-CallExpr 0xe53600 <col:16, col:54> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe53478 <col:16> '<builtin fn type>' Function 0xe53198 '__atomic_fetch_or' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe53520 <col:34, col:35> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe534d8 <col:34> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe534a8 <col:35> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe53498 <col:35> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xe53550 <col:41> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe3d540 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xe535d8 <col:46, col:53> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe535c0 <col:50> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe535a8 <col:50> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe53588 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3d5b8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe3d708 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xe42708 <col:32, line:676:58> line:674:7 fetch_xor 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xe425f0 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xe42668 <line:675:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe42c90 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xe53978 <line:676:7, col:58>
| | | | | `-ReturnStmt 0xe53968 <col:9, col:55>
| | | | |   `-CallExpr 0xe53930 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xe537a8 <col:16> '<builtin fn type>' Function 0xe536b0 '__atomic_fetch_xor' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xe53850 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xe53808 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | | | |     | `-MemberExpr 0xe537d8 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xe389f0
| | | | |     |   `-CXXThisExpr 0xe537c8 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xe53880 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe425f0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xe53908 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xe538f0 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xe538d8 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xe538b8 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe42668 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xe427b8 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xe42938 <col:32, line:681:58> line:679:7 fetch_xor 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xe42820 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | |   |-ParmVarDecl 0xe42898 <line:680:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | |   | `-DeclRefExpr 0xe42cb0 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | |   |-CompoundStmt 0xe53b60 <line:681:7, col:58>
| | |   | `-ReturnStmt 0xe53b50 <col:9, col:55>
| | |   |   `-CallExpr 0xe53b18 <col:16, col:55> '<dependent type>'
| | |   |     |-DeclRefExpr 0xe53990 <col:16> '<builtin fn type>' Function 0xe536b0 '__atomic_fetch_xor' 'void (...)'
| | |   |     |-CXXOperatorCallExpr 0xe53a38 <col:35, col:36> '<dependent type>' '&'
| | |   |     | |-UnresolvedLookupExpr 0xe539f0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
| | |   |     | `-MemberExpr 0xe539c0 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xe389f0
| | |   |     |   `-CXXThisExpr 0xe539b0 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | |   |     |-DeclRefExpr 0xe53a68 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xe42820 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | |   |     `-CXXFunctionalCastExpr 0xe53af0 <col:47, col:54> 'int' functional cast to int <NoOp>
| | |   |       `-ImplicitCastExpr 0xe53ad8 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | |   |         `-ImplicitCastExpr 0xe53ac0 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | |   |           `-DeclRefExpr 0xe53aa0 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe42898 '__m' 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xe429e8 <line:45:54> always_inline
| | |-ClassTemplateSpecialization 0xe61040 '__atomic_base'
| | |-ClassTemplateSpecialization 0xe7d848 '__atomic_base'
| | |-ClassTemplateSpecialization 0xd97160 '__atomic_base'
| | |-ClassTemplateSpecialization 0xe98400 '__atomic_base'
| | |-ClassTemplateSpecialization 0xea2ad0 '__atomic_base'
| | |-ClassTemplateSpecialization 0xeab120 '__atomic_base'
| | |-ClassTemplateSpecialization 0xeb3820 '__atomic_base'
| | |-ClassTemplateSpecialization 0xebbe20 '__atomic_base'
| | |-ClassTemplateSpecialization 0xec4870 '__atomic_base'
| | |-ClassTemplateSpecialization 0xececa0 '__atomic_base'
| | |-ClassTemplateSpecialization 0xed86d0 '__atomic_base'
| | |-ClassTemplateSpecialization 0xee4d40 '__atomic_base'
| | |-ClassTemplateSpecialization 0xeed378 '__atomic_base'
| | |-ClassTemplateSpecialization 0xef77f8 '__atomic_base'
| | `-ClassTemplateSpecialization 0xeffe48 '__atomic_base'
| `-ClassTemplatePartialSpecializationDecl 0xe53d00 <line:686:3, line:946:5> line:687:12 struct __atomic_base definition
|   |-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor
|   | |-DefaultConstructor exists
|   | |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
|   | |-MoveConstructor
|   | |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
|   | |-MoveAssignment
|   | `-Destructor irrelevant non_trivial user_declared
|   |-TemplateArgument type 'type-parameter-0-0 *'
|   | `-PointerType 0xcca060 'type-parameter-0-0 *' dependent
|   |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
|   |-TemplateTypeParmDecl 0xe53b78 <line:686:12, col:21> col:21 referenced typename depth 0 index 0 _PTp
|   |-CXXRecordDecl 0xe323f0 <line:687:5, col:12> col:12 implicit referenced struct __atomic_base
|   |-AccessSpecDecl 0xe32480 <line:689:5, col:12> col:5 private
|   |-TypedefDecl 0xe324b8 <line:690:7, col:22> col:22 referenced __pointer_type '_PTp *'
|   | `-PointerType 0xe53c10 '_PTp *' dependent
|   |   `-TemplateTypeParmType 0xe53bd0 '_PTp' dependent depth 0 index 0
|   |     `-TemplateTypeParm 0xe53b78 '_PTp'
|   |-FieldDecl 0xe32540 <line:692:7, col:23> col:23 referenced _M_p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   |-CXXMethodDecl 0xe326e8 <line:695:7, line:696:70> col:7 constexpr _M_type_size 'std::ptrdiff_t (std::ptrdiff_t) const'
|   | |-ParmVarDecl 0xe325c0 <col:20, col:30> col:30 referenced __d 'std::ptrdiff_t':'long'
|   | `-CompoundStmt 0xe3e1c0 <col:41, col:70>
|   |   `-ReturnStmt 0xe3e1b0 <col:43, col:67>
|   |     `-ImplicitCastExpr 0xe3e198 <col:50, col:67> 'std::ptrdiff_t':'long' <IntegralCast>
|   |       `-BinaryOperator 0xe3e178 <col:50, col:67> 'unsigned long' '*'
|   |         |-ImplicitCastExpr 0xe3e160 <col:50> 'unsigned long' <IntegralCast>
|   |         | `-ImplicitCastExpr 0xe3e148 <col:50> 'std::ptrdiff_t':'long' <LValueToRValue>
|   |         |   `-DeclRefExpr 0xe3e0f8 <col:50> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe325c0 '__d' 'std::ptrdiff_t':'long'
|   |         `-UnaryExprOrTypeTraitExpr 0xe3e128 <col:56, col:67> 'unsigned long' sizeof '_PTp'
|   |-CXXMethodDecl 0xe328c8 <line:698:7, line:699:79> col:7 constexpr _M_type_size 'std::ptrdiff_t (std::ptrdiff_t) const volatile'
|   | |-ParmVarDecl 0xe327a0 <col:20, col:30> col:30 referenced __d 'std::ptrdiff_t':'long'
|   | `-CompoundStmt 0xe3e2a0 <col:50, col:79>
|   |   `-ReturnStmt 0xe3e290 <col:52, col:76>
|   |     `-ImplicitCastExpr 0xe3e278 <col:59, col:76> 'std::ptrdiff_t':'long' <IntegralCast>
|   |       `-BinaryOperator 0xe3e258 <col:59, col:76> 'unsigned long' '*'
|   |         |-ImplicitCastExpr 0xe3e240 <col:59> 'unsigned long' <IntegralCast>
|   |         | `-ImplicitCastExpr 0xe3e228 <col:59> 'std::ptrdiff_t':'long' <LValueToRValue>
|   |         |   `-DeclRefExpr 0xe3e1d8 <col:59> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe327a0 '__d' 'std::ptrdiff_t':'long'
|   |         `-UnaryExprOrTypeTraitExpr 0xe3e208 <col:65, col:76> 'unsigned long' sizeof '_PTp'
|   |-AccessSpecDecl 0xe32980 <line:701:5, col:11> col:5 public
|   |-CXXConstructorDecl 0xe32a18 <line:702:7, col:40> col:7 __atomic_base<type-parameter-0-0 *> 'void () noexcept' default
|   |-CXXDestructorDecl 0xe32b10 <line:703:7, col:41> col:7 ~__atomic_base<type-parameter-0-0 *> 'void () noexcept' default
|   |-CXXConstructorDecl 0xe32cb8 <line:704:7, col:50> col:7 __atomic_base<type-parameter-0-0 *> 'void (const __atomic_base<type-parameter-0-0 *> &)' delete
|   | `-ParmVarDecl 0xe32bf8 <col:21, col:40> col:41 'const __atomic_base<type-parameter-0-0 *> &'
|   |-CXXMethodDecl 0xe32e78 <line:705:7, col:61> col:22 operator= '__atomic_base<type-parameter-0-0 *> &(const __atomic_base<type-parameter-0-0 *> &)' delete
|   | `-ParmVarDecl 0xe32d88 <col:32, col:51> col:52 'const __atomic_base<type-parameter-0-0 *> &'
|   |-CXXMethodDecl 0xe33028 <line:706:7, col:70> col:22 operator= '__atomic_base<type-parameter-0-0 *> &(const __atomic_base<type-parameter-0-0 *> &) volatile' delete
|   | `-ParmVarDecl 0xe32f30 <col:32, col:51> col:52 'const __atomic_base<type-parameter-0-0 *> &'
|   |-CXXConstructorDecl 0xe331f0 <line:709:7, col:75> col:17 constexpr __atomic_base<type-parameter-0-0 *> 'void (std::__atomic_base<type-parameter-0-0 *>::__pointer_type) noexcept'
|   | |-ParmVarDecl 0xe330f0 <col:31, col:46> col:46 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-CXXCtorInitializer Field 0xe32540 '_M_p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | | `-ParenListExpr 0xe3e2d8 <col:67, col:71> 'NULL TYPE'
|   | |   `-DeclRefExpr 0xe3e2b8 <col:68> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xe330f0 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | `-CompoundStmt 0xe3e320 <col:73, col:75>
|   |-CXXConversionDecl 0xe33360 <line:711:7, line:712:24> line:711:7 operator type-parameter-0-0 * 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type () const noexcept'
|   | `-CompoundStmt 0xe3e3d0 <line:712:7, col:24>
|   |   `-ReturnStmt 0xe3e3c0 <col:9, col:21>
|   |     `-CallExpr 0xe3e3a0 <col:16, col:21> '<dependent type>'
|   |       `-UnresolvedMemberExpr 0xe3e340 <col:16> '<bound member function type>' lvalue
|   |-CXXConversionDecl 0xe334a0 <line:714:7, line:715:24> line:714:7 operator type-parameter-0-0 * 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type () const volatile noexcept'
|   | `-CompoundStmt 0xe3e488 <line:715:7, col:24>
|   |   `-ReturnStmt 0xe3e478 <col:9, col:21>
|   |     `-CallExpr 0xe3e458 <col:16, col:21> '<dependent type>'
|   |       `-UnresolvedMemberExpr 0xe3e3f8 <col:16> '<bound member function type>' lvalue
|   |-CXXMethodDecl 0xe33670 <line:717:7, line:722:7> line:718:7 operator= 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::__atomic_base<type-parameter-0-0 *>::__pointer_type) noexcept'
|   | |-ParmVarDecl 0xe33578 <col:17, col:32> col:32 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | `-CompoundStmt 0xe3e5d8 <line:719:7, line:722:7>
|   |   |-CallExpr 0xe3e580 <line:720:2, col:11> '<dependent type>'
|   |   | |-UnresolvedMemberExpr 0xe3e500 <col:2> '<bound member function type>' lvalue
|   |   | `-DeclRefExpr 0xe3e560 <col:8> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xe33578 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   |   `-ReturnStmt 0xe3e5c8 <line:721:2, col:9>
|   |     `-DeclRefExpr 0xe3e5a8 <col:9> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xe33578 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   |-CXXMethodDecl 0xe33830 <line:724:7, line:729:7> line:725:7 operator= 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::__atomic_base<type-parameter-0-0 *>::__pointer_type) volatile noexcept'
|   | |-ParmVarDecl 0xe33738 <col:17, col:32> col:32 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | `-CompoundStmt 0xe3e730 <line:726:7, line:729:7>
|   |   |-CallExpr 0xe3e6d8 <line:727:2, col:11> '<dependent type>'
|   |   | |-UnresolvedMemberExpr 0xe3e658 <col:2> '<bound member function type>' lvalue
|   |   | `-DeclRefExpr 0xe3e6b8 <col:8> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xe33738 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   |   `-ReturnStmt 0xe3e720 <line:728:2, col:9>
|   |     `-DeclRefExpr 0xe3e700 <col:9> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xe33738 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   |-CXXMethodDecl 0xe33a00 <line:731:7, line:733:30> line:732:7 operator++ 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (int) noexcept'
|   | |-ParmVarDecl 0xe33900 <col:18> col:21 'int'
|   | `-CompoundStmt 0xe3e818 <line:733:7, col:30>
|   |   `-ReturnStmt 0xe3e808 <col:9, col:27>
|   |     `-CallExpr 0xe3e7e0 <col:16, col:27> '<dependent type>'
|   |       |-UnresolvedMemberExpr 0xe3e760 <col:16> '<bound member function type>' lvalue
|   |       `-IntegerLiteral 0xe3e7c0 <col:26> 'int' 1
|   |-CXXMethodDecl 0xe33bc0 <line:735:7, line:737:30> line:736:7 operator++ 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (int) volatile noexcept'
|   | |-ParmVarDecl 0xe33ac0 <col:18> col:21 'int'
|   | `-CompoundStmt 0xe3e8f8 <line:737:7, col:30>
|   |   `-ReturnStmt 0xe3e8e8 <col:9, col:27>
|   |     `-CallExpr 0xe3e8c0 <col:16, col:27> '<dependent type>'
|   |       |-UnresolvedMemberExpr 0xe3e840 <col:16> '<bound member function type>' lvalue
|   |       `-IntegerLiteral 0xe3e8a0 <col:26> 'int' 1
|   |-CXXMethodDecl 0xe33d28 <line:739:7, line:741:30> line:740:7 operator-- 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (int) noexcept'
|   | |-ParmVarDecl 0xe33c90 <col:18> col:21 'int'
|   | `-CompoundStmt 0xe3e9d8 <line:741:7, col:30>
|   |   `-ReturnStmt 0xe3e9c8 <col:9, col:27>
|   |     `-CallExpr 0xe3e9a0 <col:16, col:27> '<dependent type>'
|   |       |-UnresolvedMemberExpr 0xe3e920 <col:16> '<bound member function type>' lvalue
|   |       `-IntegerLiteral 0xe3e980 <col:26> 'int' 1
|   |-CXXMethodDecl 0xe33e80 <line:743:7, line:745:30> line:744:7 operator-- 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (int) volatile noexcept'
|   | |-ParmVarDecl 0xe33de8 <col:18> col:21 'int'
|   | `-CompoundStmt 0xe3eab8 <line:745:7, col:30>
|   |   `-ReturnStmt 0xe3eaa8 <col:9, col:27>
|   |     `-CallExpr 0xe3ea80 <col:16, col:27> '<dependent type>'
|   |       |-UnresolvedMemberExpr 0xe3ea00 <col:16> '<bound member function type>' lvalue
|   |       `-IntegerLiteral 0xe3ea60 <col:26> 'int' 1
|   |-CXXMethodDecl 0xe33fc0 <line:747:7, line:750:35> line:748:7 operator++ 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type () noexcept'
|   | `-CompoundStmt 0xe3ed20 <line:749:7, line:750:35>
|   |   `-ReturnStmt 0xe3ed10 <line:749:9, line:750:32>
|   |     `-CallExpr 0xe3ecd8 <line:749:16, line:750:32> '<dependent type>'
|   |       |-DeclRefExpr 0xe3ead0 <line:749:16> '<builtin fn type>' Function 0xe43570 '__atomic_add_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xe3eb78 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xe3eb30 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   |       | `-MemberExpr 0xe3eb00 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xe32540
|   |       |   `-CXXThisExpr 0xe3eaf0 <col:36> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xe3ec38 <col:42, col:56> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xe3ebb8 <col:42> '<bound member function type>' lvalue
|   |       | `-IntegerLiteral 0xe3ec18 <col:55> 'int' 1
|   |       `-CXXFunctionalCastExpr 0xe3ecb0 <line:750:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xe3ec98 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xe3ec78 <col:11> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xe340f0 <line:752:7, line:755:35> line:753:7 operator++ 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type () volatile noexcept'
|   | `-CompoundStmt 0xe3ef88 <line:754:7, line:755:35>
|   |   `-ReturnStmt 0xe3ef78 <line:754:9, line:755:32>
|   |     `-CallExpr 0xe3ef40 <line:754:16, line:755:32> '<dependent type>'
|   |       |-DeclRefExpr 0xe3ed38 <line:754:16> '<builtin fn type>' Function 0xe43570 '__atomic_add_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xe3ede0 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xe3ed98 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   |       | `-MemberExpr 0xe3ed68 <col:36> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xe32540
|   |       |   `-CXXThisExpr 0xe3ed58 <col:36> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xe3eea0 <col:42, col:56> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xe3ee20 <col:42> '<bound member function type>' lvalue
|   |       | `-IntegerLiteral 0xe3ee80 <col:55> 'int' 1
|   |       `-CXXFunctionalCastExpr 0xe3ef18 <line:755:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xe3ef00 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xe3eee0 <col:11> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xe341c8 <line:757:7, line:760:35> line:758:7 operator-- 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type () noexcept'
|   | `-CompoundStmt 0xe3f1f0 <line:759:7, line:760:35>
|   |   `-ReturnStmt 0xe3f1e0 <line:759:9, line:760:32>
|   |     `-CallExpr 0xe3f1a8 <line:759:16, line:760:32> '<dependent type>'
|   |       |-DeclRefExpr 0xe3efa0 <line:759:16> '<builtin fn type>' Function 0xe43a58 '__atomic_sub_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xe3f048 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xe3f000 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   |       | `-MemberExpr 0xe3efd0 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xe32540
|   |       |   `-CXXThisExpr 0xe3efc0 <col:36> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xe3f108 <col:42, col:56> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xe3f088 <col:42> '<bound member function type>' lvalue
|   |       | `-IntegerLiteral 0xe3f0e8 <col:55> 'int' 1
|   |       `-CXXFunctionalCastExpr 0xe3f180 <line:760:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xe3f168 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xe3f148 <col:11> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xe342a0 <line:762:7, line:765:35> line:763:7 operator-- 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type () volatile noexcept'
|   | `-CompoundStmt 0xe3f458 <line:764:7, line:765:35>
|   |   `-ReturnStmt 0xe3f448 <line:764:9, line:765:32>
|   |     `-CallExpr 0xe3f410 <line:764:16, line:765:32> '<dependent type>'
|   |       |-DeclRefExpr 0xe3f208 <line:764:16> '<builtin fn type>' Function 0xe43a58 '__atomic_sub_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xe3f2b0 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xe3f268 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   |       | `-MemberExpr 0xe3f238 <col:36> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xe32540
|   |       |   `-CXXThisExpr 0xe3f228 <col:36> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xe3f370 <col:42, col:56> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xe3f2f0 <col:42> '<bound member function type>' lvalue
|   |       | `-IntegerLiteral 0xe3f350 <col:55> 'int' 1
|   |       `-CXXFunctionalCastExpr 0xe3f3e8 <line:765:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xe3f3d0 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xe3f3b0 <col:11> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xe39350 <line:767:7, line:770:35> line:768:7 operator+= 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) noexcept'
|   | |-ParmVarDecl 0xe34360 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
|   | `-CompoundStmt 0xe3f6c0 <line:769:7, line:770:35>
|   |   `-ReturnStmt 0xe3f6b0 <line:769:9, line:770:32>
|   |     `-CallExpr 0xe3f678 <line:769:16, line:770:32> '<dependent type>'
|   |       |-DeclRefExpr 0xe3f470 <line:769:16> '<builtin fn type>' Function 0xe43570 '__atomic_add_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xe3f518 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xe3f4d0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   |       | `-MemberExpr 0xe3f4a0 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xe32540
|   |       |   `-CXXThisExpr 0xe3f490 <col:36> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xe3f5d8 <col:42, col:58> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xe3f558 <col:42> '<bound member function type>' lvalue
|   |       | `-DeclRefExpr 0xe3f5b8 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe34360 '__d' 'std::ptrdiff_t':'long'
|   |       `-CXXFunctionalCastExpr 0xe3f650 <line:770:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xe3f638 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xe3f618 <col:11> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xe39500 <line:772:7, line:775:35> line:773:7 operator+= 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) volatile noexcept'
|   | |-ParmVarDecl 0xe39408 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
|   | `-CompoundStmt 0xe56db0 <line:774:7, line:775:35>
|   |   `-ReturnStmt 0xe56da0 <line:774:9, line:775:32>
|   |     `-CallExpr 0xe56d68 <line:774:16, line:775:32> '<dependent type>'
|   |       |-DeclRefExpr 0xe3f6d8 <line:774:16> '<builtin fn type>' Function 0xe43570 '__atomic_add_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xe56c08 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xe56bc0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   |       | `-MemberExpr 0xe3f708 <col:36> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xe32540
|   |       |   `-CXXThisExpr 0xe3f6f8 <col:36> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xe56cc8 <col:42, col:58> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xe56c48 <col:42> '<bound member function type>' lvalue
|   |       | `-DeclRefExpr 0xe56ca8 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe39408 '__d' 'std::ptrdiff_t':'long'
|   |       `-CXXFunctionalCastExpr 0xe56d40 <line:775:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xe56d28 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xe56d08 <col:11> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xe39660 <line:777:7, line:780:35> line:778:7 operator-= 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) noexcept'
|   | |-ParmVarDecl 0xe395c8 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
|   | `-CompoundStmt 0xe57018 <line:779:7, line:780:35>
|   |   `-ReturnStmt 0xe57008 <line:779:9, line:780:32>
|   |     `-CallExpr 0xe56fd0 <line:779:16, line:780:32> '<dependent type>'
|   |       |-DeclRefExpr 0xe56dc8 <line:779:16> '<builtin fn type>' Function 0xe43a58 '__atomic_sub_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xe56e70 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xe56e28 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   |       | `-MemberExpr 0xe56df8 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xe32540
|   |       |   `-CXXThisExpr 0xe56de8 <col:36> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xe56f30 <col:42, col:58> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xe56eb0 <col:42> '<bound member function type>' lvalue
|   |       | `-DeclRefExpr 0xe56f10 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe395c8 '__d' 'std::ptrdiff_t':'long'
|   |       `-CXXFunctionalCastExpr 0xe56fa8 <line:780:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xe56f90 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xe56f70 <col:11> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xe397b0 <line:782:7, line:785:35> line:783:7 operator-= 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) volatile noexcept'
|   | |-ParmVarDecl 0xe39718 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
|   | `-CompoundStmt 0xe57280 <line:784:7, line:785:35>
|   |   `-ReturnStmt 0xe57270 <line:784:9, line:785:32>
|   |     `-CallExpr 0xe57238 <line:784:16, line:785:32> '<dependent type>'
|   |       |-DeclRefExpr 0xe57030 <line:784:16> '<builtin fn type>' Function 0xe43a58 '__atomic_sub_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xe570d8 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xe57090 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   |       | `-MemberExpr 0xe57060 <col:36> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xe32540
|   |       |   `-CXXThisExpr 0xe57050 <col:36> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xe57198 <col:42, col:58> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xe57118 <col:42> '<bound member function type>' lvalue
|   |       | `-DeclRefExpr 0xe57178 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe39718 '__d' 'std::ptrdiff_t':'long'
|   |       `-CXXFunctionalCastExpr 0xe57210 <line:785:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xe571f8 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xe571d8 <col:11> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xe39890 <line:787:7, line:793:7> line:788:7 is_lock_free 'bool () const noexcept'
|   | `-CompoundStmt 0xe57518 <line:789:7, line:793:7>
|   |   `-ReturnStmt 0xe57508 <line:791:2, line:792:48>
|   |     `-CallExpr 0xe574c0 <line:791:9, line:792:48> 'bool'
|   |       |-ImplicitCastExpr 0xe574a8 <line:791:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
|   |       | `-DeclRefExpr 0xe57298 <col:9> '<builtin fn type>' Function 0xe47e28 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
|   |       |-UnaryExprOrTypeTraitExpr 0xe57360 <col:31, col:42> 'unsigned long' sizeof
|   |       | `-ParenExpr 0xe57340 <col:37, col:42> 'const std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const' lvalue
|   |       |   `-MemberExpr 0xe57310 <col:38> 'const std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const' lvalue ->_M_p 0xe32540 non_odr_use_unevaluated
|   |       |     `-CXXThisExpr 0xe57300 <col:38> 'const __atomic_base<type-parameter-0-0 *> *' implicit this
|   |       `-ImplicitCastExpr 0xe574f0 <line:792:6, col:47> 'const volatile void *' <NoOp>
|   |         `-CXXReinterpretCastExpr 0xe57478 <col:6, col:47> 'void *' reinterpret_cast<void *> <IntegralToPointer>
|   |           `-UnaryOperator 0xe57448 <col:31, col:46> 'unsigned long' prefix '-'
|   |             `-UnaryExprOrTypeTraitExpr 0xe57428 <col:32, col:46> 'unsigned long' __alignof
|   |               `-ParenExpr 0xe57408 <col:41, col:46> 'const std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const' lvalue
|   |                 `-MemberExpr 0xe573d8 <col:42> 'const std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const' lvalue ->_M_p 0xe32540 non_odr_use_unevaluated
|   |                   `-CXXThisExpr 0xe573c8 <col:42> 'const __atomic_base<type-parameter-0-0 *> *' implicit this
|   |-CXXMethodDecl 0xe39958 <line:795:7, line:801:7> line:796:7 is_lock_free 'bool () const volatile noexcept'
|   | `-CompoundStmt 0xe577b0 <line:797:7, line:801:7>
|   |   `-ReturnStmt 0xe577a0 <line:799:2, line:800:48>
|   |     `-CallExpr 0xe57758 <line:799:9, line:800:48> 'bool'
|   |       |-ImplicitCastExpr 0xe57740 <line:799:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
|   |       | `-DeclRefExpr 0xe57530 <col:9> '<builtin fn type>' Function 0xe47e28 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
|   |       |-UnaryExprOrTypeTraitExpr 0xe575f8 <col:31, col:42> 'unsigned long' sizeof
|   |       | `-ParenExpr 0xe575d8 <col:37, col:42> 'const volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const volatile' lvalue
|   |       |   `-MemberExpr 0xe575a8 <col:38> 'const volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const volatile' lvalue ->_M_p 0xe32540 non_odr_use_unevaluated
|   |       |     `-CXXThisExpr 0xe57598 <col:38> 'const volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   |       `-ImplicitCastExpr 0xe57788 <line:800:6, col:47> 'const volatile void *' <NoOp>
|   |         `-CXXReinterpretCastExpr 0xe57710 <col:6, col:47> 'void *' reinterpret_cast<void *> <IntegralToPointer>
|   |           `-UnaryOperator 0xe576e0 <col:31, col:46> 'unsigned long' prefix '-'
|   |             `-UnaryExprOrTypeTraitExpr 0xe576c0 <col:32, col:46> 'unsigned long' __alignof
|   |               `-ParenExpr 0xe576a0 <col:41, col:46> 'const volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const volatile' lvalue
|   |                 `-MemberExpr 0xe57670 <col:42> 'const volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const volatile' lvalue ->_M_p 0xe32540 non_odr_use_unevaluated
|   |                   `-CXXThisExpr 0xe57660 <col:42> 'const volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   |-CXXMethodDecl 0xe39bb0 <line:45:32, line:815:7> line:804:7 store 'void (std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order) noexcept' inline
|   | |-ParmVarDecl 0xe39a18 <col:13, col:28> col:28 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xe39a90 <line:805:6, col:25> col:19 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xe3dfb8 <col:25> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xe581c8 <line:806:7, line:815:7>
|   | | |-DeclStmt 0xe57960 <line:807:2, line:808:31>
|   | | | `-VarDecl 0xe577d8 <line:807:2, line:808:12> line:807:15 referenced __b 'std::memory_order':'std::memory_order' cinit
|   | | |   |-CXXOperatorCallExpr 0xe57928 <line:808:6, col:12> 'std::memory_order':'std::memory_order' '&'
|   | | |   | |-ImplicitCastExpr 0xe57910 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0xe578f0 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
|   | | |   | |-ImplicitCastExpr 0xe578d8 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0xe57898 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe39a90 '__m' 'std::memory_order':'std::memory_order'
|   | | |   | `-DeclRefExpr 0xe578b8 <col:12> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
|   | | |   `-UnusedAttr 0xe57840 <line:807:35> unused
|   | | |-DoStmt 0xe57b88 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
|   | | | |-CompoundStmt 0xe57b60 <col:6, col:42>
|   | | | | `-IfStmt 0xe57b40 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe57ac8 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe579b0 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe57998 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe57978 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe57ab0 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe57a88 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe57a68 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:810:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe57a38 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe57a20 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe579e0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe577d8 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe57a50 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe57a00 <col:26> 'std::memory_order' EnumConstant 0xe1e9d0 'memory_order_acquire' 'std::memory_order'
|   | | | |   `-CallExpr 0xe57b20 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe57b08 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe57ae8 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe57b78 <line:531:51> 'bool' false
|   | | |-DoStmt 0xe57db8 <col:3, col:56>
|   | | | |-CompoundStmt 0xe57d90 <col:6, col:42>
|   | | | | `-IfStmt 0xe57d70 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe57cf8 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe57be0 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe57bc8 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe57ba8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe57ce0 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe57cb8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe57c98 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:811:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe57c68 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe57c50 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe57c10 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe577d8 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe57c80 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe57c30 <col:26> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
|   | | | |   `-CallExpr 0xe57d50 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe57d38 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe57d18 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe57da8 <line:531:51> 'bool' false
|   | | |-DoStmt 0xe57fe8 <col:3, col:56>
|   | | | |-CompoundStmt 0xe57fc0 <col:6, col:42>
|   | | | | `-IfStmt 0xe57fa0 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe57f28 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe57e10 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe57df8 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe57dd8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe57f10 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe57ee8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe57ec8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:812:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe57e98 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe57e80 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe57e40 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe577d8 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe57eb0 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe57e60 <col:26> 'std::memory_order' EnumConstant 0xe1e980 'memory_order_consume' 'std::memory_order'
|   | | | |   `-CallExpr 0xe57f80 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe57f68 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe57f48 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe57fd8 <line:531:51> 'bool' false
|   | | `-CallExpr 0xe58190 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:814:2, col:39> '<dependent type>'
|   | |   |-DeclRefExpr 0xe58008 <col:2> '<builtin fn type>' Function 0xe48d28 '__atomic_store_n' 'void (...)'
|   | |   |-CXXOperatorCallExpr 0xe580b0 <col:19, col:20> '<dependent type>' '&'
|   | |   | |-UnresolvedLookupExpr 0xe58068 <col:19> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   | |   | `-MemberExpr 0xe58038 <col:20> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xe32540
|   | |   |   `-CXXThisExpr 0xe58028 <col:20> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   | |   |-DeclRefExpr 0xe580e0 <col:26> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xe39a18 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |   `-CXXFunctionalCastExpr 0xe58168 <col:31, col:38> 'int' functional cast to int <NoOp>
|   | |     `-ImplicitCastExpr 0xe58150 <col:35> 'int' <IntegralCast> part_of_explicit_cast
|   | |       `-ImplicitCastExpr 0xe58138 <col:35> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |         `-DeclRefExpr 0xe58118 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe39a90 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xe39c60 <line:45:54> always_inline
|   |-CXXMethodDecl 0xe39e60 <col:32, line:828:7> line:818:7 store 'void (std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order) volatile noexcept' inline
|   | |-ParmVarDecl 0xe39cc8 <col:13, col:28> col:28 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xe39d40 <line:819:6, col:25> col:19 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xe3dfd8 <col:25> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xe59390 <line:820:7, line:828:7>
|   | | |-DeclStmt 0xe58398 <line:821:2, line:822:31>
|   | | | `-VarDecl 0xe58210 <line:821:2, line:822:12> line:821:15 referenced __b 'std::memory_order':'std::memory_order' cinit
|   | | |   |-CXXOperatorCallExpr 0xe58360 <line:822:6, col:12> 'std::memory_order':'std::memory_order' '&'
|   | | |   | |-ImplicitCastExpr 0xe58348 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0xe58328 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
|   | | |   | |-ImplicitCastExpr 0xe58310 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0xe582d0 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe39d40 '__m' 'std::memory_order':'std::memory_order'
|   | | |   | `-DeclRefExpr 0xe582f0 <col:12> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
|   | | |   `-UnusedAttr 0xe58278 <line:821:35> unused
|   | | |-DoStmt 0xe585c0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
|   | | | |-CompoundStmt 0xe58598 <col:6, col:42>
|   | | | | `-IfStmt 0xe58578 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe58500 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe583e8 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe583d0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe583b0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe584e8 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe584c0 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe584a0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:823:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe58470 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe58458 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe58418 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe58210 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe58488 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe58438 <col:26> 'std::memory_order' EnumConstant 0xe1e9d0 'memory_order_acquire' 'std::memory_order'
|   | | | |   `-CallExpr 0xe58558 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe58540 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe58520 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe585b0 <line:531:51> 'bool' false
|   | | |-DoStmt 0xe587f0 <col:3, col:56>
|   | | | |-CompoundStmt 0xe587c8 <col:6, col:42>
|   | | | | `-IfStmt 0xe587a8 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe58730 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe58618 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe58600 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe585e0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe58718 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe586f0 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe586d0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:824:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe586a0 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe58688 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe58648 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe58210 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe586b8 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe58668 <col:26> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
|   | | | |   `-CallExpr 0xe58788 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe58770 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe58750 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe587e0 <line:531:51> 'bool' false
|   | | |-DoStmt 0xe58a20 <col:3, col:56>
|   | | | |-CompoundStmt 0xe589f8 <col:6, col:42>
|   | | | | `-IfStmt 0xe589d8 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe58960 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe58848 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe58830 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe58810 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe58948 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe58920 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe58900 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:825:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe588d0 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe588b8 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe58878 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe58210 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe588e8 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe58898 <col:26> 'std::memory_order' EnumConstant 0xe1e980 'memory_order_consume' 'std::memory_order'
|   | | | |   `-CallExpr 0xe589b8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe589a0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe58980 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe58a10 <line:531:51> 'bool' false
|   | | `-CallExpr 0xe59358 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:827:2, col:39> '<dependent type>'
|   | |   |-DeclRefExpr 0xe58a40 <col:2> '<builtin fn type>' Function 0xe48d28 '__atomic_store_n' 'void (...)'
|   | |   |-CXXOperatorCallExpr 0xe58ae8 <col:19, col:20> '<dependent type>' '&'
|   | |   | |-UnresolvedLookupExpr 0xe58aa0 <col:19> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   | |   | `-MemberExpr 0xe58a70 <col:20> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xe32540
|   | |   |   `-CXXThisExpr 0xe58a60 <col:20> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   | |   |-DeclRefExpr 0xe58b18 <col:26> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xe39cc8 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |   `-CXXFunctionalCastExpr 0xe59330 <col:31, col:38> 'int' functional cast to int <NoOp>
|   | |     `-ImplicitCastExpr 0xe58b88 <col:35> 'int' <IntegralCast> part_of_explicit_cast
|   | |       `-ImplicitCastExpr 0xe58b70 <col:35> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |         `-DeclRefExpr 0xe58b50 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe39d40 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xe39f10 <line:45:54> always_inline
|   |-CXXMethodDecl 0xe3a080 <col:32, line:839:7> line:831:7 load 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::memory_order) const noexcept' inline
|   | |-ParmVarDecl 0xe39f88 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xe3dff8 <col:31> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xe59b80 <line:832:7, line:839:7>
|   | | |-DeclStmt 0xe59560 <line:833:2, line:834:31>
|   | | | `-VarDecl 0xe593d8 <line:833:2, line:834:12> line:833:15 referenced __b 'std::memory_order':'std::memory_order' cinit
|   | | |   |-CXXOperatorCallExpr 0xe59528 <line:834:6, col:12> 'std::memory_order':'std::memory_order' '&'
|   | | |   | |-ImplicitCastExpr 0xe59510 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0xe594f0 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
|   | | |   | |-ImplicitCastExpr 0xe594d8 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0xe59498 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe39f88 '__m' 'std::memory_order':'std::memory_order'
|   | | |   | `-DeclRefExpr 0xe594b8 <col:12> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
|   | | |   `-UnusedAttr 0xe59440 <line:833:35> unused
|   | | |-DoStmt 0xe59788 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
|   | | | |-CompoundStmt 0xe59760 <col:6, col:42>
|   | | | | `-IfStmt 0xe59740 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe596c8 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe595b0 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe59598 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe59578 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe596b0 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe59688 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe59668 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:835:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe59638 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe59620 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe595e0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe593d8 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe59650 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe59600 <col:26> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
|   | | | |   `-CallExpr 0xe59720 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe59708 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe596e8 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe59778 <line:531:51> 'bool' false
|   | | |-DoStmt 0xe599b8 <col:3, col:56>
|   | | | |-CompoundStmt 0xe59990 <col:6, col:42>
|   | | | | `-IfStmt 0xe59970 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe598f8 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe597e0 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe597c8 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe597a8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe598e0 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe598b8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe59898 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:836:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe59868 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe59850 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe59810 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe593d8 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe59880 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe59830 <col:26> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
|   | | | |   `-CallExpr 0xe59950 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe59938 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe59918 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe599a8 <line:531:51> 'bool' false
|   | | `-ReturnStmt 0xe59b70 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:838:2, col:40>
|   | |   `-CallExpr 0xe59b40 <col:9, col:40> '<dependent type>'
|   | |     |-DeclRefExpr 0xe599d8 <col:9> '<builtin fn type>' Function 0xe4a278 '__atomic_load_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xe59a80 <col:25, col:26> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xe59a38 <col:25> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   | |     | `-MemberExpr 0xe59a08 <col:26> 'const std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const' lvalue ->_M_p 0xe32540
|   | |     |   `-CXXThisExpr 0xe599f8 <col:26> 'const __atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     `-CXXFunctionalCastExpr 0xe59b18 <col:32, col:39> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xe59b00 <col:36> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xe59ae8 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xe59ac8 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe39f88 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xe3a128 <line:45:54> always_inline
|   |-CXXMethodDecl 0xe3a290 <col:32, line:850:7> line:842:7 load 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::memory_order) const volatile noexcept' inline
|   | |-ParmVarDecl 0xe3a190 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xe3e018 <col:31> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xe5a368 <line:843:7, line:850:7>
|   | | |-DeclStmt 0xe59d48 <line:844:2, line:845:31>
|   | | | `-VarDecl 0xe59bc0 <line:844:2, line:845:12> line:844:15 referenced __b 'std::memory_order':'std::memory_order' cinit
|   | | |   |-CXXOperatorCallExpr 0xe59d10 <line:845:6, col:12> 'std::memory_order':'std::memory_order' '&'
|   | | |   | |-ImplicitCastExpr 0xe59cf8 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0xe59cd8 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
|   | | |   | |-ImplicitCastExpr 0xe59cc0 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0xe59c80 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3a190 '__m' 'std::memory_order':'std::memory_order'
|   | | |   | `-DeclRefExpr 0xe59ca0 <col:12> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
|   | | |   `-UnusedAttr 0xe59c28 <line:844:35> unused
|   | | |-DoStmt 0xe59f70 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
|   | | | |-CompoundStmt 0xe59f48 <col:6, col:42>
|   | | | | `-IfStmt 0xe59f28 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe59eb0 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe59d98 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe59d80 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe59d60 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe59e98 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe59e70 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe59e50 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:846:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe59e20 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe59e08 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe59dc8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe59bc0 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe59e38 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe59de8 <col:26> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
|   | | | |   `-CallExpr 0xe59f08 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe59ef0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe59ed0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe59f60 <line:531:51> 'bool' false
|   | | |-DoStmt 0xe5a1a0 <col:3, col:56>
|   | | | |-CompoundStmt 0xe5a178 <col:6, col:42>
|   | | | | `-IfStmt 0xe5a158 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe5a0e0 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe59fc8 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe59fb0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe59f90 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe5a0c8 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe5a0a0 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe5a080 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:847:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe5a050 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe5a038 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe59ff8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe59bc0 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe5a068 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe5a018 <col:26> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
|   | | | |   `-CallExpr 0xe5a138 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe5a120 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe5a100 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe5a190 <line:531:51> 'bool' false
|   | | `-ReturnStmt 0xe5a358 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:849:2, col:40>
|   | |   `-CallExpr 0xe5a328 <col:9, col:40> '<dependent type>'
|   | |     |-DeclRefExpr 0xe5a1c0 <col:9> '<builtin fn type>' Function 0xe4a278 '__atomic_load_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xe5a268 <col:25, col:26> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xe5a220 <col:25> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   | |     | `-MemberExpr 0xe5a1f0 <col:26> 'const volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const volatile' lvalue ->_M_p 0xe32540
|   | |     |   `-CXXThisExpr 0xe5a1e0 <col:26> 'const volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     `-CXXFunctionalCastExpr 0xe5a300 <col:32, col:39> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xe5a2e8 <col:36> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xe5a2d0 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xe5a2b0 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3a190 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xe3a338 <line:45:54> always_inline
|   |-CXXMethodDecl 0xe3a540 <col:32, line:857:7> line:853:7 exchange 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order) noexcept' inline
|   | |-ParmVarDecl 0xe3a3b0 <col:16, col:31> col:31 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xe3a428 <line:854:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xe3e038 <col:28> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xe5a568 <line:855:7, line:857:7>
|   | | `-ReturnStmt 0xe5a558 <line:856:2, col:49>
|   | |   `-CallExpr 0xe5a520 <col:9, col:49> '<dependent type>'
|   | |     |-DeclRefExpr 0xe5a398 <col:9> '<builtin fn type>' Function 0xe4ad80 '__atomic_exchange_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xe5a440 <col:29, col:30> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xe5a3f8 <col:29> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   | |     | `-MemberExpr 0xe5a3c8 <col:30> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xe32540
|   | |     |   `-CXXThisExpr 0xe5a3b8 <col:30> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-DeclRefExpr 0xe5a470 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xe3a3b0 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |     `-CXXFunctionalCastExpr 0xe5a4f8 <col:41, col:48> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xe5a4e0 <col:45> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xe5a4c8 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xe5a4a8 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3a428 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xe3a5f0 <line:45:54> always_inline
|   |-CXXMethodDecl 0xe3a7f0 <col:32, line:865:7> line:861:7 exchange 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order) volatile noexcept' inline
|   | |-ParmVarDecl 0xe3a658 <col:16, col:31> col:31 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xe3a6d0 <line:862:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xe3e058 <col:28> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xe5a750 <line:863:7, line:865:7>
|   | | `-ReturnStmt 0xe5a740 <line:864:2, col:49>
|   | |   `-CallExpr 0xe5a708 <col:9, col:49> '<dependent type>'
|   | |     |-DeclRefExpr 0xe5a580 <col:9> '<builtin fn type>' Function 0xe4ad80 '__atomic_exchange_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xe5a628 <col:29, col:30> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xe5a5e0 <col:29> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   | |     | `-MemberExpr 0xe5a5b0 <col:30> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xe32540
|   | |     |   `-CXXThisExpr 0xe5a5a0 <col:30> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-DeclRefExpr 0xe5a658 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xe3a658 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |     `-CXXFunctionalCastExpr 0xe5a6e0 <col:41, col:48> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xe5a6c8 <col:45> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xe5a6b0 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xe5a690 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3a6d0 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xe3a8a0 <line:45:54> always_inline
|   |-CXXMethodDecl 0xe3ac30 <col:32, line:882:7> line:868:7 compare_exchange_strong 'bool (std::__atomic_base<type-parameter-0-0 *>::__pointer_type &, std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) noexcept' inline
|   | |-ParmVarDecl 0xe3a978 <col:31, col:47> col:47 referenced __p1 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type &'
|   | |-ParmVarDecl 0xe3a9f0 <col:53, col:68> col:68 referenced __p2 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xe3aa68 <line:869:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
|   | |-ParmVarDecl 0xe3aae0 <line:870:10, col:23> col:23 referenced __m2 'std::memory_order':'std::memory_order'
|   | |-CompoundStmt 0xe5f2c0 <line:871:7, line:882:7>
|   | | |-DeclStmt 0xe5a900 <line:872:2, line:873:32>
|   | | | `-VarDecl 0xe5a778 <line:872:2, line:873:13> line:872:15 referenced __b2 'std::memory_order':'std::memory_order' cinit
|   | | |   |-CXXOperatorCallExpr 0xe5a8c8 <line:873:6, col:13> 'std::memory_order':'std::memory_order' '&'
|   | | |   | |-ImplicitCastExpr 0xe5a8b0 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0xe5a890 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
|   | | |   | |-ImplicitCastExpr 0xe5a878 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0xe5a838 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3aae0 '__m2' 'std::memory_order':'std::memory_order'
|   | | |   | `-DeclRefExpr 0xe5a858 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
|   | | |   `-UnusedAttr 0xe5a7e0 <line:872:36> unused
|   | | |-DeclStmt 0xe5aab0 <line:874:2, line:875:32>
|   | | | `-VarDecl 0xe5a928 <line:874:2, line:875:13> line:874:15 referenced __b1 'std::memory_order':'std::memory_order' cinit
|   | | |   |-CXXOperatorCallExpr 0xe5aa78 <line:875:6, col:13> 'std::memory_order':'std::memory_order' '&'
|   | | |   | |-ImplicitCastExpr 0xe5aa60 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0xe5aa40 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
|   | | |   | |-ImplicitCastExpr 0xe5aa28 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0xe5a9e8 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3aa68 '__m1' 'std::memory_order':'std::memory_order'
|   | | |   | `-DeclRefExpr 0xe5aa08 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
|   | | |   `-UnusedAttr 0xe5a990 <line:874:36> unused
|   | | |-DoStmt 0xe5acd8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
|   | | | |-CompoundStmt 0xe5acb0 <col:6, col:42>
|   | | | | `-IfStmt 0xe5ac90 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe5ac18 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe5ab00 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe5aae8 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe5aac8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe5ac00 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe5abd8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe5abb8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:876:19, col:27> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe5ab88 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe5ab70 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe5ab30 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe5a778 '__b2' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe5aba0 <col:27> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe5ab50 <col:27> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
|   | | | |   `-CallExpr 0xe5ac70 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe5ac58 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe5ac38 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe5acc8 <line:531:51> 'bool' false
|   | | |-DoStmt 0xe5af08 <col:3, col:56>
|   | | | |-CompoundStmt 0xe5aee0 <col:6, col:42>
|   | | | | `-IfStmt 0xe5aec0 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe5ae48 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe5ad30 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe5ad18 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe5acf8 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe5ae30 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe5ae08 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe5ade8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:877:19, col:27> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe5adb8 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe5ada0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe5ad60 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe5a778 '__b2' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe5add0 <col:27> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe5ad80 <col:27> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
|   | | | |   `-CallExpr 0xe5aea0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe5ae88 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe5ae68 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe5aef8 <line:531:51> 'bool' false
|   | | |-DoStmt 0xe5b150 <col:3, col:56>
|   | | | |-CompoundStmt 0xe5b128 <col:6, col:42>
|   | | | | `-IfStmt 0xe5b108 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe5b090 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe5af60 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe5af48 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe5af28 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe5b078 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe5b050 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe5b030 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:878:19, col:27> 'bool' '<='
|   | | | |   |       |-ImplicitCastExpr 0xe5b000 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe5afd0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe5af90 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe5a778 '__b2' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe5b018 <col:27> 'int' <IntegralCast>
|   | | | |   |         `-ImplicitCastExpr 0xe5afe8 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |           `-DeclRefExpr 0xe5afb0 <col:27> 'std::memory_order':'std::memory_order' lvalue Var 0xe5a928 '__b1' 'std::memory_order':'std::memory_order'
|   | | | |   `-CallExpr 0xe5b0e8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe5b0d0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe5b0b0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe5b140 <line:531:51> 'bool' false
|   | | `-ReturnStmt 0xe5f2b0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:880:2, line:881:29>
|   | |   `-CallExpr 0xe5f260 <line:880:9, line:881:29> '<dependent type>'
|   | |     |-DeclRefExpr 0xe5b170 <line:880:9> '<builtin fn type>' Function 0xe4e678 '__atomic_compare_exchange_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xe5b218 <col:37, col:38> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xe5b1d0 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   | |     | `-MemberExpr 0xe5b1a0 <col:38> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xe32540
|   | |     |   `-CXXThisExpr 0xe5b190 <col:38> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-CXXOperatorCallExpr 0xe5b2b0 <col:44, col:45> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xe5b268 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   | |     | `-DeclRefExpr 0xe5b248 <col:45> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xe3a978 '__p1' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type &'
|   | |     |-DeclRefExpr 0xe5b2e0 <col:51> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xe3a9f0 '__p2' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |     |-IntegerLiteral 0xe5b300 <col:57> 'int' 0
|   | |     |-CXXFunctionalCastExpr 0xe5f1a8 <line:881:9, col:17> 'int' functional cast to int <NoOp>
|   | |     | `-ImplicitCastExpr 0xe5f190 <col:13> 'int' <IntegralCast> part_of_explicit_cast
|   | |     |   `-ImplicitCastExpr 0xe5f178 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |     |     `-DeclRefExpr 0xe5f158 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3aa68 '__m1' 'std::memory_order':'std::memory_order'
|   | |     `-CXXFunctionalCastExpr 0xe5f238 <col:20, col:28> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xe5f220 <col:24> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xe5f208 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xe5f1e8 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3aae0 '__m2' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xe3acf0 <line:45:54> always_inline
|   |-CXXMethodDecl 0xe3b010 <col:32, line:900:7> line:885:7 compare_exchange_strong 'bool (std::__atomic_base<type-parameter-0-0 *>::__pointer_type &, std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) volatile noexcept' inline
|   | |-ParmVarDecl 0xe3ad58 <col:31, col:47> col:47 referenced __p1 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type &'
|   | |-ParmVarDecl 0xe3add0 <col:53, col:68> col:68 referenced __p2 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xe3ae48 <line:886:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
|   | |-ParmVarDecl 0xe3aec0 <line:887:10, col:23> col:23 referenced __m2 'std::memory_order':'std::memory_order'
|   | |-CompoundStmt 0xe60038 <line:888:7, line:900:7>
|   | | |-DeclStmt 0xe5f498 <line:889:2, line:890:32>
|   | | | `-VarDecl 0xe5f310 <line:889:2, line:890:13> line:889:15 referenced __b2 'std::memory_order':'std::memory_order' cinit
|   | | |   |-CXXOperatorCallExpr 0xe5f460 <line:890:6, col:13> 'std::memory_order':'std::memory_order' '&'
|   | | |   | |-ImplicitCastExpr 0xe5f448 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0xe5f428 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
|   | | |   | |-ImplicitCastExpr 0xe5f410 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0xe5f3d0 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3aec0 '__m2' 'std::memory_order':'std::memory_order'
|   | | |   | `-DeclRefExpr 0xe5f3f0 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
|   | | |   `-UnusedAttr 0xe5f378 <line:889:36> unused
|   | | |-DeclStmt 0xe5f648 <line:891:2, line:892:32>
|   | | | `-VarDecl 0xe5f4c0 <line:891:2, line:892:13> line:891:15 referenced __b1 'std::memory_order':'std::memory_order' cinit
|   | | |   |-CXXOperatorCallExpr 0xe5f610 <line:892:6, col:13> 'std::memory_order':'std::memory_order' '&'
|   | | |   | |-ImplicitCastExpr 0xe5f5f8 <col:11> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0xe5f5d8 <col:11> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xe1f6a8 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
|   | | |   | |-ImplicitCastExpr 0xe5f5c0 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0xe5f580 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3ae48 '__m1' 'std::memory_order':'std::memory_order'
|   | | |   | `-DeclRefExpr 0xe5f5a0 <col:13> 'std::__memory_order_modifier' EnumConstant 0xe1ecf0 '__memory_order_mask' 'std::__memory_order_modifier'
|   | | |   `-UnusedAttr 0xe5f528 <line:891:36> unused
|   | | |-DoStmt 0xe5f870 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:531:3, col:56>
|   | | | |-CompoundStmt 0xe5f848 <col:6, col:42>
|   | | | | `-IfStmt 0xe5f828 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe5f7b0 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe5f698 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe5f680 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe5f660 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe5f798 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe5f770 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe5f750 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:894:19, col:27> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe5f720 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe5f708 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe5f6c8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe5f310 '__b2' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe5f738 <col:27> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe5f6e8 <col:27> 'std::memory_order' EnumConstant 0xe1ea20 'memory_order_release' 'std::memory_order'
|   | | | |   `-CallExpr 0xe5f808 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe5f7f0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe5f7d0 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe5f860 <line:531:51> 'bool' false
|   | | |-DoStmt 0xe5faa0 <col:3, col:56>
|   | | | |-CompoundStmt 0xe5fa78 <col:6, col:42>
|   | | | | `-IfStmt 0xe5fa58 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe5f9e0 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe5f8c8 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe5f8b0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe5f890 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe5f9c8 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe5f9a0 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe5f980 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:895:19, col:27> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xe5f950 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe5f938 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe5f8f8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe5f310 '__b2' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe5f968 <col:27> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xe5f918 <col:27> 'std::memory_order' EnumConstant 0xe1ea70 'memory_order_acq_rel' 'std::memory_order'
|   | | | |   `-CallExpr 0xe5fa38 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe5fa20 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe5fa00 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe5fa90 <line:531:51> 'bool' false
|   | | |-DoStmt 0xe5fce8 <col:3, col:56>
|   | | | |-CompoundStmt 0xe5fcc0 <col:6, col:42>
|   | | | | `-IfStmt 0xe5fca0 <line:493:3, line:494:27>
|   | | | |   |-BinaryOperator 0xe5fc28 <line:493:7, col:54> 'bool' '&&'
|   | | | |   | |-CallExpr 0xe5faf8 <col:7, col:39> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xe5fae0 <col:7> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   | | | |   | |   `-DeclRefExpr 0xe5fac0 <col:7> '<builtin fn type>' Function 0xe28eb8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xe5fc10 <col:44, col:54> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xe5fbe8 <col:45, col:54> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xe5fbc8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:896:19, col:27> 'bool' '<='
|   | | | |   |       |-ImplicitCastExpr 0xe5fb98 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xe5fb68 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xe5fb28 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xe5f310 '__b2' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xe5fbb0 <col:27> 'int' <IntegralCast>
|   | | | |   |         `-ImplicitCastExpr 0xe5fb80 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |           `-DeclRefExpr 0xe5fb48 <col:27> 'std::memory_order':'std::memory_order' lvalue Var 0xe5f4c0 '__b1' 'std::memory_order':'std::memory_order'
|   | | | |   `-CallExpr 0xe5fc80 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:494:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xe5fc68 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xe5fc48 <col:5> '<builtin fn type>' Function 0xe29258 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xe5fcd8 <line:531:51> 'bool' false
|   | | `-ReturnStmt 0xe60028 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:898:2, line:899:29>
|   | |   `-CallExpr 0xe5ffd8 <line:898:9, line:899:29> '<dependent type>'
|   | |     |-DeclRefExpr 0xe5fd08 <line:898:9> '<builtin fn type>' Function 0xe4e678 '__atomic_compare_exchange_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xe5fdb0 <col:37, col:38> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xe5fd68 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   | |     | `-MemberExpr 0xe5fd38 <col:38> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xe32540
|   | |     |   `-CXXThisExpr 0xe5fd28 <col:38> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-CXXOperatorCallExpr 0xe5fe48 <col:44, col:45> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xe5fe00 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   | |     | `-DeclRefExpr 0xe5fde0 <col:45> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xe3ad58 '__p1' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type &'
|   | |     |-DeclRefExpr 0xe5fe78 <col:51> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xe3add0 '__p2' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |     |-IntegerLiteral 0xe5fe98 <col:57> 'int' 0
|   | |     |-CXXFunctionalCastExpr 0xe5ff20 <line:899:9, col:17> 'int' functional cast to int <NoOp>
|   | |     | `-ImplicitCastExpr 0xe5ff08 <col:13> 'int' <IntegralCast> part_of_explicit_cast
|   | |     |   `-ImplicitCastExpr 0xe5fef0 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |     |     `-DeclRefExpr 0xe5fed0 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3ae48 '__m1' 'std::memory_order':'std::memory_order'
|   | |     `-CXXFunctionalCastExpr 0xe5ffb0 <col:20, col:28> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xe5ff98 <col:24> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xe5ff80 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xe5ff60 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3aec0 '__m2' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xe3b0d0 <line:45:54> always_inline
|   |-CXXMethodDecl 0xe3d788 <col:32, line:930:72> line:928:7 fetch_add 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) noexcept' inline
|   | |-ParmVarDecl 0xe3b148 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
|   | |-ParmVarDecl 0xe3b1c0 <line:929:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xe3e078 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xe602e0 <line:930:7, col:72>
|   | | `-ReturnStmt 0xe602d0 <col:9, col:69>
|   | |   `-CallExpr 0xe60298 <col:16, col:69> '<dependent type>'
|   | |     |-DeclRefExpr 0xe60078 <col:16> '<builtin fn type>' Function 0xe52250 '__atomic_fetch_add' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xe60120 <col:35, col:36> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xe600d8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   | |     | `-MemberExpr 0xe600a8 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xe32540
|   | |     |   `-CXXThisExpr 0xe60098 <col:36> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-CallExpr 0xe601e0 <col:42, col:58> '<dependent type>'
|   | |     | |-UnresolvedMemberExpr 0xe60160 <col:42> '<bound member function type>' lvalue
|   | |     | `-DeclRefExpr 0xe601c0 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe3b148 '__d' 'std::ptrdiff_t':'long'
|   | |     `-CXXFunctionalCastExpr 0xe60270 <col:61, col:68> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xe60258 <col:65> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xe60240 <col:65> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xe60220 <col:65> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3b1c0 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xe3d838 <line:45:54> always_inline
|   |-CXXMethodDecl 0xe3da30 <col:32, line:935:72> line:933:7 fetch_add 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) volatile noexcept' inline
|   | |-ParmVarDecl 0xe3d8a0 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
|   | |-ParmVarDecl 0xe3d918 <line:934:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xe3e098 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xe60560 <line:935:7, col:72>
|   | | `-ReturnStmt 0xe60550 <col:9, col:69>
|   | |   `-CallExpr 0xe60518 <col:16, col:69> '<dependent type>'
|   | |     |-DeclRefExpr 0xe602f8 <col:16> '<builtin fn type>' Function 0xe52250 '__atomic_fetch_add' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xe603a0 <col:35, col:36> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xe60358 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   | |     | `-MemberExpr 0xe60328 <col:36> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xe32540
|   | |     |   `-CXXThisExpr 0xe60318 <col:36> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-CallExpr 0xe60460 <col:42, col:58> '<dependent type>'
|   | |     | |-UnresolvedMemberExpr 0xe603e0 <col:42> '<bound member function type>' lvalue
|   | |     | `-DeclRefExpr 0xe60440 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe3d8a0 '__d' 'std::ptrdiff_t':'long'
|   | |     `-CXXFunctionalCastExpr 0xe604f0 <col:61, col:68> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xe604d8 <col:65> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xe604c0 <col:65> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xe604a0 <col:65> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3d918 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xe3dae0 <line:45:54> always_inline
|   |-CXXMethodDecl 0xe3dc70 <col:32, line:940:72> line:938:7 fetch_sub 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) noexcept' inline
|   | |-ParmVarDecl 0xe3db58 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
|   | |-ParmVarDecl 0xe3dbd0 <line:939:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xe3e0b8 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xe607e0 <line:940:7, col:72>
|   | | `-ReturnStmt 0xe607d0 <col:9, col:69>
|   | |   `-CallExpr 0xe60798 <col:16, col:69> '<dependent type>'
|   | |     |-DeclRefExpr 0xe60578 <col:16> '<builtin fn type>' Function 0xe52768 '__atomic_fetch_sub' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xe60620 <col:35, col:36> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xe605d8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|   | |     | `-MemberExpr 0xe605a8 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xe32540
|   | |     |   `-CXXThisExpr 0xe60598 <col:36> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-CallExpr 0xe606e0 <col:42, col:58> '<dependent type>'
|   | |     | |-UnresolvedMemberExpr 0xe60660 <col:42> '<bound member function type>' lvalue
|   | |     | `-DeclRefExpr 0xe606c0 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe3db58 '__d' 'std::ptrdiff_t':'long'
|   | |     `-CXXFunctionalCastExpr 0xe60770 <col:61, col:68> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xe60758 <col:65> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xe60740 <col:65> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xe60720 <col:65> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3dbd0 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xe3dd20 <line:45:54> always_inline
|   `-CXXMethodDecl 0xe3dea0 <col:32, line:945:72> line:943:7 fetch_sub 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) volatile noexcept' inline
|     |-ParmVarDecl 0xe3dd88 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
|     |-ParmVarDecl 0xe3de00 <line:944:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
|     | `-DeclRefExpr 0xe3e0d8 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|     |-CompoundStmt 0xe60a60 <line:945:7, col:72>
|     | `-ReturnStmt 0xe60a50 <col:9, col:69>
|     |   `-CallExpr 0xe60a18 <col:16, col:69> '<dependent type>'
|     |     |-DeclRefExpr 0xe607f8 <col:16> '<builtin fn type>' Function 0xe52768 '__atomic_fetch_sub' 'void (...)'
|     |     |-CXXOperatorCallExpr 0xe608a0 <col:35, col:36> '<dependent type>' '&'
|     |     | |-UnresolvedLookupExpr 0xe60858 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xe1f6a8
|     |     | `-MemberExpr 0xe60828 <col:36> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xe32540
|     |     |   `-CXXThisExpr 0xe60818 <col:36> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|     |     |-CallExpr 0xe60960 <col:42, col:58> '<dependent type>'
|     |     | |-UnresolvedMemberExpr 0xe608e0 <col:42> '<bound member function type>' lvalue
|     |     | `-DeclRefExpr 0xe60940 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe3dd88 '__d' 'std::ptrdiff_t':'long'
|     |     `-CXXFunctionalCastExpr 0xe609f0 <col:61, col:68> 'int' functional cast to int <NoOp>
|     |       `-ImplicitCastExpr 0xe609d8 <col:65> 'int' <IntegralCast> part_of_explicit_cast
|     |         `-ImplicitCastExpr 0xe609c0 <col:65> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|     |           `-DeclRefExpr 0xe609a0 <col:65> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe3de00 '__m' 'std::memory_order':'std::memory_order'
|     `-AlwaysInlineAttr 0xe3df50 <line:45:54> always_inline
|-LinkageSpecDecl 0xe204b0 <line:126:5> col:5 implicit C
| `-FunctionDecl 0xe20500 <col:5> col:5 implicit used __atomic_thread_fence 'void (int) noexcept' extern
|   |-ParmVarDecl 0xe205f8 <<invalid sloc>> <invalid sloc> 'int'
|   |-BuiltinAttr 0xe205a0 <<invalid sloc>> Implicit 656
|   `-NoThrowAttr 0xe20668 <col:5> Implicit
|-LinkageSpecDecl 0xe20998 <line:130:5> col:5 implicit C
| `-FunctionDecl 0xe209e8 <col:5> col:5 implicit used __atomic_signal_fence 'void (int) noexcept' extern
|   |-ParmVarDecl 0xe20ae0 <<invalid sloc>> <invalid sloc> 'int'
|   |-BuiltinAttr 0xe20a88 <<invalid sloc>> Implicit 657
|   `-NoThrowAttr 0xe20b50 <col:5> Implicit
|-LinkageSpecDecl 0xe28568 <line:205:14> col:14 implicit C
| `-FunctionDecl 0xe285b8 <col:14> col:14 implicit used __atomic_test_and_set 'bool (volatile void *, int) noexcept' extern
|   |-ParmVarDecl 0xe286b0 <<invalid sloc>> <invalid sloc> 'volatile void *'
|   |-ParmVarDecl 0xe28718 <<invalid sloc>> <invalid sloc> 'int'
|   |-BuiltinAttr 0xe28658 <<invalid sloc>> Implicit 654
|   `-NoThrowAttr 0xe28790 <col:14> Implicit
|-LinkageSpecDecl 0xe28e68 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:493:7> col:7 implicit C
| `-FunctionDecl 0xe28eb8 <col:7> col:7 implicit used __builtin_is_constant_evaluated 'bool () noexcept' extern
|   |-BuiltinAttr 0xe28f58 <<invalid sloc>> Implicit 455
|   `-NoThrowAttr 0xe28fb0 <col:7> Implicit
|-LinkageSpecDecl 0xe29208 <line:494:5> col:5 implicit C
| `-FunctionDecl 0xe29258 <col:5> col:5 implicit used __builtin_unreachable 'void () __attribute__((noreturn)) noexcept' extern
|   |-BuiltinAttr 0xe292f8 <<invalid sloc>> Implicit 490
|   `-NoThrowAttr 0xe29350 <col:5> Implicit
|-LinkageSpecDecl 0xe37458 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:270:7> col:7 implicit C
| `-FunctionDecl 0xe374a8 <col:7> col:7 implicit used __atomic_clear 'void (volatile void *, int) noexcept' extern
|   |-ParmVarDecl 0xe375a0 <<invalid sloc>> <invalid sloc> 'volatile void *'
|   |-ParmVarDecl 0xe37608 <<invalid sloc>> <invalid sloc> 'int'
|   |-BuiltinAttr 0xe37548 <<invalid sloc>> Implicit 655
|   `-NoThrowAttr 0xe37680 <col:7> Implicit
|-LinkageSpecDecl 0xe43520 <line:378:16> col:16 implicit C
| `-FunctionDecl 0xe43570 <col:16> col:16 implicit referenced __atomic_add_fetch 'void (...)' extern
|   `-BuiltinAttr 0xe43610 <<invalid sloc>> Implicit 646
|-LinkageSpecDecl 0xe43a08 <line:386:16> col:16 implicit C
| `-FunctionDecl 0xe43a58 <col:16> col:16 implicit referenced __atomic_sub_fetch 'void (...)' extern
|   `-BuiltinAttr 0xe43af8 <<invalid sloc>> Implicit 647
|-LinkageSpecDecl 0xe46e70 <line:410:16> col:16 implicit C
| `-FunctionDecl 0xe46ec0 <col:16> col:16 implicit referenced __atomic_and_fetch 'void (...)' extern
|   `-BuiltinAttr 0xe46f60 <<invalid sloc>> Implicit 648
|-LinkageSpecDecl 0xe47358 <line:418:16> col:16 implicit C
| `-FunctionDecl 0xe473a8 <col:16> col:16 implicit referenced __atomic_or_fetch 'void (...)' extern
|   `-BuiltinAttr 0xe47448 <<invalid sloc>> Implicit 649
|-LinkageSpecDecl 0xe47840 <line:426:16> col:16 implicit C
| `-FunctionDecl 0xe47890 <col:16> col:16 implicit referenced __atomic_xor_fetch 'void (...)' extern
|   `-BuiltinAttr 0xe47930 <<invalid sloc>> Implicit 650
|-LinkageSpecDecl 0xe47dd8 <line:436:9> col:9 implicit C
| `-FunctionDecl 0xe47e28 <col:9> col:9 implicit used __atomic_is_lock_free 'bool (unsigned long, const volatile void *) noexcept' extern
|   |-ParmVarDecl 0xe47f20 <<invalid sloc>> <invalid sloc> 'unsigned long'
|   |-ParmVarDecl 0xe47f88 <<invalid sloc>> <invalid sloc> 'const volatile void *'
|   |-BuiltinAttr 0xe47ec8 <<invalid sloc>> Implicit 659
|   `-NoThrowAttr 0xe48000 <col:9> Implicit
|-LinkageSpecDecl 0xe48cd8 <line:457:2> col:2 implicit C
| `-FunctionDecl 0xe48d28 <col:2> col:2 implicit used __atomic_store_n 'void (...)' extern
|   `-BuiltinAttr 0xe48f90 <<invalid sloc>> Implicit 635
|-LinkageSpecDecl 0xe4a228 <line:481:9> col:9 implicit C
| `-FunctionDecl 0xe4a278 <col:9> col:9 implicit used __atomic_load_n 'void (...)' extern
|   `-BuiltinAttr 0xe4a318 <<invalid sloc>> Implicit 633
|-LinkageSpecDecl 0xe4ad30 <line:499:9> col:9 implicit C
| `-FunctionDecl 0xe4ad80 <col:9> col:9 implicit used __atomic_exchange_n 'void (...)' extern
|   `-BuiltinAttr 0xe4ae20 <<invalid sloc>> Implicit 637
|-LinkageSpecDecl 0xe4e628 <line:522:9> col:9 implicit C
| `-FunctionDecl 0xe4e678 <col:9> col:9 implicit used __atomic_compare_exchange_n 'void (...)' extern
|   `-BuiltinAttr 0xe4e718 <<invalid sloc>> Implicit 639
|-LinkageSpecDecl 0xe52200 <line:636:16> col:16 implicit C
| `-FunctionDecl 0xe52250 <col:16> col:16 implicit referenced __atomic_fetch_add 'void (...)' extern
|   `-BuiltinAttr 0xe522f0 <<invalid sloc>> Implicit 640
|-LinkageSpecDecl 0xe52718 <line:646:16> col:16 implicit C
| `-FunctionDecl 0xe52768 <col:16> col:16 implicit referenced __atomic_fetch_sub 'void (...)' extern
|   `-BuiltinAttr 0xe52808 <<invalid sloc>> Implicit 641
|-LinkageSpecDecl 0xe52c30 <line:656:16> col:16 implicit C
| `-FunctionDecl 0xe52c80 <col:16> col:16 implicit referenced __atomic_fetch_and 'void (...)' extern
|   `-BuiltinAttr 0xe52d20 <<invalid sloc>> Implicit 642
|-LinkageSpecDecl 0xe53148 <line:666:16> col:16 implicit C
| `-FunctionDecl 0xe53198 <col:16> col:16 implicit referenced __atomic_fetch_or 'void (...)' extern
|   `-BuiltinAttr 0xe53238 <<invalid sloc>> Implicit 643
|-LinkageSpecDecl 0xe53660 <line:676:16> col:16 implicit C
| `-FunctionDecl 0xe536b0 <col:16> col:16 implicit referenced __atomic_fetch_xor 'void (...)' extern
|   `-BuiltinAttr 0xe53750 <<invalid sloc>> Implicit 644
|-NamespaceDecl 0xe60a98 prev 0xe1e7a8 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/atomic:43:1, line:1636:1> line:43:11 std
| |-original Namespace 0xc3b940 'std'
| |-VisibilityAttr 0xe60b08 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h:70:49, col:67> Default
| |-ClassTemplateDecl 0xe60c80 prev 0xe22ae0 </usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/atomic:56:3, line:57:12> col:12 atomic
| | |-TemplateTypeParmDecl 0xe60b60 <line:56:12, col:21> col:21 typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xe60bf0 prev 0xe22a50 <line:57:5, col:12> col:12 struct atomic
| | |-ClassTemplateSpecialization 0xe60cf8 'atomic'
| | |-ClassTemplateSpecialization 0xe7d628 'atomic'
| | |-ClassTemplateSpecialization 0xd96f40 'atomic'
| | |-ClassTemplateSpecialization 0xe981e0 'atomic'
| | |-ClassTemplateSpecialization 0xea28b0 'atomic'
| | |-ClassTemplateSpecialization 0xeaaf00 'atomic'
| | |-ClassTemplateSpecialization 0xeb35f8 'atomic'
| | |-ClassTemplateSpecialization 0xebbc00 'atomic'
| | |-ClassTemplateSpecialization 0xec4650 'atomic'
| | |-ClassTemplateSpecialization 0xecea80 'atomic'
| | |-ClassTemplateSpecialization 0xed84b0 'atomic'
| | |-ClassTemplateSpecialization 0xee4b20 'atomic'
| | |-ClassTemplateSpecialization 0xeed158 'atomic'
| | |-ClassTemplateSpecialization 0xef75d8 'atomic'
| | |-ClassTemplateSpecialization 0xeffc28 'atomic'
| | `-ClassTemplateSpecialization 0xf2c410 'atomic'
| |-ClassTemplateSpecializationDecl 0xe60cf8 <line:61:3, line:182:3> line:62:10 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-TemplateArgument type 'bool'
| | | `-BuiltinType 0xbf61d0 'bool'
| | |-CXXRecordDecl 0xe60f08 <col:3, col:10> col:10 implicit referenced struct atomic
| | |-TypeAliasDecl 0xe60fa8 <line:64:5, col:24> col:11 value_type 'bool'
| | | `-BuiltinType 0xbf61d0 'bool'
| | |-AccessSpecDecl 0xe61008 <line:66:3, col:10> col:3 private
| | |-FieldDecl 0xe68100 <line:67:5, col:25> col:25 referenced _M_base '__atomic_base<bool>':'std::__atomic_base<bool>'
| | |-AccessSpecDecl 0xe68150 <line:69:3, col:9> col:3 public
| | |-CXXConstructorDecl 0xe681e8 <line:70:5, col:31> col:5 used atomic 'void () noexcept' default trivial
| | | |-CXXCtorInitializer Field 0xe68100 '_M_base' '__atomic_base<bool>':'std::__atomic_base<bool>'
| | | | `-CXXConstructExpr 0xf2c2d0 <col:5> '__atomic_base<bool>':'std::__atomic_base<bool>' 'void () noexcept'
| | | `-CompoundStmt 0xf2c320 <col:31>
| | |-CXXDestructorDecl 0xe682e0 <line:71:5, col:32> col:5 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xe68488 <line:72:5, col:34> col:5 atomic 'void (const std::atomic<bool> &)' delete trivial
| | | `-ParmVarDecl 0xe683c8 <col:12, col:24> col:25 'const std::atomic<bool> &'
| | |-CXXMethodDecl 0xe68648 <line:73:5, col:45> col:13 operator= 'std::atomic<bool> &(const std::atomic<bool> &)' delete trivial
| | | `-ParmVarDecl 0xe68558 <col:23, col:35> col:36 'const std::atomic<bool> &'
| | |-CXXMethodDecl 0xe687f8 <line:74:5, col:54> col:13 operator= 'std::atomic<bool> &(const std::atomic<bool> &) volatile' delete trivial
| | | `-ParmVarDecl 0xe68700 <col:23, col:35> col:36 'const std::atomic<bool> &'
| | |-CXXConstructorDecl 0xe68958 <line:76:5, col:58> col:15 constexpr atomic 'void (bool) noexcept'
| | | |-ParmVarDecl 0xe688c0 <col:22, col:27> col:27 used __i 'bool'
| | | |-CXXCtorInitializer Field 0xe68100 '_M_base' '__atomic_base<bool>':'std::__atomic_base<bool>'
| | | | `-CXXConstructExpr 0xe6b710 <col:43, col:54> '__atomic_base<bool>':'std::__atomic_base<bool>' 'void (std::__atomic_base<bool>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xe6b580 <col:51> 'bool' <LValueToRValue>
| | | |     `-DeclRefExpr 0xe6b540 <col:51> 'bool' lvalue ParmVar 0xe688c0 '__i' 'bool'
| | | `-CompoundStmt 0xe6b768 <col:56, col:58>
| | |-CXXMethodDecl 0xe68af0 <line:78:5, line:80:38> line:79:5 operator= 'bool (bool) noexcept'
| | | |-ParmVarDecl 0xe68a28 <col:15, col:20> col:20 used __i 'bool'
| | | `-CompoundStmt 0xe6b990 <line:80:5, col:38>
| | |   `-ReturnStmt 0xe6b980 <col:7, col:35>
| | |     `-CXXMemberCallExpr 0xe6b940 <col:14, col:35> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xe6b910 <col:14, col:30> '<bound member function type>' .operator= 0xe62460
| | |       | `-MemberExpr 0xe6b850 <col:14> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6b840 <col:14> 'std::atomic<bool> *' implicit this
| | |       `-ImplicitCastExpr 0xe6b968 <col:32> 'bool' <LValueToRValue>
| | |         `-DeclRefExpr 0xe6b8f0 <col:32> 'bool' lvalue ParmVar 0xe68a28 '__i' 'bool'
| | |-CXXMethodDecl 0xe68c80 <line:82:5, line:84:38> line:83:5 operator= 'bool (bool) volatile noexcept'
| | | |-ParmVarDecl 0xe68bb8 <col:15, col:20> col:20 used __i 'bool'
| | | `-CompoundStmt 0xe6bb48 <line:84:5, col:38>
| | |   `-ReturnStmt 0xe6bb38 <col:7, col:35>
| | |     `-CXXMemberCallExpr 0xe6baa8 <col:14, col:35> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xe6ba78 <col:14, col:30> '<bound member function type>' .operator= 0xe62630
| | |       | `-MemberExpr 0xe6b9b8 <col:14> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6b9a8 <col:14> 'volatile std::atomic<bool> *' implicit this
| | |       `-ImplicitCastExpr 0xe6baf8 <col:32> 'bool' <LValueToRValue>
| | |         `-DeclRefExpr 0xe6ba58 <col:32> 'bool' lvalue ParmVar 0xe68bb8 '__i' 'bool'
| | |-CXXConversionDecl 0xe68da0 <line:86:5, line:87:30> line:86:5 used operator bool 'bool () const noexcept'
| | | `-CompoundStmt 0xe6bce8 <line:87:5, col:30>
| | |   `-ReturnStmt 0xe6bcd8 <col:7, col:27>
| | |     `-CXXMemberCallExpr 0xe6bc30 <col:14, col:27> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xe6bc00 <col:14, col:22> '<bound member function type>' .load 0xe64750
| | |       | `-MemberExpr 0xe6bb70 <col:14> 'const __atomic_base<bool>':'const std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6bb60 <col:14> 'const std::atomic<bool> *' implicit this
| | |       `-CXXDefaultArgExpr 0xe6bc88 <<invalid sloc>> 'std::memory_order'
| | |-CXXConversionDecl 0xe68eb0 <line:89:5, line:90:30> line:89:5 operator bool 'bool () const volatile noexcept'
| | | `-CompoundStmt 0xe6be88 <line:90:5, col:30>
| | |   `-ReturnStmt 0xe6be78 <col:7, col:27>
| | |     `-CXXMemberCallExpr 0xe6bdd0 <col:14, col:27> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xe6bda0 <col:14, col:22> '<bound member function type>' .load 0xe64960
| | |       | `-MemberExpr 0xe6bd10 <col:14> 'const volatile __atomic_base<bool>':'const volatile std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6bd00 <col:14> 'const volatile std::atomic<bool> *' implicit this
| | |       `-CXXDefaultArgExpr 0xe6be28 <<invalid sloc>> 'std::memory_order'
| | |-CXXMethodDecl 0xe68fa0 <line:92:5, line:93:68> col:5 is_lock_free 'bool () const noexcept'
| | | `-CompoundStmt 0xe6bfa0 <col:35, col:68>
| | |   `-ReturnStmt 0xe6bf90 <col:37, col:65>
| | |     `-CXXMemberCallExpr 0xe6bf70 <col:44, col:65> 'bool'
| | |       `-MemberExpr 0xe6bf40 <col:44, col:52> '<bound member function type>' .is_lock_free 0xe63f60
| | |         `-MemberExpr 0xe6beb0 <col:44> 'const __atomic_base<bool>':'const std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |           `-CXXThisExpr 0xe6bea0 <col:44> 'const std::atomic<bool> *' implicit this
| | |-CXXMethodDecl 0xe69068 <line:95:5, line:96:77> col:5 is_lock_free 'bool () const volatile noexcept'
| | | `-CompoundStmt 0xe6c0b8 <col:44, col:77>
| | |   `-ReturnStmt 0xe6c0a8 <col:46, col:74>
| | |     `-CXXMemberCallExpr 0xe6c088 <col:53, col:74> 'bool'
| | |       `-MemberExpr 0xe6c058 <col:53, col:61> '<bound member function type>' .is_lock_free 0xe64010
| | |         `-MemberExpr 0xe6bfc8 <col:53> 'const volatile __atomic_base<bool>':'const volatile std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |           `-CXXThisExpr 0xe6bfb8 <col:53> 'const volatile std::atomic<bool> *' implicit this
| | |-CXXMethodDecl 0xe692e0 <line:102:5, line:104:32> line:103:5 store 'void (bool, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe69190 <col:11, col:16> col:16 used __i 'bool'
| | | |-ParmVarDecl 0xe69208 <col:21, col:40> col:34 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe6b400 <col:40> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe6c288 <line:104:5, col:32>
| | |   `-CXXMemberCallExpr 0xe6c228 <col:7, col:29> 'void'
| | |     |-MemberExpr 0xe6c1f8 <col:7, col:15> '<bound member function type>' .store 0xe64260
| | |     | `-MemberExpr 0xe6c128 <col:7> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |     |   `-CXXThisExpr 0xe6c118 <col:7> 'std::atomic<bool> *' implicit this
| | |     |-ImplicitCastExpr 0xe6c258 <col:21> 'bool' <LValueToRValue>
| | |     | `-DeclRefExpr 0xe6c1b8 <col:21> 'bool' lvalue ParmVar 0xe69190 '__i' 'bool'
| | |     `-ImplicitCastExpr 0xe6c270 <col:26> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |       `-DeclRefExpr 0xe6c1d8 <col:26> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe69208 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe694f0 <line:106:5, line:108:32> line:107:5 store 'void (bool, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xe693a0 <col:11, col:16> col:16 used __i 'bool'
| | | |-ParmVarDecl 0xe69418 <col:21, col:40> col:34 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe6b420 <col:40> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe6c458 <line:108:5, col:32>
| | |   `-CXXMemberCallExpr 0xe6c3f8 <col:7, col:29> 'void'
| | |     |-MemberExpr 0xe6c3c8 <col:7, col:15> '<bound member function type>' .store 0xe64530
| | |     | `-MemberExpr 0xe6c2f8 <col:7> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |     |   `-CXXThisExpr 0xe6c2e8 <col:7> 'volatile std::atomic<bool> *' implicit this
| | |     |-ImplicitCastExpr 0xe6c428 <col:21> 'bool' <LValueToRValue>
| | |     | `-DeclRefExpr 0xe6c388 <col:21> 'bool' lvalue ParmVar 0xe693a0 '__i' 'bool'
| | |     `-ImplicitCastExpr 0xe6c440 <col:26> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |       `-DeclRefExpr 0xe6c3a8 <col:26> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe69418 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe69690 <line:110:5, line:112:33> line:111:5 load 'bool (std::memory_order) const noexcept'
| | | |-ParmVarDecl 0xe695c0 <col:10, col:29> col:23 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe6b440 <col:29> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe6c5b0 <line:112:5, col:33>
| | |   `-ReturnStmt 0xe6c5a0 <col:7, col:30>
| | |     `-CXXMemberCallExpr 0xe6c560 <col:14, col:30> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xe6c530 <col:14, col:22> '<bound member function type>' .load 0xe64750
| | |       | `-MemberExpr 0xe6c480 <col:14> 'const __atomic_base<bool>':'const std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6c470 <col:14> 'const std::atomic<bool> *' implicit this
| | |       `-ImplicitCastExpr 0xe6c588 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xe6c510 <col:27> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe695c0 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe69810 <line:114:5, line:116:33> line:115:5 load 'bool (std::memory_order) const volatile noexcept'
| | | |-ParmVarDecl 0xe69748 <col:10, col:29> col:23 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe6b460 <col:29> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe6c708 <line:116:5, col:33>
| | |   `-ReturnStmt 0xe6c6f8 <col:7, col:30>
| | |     `-CXXMemberCallExpr 0xe6c6b8 <col:14, col:30> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xe6c688 <col:14, col:22> '<bound member function type>' .load 0xe64960
| | |       | `-MemberExpr 0xe6c5d8 <col:14> 'const volatile __atomic_base<bool>':'const volatile std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6c5c8 <col:14> 'const volatile std::atomic<bool> *' implicit this
| | |       `-ImplicitCastExpr 0xe6c6e0 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xe6c668 <col:27> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe69748 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe69a30 <line:118:5, line:120:42> line:119:5 exchange 'bool (bool, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe698d8 <col:14, col:19> col:19 used __i 'bool'
| | | |-ParmVarDecl 0xe69950 <col:24, col:43> col:37 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe6b480 <col:43> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe6c8a0 <line:120:5, col:42>
| | |   `-ReturnStmt 0xe6c890 <col:7, col:39>
| | |     `-CXXMemberCallExpr 0xe6c830 <col:14, col:39> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xe6c800 <col:14, col:22> '<bound member function type>' .exchange 0xe64c10
| | |       | `-MemberExpr 0xe6c730 <col:14> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6c720 <col:14> 'std::atomic<bool> *' implicit this
| | |       |-ImplicitCastExpr 0xe6c860 <col:31> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xe6c7c0 <col:31> 'bool' lvalue ParmVar 0xe698d8 '__i' 'bool'
| | |       `-ImplicitCastExpr 0xe6c878 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xe6c7e0 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe69950 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe69c40 <line:122:5, line:125:42> line:123:5 exchange 'bool (bool, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xe69af0 <col:14, col:19> col:19 used __i 'bool'
| | | |-ParmVarDecl 0xe69b68 <line:124:7, col:26> col:20 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe6b4a0 <col:26> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe6ca38 <line:125:5, col:42>
| | |   `-ReturnStmt 0xe6ca28 <col:7, col:39>
| | |     `-CXXMemberCallExpr 0xe6c9c8 <col:14, col:39> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xe6c998 <col:14, col:22> '<bound member function type>' .exchange 0xe64ec0
| | |       | `-MemberExpr 0xe6c8c8 <col:14> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6c8b8 <col:14> 'volatile std::atomic<bool> *' implicit this
| | |       |-ImplicitCastExpr 0xe6c9f8 <col:31> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xe6c958 <col:31> 'bool' lvalue ParmVar 0xe69af0 '__i' 'bool'
| | |       `-ImplicitCastExpr 0xe6ca10 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xe6c978 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe69b68 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe69f80 <line:127:5, line:130:69> line:128:5 compare_exchange_weak 'bool (bool &, bool, std::memory_order, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe69d18 <col:27, col:33> col:33 used __i1 'bool &'
| | | |-ParmVarDecl 0xe69d90 <col:39, col:44> col:44 used __i2 'bool'
| | | |-ParmVarDecl 0xe69e08 <col:50, col:63> col:63 used __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xe69e80 <line:129:6, col:19> col:19 used __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xe6cc48 <line:130:5, col:69>
| | |   `-ReturnStmt 0xe6cc38 <col:7, col:66>
| | |     `-CXXMemberCallExpr 0xe6cbb0 <col:14, col:66> 'bool'
| | |       |-MemberExpr 0xe6cb80 <col:14, col:22> '<bound member function type>' .compare_exchange_weak 0xe65320
| | |       | `-MemberExpr 0xe6ca60 <col:14> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6ca50 <col:14> 'std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xe6cb00 <col:44> 'bool' lvalue ParmVar 0xe69d18 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xe6cbf0 <col:50> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xe6cb20 <col:50> 'bool' lvalue ParmVar 0xe69d90 '__i2' 'bool'
| | |       |-ImplicitCastExpr 0xe6cc08 <col:56> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |       | `-DeclRefExpr 0xe6cb40 <col:56> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe69e08 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-ImplicitCastExpr 0xe6cc20 <col:62> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xe6cb60 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe69e80 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe6a2c0 <line:132:5, line:135:69> line:133:5 compare_exchange_weak 'bool (bool &, bool, std::memory_order, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xe6a058 <col:27, col:33> col:33 used __i1 'bool &'
| | | |-ParmVarDecl 0xe6a0d0 <col:39, col:44> col:44 used __i2 'bool'
| | | |-ParmVarDecl 0xe6a148 <col:50, col:63> col:63 used __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xe6a1c0 <line:134:6, col:19> col:19 used __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xe6ce58 <line:135:5, col:69>
| | |   `-ReturnStmt 0xe6ce48 <col:7, col:66>
| | |     `-CXXMemberCallExpr 0xe6cdc0 <col:14, col:66> 'bool'
| | |       |-MemberExpr 0xe6cd90 <col:14, col:22> '<bound member function type>' .compare_exchange_weak 0xe656f0
| | |       | `-MemberExpr 0xe6cc70 <col:14> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6cc60 <col:14> 'volatile std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xe6cd10 <col:44> 'bool' lvalue ParmVar 0xe6a058 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xe6ce00 <col:50> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xe6cd30 <col:50> 'bool' lvalue ParmVar 0xe6a0d0 '__i2' 'bool'
| | |       |-ImplicitCastExpr 0xe6ce18 <col:56> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |       | `-DeclRefExpr 0xe6cd50 <col:56> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6a148 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-ImplicitCastExpr 0xe6ce30 <col:62> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xe6cd70 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6a1c0 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe6a580 <line:137:5, line:140:62> line:138:5 compare_exchange_weak 'bool (bool &, bool, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe6a3a8 <col:27, col:33> col:33 used __i1 'bool &'
| | | |-ParmVarDecl 0xe6a420 <col:39, col:44> col:44 used __i2 'bool'
| | | |-ParmVarDecl 0xe6a498 <line:139:6, col:25> col:19 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe6b4c0 <col:25> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe6d028 <line:140:5, col:62>
| | |   `-ReturnStmt 0xe6d018 <col:7, col:59>
| | |     `-CXXMemberCallExpr 0xe6cfb0 <col:14, col:59> 'bool'
| | |       |-MemberExpr 0xe6cf80 <col:14, col:22> '<bound member function type>' .compare_exchange_weak 0xe65a40
| | |       | `-MemberExpr 0xe6ce80 <col:14> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6ce70 <col:14> 'std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xe6cf20 <col:44> 'bool' lvalue ParmVar 0xe6a3a8 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xe6cfe8 <col:50> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xe6cf40 <col:50> 'bool' lvalue ParmVar 0xe6a420 '__i2' 'bool'
| | |       `-ImplicitCastExpr 0xe6d000 <col:56> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xe6cf60 <col:56> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6a498 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe6a840 <line:142:5, line:145:62> line:143:5 compare_exchange_weak 'bool (bool &, bool, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xe6a660 <col:27, col:33> col:33 used __i1 'bool &'
| | | |-ParmVarDecl 0xe6a6d8 <col:39, col:44> col:44 used __i2 'bool'
| | | |-ParmVarDecl 0xe6a750 <line:144:8, col:27> col:21 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe6b4e0 <col:27> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe6d228 <line:145:5, col:62>
| | |   `-ReturnStmt 0xe6d218 <col:7, col:59>
| | |     `-CXXMemberCallExpr 0xe6d1b0 <col:14, col:59> 'bool'
| | |       |-MemberExpr 0xe6d150 <col:14, col:22> '<bound member function type>' .compare_exchange_weak 0xe65d90
| | |       | `-MemberExpr 0xe6d050 <col:14> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6d040 <col:14> 'volatile std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xe6d0f0 <col:44> 'bool' lvalue ParmVar 0xe6a660 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xe6d1e8 <col:50> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xe6d110 <col:50> 'bool' lvalue ParmVar 0xe6a6d8 '__i2' 'bool'
| | |       `-ImplicitCastExpr 0xe6d200 <col:56> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xe6d130 <col:56> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6a750 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe6ab38 <line:147:5, line:150:71> line:148:5 compare_exchange_strong 'bool (bool &, bool, std::memory_order, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe6a920 <col:29, col:35> col:35 used __i1 'bool &'
| | | |-ParmVarDecl 0xe6a998 <col:41, col:46> col:46 used __i2 'bool'
| | | |-ParmVarDecl 0xe6aa10 <col:52, col:65> col:65 used __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xe6aa88 <line:149:8, col:21> col:21 used __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xe6d438 <line:150:5, col:71>
| | |   `-ReturnStmt 0xe6d428 <col:7, col:68>
| | |     `-CXXMemberCallExpr 0xe6d3a0 <col:14, col:68> 'bool'
| | |       |-MemberExpr 0xe6d370 <col:14, col:22> '<bound member function type>' .compare_exchange_strong 0xe660c8
| | |       | `-MemberExpr 0xe6d250 <col:14> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6d240 <col:14> 'std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xe6d2f0 <col:46> 'bool' lvalue ParmVar 0xe6a920 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xe6d3e0 <col:52> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xe6d310 <col:52> 'bool' lvalue ParmVar 0xe6a998 '__i2' 'bool'
| | |       |-ImplicitCastExpr 0xe6d3f8 <col:58> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |       | `-DeclRefExpr 0xe6d330 <col:58> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6aa10 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-ImplicitCastExpr 0xe6d410 <col:64> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xe6d350 <col:64> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6aa88 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe6ae28 <line:152:5, line:155:71> line:153:5 compare_exchange_strong 'bool (bool &, bool, std::memory_order, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xe6ac10 <col:29, col:35> col:35 used __i1 'bool &'
| | | |-ParmVarDecl 0xe6ac88 <col:41, col:46> col:46 used __i2 'bool'
| | | |-ParmVarDecl 0xe6ad00 <col:52, col:65> col:65 used __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xe6ad78 <line:154:8, col:21> col:21 used __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xe6d648 <line:155:5, col:71>
| | |   `-ReturnStmt 0xe6d638 <col:7, col:68>
| | |     `-CXXMemberCallExpr 0xe6d5b0 <col:14, col:68> 'bool'
| | |       |-MemberExpr 0xe6d580 <col:14, col:22> '<bound member function type>' .compare_exchange_strong 0xe663f8
| | |       | `-MemberExpr 0xe6d460 <col:14> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6d450 <col:14> 'volatile std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xe6d500 <col:46> 'bool' lvalue ParmVar 0xe6ac10 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xe6d5f0 <col:52> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xe6d520 <col:52> 'bool' lvalue ParmVar 0xe6ac88 '__i2' 'bool'
| | |       |-ImplicitCastExpr 0xe6d608 <col:58> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |       | `-DeclRefExpr 0xe6d540 <col:58> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6ad00 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-ImplicitCastExpr 0xe6d620 <col:64> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xe6d560 <col:64> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6ad78 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe6b0a8 <line:157:5, line:160:64> line:158:5 compare_exchange_strong 'bool (bool &, bool, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe6af10 <col:29, col:35> col:35 used __i1 'bool &'
| | | |-ParmVarDecl 0xe6af88 <col:41, col:46> col:46 used __i2 'bool'
| | | |-ParmVarDecl 0xe6b000 <line:159:8, col:27> col:21 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe6b500 <col:27> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe6d818 <line:160:5, col:64>
| | |   `-ReturnStmt 0xe6d808 <col:7, col:61>
| | |     `-CXXMemberCallExpr 0xe6d7a0 <col:14, col:61> 'bool'
| | |       |-MemberExpr 0xe6d770 <col:14, col:22> '<bound member function type>' .compare_exchange_strong 0xe666c8
| | |       | `-MemberExpr 0xe6d670 <col:14> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| | |       |   `-CXXThisExpr 0xe6d660 <col:14> 'std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xe6d710 <col:46> 'bool' lvalue ParmVar 0xe6af10 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xe6d7d8 <col:52> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xe6d730 <col:52> 'bool' lvalue ParmVar 0xe6af88 '__i2' 'bool'
| | |       `-ImplicitCastExpr 0xe6d7f0 <col:58> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xe6d750 <col:58> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6b000 '__m' 'std::memory_order':'std::memory_order'
| | `-CXXMethodDecl 0xe6b338 <line:162:5, line:165:64> line:163:5 compare_exchange_strong 'bool (bool &, bool, std::memory_order) volatile noexcept'
| |   |-ParmVarDecl 0xe6b1a0 <col:29, col:35> col:35 used __i1 'bool &'
| |   |-ParmVarDecl 0xe6b218 <col:41, col:46> col:46 used __i2 'bool'
| |   |-ParmVarDecl 0xe6b290 <line:164:7, col:26> col:20 used __m 'std::memory_order':'std::memory_order' cinit
| |   | `-DeclRefExpr 0xe6b520 <col:26> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |   `-CompoundStmt 0xe6d9e8 <line:165:5, col:64>
| |     `-ReturnStmt 0xe6d9d8 <col:7, col:61>
| |       `-CXXMemberCallExpr 0xe6d970 <col:14, col:61> 'bool'
| |         |-MemberExpr 0xe6d940 <col:14, col:22> '<bound member function type>' .compare_exchange_strong 0xe66990
| |         | `-MemberExpr 0xe6d840 <col:14> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xe68100
| |         |   `-CXXThisExpr 0xe6d830 <col:14> 'volatile std::atomic<bool> *' implicit this
| |         |-DeclRefExpr 0xe6d8e0 <col:46> 'bool' lvalue ParmVar 0xe6b1a0 '__i1' 'bool &'
| |         |-ImplicitCastExpr 0xe6d9a8 <col:52> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0xe6d900 <col:52> 'bool' lvalue ParmVar 0xe6b218 '__i2' 'bool'
| |         `-ImplicitCastExpr 0xe6d9c0 <col:58> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |           `-DeclRefExpr 0xe6d920 <col:58> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6b290 '__m' 'std::memory_order':'std::memory_order'
| |-ClassTemplateDecl 0xe6db20 prev 0xe60c80 <line:195:3, line:402:5> line:196:12 atomic
| | |-TemplateTypeParmDecl 0xe6da00 <line:195:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xe6da90 prev 0xe60bf0 <line:196:5, line:402:5> line:196:12 struct atomic definition
| | | |-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists
| | | | |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant non_trivial user_declared
| | | |-CXXRecordDecl 0xe6dbe0 <col:5, col:12> col:12 implicit referenced struct atomic
| | | |-TypeAliasDecl 0xe6dc80 <line:198:7, col:26> col:13 value_type '_Tp'
| | | | `-TemplateTypeParmType 0xe6da50 '_Tp' dependent depth 0 index 0
| | | |   `-TemplateTypeParm 0xe6da00 '_Tp'
| | | |-AccessSpecDecl 0xe6dce0 <line:200:5, col:12> col:5 private
| | | |-VarDecl 0xe6dd20 <line:202:7, line:204:18> line:202:28 referenced _S_min_alignment 'const int' static constexpr cinit
| | | | `-ImplicitCastExpr 0xe6dff8 <line:203:4, line:204:18> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xe6dfc8 <line:203:4, line:204:18> 'unsigned long'
| | | |     |-BinaryOperator 0xe6df40 <line:203:4, col:55> 'bool' '||'
| | | |     | |-ImplicitCastExpr 0xe6df28 <col:4, col:36> 'bool' <IntegralToBoolean>
| | | |     | | `-ParenExpr 0xe6de80 <col:4, col:36> 'unsigned long'
| | | |     | |   `-BinaryOperator 0xe6de60 <col:5, col:35> 'unsigned long' '&'
| | | |     | |     |-UnaryExprOrTypeTraitExpr 0xe6dd98 <col:5, col:15> 'unsigned long' sizeof '_Tp'
| | | |     | |     `-ParenExpr 0xe6de40 <col:19, col:35> 'unsigned long'
| | | |     | |       `-BinaryOperator 0xe6de20 <col:20, col:34> 'unsigned long' '-'
| | | |     | |         |-UnaryExprOrTypeTraitExpr 0xe6ddc8 <col:20, col:30> 'unsigned long' sizeof '_Tp'
| | | |     | |         `-ImplicitCastExpr 0xe6de08 <col:34> 'unsigned long' <IntegralCast>
| | | |     | |           `-IntegerLiteral 0xe6dde8 <col:34> 'int' 1
| | | |     | `-BinaryOperator 0xe6df08 <col:41, col:55> 'bool' '>'
| | | |     |   |-UnaryExprOrTypeTraitExpr 0xe6deb0 <col:41, col:51> 'unsigned long' sizeof '_Tp'
| | | |     |   `-ImplicitCastExpr 0xe6def0 <col:55> 'unsigned long' <IntegralCast>
| | | |     |     `-IntegerLiteral 0xe6ded0 <col:55> 'int' 16
| | | |     |-ImplicitCastExpr 0xe6dfb0 <line:204:4> 'unsigned long' <IntegralCast>
| | | |     | `-IntegerLiteral 0xe6df60 <col:4> 'int' 0
| | | |     `-UnaryExprOrTypeTraitExpr 0xe6df90 <col:8, col:18> 'unsigned long' sizeof '_Tp'
| | | |-VarDecl 0xe6e028 <line:206:7, line:207:75> line:206:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | `-ImplicitCastExpr 0xe6e1e0 <line:207:11, col:75> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xe6e1b0 <col:11, col:75> 'unsigned long'
| | | |     |-BinaryOperator 0xe6e110 <col:11, col:41> 'bool' '>'
| | | |     | |-ImplicitCastExpr 0xe6e0f8 <col:11> 'unsigned long' <IntegralCast>
| | | |     | | `-ImplicitCastExpr 0xe6e0e0 <col:11> 'int' <LValueToRValue>
| | | |     | |   `-DeclRefExpr 0xe6e090 <col:11> 'const int' lvalue Var 0xe6dd20 '_S_min_alignment' 'const int'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xe6e0c0 <col:30, col:41> 'unsigned long' alignof '_Tp'
| | | |     |-ImplicitCastExpr 0xe6e198 <col:45> 'unsigned long' <IntegralCast>
| | | |     | `-ImplicitCastExpr 0xe6e180 <col:45> 'int' <LValueToRValue>
| | | |     |   `-DeclRefExpr 0xe6e130 <col:45> 'const int' lvalue Var 0xe6dd20 '_S_min_alignment' 'const int'
| | | |     `-UnaryExprOrTypeTraitExpr 0xe6e160 <col:64, col:75> 'unsigned long' alignof '_Tp'
| | | |-FieldDecl 0xe6e270 <line:209:29, col:33> col:33 referenced _M_i '_Tp'
| | | | `-AlignedAttr 0xe6e2c0 <col:7> alignas
| | | |   `-DeclRefExpr 0xe6e240 <col:15> 'const int' lvalue Var 0xe6e028 '_S_alignment' 'const int'
| | | |-StaticAssertDecl 0xe6e410 <line:211:7, line:212:55> line:211:7
| | | | |-TypeTraitExpr 0xe6e330 <col:21, col:48> 'bool' __is_trivially_copyable
| | | | `-StringLiteral 0xe6e3c8 <line:212:7> 'const char[47]' lvalue "std::atomic requires a trivially copyable type"
| | | |-StaticAssertDecl 0xe6e5a0 <line:214:7, line:215:57> line:214:7
| | | | |-BinaryOperator 0xe6e4b8 <col:21, col:35> 'bool' '>'
| | | | | |-UnaryExprOrTypeTraitExpr 0xe6e460 <col:21, col:31> 'unsigned long' sizeof '_Tp'
| | | | | `-ImplicitCastExpr 0xe6e4a0 <col:35> 'unsigned long' <IntegralCast>
| | | | |   `-IntegerLiteral 0xe6e480 <col:35> 'int' 0
| | | | `-StringLiteral 0xe6e558 <line:215:7> 'const char[49]' lvalue "Incomplete or zero-sized types are not supported"
| | | |-AccessSpecDecl 0xe6e5e0 <line:224:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xe6e670 <line:225:7, col:24> col:7 atomic<_Tp> 'void ()' default
| | | |-CXXDestructorDecl 0xe6e768 <line:226:7, col:34> col:7 ~atomic<_Tp> 'void () noexcept' default
| | | |-CXXConstructorDecl 0xe6e918 <line:227:7, col:36> col:7 atomic<_Tp> 'void (const atomic<_Tp> &)' delete
| | | | `-ParmVarDecl 0xe6e858 <col:14, col:26> col:27 'const atomic<_Tp> &'
| | | |-CXXMethodDecl 0xe6ead8 <line:228:7, col:47> col:15 operator= 'atomic<_Tp> &(const atomic<_Tp> &)' delete
| | | | `-ParmVarDecl 0xe6e9e8 <col:25, col:37> col:38 'const atomic<_Tp> &'
| | | |-CXXMethodDecl 0xe6ec88 <line:229:7, col:56> col:15 operator= 'atomic<_Tp> &(const atomic<_Tp> &) volatile' delete
| | | | `-ParmVarDecl 0xe6eb90 <col:25, col:37> col:38 'const atomic<_Tp> &'
| | | |-CXXConstructorDecl 0xe6ee20 <line:231:7, col:56> col:17 constexpr atomic<_Tp> 'void (_Tp) noexcept'
| | | | |-ParmVarDecl 0xe6ed50 <col:24, col:28> col:28 referenced __i '_Tp'
| | | | |-CXXCtorInitializer Field 0xe6e270 '_M_i' '_Tp'
| | | | | `-ParenListExpr 0xe71a80 <col:48, col:52> 'NULL TYPE'
| | | | |   `-DeclRefExpr 0xe71a60 <col:49> '_Tp' lvalue ParmVar 0xe6ed50 '__i' '_Tp'
| | | | `-CompoundStmt 0xe71ac8 <col:54, col:56>
| | | |-CXXConversionDecl 0xe6ef70 <line:233:7, line:234:24> line:233:7 operator type-parameter-0-0 '_Tp () const noexcept'
| | | | `-CompoundStmt 0xe71b78 <line:234:7, col:24>
| | | |   `-ReturnStmt 0xe71b68 <col:9, col:21>
| | | |     `-CallExpr 0xe71b48 <col:16, col:21> '<dependent type>'
| | | |       `-UnresolvedMemberExpr 0xe71ae8 <col:16> '<bound member function type>' lvalue
| | | |-CXXConversionDecl 0xe6f0b0 <line:236:7, line:237:24> line:236:7 operator type-parameter-0-0 '_Tp () const volatile noexcept'
| | | | `-CompoundStmt 0xe71c30 <line:237:7, col:24>
| | | |   `-ReturnStmt 0xe71c20 <col:9, col:21>
| | | |     `-CallExpr 0xe71c00 <col:16, col:21> '<dependent type>'
| | | |       `-UnresolvedMemberExpr 0xe71ba0 <col:16> '<bound member function type>' lvalue
| | | |-CXXMethodDecl 0xe6f290 <line:239:7, line:241:33> line:240:7 operator= '_Tp (_Tp) noexcept'
| | | | |-ParmVarDecl 0xe6f1c0 <col:17, col:21> col:21 referenced __i '_Tp'
| | | | `-CompoundStmt 0xe71d80 <line:241:7, col:33>
| | | |   |-CallExpr 0xe71d28 <col:9, col:18> '<dependent type>'
| | | |   | |-UnresolvedMemberExpr 0xe71ca8 <col:9> '<bound member function type>' lvalue
| | | |   | `-DeclRefExpr 0xe71d08 <col:15> '_Tp' lvalue ParmVar 0xe6f1c0 '__i' '_Tp'
| | | |   `-ReturnStmt 0xe71d70 <col:21, col:28>
| | | |     `-DeclRefExpr 0xe71d50 <col:28> '_Tp' lvalue ParmVar 0xe6f1c0 '__i' '_Tp'
| | | |-CXXMethodDecl 0xe6f420 <line:243:7, line:245:33> line:244:7 operator= '_Tp (_Tp) volatile noexcept'
| | | | |-ParmVarDecl 0xe6f358 <col:17, col:21> col:21 referenced __i '_Tp'
| | | | `-CompoundStmt 0xe71ed8 <line:245:7, col:33>
| | | |   |-CallExpr 0xe71e80 <col:9, col:18> '<dependent type>'
| | | |   | |-UnresolvedMemberExpr 0xe71e00 <col:9> '<bound member function type>' lvalue
| | | |   | `-DeclRefExpr 0xe71e60 <col:15> '_Tp' lvalue ParmVar 0xe6f358 '__i' '_Tp'
| | | |   `-ReturnStmt 0xe71ec8 <col:21, col:28>
| | | |     `-DeclRefExpr 0xe71ea8 <col:28> '_Tp' lvalue ParmVar 0xe6f358 '__i' '_Tp'
| | | |-CXXMethodDecl 0xe6f500 <line:247:7, line:253:7> line:248:7 is_lock_free 'bool () const noexcept'
| | | | `-CompoundStmt 0xe720e8 <line:249:7, line:253:7>
| | | |   `-ReturnStmt 0xe720d8 <line:251:2, line:252:45>
| | | |     `-CallExpr 0xe72090 <line:251:9, line:252:45> 'bool'
| | | |       |-ImplicitCastExpr 0xe72078 <line:251:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
| | | |       | `-DeclRefExpr 0xe71ef8 <col:9> '<builtin fn type>' Function 0xe47e28 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
| | | |       |-UnaryExprOrTypeTraitExpr 0xe71fc0 <col:31, col:42> 'unsigned long' sizeof
| | | |       | `-ParenExpr 0xe71fa0 <col:37, col:42> 'const _Tp' lvalue
| | | |       |   `-MemberExpr 0xe71f70 <col:38> 'const _Tp' lvalue ->_M_i 0xe6e270 non_odr_use_unevaluated
| | | |       |     `-CXXThisExpr 0xe71f60 <col:38> 'const atomic<_Tp> *' implicit this
| | | |       `-ImplicitCastExpr 0xe720c0 <line:252:6, col:44> 'const volatile void *' <NoOp>
| | | |         `-CXXReinterpretCastExpr 0xe72048 <col:6, col:44> 'void *' reinterpret_cast<void *> <IntegralToPointer>
| | | |           `-UnaryOperator 0xe72018 <col:31, col:32> 'int' prefix '-'
| | | |             `-ImplicitCastExpr 0xe72000 <col:32> 'int' <LValueToRValue>
| | | |               `-DeclRefExpr 0xe71fe0 <col:32> 'const int' lvalue Var 0xe6e028 '_S_alignment' 'const int'
| | | |-CXXMethodDecl 0xe6f5c8 <line:255:7, line:261:7> line:256:7 is_lock_free 'bool () const volatile noexcept'
| | | | `-CompoundStmt 0xe722f0 <line:257:7, line:261:7>
| | | |   `-ReturnStmt 0xe722e0 <line:259:2, line:260:45>
| | | |     `-CallExpr 0xe72298 <line:259:9, line:260:45> 'bool'
| | | |       |-ImplicitCastExpr 0xe72280 <line:259:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
| | | |       | `-DeclRefExpr 0xe72100 <col:9> '<builtin fn type>' Function 0xe47e28 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
| | | |       |-UnaryExprOrTypeTraitExpr 0xe721c8 <col:31, col:42> 'unsigned long' sizeof
| | | |       | `-ParenExpr 0xe721a8 <col:37, col:42> 'const volatile _Tp' lvalue
| | | |       |   `-MemberExpr 0xe72178 <col:38> 'const volatile _Tp' lvalue ->_M_i 0xe6e270 non_odr_use_unevaluated
| | | |       |     `-CXXThisExpr 0xe72168 <col:38> 'const volatile atomic<_Tp> *' implicit this
| | | |       `-ImplicitCastExpr 0xe722c8 <line:260:6, col:44> 'const volatile void *' <NoOp>
| | | |         `-CXXReinterpretCastExpr 0xe72250 <col:6, col:44> 'void *' reinterpret_cast<void *> <IntegralToPointer>
| | | |           `-UnaryOperator 0xe72220 <col:31, col:32> 'int' prefix '-'
| | | |             `-ImplicitCastExpr 0xe72208 <col:32> 'int' <LValueToRValue>
| | | |               `-DeclRefExpr 0xe721e8 <col:32> 'const int' lvalue Var 0xe6e028 '_S_alignment' 'const int'
| | | |-CXXMethodDecl 0xe6f7e0 <line:268:7, line:272:7> line:269:7 store 'void (_Tp, std::memory_order) noexcept'
| | | | |-ParmVarDecl 0xe6f688 <col:13, col:17> col:17 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xe6f700 <col:22, col:41> col:35 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe71920 <col:41> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xe726d0 <line:270:7, line:272:7>
| | | |   `-CallExpr 0xe72698 <line:271:2, col:72> '<dependent type>'
| | | |     |-DeclRefExpr 0xe72450 <col:2> '<builtin fn type>' Function 0xe72358 '__atomic_store' 'void (...)'
| | | |     |-CallExpr 0xe72530 <col:17, col:38> '<dependent type>'
| | | |     | |-UnresolvedLookupExpr 0xe724a8 <col:17, col:22> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |     | `-MemberExpr 0xe72500 <col:34> '_Tp' lvalue ->_M_i 0xe6e270
| | | |     |   `-CXXThisExpr 0xe724f0 <col:34> 'atomic<_Tp> *' implicit this
| | | |     |-CallExpr 0xe725e0 <col:41, col:61> '<dependent type>'
| | | |     | |-UnresolvedLookupExpr 0xe72578 <col:41, col:46> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |     | `-DeclRefExpr 0xe725c0 <col:58> '_Tp' lvalue ParmVar 0xe6f688 '__i' '_Tp'
| | | |     `-CXXFunctionalCastExpr 0xe72670 <col:64, col:71> 'int' functional cast to int <NoOp>
| | | |       `-ImplicitCastExpr 0xe72658 <col:68> 'int' <IntegralCast> part_of_explicit_cast
| | | |         `-ImplicitCastExpr 0xe72640 <col:68> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe72620 <col:68> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6f700 '__m' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xe6f9f0 <line:274:7, line:278:7> line:275:7 store 'void (_Tp, std::memory_order) volatile noexcept'
| | | | |-ParmVarDecl 0xe6f8a0 <col:13, col:17> col:17 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xe6f918 <col:22, col:41> col:35 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe71940 <col:41> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xe72950 <line:276:7, line:278:7>
| | | |   `-CallExpr 0xe72918 <line:277:2, col:72> '<dependent type>'
| | | |     |-DeclRefExpr 0xe726e8 <col:2> '<builtin fn type>' Function 0xe72358 '__atomic_store' 'void (...)'
| | | |     |-CallExpr 0xe727b0 <col:17, col:38> '<dependent type>'
| | | |     | |-UnresolvedLookupExpr 0xe72728 <col:17, col:22> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |     | `-MemberExpr 0xe72780 <col:34> 'volatile _Tp' lvalue ->_M_i 0xe6e270
| | | |     |   `-CXXThisExpr 0xe72770 <col:34> 'volatile atomic<_Tp> *' implicit this
| | | |     |-CallExpr 0xe72860 <col:41, col:61> '<dependent type>'
| | | |     | |-UnresolvedLookupExpr 0xe727f8 <col:41, col:46> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |     | `-DeclRefExpr 0xe72840 <col:58> '_Tp' lvalue ParmVar 0xe6f8a0 '__i' '_Tp'
| | | |     `-CXXFunctionalCastExpr 0xe728f0 <col:64, col:71> 'int' functional cast to int <NoOp>
| | | |       `-ImplicitCastExpr 0xe728d8 <col:68> 'int' <IntegralCast> part_of_explicit_cast
| | | |         `-ImplicitCastExpr 0xe728c0 <col:68> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xe728a0 <col:68> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6f918 '__m' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xe6fb90 <line:280:7, line:287:7> line:281:7 load '_Tp (std::memory_order) const noexcept'
| | | | |-ParmVarDecl 0xe6fac0 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe71960 <col:31> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xe72fa0 <line:282:7, line:287:7>
| | | |   |-DeclStmt 0xe72b00 <line:283:2, col:47>
| | | |   | `-VarDecl 0xe72a38 <col:15, col:46> col:29 referenced __buf 'unsigned char[sizeof(_Tp)]'
| | | |   |   `-AlignedAttr 0xe72aa0 <col:2> alignas
| | | |   |     `-UnaryExprOrTypeTraitExpr 0xe72978 <col:10, col:13> 'unsigned long' alignof '_Tp'
| | | |   |-DeclStmt 0xe72c20 <line:284:2, col:44>
| | | |   | `-VarDecl 0xe72b58 <col:2, col:43> col:7 referenced __ptr '_Tp *' cinit
| | | |   |   `-CXXReinterpretCastExpr 0xe72bf0 <col:15, col:43> '_Tp *' reinterpret_cast<_Tp *> <Dependent>
| | | |   |     `-DeclRefExpr 0xe72bc0 <col:38> 'unsigned char[sizeof(_Tp)]' lvalue Var 0xe72a38 '__buf' 'unsigned char[sizeof(_Tp)]'
| | | |   |-CallExpr 0xe72f20 <line:285:2, col:55> '<dependent type>'
| | | |   | |-DeclRefExpr 0xe72d80 <col:2> '<builtin fn type>' Function 0xe72c88 '__atomic_load' 'void (...)'
| | | |   | |-CallExpr 0xe72e48 <col:16, col:37> '<dependent type>'
| | | |   | | |-UnresolvedLookupExpr 0xe72dc0 <col:16, col:21> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |   | | `-MemberExpr 0xe72e18 <col:33> 'const _Tp' lvalue ->_M_i 0xe6e270
| | | |   | |   `-CXXThisExpr 0xe72e08 <col:33> 'const atomic<_Tp> *' implicit this
| | | |   | |-DeclRefExpr 0xe72e70 <col:40> '_Tp *' lvalue Var 0xe72b58 '__ptr' '_Tp *'
| | | |   | `-CXXFunctionalCastExpr 0xe72ef8 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | |   |   `-ImplicitCastExpr 0xe72ee0 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |   |     `-ImplicitCastExpr 0xe72ec8 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |   |       `-DeclRefExpr 0xe72ea8 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6fac0 '__m' 'std::memory_order':'std::memory_order'
| | | |   `-ReturnStmt 0xe72f90 <line:286:2, col:10>
| | | |     `-UnaryOperator 0xe72f78 <col:9, col:10> '<dependent type>' prefix '*' cannot overflow
| | | |       `-DeclRefExpr 0xe72f58 <col:10> '_Tp *' lvalue Var 0xe72b58 '__ptr' '_Tp *'
| | | |-CXXMethodDecl 0xe6fd10 <line:289:7, line:296:7> line:290:7 load '_Tp (std::memory_order) const volatile noexcept'
| | | | |-ParmVarDecl 0xe6fc48 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe71980 <col:31> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xe734e0 <line:291:7, line:296:7>
| | | |   |-DeclStmt 0xe73160 <line:292:9, col:54>
| | | |   | `-VarDecl 0xe73098 <col:22, col:53> col:36 referenced __buf 'unsigned char[sizeof(_Tp)]'
| | | |   |   `-AlignedAttr 0xe73100 <col:9> alignas
| | | |   |     `-UnaryExprOrTypeTraitExpr 0xe72fe0 <col:17, col:20> 'unsigned long' alignof '_Tp'
| | | |   |-DeclStmt 0xe732a8 <line:293:2, col:44>
| | | |   | `-VarDecl 0xe731e0 <col:2, col:43> col:7 referenced __ptr '_Tp *' cinit
| | | |   |   `-CXXReinterpretCastExpr 0xe73278 <col:15, col:43> '_Tp *' reinterpret_cast<_Tp *> <Dependent>
| | | |   |     `-DeclRefExpr 0xe73248 <col:38> 'unsigned char[sizeof(_Tp)]' lvalue Var 0xe73098 '__buf' 'unsigned char[sizeof(_Tp)]'
| | | |   |-CallExpr 0xe73460 <line:294:2, col:55> '<dependent type>'
| | | |   | |-DeclRefExpr 0xe732c0 <col:2> '<builtin fn type>' Function 0xe72c88 '__atomic_load' 'void (...)'
| | | |   | |-CallExpr 0xe73388 <col:16, col:37> '<dependent type>'
| | | |   | | |-UnresolvedLookupExpr 0xe73300 <col:16, col:21> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |   | | `-MemberExpr 0xe73358 <col:33> 'const volatile _Tp' lvalue ->_M_i 0xe6e270
| | | |   | |   `-CXXThisExpr 0xe73348 <col:33> 'const volatile atomic<_Tp> *' implicit this
| | | |   | |-DeclRefExpr 0xe733b0 <col:40> '_Tp *' lvalue Var 0xe731e0 '__ptr' '_Tp *'
| | | |   | `-CXXFunctionalCastExpr 0xe73438 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | |   |   `-ImplicitCastExpr 0xe73420 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |   |     `-ImplicitCastExpr 0xe73408 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |   |       `-DeclRefExpr 0xe733e8 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6fc48 '__m' 'std::memory_order':'std::memory_order'
| | | |   `-ReturnStmt 0xe734d0 <line:295:2, col:10>
| | | |     `-UnaryOperator 0xe734b8 <col:9, col:10> '<dependent type>' prefix '*' cannot overflow
| | | |       `-DeclRefExpr 0xe73498 <col:10> '_Tp *' lvalue Var 0xe731e0 '__ptr' '_Tp *'
| | | |-CXXMethodDecl 0xe6ff30 <line:298:7, line:306:7> line:299:7 exchange '_Tp (_Tp, std::memory_order) noexcept'
| | | | |-ParmVarDecl 0xe6fdd8 <col:16, col:20> col:20 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xe6fe50 <col:25, col:44> col:38 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe719a0 <col:44> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xe73bc8 <line:300:7, line:306:7>
| | | |   |-DeclStmt 0xe736a0 <line:301:9, col:54>
| | | |   | `-VarDecl 0xe735d8 <col:22, col:53> col:36 referenced __buf 'unsigned char[sizeof(_Tp)]'
| | | |   |   `-AlignedAttr 0xe73640 <col:9> alignas
| | | |   |     `-UnaryExprOrTypeTraitExpr 0xe73520 <col:17, col:20> 'unsigned long' alignof '_Tp'
| | | |   |-DeclStmt 0xe73790 <line:302:2, col:44>
| | | |   | `-VarDecl 0xe736c8 <col:2, col:43> col:7 referenced __ptr '_Tp *' cinit
| | | |   |   `-CXXReinterpretCastExpr 0xe73760 <col:15, col:43> '_Tp *' reinterpret_cast<_Tp *> <Dependent>
| | | |   |     `-DeclRefExpr 0xe73730 <col:38> 'unsigned char[sizeof(_Tp)]' lvalue Var 0xe735d8 '__buf' 'unsigned char[sizeof(_Tp)]'
| | | |   |-CallExpr 0xe73b40 <line:303:2, line:304:21> '<dependent type>'
| | | |   | |-DeclRefExpr 0xe738f0 <line:303:2> '<builtin fn type>' Function 0xe737f8 '__atomic_exchange' 'void (...)'
| | | |   | |-CallExpr 0xe739b8 <col:20, col:41> '<dependent type>'
| | | |   | | |-UnresolvedLookupExpr 0xe73930 <col:20, col:25> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |   | | `-MemberExpr 0xe73988 <col:37> '_Tp' lvalue ->_M_i 0xe6e270
| | | |   | |   `-CXXThisExpr 0xe73978 <col:37> 'atomic<_Tp> *' implicit this
| | | |   | |-CallExpr 0xe73a68 <col:44, col:64> '<dependent type>'
| | | |   | | |-UnresolvedLookupExpr 0xe73a00 <col:44, col:49> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |   | | `-DeclRefExpr 0xe73a48 <col:61> '_Tp' lvalue ParmVar 0xe6fdd8 '__i' '_Tp'
| | | |   | |-DeclRefExpr 0xe73a90 <line:304:6> '_Tp *' lvalue Var 0xe736c8 '__ptr' '_Tp *'
| | | |   | `-CXXFunctionalCastExpr 0xe73b18 <col:13, col:20> 'int' functional cast to int <NoOp>
| | | |   |   `-ImplicitCastExpr 0xe73b00 <col:17> 'int' <IntegralCast> part_of_explicit_cast
| | | |   |     `-ImplicitCastExpr 0xe73ae8 <col:17> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |   |       `-DeclRefExpr 0xe73ac8 <col:17> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe6fe50 '__m' 'std::memory_order':'std::memory_order'
| | | |   `-ReturnStmt 0xe73bb8 <line:305:2, col:10>
| | | |     `-UnaryOperator 0xe73ba0 <col:9, col:10> '<dependent type>' prefix '*' cannot overflow
| | | |       `-DeclRefExpr 0xe73b80 <col:10> '_Tp *' lvalue Var 0xe736c8 '__ptr' '_Tp *'
| | | |-CXXMethodDecl 0xe70140 <line:308:7, line:317:7> line:309:7 exchange '_Tp (_Tp, std::memory_order) volatile noexcept'
| | | | |-ParmVarDecl 0xe6fff0 <col:16, col:20> col:20 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xe70068 <line:310:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe719c0 <col:28> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xe74170 <line:311:7, line:317:7>
| | | |   |-DeclStmt 0xe73d90 <line:312:9, col:54>
| | | |   | `-VarDecl 0xe73cc8 <col:22, col:53> col:36 referenced __buf 'unsigned char[sizeof(_Tp)]'
| | | |   |   `-AlignedAttr 0xe73d30 <col:9> alignas
| | | |   |     `-UnaryExprOrTypeTraitExpr 0xe73c08 <col:17, col:20> 'unsigned long' alignof '_Tp'
| | | |   |-DeclStmt 0xe73e80 <line:313:2, col:44>
| | | |   | `-VarDecl 0xe73db8 <col:2, col:43> col:7 referenced __ptr '_Tp *' cinit
| | | |   |   `-CXXReinterpretCastExpr 0xe73e50 <col:15, col:43> '_Tp *' reinterpret_cast<_Tp *> <Dependent>
| | | |   |     `-DeclRefExpr 0xe73e20 <col:38> 'unsigned char[sizeof(_Tp)]' lvalue Var 0xe73cc8 '__buf' 'unsigned char[sizeof(_Tp)]'
| | | |   |-CallExpr 0xe740e8 <line:314:2, line:315:21> '<dependent type>'
| | | |   | |-DeclRefExpr 0xe73e98 <line:314:2> '<builtin fn type>' Function 0xe737f8 '__atomic_exchange' 'void (...)'
| | | |   | |-CallExpr 0xe73f60 <col:20, col:41> '<dependent type>'
| | | |   | | |-UnresolvedLookupExpr 0xe73ed8 <col:20, col:25> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |   | | `-MemberExpr 0xe73f30 <col:37> 'volatile _Tp' lvalue ->_M_i 0xe6e270
| | | |   | |   `-CXXThisExpr 0xe73f20 <col:37> 'volatile atomic<_Tp> *' implicit this
| | | |   | |-CallExpr 0xe74010 <col:44, col:64> '<dependent type>'
| | | |   | | |-UnresolvedLookupExpr 0xe73fa8 <col:44, col:49> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |   | | `-DeclRefExpr 0xe73ff0 <col:61> '_Tp' lvalue ParmVar 0xe6fff0 '__i' '_Tp'
| | | |   | |-DeclRefExpr 0xe74038 <line:315:6> '_Tp *' lvalue Var 0xe73db8 '__ptr' '_Tp *'
| | | |   | `-CXXFunctionalCastExpr 0xe740c0 <col:13, col:20> 'int' functional cast to int <NoOp>
| | | |   |   `-ImplicitCastExpr 0xe740a8 <col:17> 'int' <IntegralCast> part_of_explicit_cast
| | | |   |     `-ImplicitCastExpr 0xe74090 <col:17> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |   |       `-DeclRefExpr 0xe74070 <col:17> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe70068 '__m' 'std::memory_order':'std::memory_order'
| | | |   `-ReturnStmt 0xe74160 <line:316:2, col:10>
| | | |     `-UnaryOperator 0xe74148 <col:9, col:10> '<dependent type>' prefix '*' cannot overflow
| | | |       `-DeclRefExpr 0xe74128 <col:10> '_Tp *' lvalue Var 0xe73db8 '__ptr' '_Tp *'
| | | |-CXXMethodDecl 0xe704a0 <line:319:7, line:327:7> line:320:7 compare_exchange_weak 'bool (_Tp &, _Tp, std::memory_order, std::memory_order) noexcept'
| | | | |-ParmVarDecl 0xe70238 <col:29, col:34> col:34 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xe702b0 <col:39, col:43> col:43 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xe70328 <col:48, col:61> col:61 referenced __s 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe703a0 <line:321:8, col:21> col:21 referenced __f 'std::memory_order':'std::memory_order'
| | | | `-CompoundStmt 0xe746c8 <line:322:7, line:327:7>
| | | |   `-ReturnStmt 0xe746b8 <line:323:2, line:326:31>
| | | |     `-CallExpr 0xe74668 <line:323:9, line:326:31> '<dependent type>'
| | | |       |-DeclRefExpr 0xe742e8 <line:323:9> '<builtin fn type>' Function 0xe741f0 '__atomic_compare_exchange' 'void (...)'
| | | |       |-CallExpr 0xe743b0 <col:35, col:56> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xe74328 <col:35, col:40> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |       | `-MemberExpr 0xe74380 <col:52> '_Tp' lvalue ->_M_i 0xe6e270
| | | |       |   `-CXXThisExpr 0xe74370 <col:52> 'atomic<_Tp> *' implicit this
| | | |       |-CallExpr 0xe74460 <line:324:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xe743f8 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |       | `-DeclRefExpr 0xe74440 <col:24> '_Tp' lvalue ParmVar 0xe70238 '__e' '_Tp &'
| | | |       |-CallExpr 0xe74510 <line:325:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xe744a8 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |       | `-DeclRefExpr 0xe744f0 <col:24> '_Tp' lvalue ParmVar 0xe702b0 '__i' '_Tp'
| | | |       |-CXXBoolLiteralExpr 0xe74538 <line:326:7> 'bool' true
| | | |       |-CXXFunctionalCastExpr 0xe745b0 <col:13, col:20> 'int' functional cast to int <NoOp>
| | | |       | `-ImplicitCastExpr 0xe74598 <col:17> 'int' <IntegralCast> part_of_explicit_cast
| | | |       |   `-ImplicitCastExpr 0xe74580 <col:17> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |       |     `-DeclRefExpr 0xe74560 <col:17> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe70328 '__s' 'std::memory_order':'std::memory_order'
| | | |       `-CXXFunctionalCastExpr 0xe74640 <col:23, col:30> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe74628 <col:27> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-ImplicitCastExpr 0xe74610 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |             `-DeclRefExpr 0xe745f0 <col:27> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe703a0 '__f' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xe707d0 <line:329:7, line:337:7> line:330:7 compare_exchange_weak 'bool (_Tp &, _Tp, std::memory_order, std::memory_order) volatile noexcept'
| | | | |-ParmVarDecl 0xe70570 <col:29, col:34> col:34 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xe705e8 <col:39, col:43> col:43 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xe70660 <col:48, col:61> col:61 referenced __s 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe706d8 <line:331:8, col:21> col:21 referenced __f 'std::memory_order':'std::memory_order'
| | | | `-CompoundStmt 0xe74ac0 <line:332:7, line:337:7>
| | | |   `-ReturnStmt 0xe74ab0 <line:333:2, line:336:31>
| | | |     `-CallExpr 0xe74a60 <line:333:9, line:336:31> '<dependent type>'
| | | |       |-DeclRefExpr 0xe746e0 <line:333:9> '<builtin fn type>' Function 0xe741f0 '__atomic_compare_exchange' 'void (...)'
| | | |       |-CallExpr 0xe747a8 <col:35, col:56> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xe74720 <col:35, col:40> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |       | `-MemberExpr 0xe74778 <col:52> 'volatile _Tp' lvalue ->_M_i 0xe6e270
| | | |       |   `-CXXThisExpr 0xe74768 <col:52> 'volatile atomic<_Tp> *' implicit this
| | | |       |-CallExpr 0xe74858 <line:334:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xe747f0 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |       | `-DeclRefExpr 0xe74838 <col:24> '_Tp' lvalue ParmVar 0xe70570 '__e' '_Tp &'
| | | |       |-CallExpr 0xe74908 <line:335:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xe748a0 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |       | `-DeclRefExpr 0xe748e8 <col:24> '_Tp' lvalue ParmVar 0xe705e8 '__i' '_Tp'
| | | |       |-CXXBoolLiteralExpr 0xe74930 <line:336:7> 'bool' true
| | | |       |-CXXFunctionalCastExpr 0xe749a8 <col:13, col:20> 'int' functional cast to int <NoOp>
| | | |       | `-ImplicitCastExpr 0xe74990 <col:17> 'int' <IntegralCast> part_of_explicit_cast
| | | |       |   `-ImplicitCastExpr 0xe74978 <col:17> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |       |     `-DeclRefExpr 0xe74958 <col:17> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe70660 '__s' 'std::memory_order':'std::memory_order'
| | | |       `-CXXFunctionalCastExpr 0xe74a38 <col:23, col:30> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe74a20 <col:27> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-ImplicitCastExpr 0xe74a08 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |             `-DeclRefExpr 0xe749e8 <col:27> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe706d8 '__f' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xe70a90 <line:339:7, line:343:69> line:340:7 compare_exchange_weak 'bool (_Tp &, _Tp, std::memory_order) noexcept'
| | | | |-ParmVarDecl 0xe708b0 <col:29, col:34> col:34 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xe70928 <col:39, col:43> col:43 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xe709a0 <line:341:8, col:27> col:21 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe719e0 <col:27> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xe74ce8 <line:342:7, line:343:69>
| | | |   `-ReturnStmt 0xe74cd8 <line:342:9, line:343:66>
| | | |     `-CallExpr 0xe74c98 <line:342:16, line:343:66> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xe74ae8 <line:342:16> '<bound member function type>' lvalue
| | | |       |-DeclRefExpr 0xe74b58 <col:38> '_Tp' lvalue ParmVar 0xe708b0 '__e' '_Tp &'
| | | |       |-DeclRefExpr 0xe74b78 <col:43> '_Tp' lvalue ParmVar 0xe70928 '__i' '_Tp'
| | | |       |-DeclRefExpr 0xe74b98 <col:48> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe709a0 '__m' 'std::memory_order':'std::memory_order'
| | | |       `-CallExpr 0xe74c58 <line:343:38, col:65> 'std::memory_order':'std::memory_order'
| | | |         |-ImplicitCastExpr 0xe74c40 <col:38> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | |         | `-DeclRefExpr 0xe74c20 <col:38> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | |         `-ImplicitCastExpr 0xe74c80 <col:62> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | |           `-DeclRefExpr 0xe74c00 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe709a0 '__m' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xe70d40 <line:345:7, line:349:69> line:346:7 compare_exchange_weak 'bool (_Tp &, _Tp, std::memory_order) volatile noexcept'
| | | | |-ParmVarDecl 0xe70b68 <col:29, col:34> col:34 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xe70be0 <col:39, col:43> col:43 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xe70c58 <line:347:8, col:27> col:21 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe71a00 <col:27> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xe74f10 <line:348:7, line:349:69>
| | | |   `-ReturnStmt 0xe74f00 <line:348:9, line:349:66>
| | | |     `-CallExpr 0xe74ec0 <line:348:16, line:349:66> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xe74d10 <line:348:16> '<bound member function type>' lvalue
| | | |       |-DeclRefExpr 0xe74d80 <col:38> '_Tp' lvalue ParmVar 0xe70b68 '__e' '_Tp &'
| | | |       |-DeclRefExpr 0xe74da0 <col:43> '_Tp' lvalue ParmVar 0xe70be0 '__i' '_Tp'
| | | |       |-DeclRefExpr 0xe74dc0 <col:48> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe70c58 '__m' 'std::memory_order':'std::memory_order'
| | | |       `-CallExpr 0xe74e80 <line:349:38, col:65> 'std::memory_order':'std::memory_order'
| | | |         |-ImplicitCastExpr 0xe74e68 <col:38> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | |         | `-DeclRefExpr 0xe74e48 <col:38> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | |         `-ImplicitCastExpr 0xe74ea8 <col:62> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | |           `-DeclRefExpr 0xe74e28 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe70c58 '__m' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xe71030 <line:351:7, line:359:7> line:352:7 compare_exchange_strong 'bool (_Tp &, _Tp, std::memory_order, std::memory_order) noexcept'
| | | | |-ParmVarDecl 0xe70e18 <col:31, col:36> col:36 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xe70e90 <col:41, col:45> col:45 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xe70f08 <col:50, col:63> col:63 referenced __s 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe70f80 <line:353:10, col:23> col:23 referenced __f 'std::memory_order':'std::memory_order'
| | | | `-CompoundStmt 0xe75320 <line:354:7, line:359:7>
| | | |   `-ReturnStmt 0xe75310 <line:355:2, line:358:32>
| | | |     `-CallExpr 0xe752c0 <line:355:9, line:358:32> '<dependent type>'
| | | |       |-DeclRefExpr 0xe74f28 <line:355:9> '<builtin fn type>' Function 0xe741f0 '__atomic_compare_exchange' 'void (...)'
| | | |       |-CallExpr 0xe74ff0 <col:35, col:56> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xe74f68 <col:35, col:40> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |       | `-MemberExpr 0xe74fc0 <col:52> '_Tp' lvalue ->_M_i 0xe6e270
| | | |       |   `-CXXThisExpr 0xe74fb0 <col:52> 'atomic<_Tp> *' implicit this
| | | |       |-CallExpr 0xe750a0 <line:356:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xe75038 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |       | `-DeclRefExpr 0xe75080 <col:24> '_Tp' lvalue ParmVar 0xe70e18 '__e' '_Tp &'
| | | |       |-CallExpr 0xe75150 <line:357:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xe750e8 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |       | `-DeclRefExpr 0xe75130 <col:24> '_Tp' lvalue ParmVar 0xe70e90 '__i' '_Tp'
| | | |       |-CXXBoolLiteralExpr 0xe75178 <line:358:7> 'bool' false
| | | |       |-CXXFunctionalCastExpr 0xe75208 <col:14, col:21> 'int' functional cast to int <NoOp>
| | | |       | `-ImplicitCastExpr 0xe751f0 <col:18> 'int' <IntegralCast> part_of_explicit_cast
| | | |       |   `-ImplicitCastExpr 0xe751c0 <col:18> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |       |     `-DeclRefExpr 0xe751a0 <col:18> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe70f08 '__s' 'std::memory_order':'std::memory_order'
| | | |       `-CXXFunctionalCastExpr 0xe75298 <col:24, col:31> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe75280 <col:28> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-ImplicitCastExpr 0xe75268 <col:28> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |             `-DeclRefExpr 0xe75248 <col:28> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe70f80 '__f' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xe71370 <line:361:7, line:369:7> line:362:7 compare_exchange_strong 'bool (_Tp &, _Tp, std::memory_order, std::memory_order) volatile noexcept'
| | | | |-ParmVarDecl 0xe71100 <col:31, col:36> col:36 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xe711d0 <col:41, col:45> col:45 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xe71248 <col:50, col:63> col:63 referenced __s 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xe712c0 <line:363:10, col:23> col:23 referenced __f 'std::memory_order':'std::memory_order'
| | | | `-CompoundStmt 0xe75718 <line:364:7, line:369:7>
| | | |   `-ReturnStmt 0xe75708 <line:365:2, line:368:32>
| | | |     `-CallExpr 0xe756b8 <line:365:9, line:368:32> '<dependent type>'
| | | |       |-DeclRefExpr 0xe75338 <line:365:9> '<builtin fn type>' Function 0xe741f0 '__atomic_compare_exchange' 'void (...)'
| | | |       |-CallExpr 0xe75400 <col:35, col:56> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xe75378 <col:35, col:40> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |       | `-MemberExpr 0xe753d0 <col:52> 'volatile _Tp' lvalue ->_M_i 0xe6e270
| | | |       |   `-CXXThisExpr 0xe753c0 <col:52> 'volatile atomic<_Tp> *' implicit this
| | | |       |-CallExpr 0xe754b0 <line:366:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xe75448 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |       | `-DeclRefExpr 0xe75490 <col:24> '_Tp' lvalue ParmVar 0xe71100 '__e' '_Tp &'
| | | |       |-CallExpr 0xe75560 <line:367:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xe754f8 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0xcca1f0
| | | |       | `-DeclRefExpr 0xe75540 <col:24> '_Tp' lvalue ParmVar 0xe711d0 '__i' '_Tp'
| | | |       |-CXXBoolLiteralExpr 0xe75588 <line:368:7> 'bool' false
| | | |       |-CXXFunctionalCastExpr 0xe75600 <col:14, col:21> 'int' functional cast to int <NoOp>
| | | |       | `-ImplicitCastExpr 0xe755e8 <col:18> 'int' <IntegralCast> part_of_explicit_cast
| | | |       |   `-ImplicitCastExpr 0xe755d0 <col:18> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |       |     `-DeclRefExpr 0xe755b0 <col:18> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe71248 '__s' 'std::memory_order':'std::memory_order'
| | | |       `-CXXFunctionalCastExpr 0xe75690 <col:24, col:31> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xe75678 <col:28> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-ImplicitCastExpr 0xe75660 <col:28> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |             `-DeclRefExpr 0xe75640 <col:28> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe712c0 '__f' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xe715e8 <line:371:7, line:375:71> line:372:7 compare_exchange_strong 'bool (_Tp &, _Tp, std::memory_order) noexcept'
| | | | |-ParmVarDecl 0xe71450 <col:31, col:36> col:36 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xe714c8 <col:41, col:45> col:45 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xe71540 <line:373:11, col:30> col:24 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xe71a20 <col:30> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xe75940 <line:374:7, line:375:71>
| | | |   `-ReturnStmt 0xe75930 <line:374:9, line:375:68>
| | | |     `-CallExpr 0xe758f0 <line:374:16, line:375:68> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xe75740 <line:374:16> '<bound member function type>' lvalue
| | | |       |-DeclRefExpr 0xe757b0 <col:40> '_Tp' lvalue ParmVar 0xe71450 '__e' '_Tp &'
| | | |       |-DeclRefExpr 0xe757d0 <col:45> '_Tp' lvalue ParmVar 0xe714c8 '__i' '_Tp'
| | | |       |-DeclRefExpr 0xe757f0 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe71540 '__m' 'std::memory_order':'std::memory_order'
| | | |       `-CallExpr 0xe758b0 <line:375:40, col:67> 'std::memory_order':'std::memory_order'
| | | |         |-ImplicitCastExpr 0xe75898 <col:40> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | |         | `-DeclRefExpr 0xe75878 <col:40> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | |         `-ImplicitCastExpr 0xe758d8 <col:64> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | |           `-DeclRefExpr 0xe75858 <col:64> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe71540 '__m' 'std::memory_order':'std::memory_order'
| | | `-CXXMethodDecl 0xe71858 <line:377:7, line:381:71> line:378:7 compare_exchange_strong 'bool (_Tp &, _Tp, std::memory_order) volatile noexcept'
| | |   |-ParmVarDecl 0xe716c0 <col:31, col:36> col:36 referenced __e '_Tp &'
| | |   |-ParmVarDecl 0xe71738 <col:41, col:45> col:45 referenced __i '_Tp'
| | |   |-ParmVarDecl 0xe717b0 <line:379:8, col:27> col:21 referenced __m 'std::memory_order':'std::memory_order' cinit
| | |   | `-DeclRefExpr 0xe71a40 <col:27> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | |   `-CompoundStmt 0xe75b68 <line:380:7, line:381:71>
| | |     `-ReturnStmt 0xe75b58 <line:380:9, line:381:68>
| | |       `-CallExpr 0xe75b18 <line:380:16, line:381:68> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0xe75968 <line:380:16> '<bound member function type>' lvalue
| | |         |-DeclRefExpr 0xe759d8 <col:40> '_Tp' lvalue ParmVar 0xe716c0 '__e' '_Tp &'
| | |         |-DeclRefExpr 0xe759f8 <col:45> '_Tp' lvalue ParmVar 0xe71738 '__i' '_Tp'
| | |         |-DeclRefExpr 0xe75a18 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe717b0 '__m' 'std::memory_order':'std::memory_order'
| | |         `-CallExpr 0xe75ad8 <line:381:40, col:67> 'std::memory_order':'std::memory_order'
| | |           |-ImplicitCastExpr 0xe75ac0 <col:40> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | |           | `-DeclRefExpr 0xe75aa0 <col:40> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | |           `-ImplicitCastExpr 0xe75b00 <col:64> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |             `-DeclRefExpr 0xe75a80 <col:64> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe717b0 '__m' 'std::memory_order':'std::memory_order'
| | |-ClassTemplateSpecialization 0xe60cf8 'atomic'
| | |-ClassTemplateSpecialization 0xe7d628 'atomic'
| | |-ClassTemplateSpecialization 0xd96f40 'atomic'
| | |-ClassTemplateSpecialization 0xe981e0 'atomic'
| | |-ClassTemplateSpecialization 0xea28b0 'atomic'
| | |-ClassTemplateSpecialization 0xeaaf00 'atomic'
| | |-ClassTemplateSpecialization 0xeb35f8 'atomic'
| | |-ClassTemplateSpecialization 0xebbc00 'atomic'
| | |-ClassTemplateSpecialization 0xec4650 'atomic'
| | |-ClassTemplateSpecialization 0xecea80 'atomic'
| | |-ClassTemplateSpecialization 0xed84b0 'atomic'
| | |-ClassTemplateSpecialization 0xee4b20 'atomic'
| | |-ClassTemplateSpecialization 0xeed158 'atomic'
| | |-ClassTemplateSpecialization 0xef75d8 'atomic'
| | |-ClassTemplateSpecialization 0xeffc28 'atomic'
| | `-ClassTemplateSpecialization 0xf2c410 'atomic'
| |-ClassTemplatePartialSpecializationDecl 0xe75cc0 prev 0xe22e40 <line:406:3, line:694:5> line:407:12 struct atomic definition
| | |-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists
| | | |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| | | |-MoveConstructor
| | | |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| | | |-MoveAssignment
| | | `-Destructor irrelevant non_trivial user_declared
| | |-TemplateArgument type 'type-parameter-0-0 *'
| | | `-PointerType 0xcca060 'type-parameter-0-0 *' dependent
| | |   `-TemplateTypeParmType 0xcc9f20 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xe75b80 <line:406:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xe75ea8 <line:407:5, col:12> col:12 implicit referenced struct atomic
| | |-TypeAliasDecl 0xe75f48 <line:409:7, col:29> col:13 value_type '_Tp *'
| | | `-PointerType 0xe75c10 '_Tp *' dependent
| | |   `-TemplateTypeParmType 0xe75bd0 '_Tp' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0xe75b80 '_Tp'
| | |-TypeAliasDecl 0xe75fb8 <line:410:7, col:31> col:13 difference_type 'std::ptrdiff_t':'long'
| | | `-TypedefType 0xe32590 'std::ptrdiff_t' sugar
| | |   |-Typedef 0xc3ba38 'ptrdiff_t'
| | |   `-BuiltinType 0xbf6270 'long'
| | |-TypedefDecl 0xe76028 <line:412:7, col:23> col:23 referenced __pointer_type '_Tp *'
| | | `-PointerType 0xe75c10 '_Tp *' dependent
| | |   `-TemplateTypeParmType 0xe75bd0 '_Tp' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0xe75b80 '_Tp'
| | |-TypedefDecl 0xe76110 <line:413:7, col:35> col:35 referenced __base_type '__atomic_base<_Tp *>'
| | | `-TemplateSpecializationType 0xe76090 '__atomic_base<_Tp *>' dependent __atomic_base
| | |   `-TemplateArgument type '_Tp *'
| | |     `-PointerType 0xe75c10 '_Tp *' dependent
| | |       `-TemplateTypeParmType 0xe75bd0 '_Tp' dependent depth 0 index 0
| | |         `-TemplateTypeParm 0xe75b80 '_Tp'
| | |-FieldDecl 0xe761a0 <line:414:7, col:21> col:21 referenced _M_b 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>'
| | |-CXXConstructorDecl 0xe76258 <line:416:7, col:33> col:7 atomic<type-parameter-0-0 *> 'void () noexcept' default
| | |-CXXDestructorDecl 0xe76350 <line:417:7, col:34> col:7 ~atomic<type-parameter-0-0 *> 'void () noexcept' default
| | |-CXXConstructorDecl 0xe764f8 <line:418:7, col:36> col:7 atomic<type-parameter-0-0 *> 'void (const atomic<type-parameter-0-0 *> &)' delete
| | | `-ParmVarDecl 0xe76438 <col:14, col:26> col:27 'const atomic<type-parameter-0-0 *> &'
| | |-CXXMethodDecl 0xe766b8 <line:419:7, col:47> col:15 operator= 'atomic<type-parameter-0-0 *> &(const atomic<type-parameter-0-0 *> &)' delete
| | | `-ParmVarDecl 0xe765c8 <col:25, col:37> col:38 'const atomic<type-parameter-0-0 *> &'
| | |-CXXMethodDecl 0xe76868 <line:420:7, col:56> col:15 operator= 'atomic<type-parameter-0-0 *> &(const atomic<type-parameter-0-0 *> &) volatile' delete
| | | `-ParmVarDecl 0xe76770 <col:25, col:37> col:38 'const atomic<type-parameter-0-0 *> &'
| | |-CXXConstructorDecl 0xe76a20 <line:422:7, col:67> col:17 constexpr atomic<type-parameter-0-0 *> 'void (std::atomic<type-parameter-0-0 *>::__pointer_type) noexcept'
| | | |-ParmVarDecl 0xe76950 <col:24, col:39> col:39 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-CXXCtorInitializer Field 0xe761a0 '_M_b' 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>'
| | | | `-ParenListExpr 0xe7aee0 <col:59, col:63> 'NULL TYPE'
| | | |   `-DeclRefExpr 0xe7aec0 <col:60> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe76950 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | `-CompoundStmt 0xe7af28 <col:65, col:67>
| | |-CXXConversionDecl 0xe76b70 <line:424:7, line:425:38> line:424:7 operator type-parameter-0-0 * 'std::atomic<type-parameter-0-0 *>::__pointer_type () const noexcept'
| | | `-CompoundStmt 0xe7afc0 <line:425:7, col:38>
| | |   `-ReturnStmt 0xe7afb0 <col:9, col:35>
| | |     `-CXXUnresolvedConstructExpr 0xe7af88 <col:16, col:35> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       `-MemberExpr 0xe7af58 <col:31> 'const std::atomic<type-parameter-0-0 *>::__base_type':'const __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |         `-CXXThisExpr 0xe7af48 <col:31> 'const atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXConversionDecl 0xe76cb0 <line:427:7, line:428:38> line:427:7 operator type-parameter-0-0 * 'std::atomic<type-parameter-0-0 *>::__pointer_type () const volatile noexcept'
| | | `-CompoundStmt 0xe7b060 <line:428:7, col:38>
| | |   `-ReturnStmt 0xe7b050 <col:9, col:35>
| | |     `-CXXUnresolvedConstructExpr 0xe7b028 <col:16, col:35> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       `-MemberExpr 0xe7aff8 <col:31> 'const volatile std::atomic<type-parameter-0-0 *>::__base_type':'const volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |         `-CXXThisExpr 0xe7afe8 <col:31> 'const volatile atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xe76e50 <line:430:7, line:432:37> line:431:7 operator= 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::atomic<type-parameter-0-0 *>::__pointer_type) noexcept'
| | | |-ParmVarDecl 0xe76d88 <col:17, col:32> col:32 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | `-CompoundStmt 0xe7b158 <line:432:7, col:37>
| | |   `-ReturnStmt 0xe7b148 <col:9, col:34>
| | |     `-CallExpr 0xe7b120 <col:16, col:34> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7b0b8 <col:16, col:29> '<dependent type>' lvalue .operator=
| | |       | `-MemberExpr 0xe7b088 <col:16> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7b078 <col:16> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xe7b100 <col:31> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe76d88 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |-CXXMethodDecl 0xe76fe0 <line:434:7, line:436:37> line:435:7 operator= 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::atomic<type-parameter-0-0 *>::__pointer_type) volatile noexcept'
| | | |-ParmVarDecl 0xe76f18 <col:17, col:32> col:32 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | `-CompoundStmt 0xe7b278 <line:436:7, col:37>
| | |   `-ReturnStmt 0xe7b268 <col:9, col:34>
| | |     `-CallExpr 0xe7b240 <col:16, col:34> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7b1b0 <col:16, col:29> '<dependent type>' lvalue .operator=
| | |       | `-MemberExpr 0xe7b180 <col:16> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7b170 <col:16> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xe7b220 <col:31> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe76f18 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |-CXXMethodDecl 0xe77200 <line:438:7, line:445:7> line:439:7 operator++ 'std::atomic<type-parameter-0-0 *>::__pointer_type (int) noexcept'
| | | |-ParmVarDecl 0xe770b0 <col:18> col:21 'int'
| | | `-CompoundStmt 0xe7b318 <line:440:7, line:445:7>
| | |   `-ReturnStmt 0xe7b308 <line:444:2, col:13>
| | |     `-UnaryOperator 0xe7b2f0 <col:9, col:13> '<dependent type>' postfix '++' cannot overflow
| | |       `-MemberExpr 0xe7b2a0 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |         `-CXXThisExpr 0xe7b290 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xe77390 <line:447:7, line:454:7> line:448:7 operator++ 'std::atomic<type-parameter-0-0 *>::__pointer_type (int) volatile noexcept'
| | | |-ParmVarDecl 0xe772c0 <col:18> col:21 'int'
| | | `-CompoundStmt 0xe7b3b8 <line:449:7, line:454:7>
| | |   `-ReturnStmt 0xe7b3a8 <line:453:2, col:13>
| | |     `-UnaryOperator 0xe7b390 <col:9, col:13> '<dependent type>' postfix '++' cannot overflow
| | |       `-MemberExpr 0xe7b340 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |         `-CXXThisExpr 0xe7b330 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xe774f8 <line:456:7, line:463:7> line:457:7 operator-- 'std::atomic<type-parameter-0-0 *>::__pointer_type (int) noexcept'
| | | |-ParmVarDecl 0xe77460 <col:18> col:21 'int'
| | | `-CompoundStmt 0xe7b458 <line:458:7, line:463:7>
| | |   `-ReturnStmt 0xe7b448 <line:462:2, col:13>
| | |     `-UnaryOperator 0xe7b430 <col:9, col:13> '<dependent type>' postfix '--' cannot overflow
| | |       `-MemberExpr 0xe7b3e0 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |         `-CXXThisExpr 0xe7b3d0 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xe77650 <line:465:7, line:472:7> line:466:7 operator-- 'std::atomic<type-parameter-0-0 *>::__pointer_type (int) volatile noexcept'
| | | |-ParmVarDecl 0xe775b8 <col:18> col:21 'int'
| | | `-CompoundStmt 0xe7b4f8 <line:467:7, line:472:7>
| | |   `-ReturnStmt 0xe7b4e8 <line:471:2, col:13>
| | |     `-UnaryOperator 0xe7b4d0 <col:9, col:13> '<dependent type>' postfix '--' cannot overflow
| | |       `-MemberExpr 0xe7b480 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |         `-CXXThisExpr 0xe7b470 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xe77760 <line:474:7, line:481:7> line:475:7 operator++ 'std::atomic<type-parameter-0-0 *>::__pointer_type () noexcept'
| | | `-CompoundStmt 0xe7b578 <line:476:7, line:481:7>
| | |   `-ReturnStmt 0xe7b568 <line:480:2, col:11>
| | |     `-UnaryOperator 0xe7b550 <col:9, col:11> '<dependent type>' prefix '++' cannot overflow
| | |       `-MemberExpr 0xe7b520 <col:11> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |         `-CXXThisExpr 0xe7b510 <col:11> 'atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xe77860 <line:483:7, line:490:7> line:484:7 operator++ 'std::atomic<type-parameter-0-0 *>::__pointer_type () volatile noexcept'
| | | `-CompoundStmt 0xe7b5f8 <line:485:7, line:490:7>
| | |   `-ReturnStmt 0xe7b5e8 <line:489:2, col:11>
| | |     `-UnaryOperator 0xe7b5d0 <col:9, col:11> '<dependent type>' prefix '++' cannot overflow
| | |       `-MemberExpr 0xe7b5a0 <col:11> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |         `-CXXThisExpr 0xe7b590 <col:11> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xe77938 <line:492:7, line:499:7> line:493:7 operator-- 'std::atomic<type-parameter-0-0 *>::__pointer_type () noexcept'
| | | `-CompoundStmt 0xe7b678 <line:494:7, line:499:7>
| | |   `-ReturnStmt 0xe7b668 <line:498:2, col:11>
| | |     `-UnaryOperator 0xe7b650 <col:9, col:11> '<dependent type>' prefix '--' cannot overflow
| | |       `-MemberExpr 0xe7b620 <col:11> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |         `-CXXThisExpr 0xe7b610 <col:11> 'atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xe77a10 <line:501:7, line:508:7> line:502:7 operator-- 'std::atomic<type-parameter-0-0 *>::__pointer_type () volatile noexcept'
| | | `-CompoundStmt 0xe7b6f8 <line:503:7, line:508:7>
| | |   `-ReturnStmt 0xe7b6e8 <line:507:2, col:11>
| | |     `-UnaryOperator 0xe7b6d0 <col:9, col:11> '<dependent type>' prefix '--' cannot overflow
| | |       `-MemberExpr 0xe7b6a0 <col:11> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |         `-CXXThisExpr 0xe7b690 <col:11> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xe77ba0 <line:510:7, line:517:7> line:511:7 operator+= 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) noexcept'
| | | |-ParmVarDecl 0xe77ad0 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
| | | `-CompoundStmt 0xe7b7f0 <line:512:7, line:517:7>
| | |   `-ReturnStmt 0xe7b7e0 <line:516:2, col:28>
| | |     `-CallExpr 0xe7b7b8 <col:9, col:28> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7b750 <col:9, col:22> '<dependent type>' lvalue .operator+=
| | |       | `-MemberExpr 0xe7b720 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7b710 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xe7b798 <col:25> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe77ad0 '__d' 'std::ptrdiff_t':'long'
| | |-CXXMethodDecl 0xe77d20 <line:519:7, line:526:7> line:520:7 operator+= 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) volatile noexcept'
| | | |-ParmVarDecl 0xe77c58 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
| | | `-CompoundStmt 0xe7b8e8 <line:521:7, line:526:7>
| | |   `-ReturnStmt 0xe7b8d8 <line:525:2, col:28>
| | |     `-CallExpr 0xe7b8b0 <col:9, col:28> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7b848 <col:9, col:22> '<dependent type>' lvalue .operator+=
| | |       | `-MemberExpr 0xe7b818 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7b808 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xe7b890 <col:25> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe77c58 '__d' 'std::ptrdiff_t':'long'
| | |-CXXMethodDecl 0xe77e80 <line:528:7, line:535:7> line:529:7 operator-= 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) noexcept'
| | | |-ParmVarDecl 0xe77de8 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
| | | `-CompoundStmt 0xe7b9e0 <line:530:7, line:535:7>
| | |   `-ReturnStmt 0xe7b9d0 <line:534:2, col:28>
| | |     `-CallExpr 0xe7b9a8 <col:9, col:28> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7b940 <col:9, col:22> '<dependent type>' lvalue .operator-=
| | |       | `-MemberExpr 0xe7b910 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7b900 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xe7b988 <col:25> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe77de8 '__d' 'std::ptrdiff_t':'long'
| | |-CXXMethodDecl 0xe77fd0 <line:537:7, line:544:7> line:538:7 operator-= 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) volatile noexcept'
| | | |-ParmVarDecl 0xe77f38 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
| | | `-CompoundStmt 0xe7bad8 <line:539:7, line:544:7>
| | |   `-ReturnStmt 0xe7bac8 <line:543:2, col:28>
| | |     `-CallExpr 0xe7baa0 <col:9, col:28> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7ba38 <col:9, col:22> '<dependent type>' lvalue .operator-=
| | |       | `-MemberExpr 0xe7ba08 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7b9f8 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xe7ba80 <col:25> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe77f38 '__d' 'std::ptrdiff_t':'long'
| | |-CXXMethodDecl 0xe780b0 <line:546:7, line:548:37> line:547:7 is_lock_free 'bool () const noexcept'
| | | `-CompoundStmt 0xe7bba8 <line:548:7, col:37>
| | |   `-ReturnStmt 0xe7bb98 <col:9, col:34>
| | |     `-CallExpr 0xe7bb78 <col:16, col:34> '<dependent type>'
| | |       `-CXXDependentScopeMemberExpr 0xe7bb30 <col:16, col:21> '<dependent type>' lvalue .is_lock_free
| | |         `-MemberExpr 0xe7bb00 <col:16> 'const std::atomic<type-parameter-0-0 *>::__base_type':'const __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |           `-CXXThisExpr 0xe7baf0 <col:16> 'const atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xe78178 <line:550:7, line:552:37> line:551:7 is_lock_free 'bool () const volatile noexcept'
| | | `-CompoundStmt 0xe7bc78 <line:552:7, col:37>
| | |   `-ReturnStmt 0xe7bc68 <col:9, col:34>
| | |     `-CallExpr 0xe7bc48 <col:16, col:34> '<dependent type>'
| | |       `-CXXDependentScopeMemberExpr 0xe7bc00 <col:16, col:21> '<dependent type>' lvalue .is_lock_free
| | |         `-MemberExpr 0xe7bbd0 <col:16> 'const volatile std::atomic<type-parameter-0-0 *>::__base_type':'const volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |           `-CXXThisExpr 0xe7bbc0 <col:16> 'const volatile atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xe78390 <line:558:7, line:561:38> line:559:7 store 'void (std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe78238 <col:13, col:28> col:28 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xe782b0 <line:560:6, col:25> col:19 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe7ad00 <col:25> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe7bd98 <line:561:7, col:38>
| | |   `-ReturnStmt 0xe7bd88 <col:9, col:35>
| | |     `-CallExpr 0xe7bd58 <col:16, col:35> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7bcd0 <col:16, col:21> '<dependent type>' lvalue .store
| | |       | `-MemberExpr 0xe7bca0 <col:16> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7bc90 <col:16> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xe7bd18 <col:27> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe78238 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       `-DeclRefExpr 0xe7bd38 <col:32> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe782b0 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe785a0 <line:563:7, line:566:38> line:564:7 store 'void (std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xe78450 <col:13, col:28> col:28 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xe784c8 <line:565:6, col:25> col:19 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe7ad20 <col:25> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe7beb8 <line:566:7, col:38>
| | |   `-ReturnStmt 0xe7bea8 <col:9, col:35>
| | |     `-CallExpr 0xe7be78 <col:16, col:35> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7bdf0 <col:16, col:21> '<dependent type>' lvalue .store
| | |       | `-MemberExpr 0xe7bdc0 <col:16> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7bdb0 <col:16> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xe7be38 <col:27> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe78450 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       `-DeclRefExpr 0xe7be58 <col:32> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe784c8 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe78740 <line:568:7, line:570:32> line:569:7 load 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::memory_order) const noexcept'
| | | |-ParmVarDecl 0xe78670 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe7ad40 <col:31> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe7bfb0 <line:570:7, col:32>
| | |   `-ReturnStmt 0xe7bfa0 <col:9, col:29>
| | |     `-CallExpr 0xe7bf78 <col:16, col:29> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7bf10 <col:16, col:21> '<dependent type>' lvalue .load
| | |       | `-MemberExpr 0xe7bee0 <col:16> 'const std::atomic<type-parameter-0-0 *>::__base_type':'const __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7bed0 <col:16> 'const atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xe7bf58 <col:26> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe78670 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe788c0 <line:572:7, line:574:32> line:573:7 load 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::memory_order) const volatile noexcept'
| | | |-ParmVarDecl 0xe787f8 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe7ad60 <col:31> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe7c0a8 <line:574:7, col:32>
| | |   `-ReturnStmt 0xe7c098 <col:9, col:29>
| | |     `-CallExpr 0xe7c070 <col:16, col:29> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7c008 <col:16, col:21> '<dependent type>' lvalue .load
| | |       | `-MemberExpr 0xe7bfd8 <col:16> 'const volatile std::atomic<type-parameter-0-0 *>::__base_type':'const volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7bfc8 <col:16> 'const volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xe7c050 <col:26> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe787f8 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe78ae0 <line:576:7, line:579:41> line:577:7 exchange 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe78988 <col:16, col:31> col:31 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xe78a00 <line:578:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe7ad80 <col:28> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe7c1c8 <line:579:7, col:41>
| | |   `-ReturnStmt 0xe7c1b8 <col:9, col:38>
| | |     `-CallExpr 0xe7c188 <col:16, col:38> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7c100 <col:16, col:21> '<dependent type>' lvalue .exchange
| | |       | `-MemberExpr 0xe7c0d0 <col:16> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7c0c0 <col:16> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xe7c148 <col:30> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe78988 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       `-DeclRefExpr 0xe7c168 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe78a00 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe78cf0 <line:581:7, line:584:41> line:582:7 exchange 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xe78ba0 <col:16, col:31> col:31 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xe78c18 <line:583:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe7ada0 <col:28> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe7c2e8 <line:584:7, col:41>
| | |   `-ReturnStmt 0xe7c2d8 <col:9, col:38>
| | |     `-CallExpr 0xe7c2a8 <col:16, col:38> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7c220 <col:16, col:21> '<dependent type>' lvalue .exchange
| | |       | `-MemberExpr 0xe7c1f0 <col:16> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7c1e0 <col:16> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xe7c268 <col:30> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe78ba0 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       `-DeclRefExpr 0xe7c288 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe78c18 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe79050 <line:586:7, line:589:70> line:587:7 compare_exchange_weak 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe78de8 <col:29, col:45> col:45 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xe78e60 <col:51, col:66> col:66 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xe78ed8 <line:588:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xe78f50 <col:27, col:40> col:40 referenced __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xe7c458 <line:589:7, col:70>
| | |   `-ReturnStmt 0xe7c448 <col:9, col:67>
| | |     `-CallExpr 0xe7c408 <col:16, col:67> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7c340 <col:16, col:21> '<dependent type>' lvalue .compare_exchange_strong
| | |       | `-MemberExpr 0xe7c310 <col:16> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7c300 <col:16> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xe7c388 <col:45> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe78de8 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xe7c3a8 <col:51> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe78e60 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xe7c3c8 <col:57> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe78ed8 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-DeclRefExpr 0xe7c3e8 <col:63> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe78f50 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe79390 <line:591:7, line:595:70> line:592:7 compare_exchange_weak 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xe79120 <col:29, col:45> col:45 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xe79198 <col:51, col:66> col:66 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xe79220 <line:593:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xe79298 <line:594:8, col:21> col:21 referenced __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xe7c5c8 <line:595:7, col:70>
| | |   `-ReturnStmt 0xe7c5b8 <col:9, col:67>
| | |     `-CallExpr 0xe7c578 <col:16, col:67> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7c4b0 <col:16, col:21> '<dependent type>' lvalue .compare_exchange_strong
| | |       | `-MemberExpr 0xe7c480 <col:16> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7c470 <col:16> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xe7c4f8 <col:45> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe79120 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xe7c518 <col:51> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe79198 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xe7c538 <col:57> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe79220 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-DeclRefExpr 0xe7c558 <col:63> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe79298 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe79690 <line:597:7, line:603:7> line:598:7 compare_exchange_weak 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe79470 <col:29, col:45> col:45 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xe794e8 <col:51, col:66> col:66 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xe79560 <line:599:8, col:27> col:21 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe7adc0 <col:27> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe7c7f0 <line:600:7, line:603:7>
| | |   `-ReturnStmt 0xe7c7e0 <line:601:2, line:602:38>
| | |     `-CallExpr 0xe7c7a0 <line:601:9, line:602:38> '<dependent type>'
| | |       |-UnresolvedMemberExpr 0xe7c5f0 <line:601:9> '<bound member function type>' lvalue
| | |       |-DeclRefExpr 0xe7c660 <col:31> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe79470 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xe7c680 <col:37> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe794e8 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xe7c6a0 <col:43> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe79560 '__m' 'std::memory_order':'std::memory_order'
| | |       `-CallExpr 0xe7c760 <line:602:10, col:37> 'std::memory_order':'std::memory_order'
| | |         |-ImplicitCastExpr 0xe7c748 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0xe7c728 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | |         `-ImplicitCastExpr 0xe7c788 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |           `-DeclRefExpr 0xe7c708 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe79560 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe79980 <line:605:7, line:611:7> line:606:7 compare_exchange_weak 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xe79768 <col:29, col:45> col:45 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xe797e0 <col:51, col:66> col:66 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xe79858 <line:607:7, col:26> col:20 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe7ade0 <col:26> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe7ca18 <line:608:7, line:611:7>
| | |   `-ReturnStmt 0xe7ca08 <line:609:2, line:610:38>
| | |     `-CallExpr 0xe7c9c8 <line:609:9, line:610:38> '<dependent type>'
| | |       |-UnresolvedMemberExpr 0xe7c818 <line:609:9> '<bound member function type>' lvalue
| | |       |-DeclRefExpr 0xe7c888 <col:31> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe79768 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xe7c8a8 <col:37> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe797e0 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xe7c8c8 <col:43> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe79858 '__m' 'std::memory_order':'std::memory_order'
| | |       `-CallExpr 0xe7c988 <line:610:10, col:37> 'std::memory_order':'std::memory_order'
| | |         |-ImplicitCastExpr 0xe7c970 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0xe7c950 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | |         `-ImplicitCastExpr 0xe7c9b0 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |           `-DeclRefExpr 0xe7c930 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe79858 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe79c70 <line:613:7, line:616:70> line:614:7 compare_exchange_strong 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe79a58 <col:31, col:47> col:47 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xe79ad0 <col:53, col:68> col:68 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xe79b48 <line:615:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xe79bc0 <col:29, col:42> col:42 referenced __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xe7cb88 <line:616:7, col:70>
| | |   `-ReturnStmt 0xe7cb78 <col:9, col:67>
| | |     `-CallExpr 0xe7cb38 <col:16, col:67> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7ca70 <col:16, col:21> '<dependent type>' lvalue .compare_exchange_strong
| | |       | `-MemberExpr 0xe7ca40 <col:16> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7ca30 <col:16> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xe7cab8 <col:45> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe79a58 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xe7cad8 <col:51> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe79ad0 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xe7caf8 <col:57> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe79b48 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-DeclRefExpr 0xe7cb18 <col:63> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe79bc0 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe79f58 <line:618:7, line:622:70> line:619:7 compare_exchange_strong 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xe79d40 <col:31, col:47> col:47 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xe79db8 <col:53, col:68> col:68 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xe79e30 <line:620:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xe79ea8 <line:621:10, col:23> col:23 referenced __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xe7ccf8 <line:622:7, col:70>
| | |   `-ReturnStmt 0xe7cce8 <col:9, col:67>
| | |     `-CallExpr 0xe7cca8 <col:16, col:67> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7cbe0 <col:16, col:21> '<dependent type>' lvalue .compare_exchange_strong
| | |       | `-MemberExpr 0xe7cbb0 <col:16> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7cba0 <col:16> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xe7cc28 <col:45> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe79d40 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xe7cc48 <col:51> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe79db8 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xe7cc68 <col:57> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe79e30 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-DeclRefExpr 0xe7cc88 <col:63> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe79ea8 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe7a1d0 <line:624:7, line:630:7> line:625:7 compare_exchange_strong 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe7a038 <col:31, col:47> col:47 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xe7a0b0 <col:53, col:68> col:68 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xe7a128 <line:626:10, col:29> col:23 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe7ae00 <col:29> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe7cf28 <line:627:7, line:630:7>
| | |   `-ReturnStmt 0xe7cf18 <line:628:2, line:629:38>
| | |     `-CallExpr 0xe7ced8 <line:628:9, line:629:38> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7cd50 <line:628:9, col:14> '<dependent type>' lvalue .compare_exchange_strong
| | |       | `-MemberExpr 0xe7cd20 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7cd10 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xe7cd98 <col:38> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe7a038 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xe7cdb8 <col:44> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe7a0b0 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xe7cdd8 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe7a128 '__m' 'std::memory_order':'std::memory_order'
| | |       `-CallExpr 0xe7ce98 <line:629:10, col:37> 'std::memory_order':'std::memory_order'
| | |         |-ImplicitCastExpr 0xe7ce80 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0xe7ce60 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | |         `-ImplicitCastExpr 0xe7cec0 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |           `-DeclRefExpr 0xe7ce40 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe7a128 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe7a440 <line:632:7, line:638:7> line:633:7 compare_exchange_strong 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xe7a2a8 <col:31, col:47> col:47 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xe7a320 <col:53, col:68> col:68 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xe7a398 <line:634:7, col:26> col:20 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe7ae20 <col:26> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe7d158 <line:635:7, line:638:7>
| | |   `-ReturnStmt 0xe7d148 <line:636:2, line:637:38>
| | |     `-CallExpr 0xe7d108 <line:636:9, line:637:38> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7cf80 <line:636:9, col:14> '<dependent type>' lvalue .compare_exchange_strong
| | |       | `-MemberExpr 0xe7cf50 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7cf40 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xe7cfc8 <col:38> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe7a2a8 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xe7cfe8 <col:44> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xe7a320 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xe7d008 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe7a398 '__m' 'std::memory_order':'std::memory_order'
| | |       `-CallExpr 0xe7d0c8 <line:637:10, col:37> 'std::memory_order':'std::memory_order'
| | |         |-ImplicitCastExpr 0xe7d0b0 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0xe7d090 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xe1fda0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | |         `-ImplicitCastExpr 0xe7d0f0 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |           `-DeclRefExpr 0xe7d070 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe7a398 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe7a670 <line:655:7, line:663:7> line:656:7 fetch_add 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe7a518 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
| | | |-ParmVarDecl 0xe7a590 <line:657:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe7ae40 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe7d290 <line:658:7, line:663:7>
| | |   `-ReturnStmt 0xe7d280 <line:662:2, col:32>
| | |     `-CallExpr 0xe7d250 <col:9, col:32> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7d1b0 <col:9, col:14> '<dependent type>' lvalue .fetch_add
| | |       | `-MemberExpr 0xe7d180 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7d170 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xe7d1f8 <col:24> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe7a518 '__d' 'std::ptrdiff_t':'long'
| | |       `-DeclRefExpr 0xe7d230 <col:29> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe7a590 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe7a880 <line:665:7, line:673:7> line:666:7 fetch_add 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xe7a730 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
| | | |-ParmVarDecl 0xe7a7a8 <line:667:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe7ae60 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe7d3b0 <line:668:7, line:673:7>
| | |   `-ReturnStmt 0xe7d3a0 <line:672:2, col:32>
| | |     `-CallExpr 0xe7d370 <col:9, col:32> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7d2e8 <col:9, col:14> '<dependent type>' lvalue .fetch_add
| | |       | `-MemberExpr 0xe7d2b8 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7d2a8 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xe7d330 <col:24> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe7a730 '__d' 'std::ptrdiff_t':'long'
| | |       `-DeclRefExpr 0xe7d350 <col:29> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe7a7a8 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xe7aa68 <line:675:7, line:683:7> line:676:7 fetch_sub 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xe7a950 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
| | | |-ParmVarDecl 0xe7a9c8 <line:677:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xe7ae80 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xe7d4d0 <line:678:7, line:683:7>
| | |   `-ReturnStmt 0xe7d4c0 <line:682:2, col:32>
| | |     `-CallExpr 0xe7d490 <col:9, col:32> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xe7d408 <col:9, col:14> '<dependent type>' lvalue .fetch_sub
| | |       | `-MemberExpr 0xe7d3d8 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| | |       |   `-CXXThisExpr 0xe7d3c8 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xe7d450 <col:24> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe7a950 '__d' 'std::ptrdiff_t':'long'
| | |       `-DeclRefExpr 0xe7d470 <col:29> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe7a9c8 '__m' 'std::memory_order':'std::memory_order'
| | `-CXXMethodDecl 0xe7ac40 <line:685:7, line:693:7> line:686:7 fetch_sub 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) volatile noexcept'
| |   |-ParmVarDecl 0xe7ab28 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
| |   |-ParmVarDecl 0xe7aba0 <line:687:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| |   | `-DeclRefExpr 0xe7aea0 <col:22> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |   `-CompoundStmt 0xe7d5f0 <line:688:7, line:693:7>
| |     `-ReturnStmt 0xe7d5e0 <line:692:2, col:32>
| |       `-CallExpr 0xe7d5b0 <col:9, col:32> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xe7d528 <col:9, col:14> '<dependent type>' lvalue .fetch_sub
| |         | `-MemberExpr 0xe7d4f8 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xe761a0
| |         |   `-CXXThisExpr 0xe7d4e8 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| |         |-DeclRefExpr 0xe7d570 <col:24> 'std::ptrdiff_t':'long' lvalue ParmVar 0xe7ab28 '__d' 'std::ptrdiff_t':'long'
| |         `-DeclRefExpr 0xe7d590 <col:29> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xe7aba0 '__m' 'std::memory_order':'std::memory_order'
| |-ClassTemplateSpecializationDecl 0xe7d628 <line:698:3, line:718:5> line:699:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<char>':'std::__atomic_base<char>'
| | |-TemplateArgument type 'char'
| | | `-BuiltinType 0xbf61f0 'char'
| | |-CXXRecordDecl 0xd95d60 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xd95e00 <line:701:7, col:23> col:23 referenced __integral_type 'char'
| | | `-BuiltinType 0xbf61f0 'char'
| | |-TypedefDecl 0xd95ef0 <line:702:7, col:36> col:36 referenced __base_type '__atomic_base<char>':'std::__atomic_base<char>'
| | | `-TemplateSpecializationType 0xd95e70 '__atomic_base<char>' sugar __atomic_base
| | |   |-TemplateArgument type 'char'
| | |   | `-BuiltinType 0xbf61f0 'char'
| | |   `-RecordType 0xe7d930 'std::__atomic_base<char>'
| | |     `-ClassTemplateSpecialization 0xe7d848 '__atomic_base'
| | |-CXXConstructorDecl 0xd95fb8 <line:704:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xd960b0 <line:705:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xd96258 <line:706:7, col:36> col:7 atomic 'void (const std::atomic<char> &)' delete trivial
| | | `-ParmVarDecl 0xd96198 <col:14, col:26> col:27 'const std::atomic<char> &'
| | |-CXXMethodDecl 0xd96418 <line:707:7, col:47> col:15 operator= 'std::atomic<char> &(const std::atomic<char> &)' delete trivial
| | | `-ParmVarDecl 0xd96328 <col:25, col:37> col:38 'const std::atomic<char> &'
| | |-CXXMethodDecl 0xd965f8 <line:708:7, col:56> col:15 operator= 'std::atomic<char> &(const std::atomic<char> &) volatile' delete trivial
| | | `-ParmVarDecl 0xd964d0 <col:25, col:37> col:38 'const std::atomic<char> &'
| | |-CXXConstructorDecl 0xd967b0 <line:710:7, col:75> col:17 constexpr atomic 'void (std::atomic<char>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xd966e0 <col:24, col:40> col:40 used __i 'std::atomic<char>::__integral_type':'char'
| | | |-CXXCtorInitializer 'std::atomic<char>::__base_type':'std::__atomic_base<char>'
| | | | `-CXXConstructExpr 0xd96df0 <col:56, col:71> '__atomic_base<char>':'std::__atomic_base<char>' 'void (std::__atomic_base<char>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xd96c68 <col:68> 'std::atomic<char>::__integral_type':'char' <LValueToRValue>
| | | |     `-DeclRefExpr 0xd96c18 <col:68> 'std::atomic<char>::__integral_type':'char' lvalue ParmVar 0xd966e0 '__i' 'std::atomic<char>::__integral_type':'char'
| | | `-CompoundStmt 0xd96e48 <col:73, col:75>
| | |-UsingDecl 0xd968e8 <line:712:7, col:35> col:26 __base_type::operator char
| | |-UsingShadowDecl 0xd96940 <col:26> col:26 implicit CXXConversion 0xe7e9e8 'operator char' 'std::__atomic_base<char>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xd969a8 <col:26> col:26 implicit CXXConversion 0xe7eb40 'operator char' 'std::__atomic_base<char>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xd96a30 <line:713:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xd96a98 <col:26> col:26 implicit CXXMethod 0xe7e4e8 'operator=' 'std::__atomic_base<char> &(const std::__atomic_base<char> &)'
| | |-UsingShadowDecl 0xd96af8 <col:26> col:26 implicit CXXMethod 0xe7e678 'operator=' 'std::__atomic_base<char> &(const std::__atomic_base<char> &) volatile'
| | |-UsingShadowDecl 0xd96b58 <col:26> col:26 implicit CXXMethod 0xe7ed20 'operator=' 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | `-UsingShadowDecl 0xd96bb8 <col:26> col:26 implicit CXXMethod 0xe7eef0 'operator=' 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xd96f40 <line:721:3, line:741:5> line:722:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<signed char>':'std::__atomic_base<signed char>'
| | |-TemplateArgument type 'signed char'
| | | `-BuiltinType 0xbf6210 'signed char'
| | |-CXXRecordDecl 0xe96fe0 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xe97088 <line:724:7, col:29> col:29 referenced __integral_type 'signed char'
| | | `-BuiltinType 0xbf6210 'signed char'
| | |-TypedefDecl 0xe97180 <line:725:7, col:43> col:43 referenced __base_type '__atomic_base<signed char>':'std::__atomic_base<signed char>'
| | | `-TemplateSpecializationType 0xe97100 '__atomic_base<signed char>' sugar __atomic_base
| | |   |-TemplateArgument type 'signed char'
| | |   | `-BuiltinType 0xbf6210 'signed char'
| | |   `-RecordType 0xd97240 'std::__atomic_base<signed char>'
| | |     `-ClassTemplateSpecialization 0xd97160 '__atomic_base'
| | |-CXXConstructorDecl 0xe97280 <line:727:7, col:32> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xe97378 <line:728:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xe97528 <line:729:7, col:36> col:7 atomic 'void (const std::atomic<signed char> &)' delete trivial
| | | `-ParmVarDecl 0xe97468 <col:14, col:26> col:27 'const std::atomic<signed char> &'
| | |-CXXMethodDecl 0xe976e8 <line:730:7, col:47> col:15 operator= 'std::atomic<signed char> &(const std::atomic<signed char> &)' delete trivial
| | | `-ParmVarDecl 0xe975f8 <col:25, col:37> col:38 'const std::atomic<signed char> &'
| | |-CXXMethodDecl 0xe97898 <line:731:7, col:56> col:15 operator= 'std::atomic<signed char> &(const std::atomic<signed char> &) volatile' delete trivial
| | | `-ParmVarDecl 0xe977a0 <col:25, col:37> col:38 'const std::atomic<signed char> &'
| | |-CXXConstructorDecl 0xe97a50 <line:733:7, col:75> col:17 constexpr atomic 'void (std::atomic<signed char>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xe97980 <col:24, col:40> col:40 used __i 'std::atomic<signed char>::__integral_type':'signed char'
| | | |-CXXCtorInitializer 'std::atomic<signed char>::__base_type':'std::__atomic_base<signed char>'
| | | | `-CXXConstructExpr 0xe98090 <col:56, col:71> '__atomic_base<signed char>':'std::__atomic_base<signed char>' 'void (std::__atomic_base<signed char>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xe97f08 <col:68> 'std::atomic<signed char>::__integral_type':'signed char' <LValueToRValue>
| | | |     `-DeclRefExpr 0xe97eb8 <col:68> 'std::atomic<signed char>::__integral_type':'signed char' lvalue ParmVar 0xe97980 '__i' 'std::atomic<signed char>::__integral_type':'signed char'
| | | `-CompoundStmt 0xe980e8 <col:73, col:75>
| | |-UsingDecl 0xe97b88 <line:735:7, col:35> col:26 __base_type::operator signed char
| | |-UsingShadowDecl 0xe97be0 <col:26> col:26 implicit CXXConversion 0xd982f8 'operator signed char' 'std::__atomic_base<signed char>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xe97c48 <col:26> col:26 implicit CXXConversion 0xd98450 'operator signed char' 'std::__atomic_base<signed char>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xe97cd0 <line:736:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xe97d38 <col:26> col:26 implicit CXXMethod 0xd97df8 'operator=' 'std::__atomic_base<signed char> &(const std::__atomic_base<signed char> &)'
| | |-UsingShadowDecl 0xe97d98 <col:26> col:26 implicit CXXMethod 0xd97f88 'operator=' 'std::__atomic_base<signed char> &(const std::__atomic_base<signed char> &) volatile'
| | |-UsingShadowDecl 0xe97df8 <col:26> col:26 implicit CXXMethod 0xd98640 'operator=' 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | `-UsingShadowDecl 0xe97e58 <col:26> col:26 implicit CXXMethod 0xd98810 'operator=' 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xe981e0 <line:744:3, line:764:5> line:745:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<unsigned char>':'std::__atomic_base<unsigned char>'
| | |-TemplateArgument type 'unsigned char'
| | | `-BuiltinType 0xbf62b0 'unsigned char'
| | |-CXXRecordDecl 0xea16f8 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xea17a0 <line:747:7, col:31> col:31 referenced __integral_type 'unsigned char'
| | | `-BuiltinType 0xbf62b0 'unsigned char'
| | |-TypedefDecl 0xea1890 <line:748:7, col:45> col:45 referenced __base_type '__atomic_base<unsigned char>':'std::__atomic_base<unsigned char>'
| | | `-TemplateSpecializationType 0xea1810 '__atomic_base<unsigned char>' sugar __atomic_base
| | |   |-TemplateArgument type 'unsigned char'
| | |   | `-BuiltinType 0xbf62b0 'unsigned char'
| | |   `-RecordType 0xe984e0 'std::__atomic_base<unsigned char>'
| | |     `-ClassTemplateSpecialization 0xe98400 '__atomic_base'
| | |-CXXConstructorDecl 0xea1958 <line:750:7, col:32> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xea1a50 <line:751:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xea1bf8 <line:752:7, col:36> col:7 atomic 'void (const std::atomic<unsigned char> &)' delete trivial
| | | `-ParmVarDecl 0xea1b38 <col:14, col:26> col:27 'const std::atomic<unsigned char> &'
| | |-CXXMethodDecl 0xea1db8 <line:753:7, col:47> col:15 operator= 'std::atomic<unsigned char> &(const std::atomic<unsigned char> &)' delete trivial
| | | `-ParmVarDecl 0xea1cc8 <col:25, col:37> col:38 'const std::atomic<unsigned char> &'
| | |-CXXMethodDecl 0xea1f68 <line:754:7, col:56> col:15 operator= 'std::atomic<unsigned char> &(const std::atomic<unsigned char> &) volatile' delete trivial
| | | `-ParmVarDecl 0xea1e70 <col:25, col:37> col:38 'const std::atomic<unsigned char> &'
| | |-CXXConstructorDecl 0xea2120 <line:756:7, col:75> col:17 constexpr atomic 'void (std::atomic<unsigned char>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xea2050 <col:24, col:40> col:40 used __i 'std::atomic<unsigned char>::__integral_type':'unsigned char'
| | | |-CXXCtorInitializer 'std::atomic<unsigned char>::__base_type':'std::__atomic_base<unsigned char>'
| | | | `-CXXConstructExpr 0xea2760 <col:56, col:71> '__atomic_base<unsigned char>':'std::__atomic_base<unsigned char>' 'void (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xea25d8 <col:68> 'std::atomic<unsigned char>::__integral_type':'unsigned char' <LValueToRValue>
| | | |     `-DeclRefExpr 0xea2588 <col:68> 'std::atomic<unsigned char>::__integral_type':'unsigned char' lvalue ParmVar 0xea2050 '__i' 'std::atomic<unsigned char>::__integral_type':'unsigned char'
| | | `-CompoundStmt 0xea27b8 <col:73, col:75>
| | |-UsingDecl 0xea2258 <line:758:7, col:35> col:26 __base_type::operator unsigned char
| | |-UsingShadowDecl 0xea22b0 <col:26> col:26 implicit CXXConversion 0xe995f8 'operator unsigned char' 'std::__atomic_base<unsigned char>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xea2318 <col:26> col:26 implicit CXXConversion 0xe99750 'operator unsigned char' 'std::__atomic_base<unsigned char>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xea23a0 <line:759:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xea2408 <col:26> col:26 implicit CXXMethod 0xe99098 'operator=' 'std::__atomic_base<unsigned char> &(const std::__atomic_base<unsigned char> &)'
| | |-UsingShadowDecl 0xea2468 <col:26> col:26 implicit CXXMethod 0xe99290 'operator=' 'std::__atomic_base<unsigned char> &(const std::__atomic_base<unsigned char> &) volatile'
| | |-UsingShadowDecl 0xea24c8 <col:26> col:26 implicit CXXMethod 0xe99930 'operator=' 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | `-UsingShadowDecl 0xea2528 <col:26> col:26 implicit CXXMethod 0xe99b00 'operator=' 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xea28b0 <line:767:3, line:787:5> line:768:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<short>':'std::__atomic_base<short>'
| | |-TemplateArgument type 'short'
| | | `-BuiltinType 0xbf6230 'short'
| | |-CXXRecordDecl 0xea9d48 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xea9df0 <line:770:7, col:24> col:24 referenced __integral_type 'short'
| | | `-BuiltinType 0xbf6230 'short'
| | |-TypedefDecl 0xea9ee0 <line:771:7, col:38> col:38 referenced __base_type '__atomic_base<short>':'std::__atomic_base<short>'
| | | `-TemplateSpecializationType 0xea9e60 '__atomic_base<short>' sugar __atomic_base
| | |   |-TemplateArgument type 'short'
| | |   | `-BuiltinType 0xbf6230 'short'
| | |   `-RecordType 0xea2bb0 'std::__atomic_base<short>'
| | |     `-ClassTemplateSpecialization 0xea2ad0 '__atomic_base'
| | |-CXXConstructorDecl 0xea9fa8 <line:773:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xeaa0a0 <line:774:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xeaa248 <line:775:7, col:36> col:7 atomic 'void (const std::atomic<short> &)' delete trivial
| | | `-ParmVarDecl 0xeaa188 <col:14, col:26> col:27 'const std::atomic<short> &'
| | |-CXXMethodDecl 0xeaa408 <line:776:7, col:47> col:15 operator= 'std::atomic<short> &(const std::atomic<short> &)' delete trivial
| | | `-ParmVarDecl 0xeaa318 <col:25, col:37> col:38 'const std::atomic<short> &'
| | |-CXXMethodDecl 0xeaa5b8 <line:777:7, col:56> col:15 operator= 'std::atomic<short> &(const std::atomic<short> &) volatile' delete trivial
| | | `-ParmVarDecl 0xeaa4c0 <col:25, col:37> col:38 'const std::atomic<short> &'
| | |-CXXConstructorDecl 0xeaa770 <line:779:7, col:75> col:17 constexpr atomic 'void (std::atomic<short>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xeaa6a0 <col:24, col:40> col:40 used __i 'std::atomic<short>::__integral_type':'short'
| | | |-CXXCtorInitializer 'std::atomic<short>::__base_type':'std::__atomic_base<short>'
| | | | `-CXXConstructExpr 0xeaadb0 <col:56, col:71> '__atomic_base<short>':'std::__atomic_base<short>' 'void (std::__atomic_base<short>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xeaac28 <col:68> 'std::atomic<short>::__integral_type':'short' <LValueToRValue>
| | | |     `-DeclRefExpr 0xeaabd8 <col:68> 'std::atomic<short>::__integral_type':'short' lvalue ParmVar 0xeaa6a0 '__i' 'std::atomic<short>::__integral_type':'short'
| | | `-CompoundStmt 0xeaae08 <col:73, col:75>
| | |-UsingDecl 0xeaa8a8 <line:781:7, col:35> col:26 __base_type::operator short
| | |-UsingShadowDecl 0xeaa900 <col:26> col:26 implicit CXXConversion 0xea3c88 'operator short' 'std::__atomic_base<short>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xeaa968 <col:26> col:26 implicit CXXConversion 0xea3de0 'operator short' 'std::__atomic_base<short>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xeaa9f0 <line:782:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xeaaa58 <col:26> col:26 implicit CXXMethod 0xea3788 'operator=' 'std::__atomic_base<short> &(const std::__atomic_base<short> &)'
| | |-UsingShadowDecl 0xeaaab8 <col:26> col:26 implicit CXXMethod 0xea3918 'operator=' 'std::__atomic_base<short> &(const std::__atomic_base<short> &) volatile'
| | |-UsingShadowDecl 0xeaab18 <col:26> col:26 implicit CXXMethod 0xea3fc0 'operator=' 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | `-UsingShadowDecl 0xeaab78 <col:26> col:26 implicit CXXMethod 0xea4190 'operator=' 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xeaaf00 <line:790:3, line:810:5> line:791:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<unsigned short>':'std::__atomic_base<unsigned short>'
| | |-TemplateArgument type 'unsigned short'
| | | `-BuiltinType 0xbf62d0 'unsigned short'
| | |-CXXRecordDecl 0xeb2428 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xeb24d0 <line:793:7, col:38> col:38 referenced __integral_type 'unsigned short'
| | | `-BuiltinType 0xbf62d0 'unsigned short'
| | |-TypedefDecl 0xeb25c0 <line:794:7, col:47> col:47 referenced __base_type '__atomic_base<unsigned short>':'std::__atomic_base<unsigned short>'
| | | `-TemplateSpecializationType 0xeb2540 '__atomic_base<unsigned short>' sugar __atomic_base
| | |   |-TemplateArgument type 'unsigned short'
| | |   | `-BuiltinType 0xbf62d0 'unsigned short'
| | |   `-RecordType 0xeab200 'std::__atomic_base<unsigned short>'
| | |     `-ClassTemplateSpecialization 0xeab120 '__atomic_base'
| | |-CXXConstructorDecl 0xeb2688 <line:796:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xeb2780 <line:797:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xeb2928 <line:798:7, col:36> col:7 atomic 'void (const std::atomic<unsigned short> &)' delete trivial
| | | `-ParmVarDecl 0xeb2868 <col:14, col:26> col:27 'const std::atomic<unsigned short> &'
| | |-CXXMethodDecl 0xeb2ae8 <line:799:7, col:47> col:15 operator= 'std::atomic<unsigned short> &(const std::atomic<unsigned short> &)' delete trivial
| | | `-ParmVarDecl 0xeb29f8 <col:25, col:37> col:38 'const std::atomic<unsigned short> &'
| | |-CXXMethodDecl 0xeb2c98 <line:800:7, col:56> col:15 operator= 'std::atomic<unsigned short> &(const std::atomic<unsigned short> &) volatile' delete trivial
| | | `-ParmVarDecl 0xeb2ba0 <col:25, col:37> col:38 'const std::atomic<unsigned short> &'
| | |-CXXConstructorDecl 0xeb2e50 <line:802:7, col:75> col:17 constexpr atomic 'void (std::atomic<unsigned short>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xeb2d80 <col:24, col:40> col:40 used __i 'std::atomic<unsigned short>::__integral_type':'unsigned short'
| | | |-CXXCtorInitializer 'std::atomic<unsigned short>::__base_type':'std::__atomic_base<unsigned short>'
| | | | `-CXXConstructExpr 0xeb34a8 <col:56, col:71> '__atomic_base<unsigned short>':'std::__atomic_base<unsigned short>' 'void (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xeb3308 <col:68> 'std::atomic<unsigned short>::__integral_type':'unsigned short' <LValueToRValue>
| | | |     `-DeclRefExpr 0xeb32b8 <col:68> 'std::atomic<unsigned short>::__integral_type':'unsigned short' lvalue ParmVar 0xeb2d80 '__i' 'std::atomic<unsigned short>::__integral_type':'unsigned short'
| | | `-CompoundStmt 0xeb3500 <col:73, col:75>
| | |-UsingDecl 0xeb2f88 <line:804:7, col:35> col:26 __base_type::operator unsigned short
| | |-UsingShadowDecl 0xeb2fe0 <col:26> col:26 implicit CXXConversion 0xeac328 'operator unsigned short' 'std::__atomic_base<unsigned short>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xeb3048 <col:26> col:26 implicit CXXConversion 0xeac480 'operator unsigned short' 'std::__atomic_base<unsigned short>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xeb30d0 <line:805:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xeb3138 <col:26> col:26 implicit CXXMethod 0xeabe28 'operator=' 'std::__atomic_base<unsigned short> &(const std::__atomic_base<unsigned short> &)'
| | |-UsingShadowDecl 0xeb3198 <col:26> col:26 implicit CXXMethod 0xeabfb8 'operator=' 'std::__atomic_base<unsigned short> &(const std::__atomic_base<unsigned short> &) volatile'
| | |-UsingShadowDecl 0xeb31f8 <col:26> col:26 implicit CXXMethod 0xeac660 'operator=' 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | `-UsingShadowDecl 0xeb3258 <col:26> col:26 implicit CXXMethod 0xeac830 'operator=' 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xeb35f8 <line:813:3, line:833:5> line:814:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<int>':'std::__atomic_base<int>'
| | |-TemplateArgument type 'int'
| | | `-BuiltinType 0xbf6250 'int'
| | |-CXXRecordDecl 0xeba9f0 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xebaa98 <line:816:7, col:22> col:22 referenced __integral_type 'int'
| | | `-BuiltinType 0xbf6250 'int'
| | |-TypedefDecl 0xebab90 <line:817:7, col:36> col:36 referenced __base_type '__atomic_base<int>':'std::__atomic_base<int>'
| | | `-TemplateSpecializationType 0xebab10 '__atomic_base<int>' sugar __atomic_base
| | |   |-TemplateArgument type 'int'
| | |   | `-BuiltinType 0xbf6250 'int'
| | |   `-RecordType 0xeb3900 'std::__atomic_base<int>'
| | |     `-ClassTemplateSpecialization 0xeb3820 '__atomic_base'
| | |-CXXConstructorDecl 0xebac58 <line:819:7, col:33> col:7 used atomic 'void () noexcept' default trivial
| | | |-CXXCtorInitializer '__atomic_base<int>':'std::__atomic_base<int>'
| | | | `-CXXConstructExpr 0xf2be58 <col:7> '__atomic_base<int>':'std::__atomic_base<int>' 'void () noexcept'
| | | `-CompoundStmt 0xf2bee0 <col:33>
| | |-CXXDestructorDecl 0xebad50 <line:820:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xebaef8 <line:821:7, col:36> col:7 atomic 'void (const std::atomic<int> &)' delete trivial
| | | `-ParmVarDecl 0xebae38 <col:14, col:26> col:27 'const std::atomic<int> &'
| | |-CXXMethodDecl 0xebb0b8 <line:822:7, col:47> col:15 operator= 'std::atomic<int> &(const std::atomic<int> &)' delete trivial
| | | `-ParmVarDecl 0xebafc8 <col:25, col:37> col:38 'const std::atomic<int> &'
| | |-CXXMethodDecl 0xebb268 <line:823:7, col:56> col:15 operator= 'std::atomic<int> &(const std::atomic<int> &) volatile' delete trivial
| | | `-ParmVarDecl 0xebb170 <col:25, col:37> col:38 'const std::atomic<int> &'
| | |-CXXConstructorDecl 0xebb470 <line:825:7, col:75> col:17 constexpr atomic 'void (std::atomic<int>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xebb3a0 <col:24, col:40> col:40 used __i 'std::atomic<int>::__integral_type':'int'
| | | |-CXXCtorInitializer 'std::atomic<int>::__base_type':'std::__atomic_base<int>'
| | | | `-CXXConstructExpr 0xebbab0 <col:56, col:71> '__atomic_base<int>':'std::__atomic_base<int>' 'void (std::__atomic_base<int>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xebb928 <col:68> 'std::atomic<int>::__integral_type':'int' <LValueToRValue>
| | | |     `-DeclRefExpr 0xebb8d8 <col:68> 'std::atomic<int>::__integral_type':'int' lvalue ParmVar 0xebb3a0 '__i' 'std::atomic<int>::__integral_type':'int'
| | | `-CompoundStmt 0xebbb08 <col:73, col:75>
| | |-UsingDecl 0xebb5a8 <line:827:7, col:35> col:26 __base_type::operator int
| | |-UsingShadowDecl 0xebb600 <col:26> col:26 implicit CXXConversion 0xeb4988 'operator int' 'std::__atomic_base<int>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xebb668 <col:26> col:26 implicit CXXConversion 0xeb4ae0 'operator int' 'std::__atomic_base<int>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xebb6f0 <line:828:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xebb758 <col:26> col:26 implicit CXXMethod 0xeb44b8 'operator=' 'std::__atomic_base<int> &(const std::__atomic_base<int> &)'
| | |-UsingShadowDecl 0xebb7b8 <col:26> col:26 implicit CXXMethod 0xeb4648 'operator=' 'std::__atomic_base<int> &(const std::__atomic_base<int> &) volatile'
| | |-UsingShadowDecl 0xebb818 <col:26> col:26 implicit CXXMethod 0xeb4cc0 'operator=' 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | `-UsingShadowDecl 0xebb878 <col:26> col:26 implicit CXXMethod 0xeb4e90 'operator=' 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xebbc00 <line:836:3, line:856:5> line:837:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<unsigned int>':'std::__atomic_base<unsigned int>'
| | |-TemplateArgument type 'unsigned int'
| | | `-BuiltinType 0xbf62f0 'unsigned int'
| | |-CXXRecordDecl 0xec3410 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xec34b8 <line:839:7, col:29> col:29 referenced __integral_type 'unsigned int'
| | | `-BuiltinType 0xbf62f0 'unsigned int'
| | |-TypedefDecl 0xec35b0 <line:840:7, col:44> col:44 referenced __base_type '__atomic_base<unsigned int>':'std::__atomic_base<unsigned int>'
| | | `-TemplateSpecializationType 0xec3530 '__atomic_base<unsigned int>' sugar __atomic_base
| | |   |-TemplateArgument type 'unsigned int'
| | |   | `-BuiltinType 0xbf62f0 'unsigned int'
| | |   `-RecordType 0xebbf00 'std::__atomic_base<unsigned int>'
| | |     `-ClassTemplateSpecialization 0xebbe20 '__atomic_base'
| | |-CXXConstructorDecl 0xec3678 <line:842:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xec37f0 <line:843:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xec3998 <line:844:7, col:36> col:7 atomic 'void (const std::atomic<unsigned int> &)' delete trivial
| | | `-ParmVarDecl 0xec38d8 <col:14, col:26> col:27 'const std::atomic<unsigned int> &'
| | |-CXXMethodDecl 0xec3b58 <line:845:7, col:47> col:15 operator= 'std::atomic<unsigned int> &(const std::atomic<unsigned int> &)' delete trivial
| | | `-ParmVarDecl 0xec3a68 <col:25, col:37> col:38 'const std::atomic<unsigned int> &'
| | |-CXXMethodDecl 0xec3d08 <line:846:7, col:56> col:15 operator= 'std::atomic<unsigned int> &(const std::atomic<unsigned int> &) volatile' delete trivial
| | | `-ParmVarDecl 0xec3c10 <col:25, col:37> col:38 'const std::atomic<unsigned int> &'
| | |-CXXConstructorDecl 0xec3ec0 <line:848:7, col:75> col:17 constexpr atomic 'void (std::atomic<unsigned int>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xec3df0 <col:24, col:40> col:40 used __i 'std::atomic<unsigned int>::__integral_type':'unsigned int'
| | | |-CXXCtorInitializer 'std::atomic<unsigned int>::__base_type':'std::__atomic_base<unsigned int>'
| | | | `-CXXConstructExpr 0xec4500 <col:56, col:71> '__atomic_base<unsigned int>':'std::__atomic_base<unsigned int>' 'void (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xec4378 <col:68> 'std::atomic<unsigned int>::__integral_type':'unsigned int' <LValueToRValue>
| | | |     `-DeclRefExpr 0xec4328 <col:68> 'std::atomic<unsigned int>::__integral_type':'unsigned int' lvalue ParmVar 0xec3df0 '__i' 'std::atomic<unsigned int>::__integral_type':'unsigned int'
| | | `-CompoundStmt 0xec4558 <col:73, col:75>
| | |-UsingDecl 0xec3ff8 <line:850:7, col:35> col:26 __base_type::operator unsigned int
| | |-UsingShadowDecl 0xec4050 <col:26> col:26 implicit CXXConversion 0xebcfb8 'operator unsigned int' 'std::__atomic_base<unsigned int>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xec40b8 <col:26> col:26 implicit CXXConversion 0xebd110 'operator unsigned int' 'std::__atomic_base<unsigned int>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xec4140 <line:851:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xec41a8 <col:26> col:26 implicit CXXMethod 0xebcab8 'operator=' 'std::__atomic_base<unsigned int> &(const std::__atomic_base<unsigned int> &)'
| | |-UsingShadowDecl 0xec4208 <col:26> col:26 implicit CXXMethod 0xebcc48 'operator=' 'std::__atomic_base<unsigned int> &(const std::__atomic_base<unsigned int> &) volatile'
| | |-UsingShadowDecl 0xec4268 <col:26> col:26 implicit CXXMethod 0xebd2f0 'operator=' 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | `-UsingShadowDecl 0xec42c8 <col:26> col:26 implicit CXXMethod 0xebd8e0 'operator=' 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xec4650 <line:859:3, line:879:5> line:860:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<long>':'std::__atomic_base<long>'
| | |-TemplateArgument type 'long'
| | | `-BuiltinType 0xbf6270 'long'
| | |-CXXRecordDecl 0xecd8c0 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xecd968 <line:862:7, col:23> col:23 referenced __integral_type 'long'
| | | `-BuiltinType 0xbf6270 'long'
| | |-TypedefDecl 0xecda60 <line:863:7, col:36> col:36 referenced __base_type '__atomic_base<long>':'std::__atomic_base<long>'
| | | `-TemplateSpecializationType 0xecd9e0 '__atomic_base<long>' sugar __atomic_base
| | |   |-TemplateArgument type 'long'
| | |   | `-BuiltinType 0xbf6270 'long'
| | |   `-RecordType 0xec4950 'std::__atomic_base<long>'
| | |     `-ClassTemplateSpecialization 0xec4870 '__atomic_base'
| | |-CXXConstructorDecl 0xecdb28 <line:865:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xecdc20 <line:866:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xecddc8 <line:867:7, col:36> col:7 atomic 'void (const std::atomic<long> &)' delete trivial
| | | `-ParmVarDecl 0xecdd08 <col:14, col:26> col:27 'const std::atomic<long> &'
| | |-CXXMethodDecl 0xecdf88 <line:868:7, col:47> col:15 operator= 'std::atomic<long> &(const std::atomic<long> &)' delete trivial
| | | `-ParmVarDecl 0xecde98 <col:25, col:37> col:38 'const std::atomic<long> &'
| | |-CXXMethodDecl 0xece138 <line:869:7, col:56> col:15 operator= 'std::atomic<long> &(const std::atomic<long> &) volatile' delete trivial
| | | `-ParmVarDecl 0xece040 <col:25, col:37> col:38 'const std::atomic<long> &'
| | |-CXXConstructorDecl 0xece2f0 <line:871:7, col:75> col:17 constexpr atomic 'void (std::atomic<long>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xece220 <col:24, col:40> col:40 used __i 'std::atomic<long>::__integral_type':'long'
| | | |-CXXCtorInitializer 'std::atomic<long>::__base_type':'std::__atomic_base<long>'
| | | | `-CXXConstructExpr 0xece930 <col:56, col:71> '__atomic_base<long>':'std::__atomic_base<long>' 'void (std::__atomic_base<long>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xece7a8 <col:68> 'std::atomic<long>::__integral_type':'long' <LValueToRValue>
| | | |     `-DeclRefExpr 0xece758 <col:68> 'std::atomic<long>::__integral_type':'long' lvalue ParmVar 0xece220 '__i' 'std::atomic<long>::__integral_type':'long'
| | | `-CompoundStmt 0xece988 <col:73, col:75>
| | |-UsingDecl 0xece428 <line:873:7, col:35> col:26 __base_type::operator long
| | |-UsingShadowDecl 0xece480 <col:26> col:26 implicit CXXConversion 0xec7858 'operator long' 'std::__atomic_base<long>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xece4e8 <col:26> col:26 implicit CXXConversion 0xec79b0 'operator long' 'std::__atomic_base<long>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xece570 <line:874:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xece5d8 <col:26> col:26 implicit CXXMethod 0xec5508 'operator=' 'std::__atomic_base<long> &(const std::__atomic_base<long> &)'
| | |-UsingShadowDecl 0xece638 <col:26> col:26 implicit CXXMethod 0xec5698 'operator=' 'std::__atomic_base<long> &(const std::__atomic_base<long> &) volatile'
| | |-UsingShadowDecl 0xece698 <col:26> col:26 implicit CXXMethod 0xec7b90 'operator=' 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | `-UsingShadowDecl 0xece6f8 <col:26> col:26 implicit CXXMethod 0xec7d60 'operator=' 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xecea80 <line:882:3, line:902:5> line:883:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<unsigned long>':'std::__atomic_base<unsigned long>'
| | |-TemplateArgument type 'unsigned long'
| | | `-BuiltinType 0xbf6310 'unsigned long'
| | |-CXXRecordDecl 0xed72f0 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xed7398 <line:885:7, col:31> col:31 referenced __integral_type 'unsigned long'
| | | `-BuiltinType 0xbf6310 'unsigned long'
| | |-TypedefDecl 0xed7490 <line:886:7, col:45> col:45 referenced __base_type '__atomic_base<unsigned long>':'std::__atomic_base<unsigned long>'
| | | `-TemplateSpecializationType 0xed7410 '__atomic_base<unsigned long>' sugar __atomic_base
| | |   |-TemplateArgument type 'unsigned long'
| | |   | `-BuiltinType 0xbf6310 'unsigned long'
| | |   `-RecordType 0xeced80 'std::__atomic_base<unsigned long>'
| | |     `-ClassTemplateSpecialization 0xececa0 '__atomic_base'
| | |-CXXConstructorDecl 0xed7558 <line:888:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xed7650 <line:889:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xed77f8 <line:890:7, col:36> col:7 atomic 'void (const std::atomic<unsigned long> &)' delete trivial
| | | `-ParmVarDecl 0xed7738 <col:14, col:26> col:27 'const std::atomic<unsigned long> &'
| | |-CXXMethodDecl 0xed79b8 <line:891:7, col:47> col:15 operator= 'std::atomic<unsigned long> &(const std::atomic<unsigned long> &)' delete trivial
| | | `-ParmVarDecl 0xed78c8 <col:25, col:37> col:38 'const std::atomic<unsigned long> &'
| | |-CXXMethodDecl 0xed7b68 <line:892:7, col:56> col:15 operator= 'std::atomic<unsigned long> &(const std::atomic<unsigned long> &) volatile' delete trivial
| | | `-ParmVarDecl 0xed7a70 <col:25, col:37> col:38 'const std::atomic<unsigned long> &'
| | |-CXXConstructorDecl 0xed7d20 <line:894:7, col:75> col:17 constexpr atomic 'void (std::atomic<unsigned long>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xed7c50 <col:24, col:40> col:40 used __i 'std::atomic<unsigned long>::__integral_type':'unsigned long'
| | | |-CXXCtorInitializer 'std::atomic<unsigned long>::__base_type':'std::__atomic_base<unsigned long>'
| | | | `-CXXConstructExpr 0xed8360 <col:56, col:71> '__atomic_base<unsigned long>':'std::__atomic_base<unsigned long>' 'void (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xed81d8 <col:68> 'std::atomic<unsigned long>::__integral_type':'unsigned long' <LValueToRValue>
| | | |     `-DeclRefExpr 0xed8188 <col:68> 'std::atomic<unsigned long>::__integral_type':'unsigned long' lvalue ParmVar 0xed7c50 '__i' 'std::atomic<unsigned long>::__integral_type':'unsigned long'
| | | `-CompoundStmt 0xed83b8 <col:73, col:75>
| | |-UsingDecl 0xed7e58 <line:896:7, col:35> col:26 __base_type::operator unsigned long
| | |-UsingShadowDecl 0xed7eb0 <col:26> col:26 implicit CXXConversion 0xed1230 'operator unsigned long' 'std::__atomic_base<unsigned long>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xed7f18 <col:26> col:26 implicit CXXConversion 0xed1380 'operator unsigned long' 'std::__atomic_base<unsigned long>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xed7fa0 <line:897:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xed8008 <col:26> col:26 implicit CXXMethod 0xed0d78 'operator=' 'std::__atomic_base<unsigned long> &(const std::__atomic_base<unsigned long> &)'
| | |-UsingShadowDecl 0xed8068 <col:26> col:26 implicit CXXMethod 0xed0f08 'operator=' 'std::__atomic_base<unsigned long> &(const std::__atomic_base<unsigned long> &) volatile'
| | |-UsingShadowDecl 0xed80c8 <col:26> col:26 implicit CXXMethod 0xed1560 'operator=' 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | `-UsingShadowDecl 0xed8128 <col:26> col:26 implicit CXXMethod 0xed1730 'operator=' 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xed84b0 <line:905:3, line:925:5> line:906:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<long long>':'std::__atomic_base<long long>'
| | |-TemplateArgument type 'long long'
| | | `-BuiltinType 0xbf6290 'long long'
| | |-CXXRecordDecl 0xedf908 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xedf9b0 <line:908:7, col:27> col:27 referenced __integral_type 'long long'
| | | `-BuiltinType 0xbf6290 'long long'
| | |-TypedefDecl 0xedfaa0 <line:909:7, col:42> col:42 referenced __base_type '__atomic_base<long long>':'std::__atomic_base<long long>'
| | | `-TemplateSpecializationType 0xedfa20 '__atomic_base<long long>' sugar __atomic_base
| | |   |-TemplateArgument type 'long long'
| | |   | `-BuiltinType 0xbf6290 'long long'
| | |   `-RecordType 0xed87b0 'std::__atomic_base<long long>'
| | |     `-ClassTemplateSpecialization 0xed86d0 '__atomic_base'
| | |-CXXConstructorDecl 0xedfb68 <line:911:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xedfc60 <line:912:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xedfe08 <line:913:7, col:36> col:7 atomic 'void (const std::atomic<long long> &)' delete trivial
| | | `-ParmVarDecl 0xedfd48 <col:14, col:26> col:27 'const std::atomic<long long> &'
| | |-CXXMethodDecl 0xedffc8 <line:914:7, col:47> col:15 operator= 'std::atomic<long long> &(const std::atomic<long long> &)' delete trivial
| | | `-ParmVarDecl 0xedfed8 <col:25, col:37> col:38 'const std::atomic<long long> &'
| | |-CXXMethodDecl 0xee0178 <line:915:7, col:56> col:15 operator= 'std::atomic<long long> &(const std::atomic<long long> &) volatile' delete trivial
| | | `-ParmVarDecl 0xee0080 <col:25, col:37> col:38 'const std::atomic<long long> &'
| | |-CXXConstructorDecl 0xee0330 <line:917:7, col:75> col:17 constexpr atomic 'void (std::atomic<long long>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xee0260 <col:24, col:40> col:40 used __i 'std::atomic<long long>::__integral_type':'long long'
| | | |-CXXCtorInitializer 'std::atomic<long long>::__base_type':'std::__atomic_base<long long>'
| | | | `-CXXConstructExpr 0xee0970 <col:56, col:71> '__atomic_base<long long>':'std::__atomic_base<long long>' 'void (std::__atomic_base<long long>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xee07e8 <col:68> 'std::atomic<long long>::__integral_type':'long long' <LValueToRValue>
| | | |     `-DeclRefExpr 0xee0798 <col:68> 'std::atomic<long long>::__integral_type':'long long' lvalue ParmVar 0xee0260 '__i' 'std::atomic<long long>::__integral_type':'long long'
| | | `-CompoundStmt 0xee09c8 <col:73, col:75>
| | |-UsingDecl 0xee0468 <line:919:7, col:35> col:26 __base_type::operator long long
| | |-UsingShadowDecl 0xee04c0 <col:26> col:26 implicit CXXConversion 0xed9878 'operator long long' 'std::__atomic_base<long long>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xee0528 <col:26> col:26 implicit CXXConversion 0xed99d0 'operator long long' 'std::__atomic_base<long long>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xee05b0 <line:920:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xee0618 <col:26> col:26 implicit CXXMethod 0xed9378 'operator=' 'std::__atomic_base<long long> &(const std::__atomic_base<long long> &)'
| | |-UsingShadowDecl 0xee0678 <col:26> col:26 implicit CXXMethod 0xed9508 'operator=' 'std::__atomic_base<long long> &(const std::__atomic_base<long long> &) volatile'
| | |-UsingShadowDecl 0xee06d8 <col:26> col:26 implicit CXXMethod 0xed9bb0 'operator=' 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | `-UsingShadowDecl 0xee0738 <col:26> col:26 implicit CXXMethod 0xed9d80 'operator=' 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xee4b20 <line:928:3, line:948:5> line:929:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<unsigned long long>':'std::__atomic_base<unsigned long long>'
| | |-TemplateArgument type 'unsigned long long'
| | | `-BuiltinType 0xbf6330 'unsigned long long'
| | |-CXXRecordDecl 0xeebf70 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xeec018 <line:931:7, col:41> col:41 referenced __integral_type 'unsigned long long'
| | | `-BuiltinType 0xbf6330 'unsigned long long'
| | |-TypedefDecl 0xeec110 <line:932:7, col:50> col:50 referenced __base_type '__atomic_base<unsigned long long>':'std::__atomic_base<unsigned long long>'
| | | `-TemplateSpecializationType 0xeec090 '__atomic_base<unsigned long long>' sugar __atomic_base
| | |   |-TemplateArgument type 'unsigned long long'
| | |   | `-BuiltinType 0xbf6330 'unsigned long long'
| | |   `-RecordType 0xee4e20 'std::__atomic_base<unsigned long long>'
| | |     `-ClassTemplateSpecialization 0xee4d40 '__atomic_base'
| | |-CXXConstructorDecl 0xeec1d8 <line:934:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xeec2d0 <line:935:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xeec478 <line:936:7, col:36> col:7 atomic 'void (const std::atomic<unsigned long long> &)' delete trivial
| | | `-ParmVarDecl 0xeec3b8 <col:14, col:26> col:27 'const std::atomic<unsigned long long> &'
| | |-CXXMethodDecl 0xeec638 <line:937:7, col:47> col:15 operator= 'std::atomic<unsigned long long> &(const std::atomic<unsigned long long> &)' delete trivial
| | | `-ParmVarDecl 0xeec548 <col:25, col:37> col:38 'const std::atomic<unsigned long long> &'
| | |-CXXMethodDecl 0xeec7e8 <line:938:7, col:56> col:15 operator= 'std::atomic<unsigned long long> &(const std::atomic<unsigned long long> &) volatile' delete trivial
| | | `-ParmVarDecl 0xeec6f0 <col:25, col:37> col:38 'const std::atomic<unsigned long long> &'
| | |-CXXConstructorDecl 0xeec9a0 <line:940:7, col:75> col:17 constexpr atomic 'void (std::atomic<unsigned long long>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xeec8d0 <col:24, col:40> col:40 used __i 'std::atomic<unsigned long long>::__integral_type':'unsigned long long'
| | | |-CXXCtorInitializer 'std::atomic<unsigned long long>::__base_type':'std::__atomic_base<unsigned long long>'
| | | | `-CXXConstructExpr 0xeed010 <col:56, col:71> '__atomic_base<unsigned long long>':'std::__atomic_base<unsigned long long>' 'void (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xeece88 <col:68> 'std::atomic<unsigned long long>::__integral_type':'unsigned long long' <LValueToRValue>
| | | |     `-DeclRefExpr 0xeece38 <col:68> 'std::atomic<unsigned long long>::__integral_type':'unsigned long long' lvalue ParmVar 0xeec8d0 '__i' 'std::atomic<unsigned long long>::__integral_type':'unsigned long long'
| | | `-CompoundStmt 0xeed068 <col:73, col:75>
| | |-UsingDecl 0xeecad8 <line:942:7, col:35> col:26 __base_type::operator unsigned long long
| | |-UsingShadowDecl 0xeecb60 <col:26> col:26 implicit CXXConversion 0xee5ed8 'operator unsigned long long' 'std::__atomic_base<unsigned long long>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xeecbc8 <col:26> col:26 implicit CXXConversion 0xee6030 'operator unsigned long long' 'std::__atomic_base<unsigned long long>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xeecc50 <line:943:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xeeccb8 <col:26> col:26 implicit CXXMethod 0xee59d8 'operator=' 'std::__atomic_base<unsigned long long> &(const std::__atomic_base<unsigned long long> &)'
| | |-UsingShadowDecl 0xeecd18 <col:26> col:26 implicit CXXMethod 0xee5b68 'operator=' 'std::__atomic_base<unsigned long long> &(const std::__atomic_base<unsigned long long> &) volatile'
| | |-UsingShadowDecl 0xeecd78 <col:26> col:26 implicit CXXMethod 0xee6210 'operator=' 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | `-UsingShadowDecl 0xeecdd8 <col:26> col:26 implicit CXXMethod 0xee63e0 'operator=' 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xeed158 <line:951:3, line:971:5> line:952:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<wchar_t>':'std::__atomic_base<wchar_t>'
| | |-TemplateArgument type 'wchar_t'
| | | `-BuiltinType 0xbf6750 'wchar_t'
| | |-CXXRecordDecl 0xef6418 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xef64b8 <line:954:7, col:26> col:26 referenced __integral_type 'wchar_t'
| | | `-BuiltinType 0xbf6750 'wchar_t'
| | |-TypedefDecl 0xef65a0 <line:955:7, col:39> col:39 referenced __base_type '__atomic_base<wchar_t>':'std::__atomic_base<wchar_t>'
| | | `-TemplateSpecializationType 0xef6520 '__atomic_base<wchar_t>' sugar __atomic_base
| | |   |-TemplateArgument type 'wchar_t'
| | |   | `-BuiltinType 0xbf6750 'wchar_t'
| | |   `-RecordType 0xeed460 'std::__atomic_base<wchar_t>'
| | |     `-ClassTemplateSpecialization 0xeed378 '__atomic_base'
| | |-CXXConstructorDecl 0xef6668 <line:957:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xef6760 <line:958:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xef6908 <line:959:7, col:36> col:7 atomic 'void (const std::atomic<wchar_t> &)' delete trivial
| | | `-ParmVarDecl 0xef6848 <col:14, col:26> col:27 'const std::atomic<wchar_t> &'
| | |-CXXMethodDecl 0xef6ae8 <line:960:7, col:47> col:15 operator= 'std::atomic<wchar_t> &(const std::atomic<wchar_t> &)' delete trivial
| | | `-ParmVarDecl 0xef69f0 <col:25, col:37> col:38 'const std::atomic<wchar_t> &'
| | |-CXXMethodDecl 0xef6c98 <line:961:7, col:56> col:15 operator= 'std::atomic<wchar_t> &(const std::atomic<wchar_t> &) volatile' delete trivial
| | | `-ParmVarDecl 0xef6ba0 <col:25, col:37> col:38 'const std::atomic<wchar_t> &'
| | |-CXXConstructorDecl 0xef6e50 <line:963:7, col:75> col:17 constexpr atomic 'void (std::atomic<wchar_t>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xef6d80 <col:24, col:40> col:40 used __i 'std::atomic<wchar_t>::__integral_type':'wchar_t'
| | | |-CXXCtorInitializer 'std::atomic<wchar_t>::__base_type':'std::__atomic_base<wchar_t>'
| | | | `-CXXConstructExpr 0xef7490 <col:56, col:71> '__atomic_base<wchar_t>':'std::__atomic_base<wchar_t>' 'void (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xef7308 <col:68> 'std::atomic<wchar_t>::__integral_type':'wchar_t' <LValueToRValue>
| | | |     `-DeclRefExpr 0xef72b8 <col:68> 'std::atomic<wchar_t>::__integral_type':'wchar_t' lvalue ParmVar 0xef6d80 '__i' 'std::atomic<wchar_t>::__integral_type':'wchar_t'
| | | `-CompoundStmt 0xef74e8 <col:73, col:75>
| | |-UsingDecl 0xef6f88 <line:965:7, col:35> col:26 __base_type::operator wchar_t
| | |-UsingShadowDecl 0xef6fe0 <col:26> col:26 implicit CXXConversion 0xeee518 'operator wchar_t' 'std::__atomic_base<wchar_t>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xef7048 <col:26> col:26 implicit CXXConversion 0xeee670 'operator wchar_t' 'std::__atomic_base<wchar_t>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xef70d0 <line:966:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xef7138 <col:26> col:26 implicit CXXMethod 0xeee018 'operator=' 'std::__atomic_base<wchar_t> &(const std::__atomic_base<wchar_t> &)'
| | |-UsingShadowDecl 0xef7198 <col:26> col:26 implicit CXXMethod 0xeee1a8 'operator=' 'std::__atomic_base<wchar_t> &(const std::__atomic_base<wchar_t> &) volatile'
| | |-UsingShadowDecl 0xef71f8 <col:26> col:26 implicit CXXMethod 0xeee850 'operator=' 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | `-UsingShadowDecl 0xef7258 <col:26> col:26 implicit CXXMethod 0xeeea20 'operator=' 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xef75d8 <line:999:3, line:1019:5> line:1000:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<char16_t>':'std::__atomic_base<char16_t>'
| | |-TemplateArgument type 'char16_t'
| | | `-BuiltinType 0xbf6790 'char16_t'
| | |-CXXRecordDecl 0xefea80 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xefeb20 <line:1002:7, col:27> col:27 referenced __integral_type 'char16_t'
| | | `-BuiltinType 0xbf6790 'char16_t'
| | |-TypedefDecl 0xefec10 <line:1003:7, col:40> col:40 referenced __base_type '__atomic_base<char16_t>':'std::__atomic_base<char16_t>'
| | | `-TemplateSpecializationType 0xefeb90 '__atomic_base<char16_t>' sugar __atomic_base
| | |   |-TemplateArgument type 'char16_t'
| | |   | `-BuiltinType 0xbf6790 'char16_t'
| | |   `-RecordType 0xef78e0 'std::__atomic_base<char16_t>'
| | |     `-ClassTemplateSpecialization 0xef77f8 '__atomic_base'
| | |-CXXConstructorDecl 0xefecd8 <line:1005:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xefedd0 <line:1006:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xefef78 <line:1007:7, col:36> col:7 atomic 'void (const std::atomic<char16_t> &)' delete trivial
| | | `-ParmVarDecl 0xefeeb8 <col:14, col:26> col:27 'const std::atomic<char16_t> &'
| | |-CXXMethodDecl 0xeff138 <line:1008:7, col:47> col:15 operator= 'std::atomic<char16_t> &(const std::atomic<char16_t> &)' delete trivial
| | | `-ParmVarDecl 0xeff048 <col:25, col:37> col:38 'const std::atomic<char16_t> &'
| | |-CXXMethodDecl 0xeff2e8 <line:1009:7, col:56> col:15 operator= 'std::atomic<char16_t> &(const std::atomic<char16_t> &) volatile' delete trivial
| | | `-ParmVarDecl 0xeff1f0 <col:25, col:37> col:38 'const std::atomic<char16_t> &'
| | |-CXXConstructorDecl 0xeff4a0 <line:1011:7, col:75> col:17 constexpr atomic 'void (std::atomic<char16_t>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xeff3d0 <col:24, col:40> col:40 used __i 'std::atomic<char16_t>::__integral_type':'char16_t'
| | | |-CXXCtorInitializer 'std::atomic<char16_t>::__base_type':'std::__atomic_base<char16_t>'
| | | | `-CXXConstructExpr 0xeffae0 <col:56, col:71> '__atomic_base<char16_t>':'std::__atomic_base<char16_t>' 'void (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xeff958 <col:68> 'std::atomic<char16_t>::__integral_type':'char16_t' <LValueToRValue>
| | | |     `-DeclRefExpr 0xeff908 <col:68> 'std::atomic<char16_t>::__integral_type':'char16_t' lvalue ParmVar 0xeff3d0 '__i' 'std::atomic<char16_t>::__integral_type':'char16_t'
| | | `-CompoundStmt 0xeffb38 <col:73, col:75>
| | |-UsingDecl 0xeff5d8 <line:1013:7, col:35> col:26 __base_type::operator char16_t
| | |-UsingShadowDecl 0xeff630 <col:26> col:26 implicit CXXConversion 0xef89e0 'operator char16_t' 'std::__atomic_base<char16_t>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xeff698 <col:26> col:26 implicit CXXConversion 0xef8b30 'operator char16_t' 'std::__atomic_base<char16_t>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xeff720 <line:1014:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xeff788 <col:26> col:26 implicit CXXMethod 0xef8498 'operator=' 'std::__atomic_base<char16_t> &(const std::__atomic_base<char16_t> &)'
| | |-UsingShadowDecl 0xeff7e8 <col:26> col:26 implicit CXXMethod 0xef8628 'operator=' 'std::__atomic_base<char16_t> &(const std::__atomic_base<char16_t> &) volatile'
| | |-UsingShadowDecl 0xeff848 <col:26> col:26 implicit CXXMethod 0xef8d10 'operator=' 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | `-UsingShadowDecl 0xeff8a8 <col:26> col:26 implicit CXXMethod 0xef8ee0 'operator=' 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xeffc28 <line:1022:3, line:1042:5> line:1023:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<char32_t>':'std::__atomic_base<char32_t>'
| | |-TemplateArgument type 'char32_t'
| | | `-BuiltinType 0xbf67b0 'char32_t'
| | |-CXXRecordDecl 0xf08e28 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xf08ec8 <line:1025:7, col:27> col:27 referenced __integral_type 'char32_t'
| | | `-BuiltinType 0xbf67b0 'char32_t'
| | |-TypedefDecl 0xf08fb0 <line:1026:7, col:40> col:40 referenced __base_type '__atomic_base<char32_t>':'std::__atomic_base<char32_t>'
| | | `-TemplateSpecializationType 0xf08f30 '__atomic_base<char32_t>' sugar __atomic_base
| | |   |-TemplateArgument type 'char32_t'
| | |   | `-BuiltinType 0xbf67b0 'char32_t'
| | |   `-RecordType 0xefff30 'std::__atomic_base<char32_t>'
| | |     `-ClassTemplateSpecialization 0xeffe48 '__atomic_base'
| | |-CXXConstructorDecl 0xf09078 <line:1028:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xf09170 <line:1029:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xf09318 <line:1030:7, col:36> col:7 atomic 'void (const std::atomic<char32_t> &)' delete trivial
| | | `-ParmVarDecl 0xf09258 <col:14, col:26> col:27 'const std::atomic<char32_t> &'
| | |-CXXMethodDecl 0xf094d8 <line:1031:7, col:47> col:15 operator= 'std::atomic<char32_t> &(const std::atomic<char32_t> &)' delete trivial
| | | `-ParmVarDecl 0xf093e8 <col:25, col:37> col:38 'const std::atomic<char32_t> &'
| | |-CXXMethodDecl 0xf09688 <line:1032:7, col:56> col:15 operator= 'std::atomic<char32_t> &(const std::atomic<char32_t> &) volatile' delete trivial
| | | `-ParmVarDecl 0xf09590 <col:25, col:37> col:38 'const std::atomic<char32_t> &'
| | |-CXXConstructorDecl 0xf09840 <line:1034:7, col:75> col:17 constexpr atomic 'void (std::atomic<char32_t>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xf09770 <col:24, col:40> col:40 used __i 'std::atomic<char32_t>::__integral_type':'char32_t'
| | | |-CXXCtorInitializer 'std::atomic<char32_t>::__base_type':'std::__atomic_base<char32_t>'
| | | | `-CXXConstructExpr 0xf09e80 <col:56, col:71> '__atomic_base<char32_t>':'std::__atomic_base<char32_t>' 'void (std::__atomic_base<char32_t>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xf09cf8 <col:68> 'std::atomic<char32_t>::__integral_type':'char32_t' <LValueToRValue>
| | | |     `-DeclRefExpr 0xf09ca8 <col:68> 'std::atomic<char32_t>::__integral_type':'char32_t' lvalue ParmVar 0xf09770 '__i' 'std::atomic<char32_t>::__integral_type':'char32_t'
| | | `-CompoundStmt 0xf09ed8 <col:73, col:75>
| | |-UsingDecl 0xf09978 <line:1036:7, col:35> col:26 __base_type::operator char32_t
| | |-UsingShadowDecl 0xf099d0 <col:26> col:26 implicit CXXConversion 0xf00fe8 'operator char32_t' 'std::__atomic_base<char32_t>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xf09a38 <col:26> col:26 implicit CXXConversion 0xf01140 'operator char32_t' 'std::__atomic_base<char32_t>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xf09ac0 <line:1037:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xf09b28 <col:26> col:26 implicit CXXMethod 0xf00ae8 'operator=' 'std::__atomic_base<char32_t> &(const std::__atomic_base<char32_t> &)'
| | |-UsingShadowDecl 0xf09b88 <col:26> col:26 implicit CXXMethod 0xf00c78 'operator=' 'std::__atomic_base<char32_t> &(const std::__atomic_base<char32_t> &) volatile'
| | |-UsingShadowDecl 0xf09be8 <col:26> col:26 implicit CXXMethod 0xf01320 'operator=' 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| | `-UsingShadowDecl 0xf09c48 <col:26> col:26 implicit CXXMethod 0xf014f0 'operator=' 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |-TypedefDecl 0xf0a040 <line:1046:3, col:26> col:26 referenced atomic_bool 'atomic<bool>':'std::atomic<bool>'
| | `-TemplateSpecializationType 0xf09fc0 'atomic<bool>' sugar atomic
| |   |-TemplateArgument type 'bool'
| |   | `-BuiltinType 0xbf61d0 'bool'
| |   `-RecordType 0xe60de0 'std::atomic<bool>'
| |     `-ClassTemplateSpecialization 0xe60cf8 'atomic'
| |-TypedefDecl 0xf0a130 <line:1049:3, col:26> col:26 atomic_char 'atomic<char>':'std::atomic<char>'
| | `-TemplateSpecializationType 0xf0a0b0 'atomic<char>' sugar atomic
| |   |-TemplateArgument type 'char'
| |   | `-BuiltinType 0xbf61f0 'char'
| |   `-RecordType 0xe7d710 'std::atomic<char>'
| |     `-ClassTemplateSpecialization 0xe7d628 'atomic'
| |-TypedefDecl 0xf0a220 <line:1052:3, col:32> col:32 atomic_schar 'atomic<signed char>':'std::atomic<signed char>'
| | `-TemplateSpecializationType 0xf0a1a0 'atomic<signed char>' sugar atomic
| |   |-TemplateArgument type 'signed char'
| |   | `-BuiltinType 0xbf6210 'signed char'
| |   `-RecordType 0xd97020 'std::atomic<signed char>'
| |     `-ClassTemplateSpecialization 0xd96f40 'atomic'
| |-TypedefDecl 0xf0a310 <line:1055:3, col:34> col:34 atomic_uchar 'atomic<unsigned char>':'std::atomic<unsigned char>'
| | `-TemplateSpecializationType 0xf0a290 'atomic<unsigned char>' sugar atomic
| |   |-TemplateArgument type 'unsigned char'
| |   | `-BuiltinType 0xbf62b0 'unsigned char'
| |   `-RecordType 0xe982c0 'std::atomic<unsigned char>'
| |     `-ClassTemplateSpecialization 0xe981e0 'atomic'
| |-TypedefDecl 0xf0a400 <line:1058:3, col:27> col:27 atomic_short 'atomic<short>':'std::atomic<short>'
| | `-TemplateSpecializationType 0xf0a380 'atomic<short>' sugar atomic
| |   |-TemplateArgument type 'short'
| |   | `-BuiltinType 0xbf6230 'short'
| |   `-RecordType 0xea2990 'std::atomic<short>'
| |     `-ClassTemplateSpecialization 0xea28b0 'atomic'
| |-TypedefDecl 0xf0a4f0 <line:1061:3, col:34> col:34 atomic_ushort 'atomic<unsigned short>':'std::atomic<unsigned short>'
| | `-TemplateSpecializationType 0xf0a470 'atomic<unsigned short>' sugar atomic
| |   |-TemplateArgument type 'unsigned short'
| |   | `-BuiltinType 0xbf62d0 'unsigned short'
| |   `-RecordType 0xeaafe0 'std::atomic<unsigned short>'
| |     `-ClassTemplateSpecialization 0xeaaf00 'atomic'
| |-TypedefDecl 0xf0a5e0 <line:1064:3, col:25> col:25 atomic_int 'atomic<int>':'std::atomic<int>'
| | `-TemplateSpecializationType 0xf0a560 'atomic<int>' sugar atomic
| |   |-TemplateArgument type 'int'
| |   | `-BuiltinType 0xbf6250 'int'
| |   `-RecordType 0xeb36e0 'std::atomic<int>'
| |     `-ClassTemplateSpecialization 0xeb35f8 'atomic'
| |-TypedefDecl 0xf0a6d0 <line:1067:3, col:33> col:33 atomic_uint 'atomic<unsigned int>':'std::atomic<unsigned int>'
| | `-TemplateSpecializationType 0xf0a650 'atomic<unsigned int>' sugar atomic
| |   |-TemplateArgument type 'unsigned int'
| |   | `-BuiltinType 0xbf62f0 'unsigned int'
| |   `-RecordType 0xebbce0 'std::atomic<unsigned int>'
| |     `-ClassTemplateSpecialization 0xebbc00 'atomic'
| |-TypedefDecl 0xf0a7c0 <line:1070:3, col:26> col:26 atomic_long 'atomic<long>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xf0a740 'atomic<long>' sugar atomic
| |   |-TemplateArgument type 'long'
| |   | `-BuiltinType 0xbf6270 'long'
| |   `-RecordType 0xec4730 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xec4650 'atomic'
| |-TypedefDecl 0xf0a8b0 <line:1073:3, col:34> col:34 atomic_ulong 'atomic<unsigned long>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xf0a830 'atomic<unsigned long>' sugar atomic
| |   |-TemplateArgument type 'unsigned long'
| |   | `-BuiltinType 0xbf6310 'unsigned long'
| |   `-RecordType 0xeceb60 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xecea80 'atomic'
| |-TypedefDecl 0xf0a9a0 <line:1076:3, col:30> col:30 atomic_llong 'atomic<long long>':'std::atomic<long long>'
| | `-TemplateSpecializationType 0xf0a920 'atomic<long long>' sugar atomic
| |   |-TemplateArgument type 'long long'
| |   | `-BuiltinType 0xbf6290 'long long'
| |   `-RecordType 0xed8590 'std::atomic<long long>'
| |     `-ClassTemplateSpecialization 0xed84b0 'atomic'
| |-TypedefDecl 0xf0aa90 <line:1079:3, col:38> col:38 atomic_ullong 'atomic<unsigned long long>':'std::atomic<unsigned long long>'
| | `-TemplateSpecializationType 0xf0aa10 'atomic<unsigned long long>' sugar atomic
| |   |-TemplateArgument type 'unsigned long long'
| |   | `-BuiltinType 0xbf6330 'unsigned long long'
| |   `-RecordType 0xee4c00 'std::atomic<unsigned long long>'
| |     `-ClassTemplateSpecialization 0xee4b20 'atomic'
| |-TypedefDecl 0xf0ab80 <line:1082:3, col:28> col:28 atomic_wchar_t 'atomic<wchar_t>':'std::atomic<wchar_t>'
| | `-TemplateSpecializationType 0xf0ab00 'atomic<wchar_t>' sugar atomic
| |   |-TemplateArgument type 'wchar_t'
| |   | `-BuiltinType 0xbf6750 'wchar_t'
| |   `-RecordType 0xeed240 'std::atomic<wchar_t>'
| |     `-ClassTemplateSpecialization 0xeed158 'atomic'
| |-TypedefDecl 0xf0ac70 <line:1090:3, col:29> col:29 atomic_char16_t 'atomic<char16_t>':'std::atomic<char16_t>'
| | `-TemplateSpecializationType 0xf0abf0 'atomic<char16_t>' sugar atomic
| |   |-TemplateArgument type 'char16_t'
| |   | `-BuiltinType 0xbf6790 'char16_t'
| |   `-RecordType 0xef76c0 'std::atomic<char16_t>'
| |     `-ClassTemplateSpecialization 0xef75d8 'atomic'
| |-TypedefDecl 0xf0ad60 <line:1093:3, col:29> col:29 atomic_char32_t 'atomic<char32_t>':'std::atomic<char32_t>'
| | `-TemplateSpecializationType 0xf0ace0 'atomic<char32_t>' sugar atomic
| |   |-TemplateArgument type 'char32_t'
| |   | `-BuiltinType 0xbf67b0 'char32_t'
| |   `-RecordType 0xeffd10 'std::atomic<char32_t>'
| |     `-ClassTemplateSpecialization 0xeffc28 'atomic'
| |-TypedefDecl 0xf0ae70 <line:1100:3, col:27> col:27 atomic_int8_t 'atomic<int8_t>':'std::atomic<signed char>'
| | `-TemplateSpecializationType 0xf0adf0 'atomic<int8_t>' sugar atomic
| |   |-TemplateArgument type 'int8_t':'signed char'
| |   | `-TypedefType 0xf0adc0 'int8_t' sugar
| |   |   |-Typedef 0xcc2ff8 'int8_t'
| |   |   `-TypedefType 0xc3c3f0 '__int8_t' sugar
| |   |     |-Typedef 0xc3c080 '__int8_t'
| |   |     `-BuiltinType 0xbf6210 'signed char'
| |   `-RecordType 0xd97020 'std::atomic<signed char>'
| |     `-ClassTemplateSpecialization 0xd96f40 'atomic'
| |-TypedefDecl 0xf0af80 <line:1103:3, col:28> col:28 atomic_uint8_t 'atomic<uint8_t>':'std::atomic<unsigned char>'
| | `-TemplateSpecializationType 0xf0af00 'atomic<uint8_t>' sugar atomic
| |   |-TemplateArgument type 'uint8_t':'unsigned char'
| |   | `-TypedefType 0xf0aed0 'uint8_t' sugar
| |   |   |-Typedef 0xcc3198 'uint8_t'
| |   |   `-TypedefType 0xc3c480 '__uint8_t' sugar
| |   |     |-Typedef 0xc3c0f0 '__uint8_t'
| |   |     `-BuiltinType 0xbf62b0 'unsigned char'
| |   `-RecordType 0xe982c0 'std::atomic<unsigned char>'
| |     `-ClassTemplateSpecialization 0xe981e0 'atomic'
| |-TypedefDecl 0xf0b090 <line:1106:3, col:28> col:28 atomic_int16_t 'atomic<int16_t>':'std::atomic<short>'
| | `-TemplateSpecializationType 0xf0b010 'atomic<int16_t>' sugar atomic
| |   |-TemplateArgument type 'int16_t':'short'
| |   | `-TypedefType 0xf0afe0 'int16_t' sugar
| |   |   |-Typedef 0xcc3060 'int16_t'
| |   |   `-TypedefType 0xc3c510 '__int16_t' sugar
| |   |     |-Typedef 0xc3c160 '__int16_t'
| |   |     `-BuiltinType 0xbf6230 'short'
| |   `-RecordType 0xea2990 'std::atomic<short>'
| |     `-ClassTemplateSpecialization 0xea28b0 'atomic'
| |-TypedefDecl 0xf0b1a0 <line:1109:3, col:29> col:29 atomic_uint16_t 'atomic<uint16_t>':'std::atomic<unsigned short>'
| | `-TemplateSpecializationType 0xf0b120 'atomic<uint16_t>' sugar atomic
| |   |-TemplateArgument type 'uint16_t':'unsigned short'
| |   | `-TypedefType 0xf0b0f0 'uint16_t' sugar
| |   |   |-Typedef 0xcc3200 'uint16_t'
| |   |   `-TypedefType 0xc3c5a0 '__uint16_t' sugar
| |   |     |-Typedef 0xc3c1d0 '__uint16_t'
| |   |     `-BuiltinType 0xbf62d0 'unsigned short'
| |   `-RecordType 0xeaafe0 'std::atomic<unsigned short>'
| |     `-ClassTemplateSpecialization 0xeaaf00 'atomic'
| |-TypedefDecl 0xf0b2b0 <line:1112:3, col:28> col:28 referenced atomic_int32_t 'atomic<int32_t>':'std::atomic<int>'
| | `-TemplateSpecializationType 0xf0b230 'atomic<int32_t>' sugar atomic
| |   |-TemplateArgument type 'int32_t':'int'
| |   | `-TypedefType 0xf0b200 'int32_t' sugar
| |   |   |-Typedef 0xcc30c8 'int32_t'
| |   |   `-TypedefType 0xc3c630 '__int32_t' sugar
| |   |     |-Typedef 0xc3c240 '__int32_t'
| |   |     `-BuiltinType 0xbf6250 'int'
| |   `-RecordType 0xeb36e0 'std::atomic<int>'
| |     `-ClassTemplateSpecialization 0xeb35f8 'atomic'
| |-TypedefDecl 0xf0b3c0 <line:1115:3, col:29> col:29 atomic_uint32_t 'atomic<uint32_t>':'std::atomic<unsigned int>'
| | `-TemplateSpecializationType 0xf0b340 'atomic<uint32_t>' sugar atomic
| |   |-TemplateArgument type 'uint32_t':'unsigned int'
| |   | `-TypedefType 0xf0b310 'uint32_t' sugar
| |   |   |-Typedef 0xcc3268 'uint32_t'
| |   |   `-TypedefType 0xc3c6c0 '__uint32_t' sugar
| |   |     |-Typedef 0xc3c2b0 '__uint32_t'
| |   |     `-BuiltinType 0xbf62f0 'unsigned int'
| |   `-RecordType 0xebbce0 'std::atomic<unsigned int>'
| |     `-ClassTemplateSpecialization 0xebbc00 'atomic'
| |-TypedefDecl 0xf0b4d0 <line:1118:3, col:28> col:28 atomic_int64_t 'atomic<int64_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xf0b450 'atomic<int64_t>' sugar atomic
| |   |-TemplateArgument type 'int64_t':'long'
| |   | `-TypedefType 0xf0b420 'int64_t' sugar
| |   |   |-Typedef 0xcc3130 'int64_t'
| |   |   `-TypedefType 0xc3c750 '__int64_t' sugar
| |   |     |-Typedef 0xc3c320 '__int64_t'
| |   |     `-BuiltinType 0xbf6270 'long'
| |   `-RecordType 0xec4730 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xec4650 'atomic'
| |-TypedefDecl 0xf0b5e0 <line:1121:3, col:29> col:29 atomic_uint64_t 'atomic<uint64_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xf0b560 'atomic<uint64_t>' sugar atomic
| |   |-TemplateArgument type 'uint64_t':'unsigned long'
| |   | `-TypedefType 0xf0b530 'uint64_t' sugar
| |   |   |-Typedef 0xcc32d0 'uint64_t'
| |   |   `-TypedefType 0xc3c7e0 '__uint64_t' sugar
| |   |     |-Typedef 0xc3c390 '__uint64_t'
| |   |     `-BuiltinType 0xbf6310 'unsigned long'
| |   `-RecordType 0xeceb60 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xecea80 'atomic'
| |-TypedefDecl 0xf0b6f0 <line:1125:3, col:33> col:33 atomic_int_least8_t 'atomic<int_least8_t>':'std::atomic<signed char>'
| | `-TemplateSpecializationType 0xf0b670 'atomic<int_least8_t>' sugar atomic
| |   |-TemplateArgument type 'int_least8_t':'signed char'
| |   | `-TypedefType 0xf0b640 'int_least8_t' sugar
| |   |   |-Typedef 0xcc3360 'int_least8_t'
| |   |   `-TypedefType 0xcc3330 '__int_least8_t' sugar
| |   |     |-Typedef 0xc3c420 '__int_least8_t'
| |   |     `-TypedefType 0xc3c3f0 '__int8_t' sugar
| |   |       |-Typedef 0xc3c080 '__int8_t'
| |   |       `-BuiltinType 0xbf6210 'signed char'
| |   `-RecordType 0xd97020 'std::atomic<signed char>'
| |     `-ClassTemplateSpecialization 0xd96f40 'atomic'
| |-TypedefDecl 0xf0b800 <line:1128:3, col:34> col:34 atomic_uint_least8_t 'atomic<uint_least8_t>':'std::atomic<unsigned char>'
| | `-TemplateSpecializationType 0xf0b780 'atomic<uint_least8_t>' sugar atomic
| |   |-TemplateArgument type 'uint_least8_t':'unsigned char'
| |   | `-TypedefType 0xf0b750 'uint_least8_t' sugar
| |   |   |-Typedef 0xcc35a0 'uint_least8_t'
| |   |   `-TypedefType 0xcc3570 '__uint_least8_t' sugar
| |   |     |-Typedef 0xc3c4b0 '__uint_least8_t'
| |   |     `-TypedefType 0xc3c480 '__uint8_t' sugar
| |   |       |-Typedef 0xc3c0f0 '__uint8_t'
| |   |       `-BuiltinType 0xbf62b0 'unsigned char'
| |   `-RecordType 0xe982c0 'std::atomic<unsigned char>'
| |     `-ClassTemplateSpecialization 0xe981e0 'atomic'
| |-TypedefDecl 0xf0b910 <line:1131:3, col:34> col:34 atomic_int_least16_t 'atomic<int_least16_t>':'std::atomic<short>'
| | `-TemplateSpecializationType 0xf0b890 'atomic<int_least16_t>' sugar atomic
| |   |-TemplateArgument type 'int_least16_t':'short'
| |   | `-TypedefType 0xf0b860 'int_least16_t' sugar
| |   |   |-Typedef 0xcc33f0 'int_least16_t'
| |   |   `-TypedefType 0xcc33c0 '__int_least16_t' sugar
| |   |     |-Typedef 0xc3c540 '__int_least16_t'
| |   |     `-TypedefType 0xc3c510 '__int16_t' sugar
| |   |       |-Typedef 0xc3c160 '__int16_t'
| |   |       `-BuiltinType 0xbf6230 'short'
| |   `-RecordType 0xea2990 'std::atomic<short>'
| |     `-ClassTemplateSpecialization 0xea28b0 'atomic'
| |-TypedefDecl 0xf0ba20 <line:1134:3, col:34> col:34 atomic_uint_least16_t 'atomic<uint_least16_t>':'std::atomic<unsigned short>'
| | `-TemplateSpecializationType 0xf0b9a0 'atomic<uint_least16_t>' sugar atomic
| |   |-TemplateArgument type 'uint_least16_t':'unsigned short'
| |   | `-TypedefType 0xf0b970 'uint_least16_t' sugar
| |   |   |-Typedef 0xcc3630 'uint_least16_t'
| |   |   `-TypedefType 0xcc3600 '__uint_least16_t' sugar
| |   |     |-Typedef 0xc3c5d0 '__uint_least16_t'
| |   |     `-TypedefType 0xc3c5a0 '__uint16_t' sugar
| |   |       |-Typedef 0xc3c1d0 '__uint16_t'
| |   |       `-BuiltinType 0xbf62d0 'unsigned short'
| |   `-RecordType 0xeaafe0 'std::atomic<unsigned short>'
| |     `-ClassTemplateSpecialization 0xeaaf00 'atomic'
| |-TypedefDecl 0xf0bb30 <line:1137:3, col:34> col:34 atomic_int_least32_t 'atomic<int_least32_t>':'std::atomic<int>'
| | `-TemplateSpecializationType 0xf0bab0 'atomic<int_least32_t>' sugar atomic
| |   |-TemplateArgument type 'int_least32_t':'int'
| |   | `-TypedefType 0xf0ba80 'int_least32_t' sugar
| |   |   |-Typedef 0xcc3480 'int_least32_t'
| |   |   `-TypedefType 0xcc3450 '__int_least32_t' sugar
| |   |     |-Typedef 0xc3c660 '__int_least32_t'
| |   |     `-TypedefType 0xc3c630 '__int32_t' sugar
| |   |       |-Typedef 0xc3c240 '__int32_t'
| |   |       `-BuiltinType 0xbf6250 'int'
| |   `-RecordType 0xeb36e0 'std::atomic<int>'
| |     `-ClassTemplateSpecialization 0xeb35f8 'atomic'
| |-TypedefDecl 0xf0bc40 <line:1140:3, col:34> col:34 atomic_uint_least32_t 'atomic<uint_least32_t>':'std::atomic<unsigned int>'
| | `-TemplateSpecializationType 0xf0bbc0 'atomic<uint_least32_t>' sugar atomic
| |   |-TemplateArgument type 'uint_least32_t':'unsigned int'
| |   | `-TypedefType 0xf0bb90 'uint_least32_t' sugar
| |   |   |-Typedef 0xcc36c0 'uint_least32_t'
| |   |   `-TypedefType 0xcc3690 '__uint_least32_t' sugar
| |   |     |-Typedef 0xc3c6f0 '__uint_least32_t'
| |   |     `-TypedefType 0xc3c6c0 '__uint32_t' sugar
| |   |       |-Typedef 0xc3c2b0 '__uint32_t'
| |   |       `-BuiltinType 0xbf62f0 'unsigned int'
| |   `-RecordType 0xebbce0 'std::atomic<unsigned int>'
| |     `-ClassTemplateSpecialization 0xebbc00 'atomic'
| |-TypedefDecl 0xf0bd50 <line:1143:3, col:34> col:34 atomic_int_least64_t 'atomic<int_least64_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xf0bcd0 'atomic<int_least64_t>' sugar atomic
| |   |-TemplateArgument type 'int_least64_t':'long'
| |   | `-TypedefType 0xf0bca0 'int_least64_t' sugar
| |   |   |-Typedef 0xcc3510 'int_least64_t'
| |   |   `-TypedefType 0xcc34e0 '__int_least64_t' sugar
| |   |     |-Typedef 0xc3c780 '__int_least64_t'
| |   |     `-TypedefType 0xc3c750 '__int64_t' sugar
| |   |       |-Typedef 0xc3c320 '__int64_t'
| |   |       `-BuiltinType 0xbf6270 'long'
| |   `-RecordType 0xec4730 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xec4650 'atomic'
| |-TypedefDecl 0xf0be60 <line:1146:3, col:34> col:34 atomic_uint_least64_t 'atomic<uint_least64_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xf0bde0 'atomic<uint_least64_t>' sugar atomic
| |   |-TemplateArgument type 'uint_least64_t':'unsigned long'
| |   | `-TypedefType 0xf0bdb0 'uint_least64_t' sugar
| |   |   |-Typedef 0xcc3750 'uint_least64_t'
| |   |   `-TypedefType 0xcc3720 '__uint_least64_t' sugar
| |   |     |-Typedef 0xc3c810 '__uint_least64_t'
| |   |     `-TypedefType 0xc3c7e0 '__uint64_t' sugar
| |   |       |-Typedef 0xc3c390 '__uint64_t'
| |   |       `-BuiltinType 0xbf6310 'unsigned long'
| |   `-RecordType 0xeceb60 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xecea80 'atomic'
| |-TypedefDecl 0xf0bf70 <line:1150:3, col:32> col:32 atomic_int_fast8_t 'atomic<int_fast8_t>':'std::atomic<signed char>'
| | `-TemplateSpecializationType 0xf0bef0 'atomic<int_fast8_t>' sugar atomic
| |   |-TemplateArgument type 'int_fast8_t':'signed char'
| |   | `-TypedefType 0xf0bec0 'int_fast8_t' sugar
| |   |   |-Typedef 0xcc37c0 'int_fast8_t'
| |   |   `-BuiltinType 0xbf6210 'signed char'
| |   `-RecordType 0xd97020 'std::atomic<signed char>'
| |     `-ClassTemplateSpecialization 0xd96f40 'atomic'
| |-TypedefDecl 0xf0c080 <line:1153:3, col:33> col:33 atomic_uint_fast8_t 'atomic<uint_fast8_t>':'std::atomic<unsigned char>'
| | `-TemplateSpecializationType 0xf0c000 'atomic<uint_fast8_t>' sugar atomic
| |   |-TemplateArgument type 'uint_fast8_t':'unsigned char'
| |   | `-TypedefType 0xf0bfd0 'uint_fast8_t' sugar
| |   |   |-Typedef 0xcc3980 'uint_fast8_t'
| |   |   `-BuiltinType 0xbf62b0 'unsigned char'
| |   `-RecordType 0xe982c0 'std::atomic<unsigned char>'
| |     `-ClassTemplateSpecialization 0xe981e0 'atomic'
| |-TypedefDecl 0xf0c190 <line:1156:3, col:33> col:33 atomic_int_fast16_t 'atomic<int_fast16_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xf0c110 'atomic<int_fast16_t>' sugar atomic
| |   |-TemplateArgument type 'int_fast16_t':'long'
| |   | `-TypedefType 0xf0c0e0 'int_fast16_t' sugar
| |   |   |-Typedef 0xcc3830 'int_fast16_t'
| |   |   `-BuiltinType 0xbf6270 'long'
| |   `-RecordType 0xec4730 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xec4650 'atomic'
| |-TypedefDecl 0xf0c2a0 <line:1159:3, col:34> col:34 atomic_uint_fast16_t 'atomic<uint_fast16_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xf0c220 'atomic<uint_fast16_t>' sugar atomic
| |   |-TemplateArgument type 'uint_fast16_t':'unsigned long'
| |   | `-TypedefType 0xf0c1f0 'uint_fast16_t' sugar
| |   |   |-Typedef 0xcc9a30 'uint_fast16_t'
| |   |   `-BuiltinType 0xbf6310 'unsigned long'
| |   `-RecordType 0xeceb60 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xecea80 'atomic'
| |-TypedefDecl 0xf0c3b0 <line:1162:3, col:33> col:33 atomic_int_fast32_t 'atomic<int_fast32_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xf0c330 'atomic<int_fast32_t>' sugar atomic
| |   |-TemplateArgument type 'int_fast32_t':'long'
| |   | `-TypedefType 0xf0c300 'int_fast32_t' sugar
| |   |   |-Typedef 0xcc38a0 'int_fast32_t'
| |   |   `-BuiltinType 0xbf6270 'long'
| |   `-RecordType 0xec4730 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xec4650 'atomic'
| |-TypedefDecl 0xf0c4c0 <line:1165:3, col:34> col:34 atomic_uint_fast32_t 'atomic<uint_fast32_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xf0c440 'atomic<uint_fast32_t>' sugar atomic
| |   |-TemplateArgument type 'uint_fast32_t':'unsigned long'
| |   | `-TypedefType 0xf0c410 'uint_fast32_t' sugar
| |   |   |-Typedef 0xcc9aa0 'uint_fast32_t'
| |   |   `-BuiltinType 0xbf6310 'unsigned long'
| |   `-RecordType 0xeceb60 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xecea80 'atomic'
| |-TypedefDecl 0xf0c5d0 <line:1168:3, col:33> col:33 atomic_int_fast64_t 'atomic<int_fast64_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xf0c550 'atomic<int_fast64_t>' sugar atomic
| |   |-TemplateArgument type 'int_fast64_t':'long'
| |   | `-TypedefType 0xf0c520 'int_fast64_t' sugar
| |   |   |-Typedef 0xcc3910 'int_fast64_t'
| |   |   `-BuiltinType 0xbf6270 'long'
| |   `-RecordType 0xec4730 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xec4650 'atomic'
| |-TypedefDecl 0xf0c6e0 <line:1171:3, col:34> col:34 atomic_uint_fast64_t 'atomic<uint_fast64_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xf0c660 'atomic<uint_fast64_t>' sugar atomic
| |   |-TemplateArgument type 'uint_fast64_t':'unsigned long'
| |   | `-TypedefType 0xf0c630 'uint_fast64_t' sugar
| |   |   |-Typedef 0xcc9b10 'uint_fast64_t'
| |   |   `-BuiltinType 0xbf6310 'unsigned long'
| |   `-RecordType 0xeceb60 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xecea80 'atomic'
| |-TypedefDecl 0xf0c7f0 <line:1176:3, col:29> col:29 atomic_intptr_t 'atomic<intptr_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xf0c770 'atomic<intptr_t>' sugar atomic
| |   |-TemplateArgument type 'intptr_t':'long'
| |   | `-TypedefType 0xf0c740 'intptr_t' sugar
| |   |   |-Typedef 0xcc9b80 'intptr_t'
| |   |   `-BuiltinType 0xbf6270 'long'
| |   `-RecordType 0xec4730 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xec4650 'atomic'
| |-TypedefDecl 0xf0e940 <line:1179:3, col:30> col:30 atomic_uintptr_t 'atomic<uintptr_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xf0e8c0 'atomic<uintptr_t>' sugar atomic
| |   |-TemplateArgument type 'uintptr_t':'unsigned long'
| |   | `-TypedefType 0xf0e890 'uintptr_t' sugar
| |   |   |-Typedef 0xcc9bf0 'uintptr_t'
| |   |   `-BuiltinType 0xbf6310 'unsigned long'
| |   `-RecordType 0xeceb60 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xecea80 'atomic'
| |-TypedefDecl 0xf0ea30 <line:1182:3, col:27> col:27 atomic_size_t 'atomic<std::size_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xf0e9b0 'atomic<std::size_t>' sugar atomic
| |   |-TemplateArgument type 'std::size_t':'unsigned long'
| |   | `-TypedefType 0xcefec0 'std::size_t' sugar
| |   |   |-Typedef 0xc3b9c8 'size_t'
| |   |   `-BuiltinType 0xbf6310 'unsigned long'
| |   `-RecordType 0xeceb60 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xecea80 'atomic'
| |-TypedefDecl 0xf0eb20 <line:1185:3, col:30> col:30 atomic_ptrdiff_t 'atomic<std::ptrdiff_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xf0eaa0 'atomic<std::ptrdiff_t>' sugar atomic
| |   |-TemplateArgument type 'std::ptrdiff_t':'long'
| |   | `-TypedefType 0xe32590 'std::ptrdiff_t' sugar
| |   |   |-Typedef 0xc3ba38 'ptrdiff_t'
| |   |   `-BuiltinType 0xbf6270 'long'
| |   `-RecordType 0xec4730 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xec4650 'atomic'
| |-TypedefDecl 0xf0ec30 <line:1189:3, col:29> col:29 atomic_intmax_t 'atomic<intmax_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xf0ebb0 'atomic<intmax_t>' sugar atomic
| |   |-TemplateArgument type 'intmax_t':'long'
| |   | `-TypedefType 0xf0eb80 'intmax_t' sugar
| |   |   |-Typedef 0xcc9c80 'intmax_t'
| |   |   `-TypedefType 0xcc9c50 '__intmax_t' sugar
| |   |     |-Typedef 0xcbaec0 '__intmax_t'
| |   |     `-BuiltinType 0xbf6270 'long'
| |   `-RecordType 0xec4730 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xec4650 'atomic'
| |-TypedefDecl 0xf0ed40 <line:1192:3, col:30> col:30 atomic_uintmax_t 'atomic<uintmax_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xf0ecc0 'atomic<uintmax_t>' sugar atomic
| |   |-TemplateArgument type 'uintmax_t':'unsigned long'
| |   | `-TypedefType 0xf0ec90 'uintmax_t' sugar
| |   |   |-Typedef 0xcc9d10 'uintmax_t'
| |   |   `-TypedefType 0xcc9ce0 '__uintmax_t' sugar
| |   |     |-Typedef 0xcbaf30 '__uintmax_t'
| |   |     `-BuiltinType 0xbf6310 'unsigned long'
| |   `-RecordType 0xeceb60 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xecea80 'atomic'
| |-FunctionDecl 0xf0ef40 <line:1196:3, line:1199:36> line:1197:3 used atomic_flag_test_and_set_explicit 'bool (std::atomic_flag *, std::memory_order) noexcept' inline
| | |-ParmVarDecl 0xf0eda8 <col:37, col:50> col:50 used __a 'std::atomic_flag *'
| | |-ParmVarDecl 0xf0ee20 <line:1198:9, col:22> col:22 used __m 'std::memory_order':'std::memory_order'
| | `-CompoundStmt 0xf0f128 <line:1199:3, col:36>
| |   `-ReturnStmt 0xf0f118 <col:5, col:33>
| |     `-CXXMemberCallExpr 0xf0f0d8 <col:12, col:33> 'bool'
| |       |-MemberExpr 0xf0f0a8 <col:12, col:17> '<bound member function type>' ->test_and_set 0xe23fd0
| |       | `-ImplicitCastExpr 0xf0f010 <col:12> 'std::atomic_flag *' <LValueToRValue>
| |       |   `-DeclRefExpr 0xf0eff0 <col:12> 'std::atomic_flag *' lvalue ParmVar 0xf0eda8 '__a' 'std::atomic_flag *'
| |       `-ImplicitCastExpr 0xf0f100 <col:30> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |         `-DeclRefExpr 0xf0f088 <col:30> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf0ee20 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionDecl 0xf0f2e0 <line:1201:3, line:1204:36> line:1202:3 used atomic_flag_test_and_set_explicit 'bool (volatile std::atomic_flag *, std::memory_order) noexcept' inline
| | |-ParmVarDecl 0xf0f150 <col:37, col:59> col:59 used __a 'volatile std::atomic_flag *'
| | |-ParmVarDecl 0xf0f1c8 <line:1203:9, col:22> col:22 used __m 'std::memory_order':'std::memory_order'
| | `-CompoundStmt 0xf0f4d8 <line:1204:3, col:36>
| |   `-ReturnStmt 0xf0f4c8 <col:5, col:33>
| |     `-CXXMemberCallExpr 0xf0f488 <col:12, col:33> 'bool'
| |       |-MemberExpr 0xf0f458 <col:12, col:17> '<bound member function type>' ->test_and_set 0xe241e0
| |       | `-ImplicitCastExpr 0xf0f3c0 <col:12> 'volatile std::atomic_flag *' <LValueToRValue>
| |       |   `-DeclRefExpr 0xf0f3a0 <col:12> 'volatile std::atomic_flag *' lvalue ParmVar 0xf0f150 '__a' 'volatile std::atomic_flag *'
| |       `-ImplicitCastExpr 0xf0f4b0 <col:30> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |         `-DeclRefExpr 0xf0f438 <col:30> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf0f1c8 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionDecl 0xf0f690 <line:1206:3, line:1208:22> line:1207:3 used atomic_flag_clear_explicit 'void (std::atomic_flag *, std::memory_order) noexcept' inline
| | |-ParmVarDecl 0xf0f500 <col:30, col:43> col:43 used __a 'std::atomic_flag *'
| | |-ParmVarDecl 0xf0f578 <col:48, col:61> col:61 used __m 'std::memory_order':'std::memory_order'
| | `-CompoundStmt 0xf0f868 <line:1208:3, col:22>
| |   `-CXXMemberCallExpr 0xf0f828 <col:5, col:19> 'void'
| |     |-MemberExpr 0xf0f7f8 <col:5, col:10> '<bound member function type>' ->clear 0xe24398
| |     | `-ImplicitCastExpr 0xf0f760 <col:5> 'std::atomic_flag *' <LValueToRValue>
| |     |   `-DeclRefExpr 0xf0f740 <col:5> 'std::atomic_flag *' lvalue ParmVar 0xf0f500 '__a' 'std::atomic_flag *'
| |     `-ImplicitCastExpr 0xf0f850 <col:16> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |       `-DeclRefExpr 0xf0f7d8 <col:16> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf0f578 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionDecl 0xf0fa20 <line:1210:3, line:1213:22> line:1211:3 used atomic_flag_clear_explicit 'void (volatile std::atomic_flag *, std::memory_order) noexcept' inline
| | |-ParmVarDecl 0xf0f890 <col:30, col:52> col:52 used __a 'volatile std::atomic_flag *'
| | |-ParmVarDecl 0xf0f908 <line:1212:9, col:22> col:22 used __m 'std::memory_order':'std::memory_order'
| | `-CompoundStmt 0xf0fc08 <line:1213:3, col:22>
| |   `-CXXMemberCallExpr 0xf0fbc8 <col:5, col:19> 'void'
| |     |-MemberExpr 0xf0fb98 <col:5, col:10> '<bound member function type>' ->clear 0xe27580
| |     | `-ImplicitCastExpr 0xf0fb00 <col:5> 'volatile std::atomic_flag *' <LValueToRValue>
| |     |   `-DeclRefExpr 0xf0fae0 <col:5> 'volatile std::atomic_flag *' lvalue ParmVar 0xf0f890 '__a' 'volatile std::atomic_flag *'
| |     `-ImplicitCastExpr 0xf0fbf0 <col:16> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |       `-DeclRefExpr 0xf0fb78 <col:16> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf0f908 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionDecl 0xf0fd30 <line:1215:3, line:1217:74> line:1216:3 atomic_flag_test_and_set 'bool (std::atomic_flag *) noexcept' inline
| | |-ParmVarDecl 0xf0fc30 <col:28, col:41> col:41 used __a 'std::atomic_flag *'
| | `-CompoundStmt 0xf0ff58 <line:1217:3, col:74>
| |   `-ReturnStmt 0xf0ff48 <col:5, col:71>
| |     `-CallExpr 0xf0ff00 <col:12, col:71> 'bool'
| |       |-ImplicitCastExpr 0xf0fee8 <col:12> 'bool (*)(std::atomic_flag *, std::memory_order) noexcept' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0xf0fe68 <col:12> 'bool (std::atomic_flag *, std::memory_order) noexcept' lvalue Function 0xf0ef40 'atomic_flag_test_and_set_explicit' 'bool (std::atomic_flag *, std::memory_order) noexcept'
| |       |-ImplicitCastExpr 0xf0ff30 <col:46> 'std::atomic_flag *' <LValueToRValue>
| |       | `-DeclRefExpr 0xf0fe28 <col:46> 'std::atomic_flag *' lvalue ParmVar 0xf0fc30 '__a' 'std::atomic_flag *'
| |       `-DeclRefExpr 0xf0fe48 <col:51> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionDecl 0xf10080 <line:1219:3, line:1221:74> line:1220:3 atomic_flag_test_and_set 'bool (volatile std::atomic_flag *) noexcept' inline
| | |-ParmVarDecl 0xf0ff80 <col:28, col:50> col:50 used __a 'volatile std::atomic_flag *'
| | `-CompoundStmt 0xf102b8 <line:1221:3, col:74>
| |   `-ReturnStmt 0xf102a8 <col:5, col:71>
| |     `-CallExpr 0xf10260 <col:12, col:71> 'bool'
| |       |-ImplicitCastExpr 0xf10248 <col:12> 'bool (*)(volatile std::atomic_flag *, std::memory_order) noexcept' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0xf101c8 <col:12> 'bool (volatile std::atomic_flag *, std::memory_order) noexcept' lvalue Function 0xf0f2e0 'atomic_flag_test_and_set_explicit' 'bool (volatile std::atomic_flag *, std::memory_order) noexcept'
| |       |-ImplicitCastExpr 0xf10290 <col:46> 'volatile std::atomic_flag *' <LValueToRValue>
| |       | `-DeclRefExpr 0xf10188 <col:46> 'volatile std::atomic_flag *' lvalue ParmVar 0xf0ff80 '__a' 'volatile std::atomic_flag *'
| |       `-DeclRefExpr 0xf101a8 <col:51> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionDecl 0xf103e0 <line:1223:3, line:1225:60> line:1224:3 atomic_flag_clear 'void (std::atomic_flag *) noexcept' inline
| | |-ParmVarDecl 0xf102e0 <col:21, col:34> col:34 used __a 'std::atomic_flag *'
| | `-CompoundStmt 0xf105f8 <line:1225:3, col:60>
| |   `-CallExpr 0xf105b0 <col:5, col:57> 'void'
| |     |-ImplicitCastExpr 0xf10598 <col:5> 'void (*)(std::atomic_flag *, std::memory_order) noexcept' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0xf10518 <col:5> 'void (std::atomic_flag *, std::memory_order) noexcept' lvalue Function 0xf0f690 'atomic_flag_clear_explicit' 'void (std::atomic_flag *, std::memory_order) noexcept'
| |     |-ImplicitCastExpr 0xf105e0 <col:32> 'std::atomic_flag *' <LValueToRValue>
| |     | `-DeclRefExpr 0xf104d8 <col:32> 'std::atomic_flag *' lvalue ParmVar 0xf102e0 '__a' 'std::atomic_flag *'
| |     `-DeclRefExpr 0xf104f8 <col:37> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionDecl 0xf10720 <line:1227:3, line:1229:60> line:1228:3 atomic_flag_clear 'void (volatile std::atomic_flag *) noexcept' inline
| | |-ParmVarDecl 0xf10620 <col:21, col:43> col:43 used __a 'volatile std::atomic_flag *'
| | `-CompoundStmt 0xf10948 <line:1229:3, col:60>
| |   `-CallExpr 0xf10900 <col:5, col:57> 'void'
| |     |-ImplicitCastExpr 0xf108e8 <col:5> 'void (*)(volatile std::atomic_flag *, std::memory_order) noexcept' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0xf10868 <col:5> 'void (volatile std::atomic_flag *, std::memory_order) noexcept' lvalue Function 0xf0fa20 'atomic_flag_clear_explicit' 'void (volatile std::atomic_flag *, std::memory_order) noexcept'
| |     |-ImplicitCastExpr 0xf10930 <col:32> 'volatile std::atomic_flag *' <LValueToRValue>
| |     | `-DeclRefExpr 0xf10828 <col:32> 'volatile std::atomic_flag *' lvalue ParmVar 0xf10620 '__a' 'volatile std::atomic_flag *'
| |     `-DeclRefExpr 0xf10848 <col:37> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-TypeAliasTemplateDecl 0xf10ba0 <line:1232:3, line:1233:50> col:5 __atomic_val_t
| | |-TemplateTypeParmDecl 0xf10960 <line:1232:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xf10b40 <line:1233:5, col:50> col:11 __atomic_val_t 'typename atomic<_Tp>::value_type'
| |   `-DependentNameType 0xf10ad0 'typename atomic<_Tp>::value_type' dependent
| |-TypeAliasTemplateDecl 0xf10e20 <line:1234:3, line:1235:51> col:5 __atomic_diff_t
| | |-TemplateTypeParmDecl 0xf10bf8 <line:1234:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xf10dc0 <line:1235:5, col:51> col:11 __atomic_diff_t 'typename atomic<_Tp>::difference_type'
| |   `-DependentNameType 0xf10d50 'typename atomic<_Tp>::difference_type' dependent
| |-FunctionTemplateDecl 0xf111a0 <line:1239:3, line:1242:35> line:1241:5 atomic_is_lock_free
| | |-TemplateTypeParmDecl 0xf10e78 <line:1239:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf11100 <line:1240:5, line:1242:35> line:1241:5 atomic_is_lock_free 'bool (const atomic<_ITp> *) noexcept' inline
| |   |-ParmVarDecl 0xf11000 <col:25, col:45> col:45 referenced __a 'const atomic<_ITp> *'
| |   `-CompoundStmt 0xf11310 <line:1242:5, col:35>
| |     `-ReturnStmt 0xf11300 <col:7, col:32>
| |       `-CallExpr 0xf112e0 <col:14, col:32> '<dependent type>'
| |         `-CXXDependentScopeMemberExpr 0xf11298 <col:14, col:19> '<dependent type>' lvalue ->is_lock_free
| |           `-DeclRefExpr 0xf11278 <col:14> 'const atomic<_ITp> *' lvalue ParmVar 0xf11000 '__a' 'const atomic<_ITp> *'
| |-FunctionTemplateDecl 0xf11650 <line:1244:3, line:1247:35> line:1246:5 atomic_is_lock_free
| | |-TemplateTypeParmDecl 0xf11328 <line:1244:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf115b0 <line:1245:5, line:1247:35> line:1246:5 atomic_is_lock_free 'bool (const volatile atomic<_ITp> *) noexcept' inline
| |   |-ParmVarDecl 0xf114b0 <col:25, col:54> col:54 referenced __a 'const volatile atomic<_ITp> *'
| |   `-CompoundStmt 0xf117d0 <line:1247:5, col:35>
| |     `-ReturnStmt 0xf117c0 <col:7, col:32>
| |       `-CallExpr 0xf117a0 <col:14, col:32> '<dependent type>'
| |         `-CXXDependentScopeMemberExpr 0xf11758 <col:14, col:19> '<dependent type>' lvalue ->is_lock_free
| |           `-DeclRefExpr 0xf11738 <col:14> 'const volatile atomic<_ITp> *' lvalue ParmVar 0xf114b0 '__a' 'const volatile atomic<_ITp> *'
| |-FunctionTemplateDecl 0xf11db0 <line:1249:3, line:1252:46> line:1251:5 atomic_init
| | |-TemplateTypeParmDecl 0xf117e8 <line:1249:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf11d10 <line:1250:5, line:1252:46> line:1251:5 atomic_init 'void (atomic<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf11970 <col:17, col:31> col:31 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xf11bf8 <col:36, col:57> col:57 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf11f68 <line:1252:5, col:46>
| |     `-CallExpr 0xf11f38 <col:7, col:43> '<dependent type>'
| |       |-CXXDependentScopeMemberExpr 0xf11eb0 <col:7, col:12> '<dependent type>' lvalue ->store
| |       | `-DeclRefExpr 0xf11e90 <col:7> 'atomic<_ITp> *' lvalue ParmVar 0xf11970 '__a' 'atomic<_ITp> *'
| |       |-DeclRefExpr 0xf11ef8 <col:18> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf11bf8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |       `-DeclRefExpr 0xf11f18 <col:23> 'std::memory_order' EnumConstant 0xe1e930 'memory_order_relaxed' 'std::memory_order'
| |-FunctionTemplateDecl 0xf12510 <line:1254:3, line:1257:46> line:1256:5 atomic_init
| | |-TemplateTypeParmDecl 0xf11f80 <line:1254:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf12470 <line:1255:5, line:1257:46> line:1256:5 atomic_init 'void (volatile atomic<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf12100 <col:17, col:40> col:40 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf12358 <col:45, col:66> col:66 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf126d8 <line:1257:5, col:46>
| |     `-CallExpr 0xf126a8 <col:7, col:43> '<dependent type>'
| |       |-CXXDependentScopeMemberExpr 0xf12620 <col:7, col:12> '<dependent type>' lvalue ->store
| |       | `-DeclRefExpr 0xf12600 <col:7> 'volatile atomic<_ITp> *' lvalue ParmVar 0xf12100 '__a' 'volatile atomic<_ITp> *'
| |       |-DeclRefExpr 0xf12668 <col:18> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf12358 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |       `-DeclRefExpr 0xf12688 <col:23> 'std::memory_order' EnumConstant 0xe1e930 'memory_order_relaxed' 'std::memory_order'
| |-FunctionTemplateDecl 0xf12d40 <line:1259:3, line:1263:29> line:1261:5 atomic_store_explicit
| | |-TemplateTypeParmDecl 0xf126f0 <line:1259:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf12ca0 <line:1260:5, line:1263:29> line:1261:5 atomic_store_explicit 'void (atomic<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf128a0 <col:27, col:41> col:41 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xf12af8 <col:46, col:67> col:67 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf12b70 <line:1262:6, col:19> col:19 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf12f00 <line:1263:5, col:29>
| |     `-CallExpr 0xf12ed0 <col:7, col:26> '<dependent type>'
| |       |-CXXDependentScopeMemberExpr 0xf12e48 <col:7, col:12> '<dependent type>' lvalue ->store
| |       | `-DeclRefExpr 0xf12e28 <col:7> 'atomic<_ITp> *' lvalue ParmVar 0xf128a0 '__a' 'atomic<_ITp> *'
| |       |-DeclRefExpr 0xf12e90 <col:18> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf12af8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |       `-DeclRefExpr 0xf12eb0 <col:23> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf12b70 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf13510 <line:1265:3, line:1269:29> line:1267:5 atomic_store_explicit
| | |-TemplateTypeParmDecl 0xf12f18 <line:1265:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf13470 <line:1266:5, line:1269:29> line:1267:5 atomic_store_explicit 'void (volatile atomic<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf13070 <col:27, col:50> col:50 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf132c8 <col:55, col:76> col:76 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf13340 <line:1268:6, col:19> col:19 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf136e0 <line:1269:5, col:29>
| |     `-CallExpr 0xf136b0 <col:7, col:26> '<dependent type>'
| |       |-CXXDependentScopeMemberExpr 0xf13628 <col:7, col:12> '<dependent type>' lvalue ->store
| |       | `-DeclRefExpr 0xf13608 <col:7> 'volatile atomic<_ITp> *' lvalue ParmVar 0xf13070 '__a' 'volatile atomic<_ITp> *'
| |       |-DeclRefExpr 0xf13670 <col:18> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf132c8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |       `-DeclRefExpr 0xf13690 <col:23> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf13340 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf13a80 <line:1271:3, line:1274:30> line:1273:5 atomic_load_explicit
| | |-TemplateTypeParmDecl 0xf136f8 <line:1271:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf139e0 <line:1272:5, line:1274:30> line:1273:5 atomic_load_explicit '_ITp (const atomic<_ITp> *, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf13850 <col:26, col:46> col:46 referenced __a 'const atomic<_ITp> *'
| |   |-ParmVarDecl 0xf138c8 <col:51, col:64> col:64 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf13c20 <line:1274:5, col:30>
| |     `-ReturnStmt 0xf13c10 <col:7, col:27>
| |       `-CallExpr 0xf13be8 <col:14, col:27> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf13b80 <col:14, col:19> '<dependent type>' lvalue ->load
| |         | `-DeclRefExpr 0xf13b60 <col:14> 'const atomic<_ITp> *' lvalue ParmVar 0xf13850 '__a' 'const atomic<_ITp> *'
| |         `-DeclRefExpr 0xf13bc8 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf138c8 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf13fc0 <line:1276:3, line:1280:30> line:1278:5 atomic_load_explicit
| | |-TemplateTypeParmDecl 0xf13c38 <line:1276:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf13f20 <line:1277:5, line:1280:30> line:1278:5 atomic_load_explicit '_ITp (const volatile atomic<_ITp> *, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf13d90 <col:26, col:55> col:55 referenced __a 'const volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf13e08 <line:1279:5, col:18> col:18 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf14170 <line:1280:5, col:30>
| |     `-ReturnStmt 0xf14160 <col:7, col:27>
| |       `-CallExpr 0xf14138 <col:14, col:27> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf140d0 <col:14, col:19> '<dependent type>' lvalue ->load
| |         | `-DeclRefExpr 0xf140b0 <col:14> 'const volatile atomic<_ITp> *' lvalue ParmVar 0xf13d90 '__a' 'const volatile atomic<_ITp> *'
| |         `-DeclRefExpr 0xf14118 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf13e08 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf14780 <line:1282:3, line:1286:39> line:1284:5 atomic_exchange_explicit
| | |-TemplateTypeParmDecl 0xf14188 <line:1282:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf146e0 <line:1283:5, line:1286:39> line:1284:5 atomic_exchange_explicit '_ITp (atomic<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf142e0 <col:30, col:44> col:44 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xf14538 <col:49, col:70> col:70 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf145b0 <line:1285:9, col:22> col:22 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf14950 <line:1286:5, col:39>
| |     `-ReturnStmt 0xf14940 <col:7, col:36>
| |       `-CallExpr 0xf14910 <col:14, col:36> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf14888 <col:14, col:19> '<dependent type>' lvalue ->exchange
| |         | `-DeclRefExpr 0xf14868 <col:14> 'atomic<_ITp> *' lvalue ParmVar 0xf142e0 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xf148d0 <col:28> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf14538 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf148f0 <col:33> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf145b0 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf14f60 <line:1288:3, line:1293:39> line:1290:5 atomic_exchange_explicit
| | |-TemplateTypeParmDecl 0xf14968 <line:1288:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf14ec0 <line:1289:5, line:1293:39> line:1290:5 atomic_exchange_explicit '_ITp (volatile atomic<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf14ac0 <col:30, col:53> col:53 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf14d18 <line:1291:9, col:30> col:30 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf14d90 <line:1292:9, col:22> col:22 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf15140 <line:1293:5, col:39>
| |     `-ReturnStmt 0xf15130 <col:7, col:36>
| |       `-CallExpr 0xf15100 <col:14, col:36> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf15078 <col:14, col:19> '<dependent type>' lvalue ->exchange
| |         | `-DeclRefExpr 0xf15058 <col:14> 'volatile atomic<_ITp> *' lvalue ParmVar 0xf14ac0 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xf150c0 <col:28> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf14d18 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf150e0 <col:33> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf14d90 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf15ab0 <line:1295:3, line:1302:67> line:1297:5 atomic_compare_exchange_weak_explicit
| | |-TemplateTypeParmDecl 0xf15158 <line:1295:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf15a10 <line:1296:5, line:1302:67> line:1297:5 atomic_compare_exchange_weak_explicit 'bool (atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>, std::memory_order, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf152b0 <col:43, col:57> col:57 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xf15570 <line:1298:8, col:30> col:30 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xf157c8 <line:1299:8, col:29> col:29 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf15840 <line:1300:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
| |   |-ParmVarDecl 0xf158b8 <line:1301:8, col:21> col:21 referenced __m2 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf15cf8 <line:1302:5, col:67>
| |     `-ReturnStmt 0xf15ce8 <col:7, col:64>
| |       `-CallExpr 0xf15ca8 <col:14, col:64> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf15bc8 <col:14, col:19> '<dependent type>' lvalue ->compare_exchange_weak
| |         | `-DeclRefExpr 0xf15ba8 <col:14> 'atomic<_ITp> *' lvalue ParmVar 0xf152b0 '__a' 'atomic<_ITp> *'
| |         |-UnaryOperator 0xf15c30 <col:41, col:42> '<dependent type>' prefix '*' cannot overflow
| |         | `-DeclRefExpr 0xf15c10 <col:42> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xf15570 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xf15c48 <col:48> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf157c8 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xf15c68 <col:54> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf15840 '__m1' 'std::memory_order':'std::memory_order'
| |         `-DeclRefExpr 0xf15c88 <col:60> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf158b8 '__m2' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf16630 <line:1304:3, line:1311:67> line:1306:5 atomic_compare_exchange_weak_explicit
| | |-TemplateTypeParmDecl 0xf15d10 <line:1304:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf16590 <line:1305:5, line:1311:67> line:1306:5 atomic_compare_exchange_weak_explicit 'bool (volatile atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>, std::memory_order, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf15e60 <col:43, col:66> col:66 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf160f0 <line:1307:8, col:30> col:30 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xf16348 <line:1308:8, col:29> col:29 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf163c0 <line:1309:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
| |   |-ParmVarDecl 0xf16438 <line:1310:8, col:21> col:21 referenced __m2 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf16888 <line:1311:5, col:67>
| |     `-ReturnStmt 0xf16878 <col:7, col:64>
| |       `-CallExpr 0xf16838 <col:14, col:64> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf16758 <col:14, col:19> '<dependent type>' lvalue ->compare_exchange_weak
| |         | `-DeclRefExpr 0xf16738 <col:14> 'volatile atomic<_ITp> *' lvalue ParmVar 0xf15e60 '__a' 'volatile atomic<_ITp> *'
| |         |-UnaryOperator 0xf167c0 <col:41, col:42> '<dependent type>' prefix '*' cannot overflow
| |         | `-DeclRefExpr 0xf167a0 <col:42> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xf160f0 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xf167d8 <col:48> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf16348 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xf167f8 <col:54> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf163c0 '__m1' 'std::memory_order':'std::memory_order'
| |         `-DeclRefExpr 0xf16818 <col:60> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf16438 '__m2' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf17180 <line:1313:3, line:1320:69> line:1315:5 atomic_compare_exchange_strong_explicit
| | |-TemplateTypeParmDecl 0xf168b0 <line:1313:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf170e0 <line:1314:5, line:1320:69> line:1315:5 atomic_compare_exchange_strong_explicit 'bool (atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>, std::memory_order, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf16a00 <col:45, col:59> col:59 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xf16c90 <line:1316:10, col:32> col:32 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xf16ee8 <line:1317:10, col:31> col:31 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf16f60 <line:1318:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
| |   |-ParmVarDecl 0xf16fd8 <line:1319:10, col:23> col:23 referenced __m2 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf173c8 <line:1320:5, col:69>
| |     `-ReturnStmt 0xf173b8 <col:7, col:66>
| |       `-CallExpr 0xf17378 <col:14, col:66> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf17298 <col:14, col:19> '<dependent type>' lvalue ->compare_exchange_strong
| |         | `-DeclRefExpr 0xf17278 <col:14> 'atomic<_ITp> *' lvalue ParmVar 0xf16a00 '__a' 'atomic<_ITp> *'
| |         |-UnaryOperator 0xf17300 <col:43, col:44> '<dependent type>' prefix '*' cannot overflow
| |         | `-DeclRefExpr 0xf172e0 <col:44> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xf16c90 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xf17318 <col:50> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf16ee8 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xf17338 <col:56> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf16f60 '__m1' 'std::memory_order':'std::memory_order'
| |         `-DeclRefExpr 0xf17358 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf16fd8 '__m2' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf17cb0 <line:1322:3, line:1329:69> line:1324:5 atomic_compare_exchange_strong_explicit
| | |-TemplateTypeParmDecl 0xf173e0 <line:1322:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf17c10 <line:1323:5, line:1329:69> line:1324:5 atomic_compare_exchange_strong_explicit 'bool (volatile atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>, std::memory_order, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf17530 <col:45, col:68> col:68 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf177c0 <line:1325:10, col:32> col:32 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xf17a18 <line:1326:10, col:31> col:31 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf17a90 <line:1327:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
| |   |-ParmVarDecl 0xf17b08 <line:1328:10, col:23> col:23 referenced __m2 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf17f08 <line:1329:5, col:69>
| |     `-ReturnStmt 0xf17ef8 <col:7, col:66>
| |       `-CallExpr 0xf17eb8 <col:14, col:66> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf17dd8 <col:14, col:19> '<dependent type>' lvalue ->compare_exchange_strong
| |         | `-DeclRefExpr 0xf17db8 <col:14> 'volatile atomic<_ITp> *' lvalue ParmVar 0xf17530 '__a' 'volatile atomic<_ITp> *'
| |         |-UnaryOperator 0xf17e40 <col:43, col:44> '<dependent type>' prefix '*' cannot overflow
| |         | `-DeclRefExpr 0xf17e20 <col:44> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xf177c0 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xf17e58 <col:50> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf17a18 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xf17e78 <col:56> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf17a90 '__m1' 'std::memory_order':'std::memory_order'
| |         `-DeclRefExpr 0xf17e98 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf17b08 '__m2' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf18440 <line:1332:3, line:1335:62> line:1334:5 atomic_store
| | |-TemplateTypeParmDecl 0xf17f20 <line:1332:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf183a0 <line:1333:5, line:1335:62> line:1334:5 atomic_store 'void (atomic<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf18070 <col:18, col:32> col:32 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xf182c8 <col:37, col:58> col:58 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf18608 <line:1335:5, col:62>
| |     `-CallExpr 0xf185d0 <col:7, col:59> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xf18520 <col:7> '<overloaded function type>' lvalue (ADL) = 'atomic_store_explicit' 0xf13510 0xf12d40
| |       |-DeclRefExpr 0xf18570 <col:29> 'atomic<_ITp> *' lvalue ParmVar 0xf18070 '__a' 'atomic<_ITp> *'
| |       |-DeclRefExpr 0xf18590 <col:34> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf182c8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |       `-DeclRefExpr 0xf185b0 <col:39> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf18b40 <line:1337:3, line:1340:62> line:1339:5 atomic_store
| | |-TemplateTypeParmDecl 0xf18620 <line:1337:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf18aa0 <line:1338:5, line:1340:62> line:1339:5 atomic_store 'void (volatile atomic<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf18770 <col:18, col:41> col:41 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf189c8 <col:46, col:67> col:67 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf18d18 <line:1340:5, col:62>
| |     `-CallExpr 0xf18ce0 <col:7, col:59> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xf18c30 <col:7> '<overloaded function type>' lvalue (ADL) = 'atomic_store_explicit' 0xf13510 0xf12d40
| |       |-DeclRefExpr 0xf18c80 <col:29> 'volatile atomic<_ITp> *' lvalue ParmVar 0xf18770 '__a' 'volatile atomic<_ITp> *'
| |       |-DeclRefExpr 0xf18ca0 <col:34> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf189c8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |       `-DeclRefExpr 0xf18cc0 <col:39> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf19020 <line:1342:3, line:1345:63> line:1344:5 atomic_load
| | |-TemplateTypeParmDecl 0xf18d30 <line:1342:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf18f80 <line:1343:5, line:1345:63> line:1344:5 atomic_load '_ITp (const atomic<_ITp> *) noexcept' inline
| |   |-ParmVarDecl 0xf18e80 <col:17, col:37> col:37 referenced __a 'const atomic<_ITp> *'
| |   `-CompoundStmt 0xf191c8 <line:1345:5, col:63>
| |     `-ReturnStmt 0xf191b8 <col:7, col:60>
| |       `-CallExpr 0xf19188 <col:14, col:60> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf190f8 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_load_explicit' 0xf13fc0 0xf13a80
| |         |-DeclRefExpr 0xf19148 <col:35> 'const atomic<_ITp> *' lvalue ParmVar 0xf18e80 '__a' 'const atomic<_ITp> *'
| |         `-DeclRefExpr 0xf19168 <col:40> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf194d0 <line:1347:3, line:1350:63> line:1349:5 atomic_load
| | |-TemplateTypeParmDecl 0xf191e0 <line:1347:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf19430 <line:1348:5, line:1350:63> line:1349:5 atomic_load '_ITp (const volatile atomic<_ITp> *) noexcept' inline
| |   |-ParmVarDecl 0xf19330 <col:17, col:46> col:46 referenced __a 'const volatile atomic<_ITp> *'
| |   `-CompoundStmt 0xf19688 <line:1350:5, col:63>
| |     `-ReturnStmt 0xf19678 <col:7, col:60>
| |       `-CallExpr 0xf19648 <col:14, col:60> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf195b8 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_load_explicit' 0xf13fc0 0xf13a80
| |         |-DeclRefExpr 0xf19608 <col:35> 'const volatile atomic<_ITp> *' lvalue ParmVar 0xf19330 '__a' 'const volatile atomic<_ITp> *'
| |         `-DeclRefExpr 0xf19628 <col:40> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf19c00 <line:1352:3, line:1355:72> line:1354:5 atomic_exchange
| | |-TemplateTypeParmDecl 0xf196a0 <line:1352:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf19b60 <line:1353:5, line:1355:72> line:1354:5 atomic_exchange '_ITp (atomic<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf197f0 <col:21, col:35> col:35 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xf19a48 <col:40, col:61> col:61 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf19dd8 <line:1355:5, col:72>
| |     `-ReturnStmt 0xf19dc8 <col:7, col:69>
| |       `-CallExpr 0xf19d90 <col:14, col:69> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf19ce0 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_exchange_explicit' 0xf14f60 0xf14780
| |         |-DeclRefExpr 0xf19d30 <col:39> 'atomic<_ITp> *' lvalue ParmVar 0xf197f0 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xf19d50 <col:44> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf19a48 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf19d70 <col:49> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf1a350 <line:1357:3, line:1361:72> line:1359:5 atomic_exchange
| | |-TemplateTypeParmDecl 0xf19df0 <line:1357:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf1a2b0 <line:1358:5, line:1361:72> line:1359:5 atomic_exchange '_ITp (volatile atomic<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf19f40 <col:21, col:44> col:44 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf1a198 <line:1360:7, col:28> col:28 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf1a538 <line:1361:5, col:72>
| |     `-ReturnStmt 0xf1a528 <col:7, col:69>
| |       `-CallExpr 0xf1a4f0 <col:14, col:69> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf1a440 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_exchange_explicit' 0xf14f60 0xf14780
| |         |-DeclRefExpr 0xf1a490 <col:39> 'volatile atomic<_ITp> *' lvalue ParmVar 0xf19f40 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xf1a4b0 <col:44> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf1a198 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf1a4d0 <col:49> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf1bdb0 <line:1363:3, line:1372:5> line:1365:5 atomic_compare_exchange_weak
| | |-TemplateTypeParmDecl 0xf1a550 <line:1363:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf1bd10 <line:1364:5, line:1372:5> line:1365:5 atomic_compare_exchange_weak 'bool (atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf1a6a0 <col:34, col:48> col:48 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xf1b990 <line:1366:6, col:28> col:28 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xf1bbe8 <line:1367:6, col:27> col:27 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf1bfe0 <line:1368:5, line:1372:5>
| |     `-ReturnStmt 0xf1bfd0 <line:1369:7, line:1371:30>
| |       `-CallExpr 0xf1bf88 <line:1369:14, line:1371:30> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf1be98 <line:1369:14> '<overloaded function type>' lvalue (ADL) = 'atomic_compare_exchange_weak_explicit' 0xf16630 0xf15ab0
| |         |-DeclRefExpr 0xf1bee8 <col:52> 'atomic<_ITp> *' lvalue ParmVar 0xf1a6a0 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xf1bf08 <col:57> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xf1b990 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xf1bf28 <col:63> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf1bbe8 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xf1bf48 <line:1370:10> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |         `-DeclRefExpr 0xf1bf68 <line:1371:10> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf1c800 <line:1374:3, line:1383:5> line:1376:5 atomic_compare_exchange_weak
| | |-TemplateTypeParmDecl 0xf1bff8 <line:1374:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf1c760 <line:1375:5, line:1383:5> line:1376:5 atomic_compare_exchange_weak 'bool (volatile atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf1c150 <col:34, col:57> col:57 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf1c3e0 <line:1377:6, col:28> col:28 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xf1c638 <line:1378:6, col:27> col:27 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf1ca40 <line:1379:5, line:1383:5>
| |     `-ReturnStmt 0xf1ca30 <line:1380:7, line:1382:30>
| |       `-CallExpr 0xf1c9e8 <line:1380:14, line:1382:30> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf1c8f8 <line:1380:14> '<overloaded function type>' lvalue (ADL) = 'atomic_compare_exchange_weak_explicit' 0xf16630 0xf15ab0
| |         |-DeclRefExpr 0xf1c948 <col:52> 'volatile atomic<_ITp> *' lvalue ParmVar 0xf1c150 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xf1c968 <col:57> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xf1c3e0 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xf1c988 <col:63> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf1c638 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xf1c9a8 <line:1381:10> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |         `-DeclRefExpr 0xf1c9c8 <line:1382:10> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf1d220 <line:1385:3, line:1394:5> line:1387:5 atomic_compare_exchange_strong
| | |-TemplateTypeParmDecl 0xf1ca58 <line:1385:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf1d180 <line:1386:5, line:1394:5> line:1387:5 atomic_compare_exchange_strong 'bool (atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf1cbb0 <col:36, col:50> col:50 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xf1ce40 <line:1388:8, col:30> col:30 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xf1d098 <line:1389:8, col:29> col:29 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf1d450 <line:1390:5, line:1394:5>
| |     `-ReturnStmt 0xf1d440 <line:1391:7, line:1393:32>
| |       `-CallExpr 0xf1d3f8 <line:1391:14, line:1393:32> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf1d308 <line:1391:14> '<overloaded function type>' lvalue (ADL) = 'atomic_compare_exchange_strong_explicit' 0xf17cb0 0xf17180
| |         |-DeclRefExpr 0xf1d358 <col:54> 'atomic<_ITp> *' lvalue ParmVar 0xf1cbb0 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xf1d378 <col:59> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xf1ce40 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xf1d398 <col:65> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf1d098 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xf1d3b8 <line:1392:12> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |         `-DeclRefExpr 0xf1d3d8 <line:1393:12> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf1dc30 <line:1396:3, line:1405:5> line:1398:5 atomic_compare_exchange_strong
| | |-TemplateTypeParmDecl 0xf1d468 <line:1396:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf1db90 <line:1397:5, line:1405:5> line:1398:5 atomic_compare_exchange_strong 'bool (volatile atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf1d5c0 <col:36, col:59> col:59 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf1d850 <line:1399:8, col:30> col:30 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xf1daa8 <line:1400:8, col:29> col:29 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf1de70 <line:1401:5, line:1405:5>
| |     `-ReturnStmt 0xf1de60 <line:1402:7, line:1404:32>
| |       `-CallExpr 0xf1de18 <line:1402:14, line:1404:32> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf1dd28 <line:1402:14> '<overloaded function type>' lvalue (ADL) = 'atomic_compare_exchange_strong_explicit' 0xf17cb0 0xf17180
| |         |-DeclRefExpr 0xf1dd78 <col:54> 'volatile atomic<_ITp> *' lvalue ParmVar 0xf1d5c0 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xf1dd98 <col:59> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xf1d850 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xf1ddb8 <col:65> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf1daa8 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xf1ddd8 <line:1403:12> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |         `-DeclRefExpr 0xf1ddf8 <line:1404:12> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf1e4b0 <line:1437:3, line:1442:40> line:1439:5 atomic_fetch_add_explicit
| | |-TemplateTypeParmDecl 0xf1de88 <line:1437:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf1e410 <line:1438:5, line:1442:40> line:1439:5 atomic_fetch_add_explicit '_ITp (atomic<_ITp> *, __atomic_diff_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf1dfe0 <col:31, col:45> col:45 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xf1e268 <line:1440:10, col:32> col:32 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   |-ParmVarDecl 0xf1e2e0 <line:1441:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf1e680 <line:1442:5, col:40>
| |     `-ReturnStmt 0xf1e670 <col:7, col:37>
| |       `-CallExpr 0xf1e640 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf1e5b8 <col:14, col:19> '<dependent type>' lvalue ->fetch_add
| |         | `-DeclRefExpr 0xf1e598 <col:14> 'atomic<_ITp> *' lvalue ParmVar 0xf1dfe0 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xf1e600 <col:29> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xf1e268 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xf1e620 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf1e2e0 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf1ec90 <line:1444:3, line:1449:40> line:1446:5 atomic_fetch_add_explicit
| | |-TemplateTypeParmDecl 0xf1e698 <line:1444:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf1ebf0 <line:1445:5, line:1449:40> line:1446:5 atomic_fetch_add_explicit '_ITp (volatile atomic<_ITp> *, __atomic_diff_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf1e7f0 <col:31, col:54> col:54 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf1ea48 <line:1447:10, col:32> col:32 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   |-ParmVarDecl 0xf1eac0 <line:1448:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf1ee70 <line:1449:5, col:40>
| |     `-ReturnStmt 0xf1ee60 <col:7, col:37>
| |       `-CallExpr 0xf1ee30 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf1eda8 <col:14, col:19> '<dependent type>' lvalue ->fetch_add
| |         | `-DeclRefExpr 0xf1ed88 <col:14> 'volatile atomic<_ITp> *' lvalue ParmVar 0xf1e7f0 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xf1edf0 <col:29> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xf1ea48 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xf1ee10 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf1eac0 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf1f440 <line:1451:3, line:1456:40> line:1453:5 atomic_fetch_sub_explicit
| | |-TemplateTypeParmDecl 0xf1ee88 <line:1451:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf1f3a0 <line:1452:5, line:1456:40> line:1453:5 atomic_fetch_sub_explicit '_ITp (atomic<_ITp> *, __atomic_diff_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf1efe0 <col:31, col:45> col:45 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xf1f238 <line:1454:10, col:32> col:32 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   |-ParmVarDecl 0xf1f2b0 <line:1455:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf1f610 <line:1456:5, col:40>
| |     `-ReturnStmt 0xf1f600 <col:7, col:37>
| |       `-CallExpr 0xf1f5d0 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf1f548 <col:14, col:19> '<dependent type>' lvalue ->fetch_sub
| |         | `-DeclRefExpr 0xf1f528 <col:14> 'atomic<_ITp> *' lvalue ParmVar 0xf1efe0 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xf1f590 <col:29> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xf1f238 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xf1f5b0 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf1f2b0 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf1fbf0 <line:1458:3, line:1463:40> line:1460:5 atomic_fetch_sub_explicit
| | |-TemplateTypeParmDecl 0xf1f628 <line:1458:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf1fb50 <line:1459:5, line:1463:40> line:1460:5 atomic_fetch_sub_explicit '_ITp (volatile atomic<_ITp> *, __atomic_diff_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf1f780 <col:31, col:54> col:54 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf1f9e8 <line:1461:10, col:32> col:32 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   |-ParmVarDecl 0xf1fa60 <line:1462:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf1fdd0 <line:1463:5, col:40>
| |     `-ReturnStmt 0xf1fdc0 <col:7, col:37>
| |       `-CallExpr 0xf1fd90 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf1fd08 <col:14, col:19> '<dependent type>' lvalue ->fetch_sub
| |         | `-DeclRefExpr 0xf1fce8 <col:14> 'volatile atomic<_ITp> *' lvalue ParmVar 0xf1f780 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xf1fd50 <col:29> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xf1f9e8 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xf1fd70 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf1fa60 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf20410 <line:1465:3, line:1470:40> line:1467:5 atomic_fetch_and_explicit
| | |-TemplateTypeParmDecl 0xf1fde8 <line:1465:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf20370 <line:1466:5, line:1470:40> line:1467:5 atomic_fetch_and_explicit '_ITp (__atomic_base<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf1ff70 <col:31, col:52> col:52 referenced __a '__atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xf201c8 <line:1468:10, col:31> col:31 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf20240 <line:1469:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf205e0 <line:1470:5, col:40>
| |     `-ReturnStmt 0xf205d0 <col:7, col:37>
| |       `-CallExpr 0xf205a0 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf20518 <col:14, col:19> '<dependent type>' lvalue ->fetch_and
| |         | `-DeclRefExpr 0xf204f8 <col:14> '__atomic_base<_ITp> *' lvalue ParmVar 0xf1ff70 '__a' '__atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xf20560 <col:29> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf201c8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf20580 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf20240 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf20c20 <line:1472:3, line:1477:40> line:1474:5 atomic_fetch_and_explicit
| | |-TemplateTypeParmDecl 0xf205f8 <line:1472:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf20b80 <line:1473:5, line:1477:40> line:1474:5 atomic_fetch_and_explicit '_ITp (volatile __atomic_base<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf20780 <col:31, col:61> col:61 referenced __a 'volatile __atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xf209d8 <line:1475:10, col:31> col:31 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf20a50 <line:1476:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf20e00 <line:1477:5, col:40>
| |     `-ReturnStmt 0xf20df0 <col:7, col:37>
| |       `-CallExpr 0xf20dc0 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf20d38 <col:14, col:19> '<dependent type>' lvalue ->fetch_and
| |         | `-DeclRefExpr 0xf20d18 <col:14> 'volatile __atomic_base<_ITp> *' lvalue ParmVar 0xf20780 '__a' 'volatile __atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xf20d80 <col:29> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf209d8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf20da0 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf20a50 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf213d0 <line:1479:3, line:1484:39> line:1481:5 atomic_fetch_or_explicit
| | |-TemplateTypeParmDecl 0xf20e18 <line:1479:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf21330 <line:1480:5, line:1484:39> line:1481:5 atomic_fetch_or_explicit '_ITp (__atomic_base<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf20f70 <col:30, col:51> col:51 referenced __a '__atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xf211c8 <line:1482:9, col:30> col:30 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf21240 <line:1483:9, col:22> col:22 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf215a0 <line:1484:5, col:39>
| |     `-ReturnStmt 0xf21590 <col:7, col:36>
| |       `-CallExpr 0xf21560 <col:14, col:36> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf214d8 <col:14, col:19> '<dependent type>' lvalue ->fetch_or
| |         | `-DeclRefExpr 0xf214b8 <col:14> '__atomic_base<_ITp> *' lvalue ParmVar 0xf20f70 '__a' '__atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xf21520 <col:28> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf211c8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf21540 <col:33> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf21240 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf21b70 <line:1486:3, line:1491:39> line:1488:5 atomic_fetch_or_explicit
| | |-TemplateTypeParmDecl 0xf215b8 <line:1486:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf21ad0 <line:1487:5, line:1491:39> line:1488:5 atomic_fetch_or_explicit '_ITp (volatile __atomic_base<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf21710 <col:30, col:60> col:60 referenced __a 'volatile __atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xf21968 <line:1489:9, col:30> col:30 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf219e0 <line:1490:9, col:22> col:22 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf21d50 <line:1491:5, col:39>
| |     `-ReturnStmt 0xf21d40 <col:7, col:36>
| |       `-CallExpr 0xf21d10 <col:14, col:36> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf21c88 <col:14, col:19> '<dependent type>' lvalue ->fetch_or
| |         | `-DeclRefExpr 0xf21c68 <col:14> 'volatile __atomic_base<_ITp> *' lvalue ParmVar 0xf21710 '__a' 'volatile __atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xf21cd0 <col:28> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf21968 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf21cf0 <col:33> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf219e0 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf22320 <line:1493:3, line:1498:40> line:1495:5 atomic_fetch_xor_explicit
| | |-TemplateTypeParmDecl 0xf21d68 <line:1493:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf22280 <line:1494:5, line:1498:40> line:1495:5 atomic_fetch_xor_explicit '_ITp (__atomic_base<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf21ec0 <col:31, col:52> col:52 referenced __a '__atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xf22118 <line:1496:10, col:31> col:31 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf22190 <line:1497:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf224f0 <line:1498:5, col:40>
| |     `-ReturnStmt 0xf224e0 <col:7, col:37>
| |       `-CallExpr 0xf224b0 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf22428 <col:14, col:19> '<dependent type>' lvalue ->fetch_xor
| |         | `-DeclRefExpr 0xf22408 <col:14> '__atomic_base<_ITp> *' lvalue ParmVar 0xf21ec0 '__a' '__atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xf22470 <col:29> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf22118 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf22490 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf22190 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf22ac0 <line:1500:3, line:1505:40> line:1502:5 atomic_fetch_xor_explicit
| | |-TemplateTypeParmDecl 0xf22508 <line:1500:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf22a20 <line:1501:5, line:1505:40> line:1502:5 atomic_fetch_xor_explicit '_ITp (volatile __atomic_base<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xf22660 <col:31, col:61> col:61 referenced __a 'volatile __atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xf228b8 <line:1503:10, col:31> col:31 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xf22930 <line:1504:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xf22ca0 <line:1505:5, col:40>
| |     `-ReturnStmt 0xf22c90 <col:7, col:37>
| |       `-CallExpr 0xf22c60 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xf22bd8 <col:14, col:19> '<dependent type>' lvalue ->fetch_xor
| |         | `-DeclRefExpr 0xf22bb8 <col:14> 'volatile __atomic_base<_ITp> *' lvalue ParmVar 0xf22660 '__a' 'volatile __atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xf22c20 <col:29> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf228b8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf22c40 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xf22930 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xf23220 <line:1507:3, line:1511:73> line:1509:5 atomic_fetch_add
| | |-TemplateTypeParmDecl 0xf22cb8 <line:1507:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf23180 <line:1508:5, line:1511:73> line:1509:5 atomic_fetch_add '_ITp (atomic<_ITp> *, __atomic_diff_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf22e10 <col:22, col:36> col:36 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xf23068 <line:1510:8, col:30> col:30 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   `-CompoundStmt 0xf233f8 <line:1511:5, col:73>
| |     `-ReturnStmt 0xf233e8 <col:7, col:70>
| |       `-CallExpr 0xf233b0 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf23300 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_add_explicit' 0xf1ec90 0xf1e4b0
| |         |-DeclRefExpr 0xf23350 <col:40> 'atomic<_ITp> *' lvalue ParmVar 0xf22e10 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xf23370 <col:45> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xf23068 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xf23390 <col:50> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf261e0 <line:1513:3, line:1517:73> line:1515:5 atomic_fetch_add
| | |-TemplateTypeParmDecl 0xf23410 <line:1513:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf26140 <line:1514:5, line:1517:73> line:1515:5 atomic_fetch_add '_ITp (volatile atomic<_ITp> *, __atomic_diff_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf23560 <col:22, col:45> col:45 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf237b8 <line:1516:8, col:30> col:30 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   `-CompoundStmt 0xf263c8 <line:1517:5, col:73>
| |     `-ReturnStmt 0xf263b8 <col:7, col:70>
| |       `-CallExpr 0xf26380 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf262d0 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_add_explicit' 0xf1ec90 0xf1e4b0
| |         |-DeclRefExpr 0xf26320 <col:40> 'volatile atomic<_ITp> *' lvalue ParmVar 0xf23560 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xf26340 <col:45> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xf237b8 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xf26360 <col:50> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf26900 <line:1519:3, line:1523:73> line:1521:5 atomic_fetch_sub
| | |-TemplateTypeParmDecl 0xf263e0 <line:1519:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf26860 <line:1520:5, line:1523:73> line:1521:5 atomic_fetch_sub '_ITp (atomic<_ITp> *, __atomic_diff_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf26530 <col:22, col:36> col:36 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xf26788 <line:1522:8, col:30> col:30 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   `-CompoundStmt 0xf26ad8 <line:1523:5, col:73>
| |     `-ReturnStmt 0xf26ac8 <col:7, col:70>
| |       `-CallExpr 0xf26a90 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf269e0 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_sub_explicit' 0xf1fbf0 0xf1f440
| |         |-DeclRefExpr 0xf26a30 <col:40> 'atomic<_ITp> *' lvalue ParmVar 0xf26530 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xf26a50 <col:45> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xf26788 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xf26a70 <col:50> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf27010 <line:1525:3, line:1529:73> line:1527:5 atomic_fetch_sub
| | |-TemplateTypeParmDecl 0xf26af0 <line:1525:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf26f70 <line:1526:5, line:1529:73> line:1527:5 atomic_fetch_sub '_ITp (volatile atomic<_ITp> *, __atomic_diff_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf26c40 <col:22, col:45> col:45 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xf26e98 <line:1528:8, col:30> col:30 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   `-CompoundStmt 0xf271f8 <line:1529:5, col:73>
| |     `-ReturnStmt 0xf271e8 <col:7, col:70>
| |       `-CallExpr 0xf271b0 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf27100 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_sub_explicit' 0xf1fbf0 0xf1f440
| |         |-DeclRefExpr 0xf27150 <col:40> 'volatile atomic<_ITp> *' lvalue ParmVar 0xf26c40 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xf27170 <col:45> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xf26e98 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xf27190 <col:50> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf27770 <line:1531:3, line:1535:73> line:1533:5 atomic_fetch_and
| | |-TemplateTypeParmDecl 0xf27210 <line:1531:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf276d0 <line:1532:5, line:1535:73> line:1533:5 atomic_fetch_and '_ITp (__atomic_base<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf27360 <col:22, col:43> col:43 referenced __a '__atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xf275b8 <line:1534:8, col:29> col:29 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf27948 <line:1535:5, col:73>
| |     `-ReturnStmt 0xf27938 <col:7, col:70>
| |       `-CallExpr 0xf27900 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf27850 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_and_explicit' 0xf20c20 0xf20410
| |         |-DeclRefExpr 0xf278a0 <col:40> '__atomic_base<_ITp> *' lvalue ParmVar 0xf27360 '__a' '__atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xf278c0 <col:45> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf275b8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf278e0 <col:50> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf27ec0 <line:1537:3, line:1541:73> line:1539:5 atomic_fetch_and
| | |-TemplateTypeParmDecl 0xf27960 <line:1537:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf27e20 <line:1538:5, line:1541:73> line:1539:5 atomic_fetch_and '_ITp (volatile __atomic_base<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf27ab0 <col:22, col:52> col:52 referenced __a 'volatile __atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xf27d08 <line:1540:8, col:29> col:29 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf280a8 <line:1541:5, col:73>
| |     `-ReturnStmt 0xf28098 <col:7, col:70>
| |       `-CallExpr 0xf28060 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf27fb0 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_and_explicit' 0xf20c20 0xf20410
| |         |-DeclRefExpr 0xf28000 <col:40> 'volatile __atomic_base<_ITp> *' lvalue ParmVar 0xf27ab0 '__a' 'volatile __atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xf28020 <col:45> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf27d08 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf28040 <col:50> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf285e0 <line:1543:3, line:1547:72> line:1545:5 atomic_fetch_or
| | |-TemplateTypeParmDecl 0xf280c0 <line:1543:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf28540 <line:1544:5, line:1547:72> line:1545:5 atomic_fetch_or '_ITp (__atomic_base<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf28210 <col:21, col:42> col:42 referenced __a '__atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xf28468 <line:1546:7, col:28> col:28 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf287b8 <line:1547:5, col:72>
| |     `-ReturnStmt 0xf287a8 <col:7, col:69>
| |       `-CallExpr 0xf28770 <col:14, col:69> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf286c0 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_or_explicit' 0xf21b70 0xf213d0
| |         |-DeclRefExpr 0xf28710 <col:39> '__atomic_base<_ITp> *' lvalue ParmVar 0xf28210 '__a' '__atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xf28730 <col:44> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf28468 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf28750 <col:49> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf28cf0 <line:1549:3, line:1553:72> line:1551:5 atomic_fetch_or
| | |-TemplateTypeParmDecl 0xf287d0 <line:1549:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf28c50 <line:1550:5, line:1553:72> line:1551:5 atomic_fetch_or '_ITp (volatile __atomic_base<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf28920 <col:21, col:51> col:51 referenced __a 'volatile __atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xf28b78 <line:1552:7, col:28> col:28 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf28ed8 <line:1553:5, col:72>
| |     `-ReturnStmt 0xf28ec8 <col:7, col:69>
| |       `-CallExpr 0xf28e90 <col:14, col:69> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf28de0 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_or_explicit' 0xf21b70 0xf213d0
| |         |-DeclRefExpr 0xf28e30 <col:39> 'volatile __atomic_base<_ITp> *' lvalue ParmVar 0xf28920 '__a' 'volatile __atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xf28e50 <col:44> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf28b78 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf28e70 <col:49> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xf29410 <line:1555:3, line:1559:73> line:1557:5 atomic_fetch_xor
| | |-TemplateTypeParmDecl 0xf28ef0 <line:1555:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xf29370 <line:1556:5, line:1559:73> line:1557:5 atomic_fetch_xor '_ITp (__atomic_base<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xf29040 <col:22, col:43> col:43 referenced __a '__atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xf29298 <line:1558:8, col:29> col:29 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xf295e8 <line:1559:5, col:73>
| |     `-ReturnStmt 0xf295d8 <col:7, col:70>
| |       `-CallExpr 0xf295a0 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xf294f0 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_xor_explicit' 0xf22ac0 0xf22320
| |         |-DeclRefExpr 0xf29540 <col:40> '__atomic_base<_ITp> *' lvalue ParmVar 0xf29040 '__a' '__atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xf29560 <col:45> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf29298 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xf29580 <col:50> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
| `-FunctionTemplateDecl 0xf29b20 <line:1561:3, line:1565:73> line:1563:5 atomic_fetch_xor
|   |-TemplateTypeParmDecl 0xf29600 <line:1561:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
|   `-FunctionDecl 0xf29a80 <line:1562:5, line:1565:73> line:1563:5 atomic_fetch_xor '_ITp (volatile __atomic_base<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
|     |-ParmVarDecl 0xf29750 <col:22, col:52> col:52 referenced __a 'volatile __atomic_base<_ITp> *'
|     |-ParmVarDecl 0xf299a8 <line:1564:8, col:29> col:29 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
|     `-CompoundStmt 0xf29d08 <line:1565:5, col:73>
|       `-ReturnStmt 0xf29cf8 <col:7, col:70>
|         `-CallExpr 0xf29cc0 <col:14, col:70> '<dependent type>'
|           |-UnresolvedLookupExpr 0xf29c10 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_xor_explicit' 0xf22ac0 0xf22320
|           |-DeclRefExpr 0xf29c60 <col:40> 'volatile __atomic_base<_ITp> *' lvalue ParmVar 0xf29750 '__a' 'volatile __atomic_base<_ITp> *'
|           |-DeclRefExpr 0xf29c80 <col:45> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xf299a8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
|           `-DeclRefExpr 0xf29ca0 <col:50> 'std::memory_order' EnumConstant 0xe1eac0 'memory_order_seq_cst' 'std::memory_order'
|-LinkageSpecDecl 0xe72308 <line:271:2> col:2 implicit C
| `-FunctionDecl 0xe72358 <col:2> col:2 implicit referenced __atomic_store 'void (...)' extern
|   `-BuiltinAttr 0xe723f8 <<invalid sloc>> Implicit 634
|-LinkageSpecDecl 0xe72c38 <line:285:2> col:2 implicit C
| `-FunctionDecl 0xe72c88 <col:2> col:2 implicit referenced __atomic_load 'void (...)' extern
|   `-BuiltinAttr 0xe72d28 <<invalid sloc>> Implicit 632
|-LinkageSpecDecl 0xe737a8 <line:303:2> col:2 implicit C
| `-FunctionDecl 0xe737f8 <col:2> col:2 implicit referenced __atomic_exchange 'void (...)' extern
|   `-BuiltinAttr 0xe73898 <<invalid sloc>> Implicit 636
|-LinkageSpecDecl 0xe741a0 <line:323:9> col:9 implicit C
| `-FunctionDecl 0xe741f0 <col:9> col:9 implicit referenced __atomic_compare_exchange 'void (...)' extern
|   `-BuiltinAttr 0xe74290 <<invalid sloc>> Implicit 638
|-CXXRecordDecl 0xf29d20 <cpp_tests/atomic.cpp:3:1, line:8:1> line:3:8 referenced struct testStruct definition
| |-DefinitionData aggregate standard_layout trivially_copyable trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists trivial needs_overload_resolution
| | |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment exists trivial needs_overload_resolution
| | `-Destructor simple irrelevant trivial needs_overload_resolution
| |-CXXRecordDecl 0xf29e38 <col:1, col:8> col:8 implicit struct testStruct
| |-FieldDecl 0xf29ee0 <line:5:3, col:7> col:7 x 'int'
| |-FieldDecl 0xf29f48 <line:6:3, col:10> col:10 y 'double'
| |-FieldDecl 0xf2a040 <line:7:3, col:20> col:20 z 'std::atomic_bool':'std::atomic<bool>'
| |-CXXConstructorDecl 0xf2b5c0 <line:3:8> col:8 implicit testStruct 'void (const testStruct &)' inline default_delete trivial noexcept-unevaluated 0xf2b5c0
| | `-ParmVarDecl 0xf2b6d8 <col:8> col:8 'const testStruct &'
| |-CXXConstructorDecl 0xf2b778 <col:8> col:8 implicit testStruct 'void (testStruct &&)' inline default_delete trivial noexcept-unevaluated 0xf2b778
| | `-ParmVarDecl 0xf2b888 <col:8> col:8 'testStruct &&'
| |-CXXMethodDecl 0xf2b938 <col:8> col:8 implicit operator= 'testStruct &(const testStruct &)' inline default_delete trivial noexcept-unevaluated 0xf2b938
| | `-ParmVarDecl 0xf2ba48 <col:8> col:8 'const testStruct &'
| |-CXXMethodDecl 0xf2bab8 <col:8> col:8 implicit operator= 'testStruct &(testStruct &&)' inline default_delete trivial noexcept-unevaluated 0xf2bab8
| | `-ParmVarDecl 0xf2bbc8 <col:8> col:8 'testStruct &&'
| |-CXXDestructorDecl 0xf2bc60 <col:8> col:8 implicit ~testStruct 'void ()' inline default trivial noexcept-unevaluated 0xf2bc60
| `-CXXConstructorDecl 0xf32f90 <col:8> col:8 implicit used testStruct 'void () noexcept' inline default trivial
|   |-CXXCtorInitializer Field 0xf2a040 'z' 'std::atomic_bool':'std::atomic<bool>'
|   | `-CXXConstructExpr 0xf33080 <col:8> 'std::atomic_bool':'std::atomic<bool>' 'void () noexcept'
|   `-CompoundStmt 0xf330d0 <col:8>
|-VarDecl 0xf2bde0 <line:10:1, col:21> col:21 used i 'std::atomic_int32_t':'std::atomic<int>' callinit
| `-CXXConstructExpr 0xf2bf18 <col:21> 'std::atomic_int32_t':'std::atomic<int>' 'void () noexcept'
|-VarDecl 0xf2bfe8 <line:11:1, col:21> col:21 used j 'std::atomic_int32_t':'std::atomic<int>' callinit
| `-CXXConstructExpr 0xf2c050 <col:21> 'std::atomic_int32_t':'std::atomic<int>' 'void () noexcept'
|-VarDecl 0xf2c120 <line:12:1, col:21> col:21 k 'std::atomic_int32_t':'std::atomic<int>' callinit
| `-CXXConstructExpr 0xf2c188 <col:21> 'std::atomic_int32_t':'std::atomic<int>' 'void () noexcept'
|-VarDecl 0xf2c258 <line:15:1, col:18> col:18 used b 'std::atomic_bool':'std::atomic<bool>' callinit
| `-CXXConstructExpr 0xf2c358 <col:18> 'std::atomic_bool':'std::atomic<bool>' 'void () noexcept'
|-VarDecl 0xf2c5e0 <line:16:1, col:25> col:25 c 'std::atomic<testStruct>':'std::atomic<testStruct>' callinit
| `-CXXConstructExpr 0xf332c0 <col:25> 'std::atomic<testStruct>':'std::atomic<testStruct>' 'void () noexcept'
`-FunctionDecl 0xf33368 <line:18:1, line:31:1> line:18:5 main 'int ()'
  `-CompoundStmt 0xf33d28 <line:19:1, line:31:1>
    |-DeclStmt 0xf33608 <line:20:3, col:13>
    | `-VarDecl 0xf33448 <col:3, col:12> col:8 a 'bool' cinit
    |   `-ImplicitCastExpr 0xf335f0 <col:12> 'bool' <UserDefinedConversion>
    |     `-CXXMemberCallExpr 0xf335d0 <col:12> 'bool'
    |       `-MemberExpr 0xf335a0 <col:12> '<bound member function type>' .operator bool 0xe68da0
    |         `-ImplicitCastExpr 0xf33588 <col:12> 'const std::atomic<bool>' lvalue <NoOp>
    |           `-DeclRefExpr 0xf334b0 <col:12> 'std::atomic_bool':'std::atomic<bool>' lvalue Var 0xf2c258 'b' 'std::atomic_bool':'std::atomic<bool>'
    |-DeclStmt 0xf33938 <line:22:3, col:16>
    | `-VarDecl 0xf33638 <col:3, col:15> col:7 l 'int' cinit
    |   `-BinaryOperator 0xf33918 <col:11, col:15> 'int' '+'
    |     |-ImplicitCastExpr 0xf33860 <col:11> 'std::__atomic_base<int>::__int_type':'int' <UserDefinedConversion>
    |     | `-CXXMemberCallExpr 0xf33840 <col:11> 'std::__atomic_base<int>::__int_type':'int'
    |     |   `-MemberExpr 0xf337f8 <col:11> '<bound member function type>' .operator int 0xeb4988
    |     |     `-ImplicitCastExpr 0xf337d8 <col:11> 'const std::__atomic_base<int>' lvalue <UncheckedDerivedToBase (__atomic_base)>
    |     |       `-DeclRefExpr 0xf336a0 <col:11> 'std::atomic_int32_t':'std::atomic<int>' lvalue Var 0xf2bde0 'i' 'std::atomic_int32_t':'std::atomic<int>'
    |     `-ImplicitCastExpr 0xf33900 <col:15> 'std::__atomic_base<int>::__int_type':'int' <UserDefinedConversion>
    |       `-CXXMemberCallExpr 0xf338e0 <col:15> 'std::__atomic_base<int>::__int_type':'int'
    |         `-MemberExpr 0xf33898 <col:15> '<bound member function type>' .operator int 0xeb4988
    |           `-ImplicitCastExpr 0xf33878 <col:15> 'const std::__atomic_base<int>' lvalue <UncheckedDerivedToBase (__atomic_base)>
    |             `-DeclRefExpr 0xf336c0 <col:15> 'std::atomic_int32_t':'std::atomic<int>' lvalue Var 0xf2bfe8 'j' 'std::atomic_int32_t':'std::atomic<int>'
    |-DeclStmt 0xf339d0 <line:23:3, col:8>
    | `-VarDecl 0xf33968 <col:3, col:7> col:7 used m 'int'
    |-BinaryOperator 0xf33ba8 <line:24:3, col:11> 'int' lvalue '='
    | |-DeclRefExpr 0xf339e8 <col:3> 'int' lvalue Var 0xf33968 'm' 'int'
    | `-BinaryOperator 0xf33b88 <col:7, col:11> 'int' '+'
    |   |-ImplicitCastExpr 0xf33ad0 <col:7> 'std::__atomic_base<int>::__int_type':'int' <UserDefinedConversion>
    |   | `-CXXMemberCallExpr 0xf33ab0 <col:7> 'std::__atomic_base<int>::__int_type':'int'
    |   |   `-MemberExpr 0xf33a68 <col:7> '<bound member function type>' .operator int 0xeb4988
    |   |     `-ImplicitCastExpr 0xf33a48 <col:7> 'const std::__atomic_base<int>' lvalue <UncheckedDerivedToBase (__atomic_base)>
    |   |       `-DeclRefExpr 0xf33a08 <col:7> 'std::atomic_int32_t':'std::atomic<int>' lvalue Var 0xf2bde0 'i' 'std::atomic_int32_t':'std::atomic<int>'
    |   `-ImplicitCastExpr 0xf33b70 <col:11> 'std::__atomic_base<int>::__int_type':'int' <UserDefinedConversion>
    |     `-CXXMemberCallExpr 0xf33b50 <col:11> 'std::__atomic_base<int>::__int_type':'int'
    |       `-MemberExpr 0xf33b08 <col:11> '<bound member function type>' .operator int 0xeb4988
    |         `-ImplicitCastExpr 0xf33ae8 <col:11> 'const std::__atomic_base<int>' lvalue <UncheckedDerivedToBase (__atomic_base)>
    |           `-DeclRefExpr 0xf33a28 <col:11> 'std::atomic_int32_t':'std::atomic<int>' lvalue Var 0xf2bfe8 'j' 'std::atomic_int32_t':'std::atomic<int>'
    |-UnaryOperator 0xf33be8 <line:26:3, col:4> 'int' postfix '++'
    | `-DeclRefExpr 0xf33bc8 <col:3> 'int' lvalue Var 0xf33968 'm' 'int'
    |-CompoundAssignOperator 0xf33c40 <line:27:3, col:8> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | |-DeclRefExpr 0xf33c00 <col:3> 'int' lvalue Var 0xf33968 'm' 'int'
    | `-IntegerLiteral 0xf33c20 <col:8> 'int' 5
    |-CompoundAssignOperator 0xf33cc8 <line:28:3, col:9> 'int' lvalue '>>=' ComputeLHSTy='int' ComputeResultTy='int'
    | |-DeclRefExpr 0xf33c70 <col:3> 'int' lvalue Var 0xf33968 'm' 'int'
    | `-IntegerLiteral 0xf33c90 <col:9> 'int' 5
    `-ReturnStmt 0xf33d18 <line:30:3, col:10>
      `-IntegerLiteral 0xf33cf8 <col:10> 'int' 0
