# <- type = PUNCTUATION
include <- type = IDENTIFIER
< <- type = PUNCTUATION
iostream <- type = IDENTIFIER
> <- type = PUNCTUATION
# <- type = PUNCTUATION
include <- type = IDENTIFIER
< <- type = PUNCTUATION
memory <- type = IDENTIFIER
> <- type = PUNCTUATION
# <- type = PUNCTUATION
include <- type = IDENTIFIER
< <- type = PUNCTUATION
mutex <- type = IDENTIFIER
> <- type = PUNCTUATION
class <- type = KEYWORD
IMyCallback <- type = IDENTIFIER
// Callback interface <- type = COMMENT
{ <- type = PUNCTUATION
public <- type = KEYWORD
: <- type = PUNCTUATION
virtual <- type = KEYWORD
~ <- type = PUNCTUATION
IMyCallback <- type = IDENTIFIER
( <- type = PUNCTUATION
) <- type = PUNCTUATION
= <- type = PUNCTUATION
0 <- type = LITERAL
; <- type = PUNCTUATION
virtual <- type = KEYWORD
void <- type = KEYWORD
onSomethingHappend <- type = IDENTIFIER
( <- type = PUNCTUATION
int <- type = KEYWORD
value <- type = IDENTIFIER
) <- type = PUNCTUATION
= <- type = PUNCTUATION
0 <- type = LITERAL
; <- type = PUNCTUATION
virtual <- type = KEYWORD
void <- type = KEYWORD
onErrorHappend <- type = IDENTIFIER
( <- type = PUNCTUATION
) <- type = PUNCTUATION
= <- type = PUNCTUATION
0 <- type = LITERAL
; <- type = PUNCTUATION
} <- type = PUNCTUATION
; <- type = PUNCTUATION
class <- type = KEYWORD
MyClass <- type = IDENTIFIER
// Class that needs to be made threadsafe. <- type = COMMENT
{ <- type = PUNCTUATION
public <- type = KEYWORD
: <- type = PUNCTUATION
MyClass <- type = IDENTIFIER
( <- type = PUNCTUATION
std <- type = IDENTIFIER
:: <- type = PUNCTUATION
shared_ptr <- type = IDENTIFIER
< <- type = PUNCTUATION
IMyCallback <- type = IDENTIFIER
> <- type = PUNCTUATION
callback <- type = IDENTIFIER
) <- type = PUNCTUATION
: <- type = PUNCTUATION
mCallback <- type = IDENTIFIER
( <- type = PUNCTUATION
callback <- type = IDENTIFIER
) <- type = PUNCTUATION
{ <- type = PUNCTUATION
} <- type = PUNCTUATION
void <- type = KEYWORD
doSomething <- type = IDENTIFIER
( <- type = PUNCTUATION
) <- type = PUNCTUATION
{ <- type = PUNCTUATION
{ <- type = PUNCTUATION
std <- type = IDENTIFIER
:: <- type = PUNCTUATION
lock_guard <- type = IDENTIFIER
< <- type = PUNCTUATION
std <- type = IDENTIFIER
:: <- type = PUNCTUATION
mutex <- type = IDENTIFIER
> <- type = PUNCTUATION
lock <- type = IDENTIFIER
( <- type = PUNCTUATION
mDataMutex <- type = IDENTIFIER
) <- type = PUNCTUATION
; <- type = PUNCTUATION
// CriticalSection starts <- type = COMMENT
calculate <- type = IDENTIFIER
( <- type = PUNCTUATION
) <- type = PUNCTUATION
; <- type = PUNCTUATION
mCallback <- type = IDENTIFIER
-> <- type = PUNCTUATION
onSomethingHappend <- type = IDENTIFIER
( <- type = PUNCTUATION
mInternalState <- type = IDENTIFIER
) <- type = PUNCTUATION
; <- type = PUNCTUATION
// Uh oh! We're calling outside of a locked scope <- type = COMMENT
} <- type = PUNCTUATION
// CriticalSection ends <- type = COMMENT
} <- type = PUNCTUATION
int <- type = KEYWORD
readState <- type = IDENTIFIER
( <- type = PUNCTUATION
) <- type = PUNCTUATION
{ <- type = PUNCTUATION
std <- type = IDENTIFIER
:: <- type = PUNCTUATION
lock_guard <- type = IDENTIFIER
< <- type = PUNCTUATION
std <- type = IDENTIFIER
:: <- type = PUNCTUATION
mutex <- type = IDENTIFIER
> <- type = PUNCTUATION
lock <- type = IDENTIFIER
( <- type = PUNCTUATION
mDataMutex <- type = IDENTIFIER
) <- type = PUNCTUATION
; <- type = PUNCTUATION
// Accessing the same lock as in `doSomething()` <- type = COMMENT
return <- type = KEYWORD
mInternalState <- type = IDENTIFIER
; <- type = PUNCTUATION
} <- type = PUNCTUATION
private <- type = KEYWORD
: <- type = PUNCTUATION
void <- type = KEYWORD
calculate <- type = IDENTIFIER
( <- type = PUNCTUATION
) <- type = PUNCTUATION
{ <- type = PUNCTUATION
mInternalState <- type = IDENTIFIER
= <- type = PUNCTUATION
mInternalState <- type = IDENTIFIER
+ <- type = PUNCTUATION
1 <- type = LITERAL
; <- type = PUNCTUATION
// Modifying some internal state that needs to be synchronised. <- type = COMMENT
} <- type = PUNCTUATION
std <- type = IDENTIFIER
:: <- type = PUNCTUATION
shared_ptr <- type = IDENTIFIER
< <- type = PUNCTUATION
IMyCallback <- type = IDENTIFIER
> <- type = PUNCTUATION
mCallback <- type = IDENTIFIER
; <- type = PUNCTUATION
std <- type = IDENTIFIER
:: <- type = PUNCTUATION
mutex <- type = IDENTIFIER
mDataMutex <- type = IDENTIFIER
; <- type = PUNCTUATION
int <- type = KEYWORD
mInternalState <- type = IDENTIFIER
= <- type = PUNCTUATION
0 <- type = LITERAL
; <- type = PUNCTUATION
} <- type = PUNCTUATION
; <- type = PUNCTUATION
class <- type = KEYWORD
ReEntrantCallbackImpl <- type = IDENTIFIER
: <- type = PUNCTUATION
public <- type = KEYWORD
IMyCallback <- type = IDENTIFIER
// Implementation of callback interface  <- type = COMMENT
{ <- type = PUNCTUATION
public <- type = KEYWORD
: <- type = PUNCTUATION
ReEntrantCallbackImpl <- type = IDENTIFIER
( <- type = PUNCTUATION
) <- type = PUNCTUATION
{ <- type = PUNCTUATION
} <- type = PUNCTUATION
void <- type = KEYWORD
init <- type = IDENTIFIER
( <- type = PUNCTUATION
std <- type = IDENTIFIER
:: <- type = PUNCTUATION
shared_ptr <- type = IDENTIFIER
< <- type = PUNCTUATION
MyClass <- type = IDENTIFIER
> <- type = PUNCTUATION
myClass <- type = IDENTIFIER
) <- type = PUNCTUATION
{ <- type = PUNCTUATION
mMyClass <- type = IDENTIFIER
= <- type = PUNCTUATION
myClass <- type = IDENTIFIER
; <- type = PUNCTUATION
} <- type = PUNCTUATION
void <- type = KEYWORD
onSomethingHappend <- type = IDENTIFIER
( <- type = PUNCTUATION
int <- type = KEYWORD
value <- type = IDENTIFIER
) <- type = PUNCTUATION
override <- type = IDENTIFIER
{ <- type = PUNCTUATION
std <- type = IDENTIFIER
:: <- type = PUNCTUATION
cout <- type = IDENTIFIER
<< <- type = PUNCTUATION
"Current value is: " <- type = LITERAL
<< <- type = PUNCTUATION
mMyClass <- type = IDENTIFIER
-> <- type = PUNCTUATION
readState <- type = IDENTIFIER
( <- type = PUNCTUATION
) <- type = PUNCTUATION
; <- type = PUNCTUATION
// Calling `mMyClass->readState()` will access the lock.  <- type = COMMENT
} <- type = PUNCTUATION
void <- type = KEYWORD
onErrorHappend <- type = IDENTIFIER
( <- type = PUNCTUATION
) <- type = PUNCTUATION
override <- type = IDENTIFIER
{ <- type = PUNCTUATION
} <- type = PUNCTUATION
private <- type = KEYWORD
: <- type = PUNCTUATION
std <- type = IDENTIFIER
:: <- type = PUNCTUATION
shared_ptr <- type = IDENTIFIER
< <- type = PUNCTUATION
MyClass <- type = IDENTIFIER
> <- type = PUNCTUATION
mMyClass <- type = IDENTIFIER
; <- type = PUNCTUATION
} <- type = PUNCTUATION
; <- type = PUNCTUATION
int <- type = KEYWORD
main <- type = IDENTIFIER
( <- type = PUNCTUATION
) <- type = PUNCTUATION
{ <- type = PUNCTUATION
auto <- type = KEYWORD
callback <- type = IDENTIFIER
= <- type = PUNCTUATION
std <- type = IDENTIFIER
:: <- type = PUNCTUATION
make_shared <- type = IDENTIFIER
< <- type = PUNCTUATION
ReEntrantCallbackImpl <- type = IDENTIFIER
> <- type = PUNCTUATION
( <- type = PUNCTUATION
) <- type = PUNCTUATION
; <- type = PUNCTUATION
auto <- type = KEYWORD
myClass <- type = IDENTIFIER
= <- type = PUNCTUATION
std <- type = IDENTIFIER
:: <- type = PUNCTUATION
make_shared <- type = IDENTIFIER
< <- type = PUNCTUATION
MyClass <- type = IDENTIFIER
> <- type = PUNCTUATION
( <- type = PUNCTUATION
callback <- type = IDENTIFIER
) <- type = PUNCTUATION
; <- type = PUNCTUATION
callback <- type = IDENTIFIER
-> <- type = PUNCTUATION
init <- type = IDENTIFIER
( <- type = PUNCTUATION
myClass <- type = IDENTIFIER
) <- type = PUNCTUATION
; <- type = PUNCTUATION
myClass <- type = IDENTIFIER
-> <- type = PUNCTUATION
doSomething <- type = IDENTIFIER
( <- type = PUNCTUATION
) <- type = PUNCTUATION
; <- type = PUNCTUATION
// Deadlock or crash <- type = COMMENT
} <- type = PUNCTUATION
