TranslationUnitDecl 0x826198 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x826a00 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x826760 '__int128'
|-TypedefDecl 0x826a70 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x826780 'unsigned __int128'
|-TypedefDecl 0x826de8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x826b60 '__NSConstantString_tag'
|   `-CXXRecord 0x826ac8 '__NSConstantString_tag'
|-TypedefDecl 0x826e80 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x826e40 'char *'
|   `-BuiltinType 0x826240 'char'
|-TypedefDecl 0x86b7b8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag[1]'
| `-ConstantArrayType 0x86b760 '__va_list_tag[1]' 1 
|   `-RecordType 0x826f70 '__va_list_tag'
|     `-CXXRecord 0x826ed8 '__va_list_tag'
|-NamespaceDecl 0x86b810 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:296:1, line:315:1> line:296:11 std
| |-TypedefDecl 0x86b898 <line:298:3, col:26> col:26 referenced size_t 'unsigned long'
| | `-BuiltinType 0x826360 'unsigned long'
| |-TypedefDecl 0x86b908 <line:299:3, col:28> col:28 referenced ptrdiff_t 'long'
| | `-BuiltinType 0x8262c0 'long'
| |-TypedefDecl 0x86b9a8 <line:302:3, col:29> col:29 referenced nullptr_t 'decltype(nullptr)':'std::nullptr_t'
| | `-DecltypeType 0x86b970 'decltype(nullptr)' sugar
| |   |-CXXNullPtrLiteralExpr 0x86b960 <col:20> 'std::nullptr_t'
| |   `-BuiltinType 0x826990 'std::nullptr_t'
| `-LinkageSpecDecl 0x86ba98 <line:308:3, line:313:3> line:308:10 C++
|   `-FunctionDecl 0x86bbd0 <col:16, line:313:3> line:309:15 __terminate 'void () __attribute__((noreturn)) noexcept' inline
|     |-CompoundStmt 0x86bef0 <line:310:3, line:313:3>
|     | |-DeclStmt 0x86be20 <line:311:5, col:74>
|     | | `-FunctionDecl 0x86bd18 parent 0x86ba98 <col:5, col:73> col:10 used terminate 'void () __attribute__((noreturn)) noexcept'
|     | |   `-VisibilityAttr 0x86bdc8 <line:305:13> Implicit Default
|     | `-CallExpr 0x86bed0 <line:312:5, col:15> 'void'
|     |   `-ImplicitCastExpr 0x86beb8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <FunctionToPointerDecay>
|     |     `-DeclRefExpr 0x86be38 <col:5> 'void () __attribute__((noreturn)) noexcept' lvalue Function 0x86bd18 'terminate' 'void () __attribute__((noreturn)) noexcept'
|     |-AlwaysInlineAttr 0x86bc70 <line:308:46> always_inline
|     `-VisibilityAttr 0x86bcc8 <line:305:13> Implicit Default
|-NamespaceDecl 0x86bf10 prev 0x86b810 <line:329:1, line:332:1> line:329:11 std
| |-original Namespace 0x86b810 'std'
| `-NamespaceDecl 0x86c018 <line:331:3, col:69> col:20 __cxx11 inline
|   `-AbiTagAttr 0x86c088 <col:43, col:63> cxx11
|-NamespaceDecl 0x86c108 <line:333:1, line:336:1> line:333:11 __gnu_cxx
| `-NamespaceDecl 0x86c198 <line:335:3, col:69> col:20 __cxx11 inline
|   `-AbiTagAttr 0x86c208 <col:43, col:63> cxx11
|-NamespaceDecl 0x86c288 prev 0x86bf10 <line:508:1, line:529:1> line:508:11 std
| |-original Namespace 0x86b810 'std'
| `-FunctionDecl 0x86c380 <line:153:30, line:527:3> line:516:3 used constexpr __is_constant_evaluated 'bool () noexcept' inline
|   |-CompoundStmt 0x86c6f0 <line:517:3, line:527:3>
|   | `-ReturnStmt 0x86c6e0 <line:523:5, col:44>
|   |   `-CallExpr 0x86c6c0 <col:12, col:44> 'bool'
|   |     `-ImplicitCastExpr 0x86c6a8 <col:12> 'bool (*)() noexcept' <BuiltinFnToFnPtr>
|   |       `-DeclRefExpr 0x86c630 <col:12> '<builtin fn type>' Function 0x86c4c8 '__builtin_is_constant_evaluated' 'bool () noexcept'
|   `-VisibilityAttr 0x86c420 <line:510:13> Implicit Default
|-LinkageSpecDecl 0x86c478 <line:523:12> col:12 implicit C
| `-FunctionDecl 0x86c4c8 <col:12> col:12 implicit used __builtin_is_constant_evaluated 'bool () noexcept' extern
|   |-BuiltinAttr 0x86c568 <<invalid sloc>> Implicit 455
|   `-NoThrowAttr 0x86c5c0 <col:12> Implicit
|-TypedefDecl 0x8eba60 </usr/include/x86_64-linux-gnu/bits/types.h:31:1, col:23> col:23 __u_char 'unsigned char'
| `-BuiltinType 0x826300 'unsigned char'
|-TypedefDecl 0x8ebad0 <line:32:1, col:28> col:28 __u_short 'unsigned short'
| `-BuiltinType 0x826320 'unsigned short'
|-TypedefDecl 0x8ebb40 <line:33:1, col:22> col:22 __u_int 'unsigned int'
| `-BuiltinType 0x826340 'unsigned int'
|-TypedefDecl 0x8ebbb0 <line:34:1, col:27> col:27 __u_long 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8ebc20 <line:37:1, col:21> col:21 referenced __int8_t 'signed char'
| `-BuiltinType 0x826260 'signed char'
|-TypedefDecl 0x8ebc90 <line:38:1, col:23> col:23 referenced __uint8_t 'unsigned char'
| `-BuiltinType 0x826300 'unsigned char'
|-TypedefDecl 0x8ebd00 <line:39:1, col:26> col:26 referenced __int16_t 'short'
| `-BuiltinType 0x826280 'short'
|-TypedefDecl 0x8ebd70 <line:40:1, col:28> col:28 referenced __uint16_t 'unsigned short'
| `-BuiltinType 0x826320 'unsigned short'
|-TypedefDecl 0x8ebde0 <line:41:1, col:20> col:20 referenced __int32_t 'int'
| `-BuiltinType 0x8262a0 'int'
|-TypedefDecl 0x8ebe50 <line:42:1, col:22> col:22 referenced __uint32_t 'unsigned int'
| `-BuiltinType 0x826340 'unsigned int'
|-TypedefDecl 0x8ebec0 <line:44:1, col:25> col:25 referenced __int64_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8ebf30 <line:45:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8ebfc0 <line:52:1, col:18> col:18 referenced __int_least8_t '__int8_t':'signed char'
| `-TypedefType 0x8ebf90 '__int8_t' sugar
|   |-Typedef 0x8ebc20 '__int8_t'
|   `-BuiltinType 0x826260 'signed char'
|-TypedefDecl 0x8ec050 <line:53:1, col:19> col:19 referenced __uint_least8_t '__uint8_t':'unsigned char'
| `-TypedefType 0x8ec020 '__uint8_t' sugar
|   |-Typedef 0x8ebc90 '__uint8_t'
|   `-BuiltinType 0x826300 'unsigned char'
|-TypedefDecl 0x8ec0e0 <line:54:1, col:19> col:19 referenced __int_least16_t '__int16_t':'short'
| `-TypedefType 0x8ec0b0 '__int16_t' sugar
|   |-Typedef 0x8ebd00 '__int16_t'
|   `-BuiltinType 0x826280 'short'
|-TypedefDecl 0x8ec170 <line:55:1, col:20> col:20 referenced __uint_least16_t '__uint16_t':'unsigned short'
| `-TypedefType 0x8ec140 '__uint16_t' sugar
|   |-Typedef 0x8ebd70 '__uint16_t'
|   `-BuiltinType 0x826320 'unsigned short'
|-TypedefDecl 0x8ec200 <line:56:1, col:19> col:19 referenced __int_least32_t '__int32_t':'int'
| `-TypedefType 0x8ec1d0 '__int32_t' sugar
|   |-Typedef 0x8ebde0 '__int32_t'
|   `-BuiltinType 0x8262a0 'int'
|-TypedefDecl 0x8ec290 <line:57:1, col:20> col:20 referenced __uint_least32_t '__uint32_t':'unsigned int'
| `-TypedefType 0x8ec260 '__uint32_t' sugar
|   |-Typedef 0x8ebe50 '__uint32_t'
|   `-BuiltinType 0x826340 'unsigned int'
|-TypedefDecl 0x8ec320 <line:58:1, col:19> col:19 referenced __int_least64_t '__int64_t':'long'
| `-TypedefType 0x8ec2f0 '__int64_t' sugar
|   |-Typedef 0x8ebec0 '__int64_t'
|   `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8ec3b0 <line:59:1, col:20> col:20 referenced __uint_least64_t '__uint64_t':'unsigned long'
| `-TypedefType 0x8ec380 '__uint64_t' sugar
|   |-Typedef 0x8ebf30 '__uint64_t'
|   `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8ec420 <line:63:1, col:18> col:18 __quad_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8ec490 <line:64:1, col:27> col:27 __u_quad_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8ec500 <line:72:1, col:18> col:18 referenced __intmax_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8ec570 <line:73:1, col:27> col:27 referenced __uintmax_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8ec5e0 <line:137:22, line:145:25> col:25 __dev_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8ec650 <line:137:22, line:146:25> col:25 __uid_t 'unsigned int'
| `-BuiltinType 0x826340 'unsigned int'
|-TypedefDecl 0x8ec6c0 <line:137:22, line:147:25> col:25 __gid_t 'unsigned int'
| `-BuiltinType 0x826340 'unsigned int'
|-TypedefDecl 0x8ec730 <line:137:22, line:148:25> col:25 __ino_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8ec7a0 <line:137:22, line:149:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8ec810 <line:137:22, line:150:26> col:26 __mode_t 'unsigned int'
| `-BuiltinType 0x826340 'unsigned int'
|-TypedefDecl 0x8ec880 <line:137:22, line:151:27> col:27 __nlink_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8ec8f0 <line:137:22, line:152:25> col:25 __off_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8ec960 <line:137:22, line:153:27> col:27 referenced __off64_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8ec9d0 <line:137:22, line:154:25> col:25 __pid_t 'int'
| `-BuiltinType 0x8262a0 'int'
|-CXXRecordDecl 0x8f2af0 </usr/include/x86_64-linux-gnu/bits/typesizes.h:73:24, col:47> col:24 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-FieldDecl 0x8f2cb0 <col:33, col:44> col:37 __val 'int[2]'
|-TypedefDecl 0x8f2d78 </usr/include/x86_64-linux-gnu/bits/types.h:137:22, line:155:26> col:26 __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x8f2d20 'struct __fsid_t' sugar
|   `-RecordType 0x8f2b80 '__fsid_t'
|     `-CXXRecord 0x8f2af0 ''
|-TypedefDecl 0x8f2e00 <line:137:22, line:156:27> col:27 __clock_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8f2e70 <line:137:22, line:157:26> col:26 __rlim_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8f2ee0 <line:137:22, line:158:28> col:28 __rlim64_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8f2f50 <line:137:22, line:159:24> col:24 __id_t 'unsigned int'
| `-BuiltinType 0x826340 'unsigned int'
|-TypedefDecl 0x8f2fc0 <line:137:22, line:160:26> col:26 __time_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8f3030 <line:137:22, line:161:30> col:30 __useconds_t 'unsigned int'
| `-BuiltinType 0x826340 'unsigned int'
|-TypedefDecl 0x8f30a0 <line:137:22, line:162:31> col:31 __suseconds_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8f3110 <line:137:22, line:163:33> col:33 __suseconds64_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8f3180 <line:137:22, line:165:27> col:27 __daddr_t 'int'
| `-BuiltinType 0x8262a0 'int'
|-TypedefDecl 0x8f31f0 <line:137:22, line:166:25> col:25 __key_t 'int'
| `-BuiltinType 0x8262a0 'int'
|-TypedefDecl 0x8f3260 <line:137:22, line:169:29> col:29 __clockid_t 'int'
| `-BuiltinType 0x8262a0 'int'
|-TypedefDecl 0x8f32d0 <line:137:22, line:172:27> col:27 __timer_t 'void *'
| `-PointerType 0x826960 'void *'
|   `-BuiltinType 0x826200 'void'
|-TypedefDecl 0x8f3340 <line:137:22, line:175:29> col:29 __blksize_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8f33b0 <line:137:22, line:180:28> col:28 __blkcnt_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8f3420 <line:137:22, line:181:30> col:30 __blkcnt64_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8f3490 <line:137:22, line:184:30> col:30 __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8f3500 <line:137:22, line:185:32> col:32 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8f3570 <line:137:22, line:188:30> col:30 __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8f35e0 <line:137:22, line:189:32> col:32 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8f3650 <line:137:22, line:192:28> col:28 __fsword_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8f36c0 <line:137:22, line:194:27> col:27 __ssize_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8f3730 <line:137:22, line:197:33> col:33 __syscall_slong_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8f37a0 <line:137:22, line:199:33> col:33 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8f3830 <line:203:1, col:19> col:19 __loff_t '__off64_t':'long'
| `-TypedefType 0x8f3800 '__off64_t' sugar
|   |-Typedef 0x8ec960 '__off64_t'
|   `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8f38a0 <line:204:1, col:15> col:15 __caddr_t 'char *'
| `-PointerType 0x826e40 'char *'
|   `-BuiltinType 0x826240 'char'
|-TypedefDecl 0x8f3910 <line:137:22, line:207:25> col:25 __intptr_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8f3980 <line:137:22, line:210:23> col:23 __socklen_t 'unsigned int'
| `-BuiltinType 0x826340 'unsigned int'
|-TypedefDecl 0x8f39f0 <line:215:1, col:13> col:13 __sig_atomic_t 'int'
| `-BuiltinType 0x8262a0 'int'
|-TypedefDecl 0x8f3a58 </usr/include/x86_64-linux-gnu/bits/stdint-intn.h:24:1, col:18> col:18 referenced int8_t '__int8_t':'signed char'
| `-TypedefType 0x8ebf90 '__int8_t' sugar
|   |-Typedef 0x8ebc20 '__int8_t'
|   `-BuiltinType 0x826260 'signed char'
|-TypedefDecl 0x8fa580 <line:25:1, col:19> col:19 referenced int16_t '__int16_t':'short'
| `-TypedefType 0x8ec0b0 '__int16_t' sugar
|   |-Typedef 0x8ebd00 '__int16_t'
|   `-BuiltinType 0x826280 'short'
|-TypedefDecl 0x8fa5e8 <line:26:1, col:19> col:19 referenced int32_t '__int32_t':'int'
| `-TypedefType 0x8ec1d0 '__int32_t' sugar
|   |-Typedef 0x8ebde0 '__int32_t'
|   `-BuiltinType 0x8262a0 'int'
|-TypedefDecl 0x8fa650 <line:27:1, col:19> col:19 referenced int64_t '__int64_t':'long'
| `-TypedefType 0x8ec2f0 '__int64_t' sugar
|   |-Typedef 0x8ebec0 '__int64_t'
|   `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8fa6b8 </usr/include/x86_64-linux-gnu/bits/stdint-uintn.h:24:1, col:19> col:19 referenced uint8_t '__uint8_t':'unsigned char'
| `-TypedefType 0x8ec020 '__uint8_t' sugar
|   |-Typedef 0x8ebc90 '__uint8_t'
|   `-BuiltinType 0x826300 'unsigned char'
|-TypedefDecl 0x8fa720 <line:25:1, col:20> col:20 referenced uint16_t '__uint16_t':'unsigned short'
| `-TypedefType 0x8ec140 '__uint16_t' sugar
|   |-Typedef 0x8ebd70 '__uint16_t'
|   `-BuiltinType 0x826320 'unsigned short'
|-TypedefDecl 0x8fa788 <line:26:1, col:20> col:20 referenced uint32_t '__uint32_t':'unsigned int'
| `-TypedefType 0x8ec260 '__uint32_t' sugar
|   |-Typedef 0x8ebe50 '__uint32_t'
|   `-BuiltinType 0x826340 'unsigned int'
|-TypedefDecl 0x8fa7f0 <line:27:1, col:20> col:20 referenced uint64_t '__uint64_t':'unsigned long'
| `-TypedefType 0x8ec380 '__uint64_t' sugar
|   |-Typedef 0x8ebf30 '__uint64_t'
|   `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8fa880 </usr/include/stdint.h:43:1, col:24> col:24 referenced int_least8_t '__int_least8_t':'signed char'
| `-TypedefType 0x8fa850 '__int_least8_t' sugar
|   |-Typedef 0x8ebfc0 '__int_least8_t'
|   `-TypedefType 0x8ebf90 '__int8_t' sugar
|     |-Typedef 0x8ebc20 '__int8_t'
|     `-BuiltinType 0x826260 'signed char'
|-TypedefDecl 0x8fa910 <line:44:1, col:25> col:25 referenced int_least16_t '__int_least16_t':'short'
| `-TypedefType 0x8fa8e0 '__int_least16_t' sugar
|   |-Typedef 0x8ec0e0 '__int_least16_t'
|   `-TypedefType 0x8ec0b0 '__int16_t' sugar
|     |-Typedef 0x8ebd00 '__int16_t'
|     `-BuiltinType 0x826280 'short'
|-TypedefDecl 0x8fa9a0 <line:45:1, col:25> col:25 referenced int_least32_t '__int_least32_t':'int'
| `-TypedefType 0x8fa970 '__int_least32_t' sugar
|   |-Typedef 0x8ec200 '__int_least32_t'
|   `-TypedefType 0x8ec1d0 '__int32_t' sugar
|     |-Typedef 0x8ebde0 '__int32_t'
|     `-BuiltinType 0x8262a0 'int'
|-TypedefDecl 0x8faa30 <line:46:1, col:25> col:25 referenced int_least64_t '__int_least64_t':'long'
| `-TypedefType 0x8faa00 '__int_least64_t' sugar
|   |-Typedef 0x8ec320 '__int_least64_t'
|   `-TypedefType 0x8ec2f0 '__int64_t' sugar
|     |-Typedef 0x8ebec0 '__int64_t'
|     `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8faac0 <line:49:1, col:25> col:25 referenced uint_least8_t '__uint_least8_t':'unsigned char'
| `-TypedefType 0x8faa90 '__uint_least8_t' sugar
|   |-Typedef 0x8ec050 '__uint_least8_t'
|   `-TypedefType 0x8ec020 '__uint8_t' sugar
|     |-Typedef 0x8ebc90 '__uint8_t'
|     `-BuiltinType 0x826300 'unsigned char'
|-TypedefDecl 0x8fab50 <line:50:1, col:26> col:26 referenced uint_least16_t '__uint_least16_t':'unsigned short'
| `-TypedefType 0x8fab20 '__uint_least16_t' sugar
|   |-Typedef 0x8ec170 '__uint_least16_t'
|   `-TypedefType 0x8ec140 '__uint16_t' sugar
|     |-Typedef 0x8ebd70 '__uint16_t'
|     `-BuiltinType 0x826320 'unsigned short'
|-TypedefDecl 0x8fabe0 <line:51:1, col:26> col:26 referenced uint_least32_t '__uint_least32_t':'unsigned int'
| `-TypedefType 0x8fabb0 '__uint_least32_t' sugar
|   |-Typedef 0x8ec290 '__uint_least32_t'
|   `-TypedefType 0x8ec260 '__uint32_t' sugar
|     |-Typedef 0x8ebe50 '__uint32_t'
|     `-BuiltinType 0x826340 'unsigned int'
|-TypedefDecl 0x8fac70 <line:52:1, col:26> col:26 referenced uint_least64_t '__uint_least64_t':'unsigned long'
| `-TypedefType 0x8fac40 '__uint_least64_t' sugar
|   |-Typedef 0x8ec3b0 '__uint_least64_t'
|   `-TypedefType 0x8ec380 '__uint64_t' sugar
|     |-Typedef 0x8ebf30 '__uint64_t'
|     `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8face0 <line:58:1, col:22> col:22 referenced int_fast8_t 'signed char'
| `-BuiltinType 0x826260 'signed char'
|-TypedefDecl 0x8fad50 <line:60:1, col:19> col:19 referenced int_fast16_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8fadc0 <line:61:1, col:19> col:19 referenced int_fast32_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8fae30 <line:62:1, col:19> col:19 referenced int_fast64_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8faea0 <line:71:1, col:24> col:24 referenced uint_fast8_t 'unsigned char'
| `-BuiltinType 0x826300 'unsigned char'
|-TypedefDecl 0x8faf10 <line:73:1, col:27> col:27 referenced uint_fast16_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8faf80 <line:74:1, col:27> col:27 referenced uint_fast32_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8faff0 <line:75:1, col:27> col:27 referenced uint_fast64_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8fb060 <line:87:1, col:19> col:19 referenced intptr_t 'long'
| `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8fb0d0 <line:90:1, col:27> col:27 referenced uintptr_t 'unsigned long'
| `-BuiltinType 0x826360 'unsigned long'
|-TypedefDecl 0x8fb160 <line:101:1, col:21> col:21 referenced intmax_t '__intmax_t':'long'
| `-TypedefType 0x8fb130 '__intmax_t' sugar
|   |-Typedef 0x8ec500 '__intmax_t'
|   `-BuiltinType 0x8262c0 'long'
|-TypedefDecl 0x8fb1f0 <line:102:1, col:22> col:22 referenced uintmax_t '__uintmax_t':'unsigned long'
| `-TypedefType 0x8fb1c0 '__uintmax_t' sugar
|   |-Typedef 0x8ec570 '__uintmax_t'
|   `-BuiltinType 0x826360 'unsigned long'
|-NamespaceDecl 0x8fb2e8 prev 0x86c288 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/move.h:38:1, line:55:1> line:38:11 std
| |-original Namespace 0x86b810 'std'
| |-VisibilityAttr 0x8fb358 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:70:49, col:67> Default
| `-FunctionTemplateDecl 0x90aea0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/move.h:47:3, line:50:40> line:49:5 __addressof
|   |-TemplateTypeParmDecl 0x8fb3b0 <line:47:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
|   `-FunctionDecl 0x90ae00 <line:48:5, line:50:40> line:49:5 constexpr __addressof '_Tp *(_Tp &) noexcept' inline
|     |-ParmVarDecl 0x8fb4d8 <col:17, col:22> col:22 referenced __r '_Tp &'
|     `-CompoundStmt 0x90b290 <line:50:5, col:40>
|       `-ReturnStmt 0x90b280 <col:7, col:37>
|         `-CallExpr 0x90b258 <col:14, col:37> '<dependent type>'
|           |-DeclRefExpr 0x90b218 <col:14> '<builtin fn type>' Function 0x90b060 '__builtin_addressof' 'void *(void &) noexcept'
|           `-DeclRefExpr 0x90b238 <col:34> '_Tp' lvalue ParmVar 0x8fb4d8 '__r' '_Tp &'
|-LinkageSpecDecl 0x90b010 <col:14> col:14 implicit C
| `-FunctionDecl 0x90b060 <col:14> col:14 implicit referenced __builtin_addressof 'void *(void &) noexcept' extern
|   |-ParmVarDecl 0x90b158 <<invalid sloc>> <invalid sloc> 'void &'
|   |-BuiltinAttr 0x90b100 <<invalid sloc>> Implicit 1202
|   |-NoThrowAttr 0x90b1c8 <col:14> Implicit
|   `-ConstAttr 0x90b1f0 <col:14> Implicit
|-NamespaceDecl 0x90b2c8 prev 0x8fb2e8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/type_traits:40:1, line:3704:1> line:40:11 std
| |-original Namespace 0x86b810 'std'
| |-VisibilityAttr 0x90b338 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:70:49, col:67> Default
| |-ClassTemplateDecl 0x90b4b0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/type_traits:44:3, line:45:11> col:11 reference_wrapper
| | |-TemplateTypeParmDecl 0x90b390 <line:44:12, col:21> col:21 typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x90b420 <line:45:5, col:11> col:11 class reference_wrapper
| |   `-PointerAttr 0x90b688 <<invalid sloc>> Implicit
| |-ClassTemplateDecl 0x90b888 <line:61:3, line:74:5> line:62:12 integral_constant
| | |-TemplateTypeParmDecl 0x90b6e8 <line:61:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x90b778 <col:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| | |-CXXRecordDecl 0x90b7f8 <line:62:5, line:74:5> line:62:12 struct integral_constant definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0x90bb30 <col:5, col:12> col:12 implicit struct integral_constant
| | | |-VarDecl 0x90bbd0 <line:64:7, col:53> col:45 referenced value 'const _Tp' static constexpr cinit
| | | | `-DeclRefExpr 0x90bc38 <col:53> '_Tp' NonTypeTemplateParm 0x90b778 '__v' '_Tp'
| | | |-TypedefDecl 0x90bc68 <line:65:7, col:45> col:45 referenced value_type '_Tp'
| | | | `-TemplateTypeParmType 0x90b740 '_Tp' dependent depth 0 index 0
| | | |   `-TemplateTypeParm 0x90b6e8 '_Tp'
| | | |-TypedefDecl 0x90e1b8 <line:66:7, col:45> col:45 type 'integral_constant<_Tp, __v>':'integral_constant<_Tp, __v>'
| | | | `-TemplateSpecializationType 0x90e110 'integral_constant<_Tp, __v>' sugar dependent integral_constant
| | | |   |-TemplateArgument type '_Tp'
| | | |   | `-TemplateTypeParmType 0x90b740 '_Tp' dependent depth 0 index 0
| | | |   |   `-TemplateTypeParm 0x90b6e8 '_Tp'
| | | |   |-TemplateArgument expr
| | | |   | `-DeclRefExpr 0x90bd18 <col:38> '_Tp' NonTypeTemplateParm 0x90b778 '__v' '_Tp'
| | | |   `-InjectedClassNameType 0x90baa0 'integral_constant<_Tp, __v>' dependent
| | | |     `-CXXRecord 0x90b7f8 'integral_constant'
| | | |-CXXConversionDecl 0x90e300 <line:67:7, col:70> col:17 constexpr operator type-parameter-0-0 'std::integral_constant::value_type () const noexcept'
| | | | `-CompoundStmt 0x90e4e8 <col:54, col:70>
| | | |   `-ReturnStmt 0x90e4d8 <col:56, col:63>
| | | |     `-DeclRefExpr 0x90e4b8 <col:63> 'const _Tp' lvalue Var 0x90bbd0 'value' 'const _Tp'
| | | `-CXXMethodDecl 0x90e3d8 <line:72:7, col:72> col:28 constexpr operator() 'std::integral_constant::value_type () const noexcept'
| | |   `-CompoundStmt 0x90e530 <col:56, col:72>
| | |     `-ReturnStmt 0x90e520 <col:58, col:65>
| | |       `-DeclRefExpr 0x90e500 <col:65> 'const _Tp' lvalue Var 0x90bbd0 'value' 'const _Tp'
| | |-ClassTemplateSpecializationDecl 0x90e998 <line:61:3, line:74:5> line:62:12 struct integral_constant definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'bool'
| | | | `-BuiltinType 0x826220 'bool'
| | | |-TemplateArgument integral 1
| | | |-CXXRecordDecl 0x91dce8 <col:5, col:12> col:12 implicit struct integral_constant
| | | |-VarDecl 0x91dd88 <line:64:7, col:53> col:45 used value 'const bool':'const bool' static constexpr cinit
| | | | |-value: Int 1
| | | | `-SubstNonTypeTemplateParmExpr 0x91de10 <col:53> 'bool'
| | | |   |-NonTypeTemplateParmDecl 0x90b778 <line:61:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| | | |   `-CXXBoolLiteralExpr 0x91de00 <line:64:53> 'bool' true
| | | |-TypedefDecl 0x91de98 <line:65:7, col:45> col:45 value_type 'bool':'bool'
| | | | `-SubstTemplateTypeParmType 0x90e940 'bool' sugar
| | | |   |-TemplateTypeParmType 0x90b740 '_Tp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0x90b6e8 '_Tp'
| | | |   `-BuiltinType 0x826220 'bool'
| | | |-TypedefDecl 0x91dff0 <line:66:7, col:45> col:45 referenced type 'integral_constant<bool, true>':'std::integral_constant<bool, true>'
| | | | `-TemplateSpecializationType 0x91df70 'integral_constant<bool, true>' sugar integral_constant
| | | |   |-TemplateArgument type 'bool':'bool'
| | | |   | `-SubstTemplateTypeParmType 0x90e940 'bool' sugar
| | | |   |   |-TemplateTypeParmType 0x90b740 '_Tp' dependent depth 0 index 0
| | | |   |   | `-TemplateTypeParm 0x90b6e8 '_Tp'
| | | |   |   `-BuiltinType 0x826220 'bool'
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0x91df50 <col:38> 'bool'
| | | |   |   |-value: Int 1
| | | |   |   `-SubstNonTypeTemplateParmExpr 0x91df10 <col:38> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0x90b778 <line:61:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| | | |   |     `-CXXBoolLiteralExpr 0x91df00 <line:66:38> 'bool' true
| | | |   `-RecordType 0x90ea90 'std::integral_constant<bool, true>'
| | | |     `-ClassTemplateSpecialization 0x90e998 'integral_constant'
| | | |-CXXConversionDecl 0x91e0d0 <line:67:7, col:70> col:17 constexpr operator bool 'std::integral_constant<bool, true>::value_type () const noexcept'
| | | `-CXXMethodDecl 0x91e1b8 <line:72:7, col:72> col:28 constexpr operator() 'std::integral_constant<bool, true>::value_type () const noexcept'
| | |-ClassTemplateSpecializationDecl 0x90ec18 <line:61:3, line:74:5> line:62:12 struct integral_constant definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'bool'
| | | | `-BuiltinType 0x826220 'bool'
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0x919cb8 <col:5, col:12> col:12 implicit struct integral_constant
| | | |-VarDecl 0x919d58 <line:64:7, col:53> col:45 used value 'const bool':'const bool' static constexpr cinit
| | | | |-value: Int 0
| | | | `-SubstNonTypeTemplateParmExpr 0x919de0 <col:53> 'bool'
| | | |   |-NonTypeTemplateParmDecl 0x90b778 <line:61:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| | | |   `-CXXBoolLiteralExpr 0x919dd0 <line:64:53> 'bool' false
| | | |-TypedefDecl 0x91ab80 <line:65:7, col:45> col:45 value_type 'bool':'bool'
| | | | `-SubstTemplateTypeParmType 0x90e940 'bool' sugar
| | | |   |-TemplateTypeParmType 0x90b740 '_Tp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0x90b6e8 '_Tp'
| | | |   `-BuiltinType 0x826220 'bool'
| | | |-TypedefDecl 0x91ace0 <line:66:7, col:45> col:45 type 'integral_constant<bool, false>':'std::integral_constant<bool, false>'
| | | | `-TemplateSpecializationType 0x91ac60 'integral_constant<bool, false>' sugar integral_constant
| | | |   |-TemplateArgument type 'bool':'bool'
| | | |   | `-SubstTemplateTypeParmType 0x90e940 'bool' sugar
| | | |   |   |-TemplateTypeParmType 0x90b740 '_Tp' dependent depth 0 index 0
| | | |   |   | `-TemplateTypeParm 0x90b6e8 '_Tp'
| | | |   |   `-BuiltinType 0x826220 'bool'
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0x91ac38 <col:38> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0x91abf8 <col:38> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0x90b778 <line:61:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| | | |   |     `-CXXBoolLiteralExpr 0x91abe8 <line:66:38> 'bool' false
| | | |   `-RecordType 0x90ed10 'std::integral_constant<bool, false>'
| | | |     `-ClassTemplateSpecialization 0x90ec18 'integral_constant'
| | | |-CXXConversionDecl 0x91ae08 <line:67:7, col:70> col:17 constexpr operator bool 'std::integral_constant<bool, false>::value_type () const noexcept'
| | | `-CXXMethodDecl 0x91aef0 <line:72:7, col:72> col:28 constexpr operator() 'std::integral_constant<bool, false>::value_type () const noexcept'
| | `-ClassTemplateSpecializationDecl 0x999290 <line:61:3, line:74:5> line:62:12 struct integral_constant definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-TemplateArgument type 'unsigned long'
| |   | `-BuiltinType 0x826360 'unsigned long'
| |   |-TemplateArgument integral 0
| |   |-CXXRecordDecl 0x999498 <col:5, col:12> col:12 implicit struct integral_constant
| |   |-VarDecl 0x999538 <line:64:7, col:53> col:45 value 'const unsigned long':'const unsigned long' static constexpr cinit
| |   | |-value: Int 0
| |   | `-SubstNonTypeTemplateParmExpr 0x9995d0 <col:53> 'unsigned long'
| |   |   |-NonTypeTemplateParmDecl 0x90b778 <line:61:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| |   |   `-IntegerLiteral 0x9995b0 <line:64:53> 'unsigned long' 0
| |   |-TypedefDecl 0x999658 <line:65:7, col:45> col:45 value_type 'unsigned long':'unsigned long'
| |   | `-SubstTemplateTypeParmType 0x9980f0 'unsigned long' sugar
| |   |   |-TemplateTypeParmType 0x90b740 '_Tp' dependent depth 0 index 0
| |   |   | `-TemplateTypeParm 0x90b6e8 '_Tp'
| |   |   `-BuiltinType 0x826360 'unsigned long'
| |   |-TypedefDecl 0x9997c0 <line:66:7, col:45> col:45 type 'integral_constant<unsigned long, 0UL>':'std::integral_constant<unsigned long, 0>'
| |   | `-TemplateSpecializationType 0x999740 'integral_constant<unsigned long, 0UL>' sugar integral_constant
| |   |   |-TemplateArgument type 'unsigned long':'unsigned long'
| |   |   | `-SubstTemplateTypeParmType 0x9980f0 'unsigned long' sugar
| |   |   |   |-TemplateTypeParmType 0x90b740 '_Tp' dependent depth 0 index 0
| |   |   |   | `-TemplateTypeParm 0x90b6e8 '_Tp'
| |   |   |   `-BuiltinType 0x826360 'unsigned long'
| |   |   |-TemplateArgument expr
| |   |   | `-ConstantExpr 0x999720 <col:38> 'unsigned long'
| |   |   |   |-value: Int 0
| |   |   |   `-SubstNonTypeTemplateParmExpr 0x9996e0 <col:38> 'unsigned long'
| |   |   |     |-NonTypeTemplateParmDecl 0x90b778 <line:61:26, col:30> col:30 referenced '_Tp' depth 0 index 1 __v
| |   |   |     `-IntegerLiteral 0x9996c0 <line:66:38> 'unsigned long' 0
| |   |   `-RecordType 0x999390 'std::integral_constant<unsigned long, 0>'
| |   |     `-ClassTemplateSpecialization 0x999290 'integral_constant'
| |   |-CXXConversionDecl 0x9998e8 <line:67:7, col:70> col:17 constexpr operator unsigned long 'std::integral_constant<unsigned long, 0>::value_type () const noexcept'
| |   `-CXXMethodDecl 0x9999d0 <line:72:7, col:72> col:28 constexpr operator() 'std::integral_constant<unsigned long, 0>::value_type () const noexcept'
| |-VarDecl 0x90e858 parent 0x90b7f8 prev 0x90bbd0 <line:77:3, line:78:48> col:48 value 'const _Tp' constexpr
| |-TypeAliasDecl 0x90eb58 <line:82:3, col:50> col:9 referenced true_type 'integral_constant<bool, true>':'std::integral_constant<bool, true>'
| | `-TemplateSpecializationType 0x90eab0 'integral_constant<bool, true>' sugar integral_constant
| |   |-TemplateArgument type 'bool'
| |   | `-BuiltinType 0x826220 'bool'
| |   |-TemplateArgument expr
| |   | `-ConstantExpr 0x90e978 <col:46> 'bool'
| |   |   |-value: Int 1
| |   |   `-CXXBoolLiteralExpr 0x90e918 <col:46> 'bool' true
| |   `-RecordType 0x90ea90 'std::integral_constant<bool, true>'
| |     `-ClassTemplateSpecialization 0x90e998 'integral_constant'
| |-TypeAliasDecl 0x90edd8 <line:85:3, col:51> col:9 referenced false_type 'integral_constant<bool, false>':'std::integral_constant<bool, false>'
| | `-TemplateSpecializationType 0x90ed30 'integral_constant<bool, false>' sugar integral_constant
| |   |-TemplateArgument type 'bool'
| |   | `-BuiltinType 0x826220 'bool'
| |   |-TemplateArgument expr
| |   | `-ConstantExpr 0x90ebf8 <col:46> 'bool'
| |   |   |-value: Int 0
| |   |   `-CXXBoolLiteralExpr 0x90ebc8 <col:46> 'bool' false
| |   `-RecordType 0x90ed10 'std::integral_constant<bool, false>'
| |     `-ClassTemplateSpecialization 0x90ec18 'integral_constant'
| |-TypeAliasTemplateDecl 0x917e70 <line:89:3, line:90:56> col:5 __bool_constant
| | |-NonTypeTemplateParmDecl 0x90ee48 <line:89:12, col:17> col:17 referenced 'bool' depth 0 index 0 __v
| | `-TypeAliasDecl 0x90f018 <line:90:5, col:56> col:11 __bool_constant 'integral_constant<bool, __v>'
| |   `-TemplateSpecializationType 0x90ef70 'integral_constant<bool, __v>' dependent integral_constant
| |     |-TemplateArgument type 'bool'
| |     | `-BuiltinType 0x826220 'bool'
| |     `-TemplateArgument expr
| |       `-DeclRefExpr 0x90eed0 <col:53> 'bool' NonTypeTemplateParm 0x90ee48 '__v' 'bool'
| |-ClassTemplateDecl 0x917fe0 <line:103:3, line:108:5> line:104:12 __conditional
| | |-NonTypeTemplateParmDecl 0x917ed8 <line:103:12> col:16 'bool' depth 0 index 0
| | |-CXXRecordDecl 0x917f50 <line:104:5, line:108:5> line:104:12 struct __conditional definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0x918240 <col:5, col:12> col:12 implicit struct __conditional
| | | `-TypeAliasTemplateDecl 0x9184b8 <line:106:7, line:107:15> col:2 type
| | |   |-TemplateTypeParmDecl 0x9182d0 <line:106:16, col:25> col:25 referenced typename depth 1 index 0 _Tp
| | |   |-TemplateTypeParmDecl 0x918378 <col:30> col:38 typename depth 1 index 1
| | |   `-TypeAliasDecl 0x918458 <line:107:2, col:15> col:8 type '_Tp'
| | |     `-TemplateTypeParmType 0x918350 '_Tp' dependent depth 1 index 0
| | |       `-TemplateTypeParm 0x9182d0 '_Tp'
| | `-ClassTemplateSpecialization 0x918568 '__conditional'
| |-ClassTemplateSpecializationDecl 0x918568 <line:110:3, line:115:5> line:111:12 struct __conditional definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 0
| | |-CXXRecordDecl 0x918778 <col:5, col:12> col:12 implicit struct __conditional
| | `-TypeAliasTemplateDecl 0x9189c8 <line:113:7, line:114:15> col:2 type
| |   |-TemplateTypeParmDecl 0x918808 <line:113:16> col:24 typename depth 0 index 0
| |   |-TemplateTypeParmDecl 0x918888 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| |   `-TypeAliasDecl 0x918968 <line:114:2, col:15> col:8 type '_Up'
| |     `-TemplateTypeParmType 0x918910 '_Up' dependent depth 0 index 1
| |       `-TemplateTypeParm 0x918888 '_Up'
| |-TypeAliasTemplateDecl 0x918ee0 <line:118:3, line:120:64> line:119:5 __conditional_t
| | |-NonTypeTemplateParmDecl 0x918a48 <line:118:12, col:17> col:17 referenced 'bool' depth 0 index 0 _Cond
| | |-TemplateTypeParmDecl 0x918aa8 <col:24, col:33> col:33 referenced typename depth 0 index 1 _If
| | |-TemplateTypeParmDecl 0x918b28 <col:38, col:47> col:47 referenced typename depth 0 index 2 _Else
| | `-TypeAliasDecl 0x918e80 <line:119:5, line:120:64> line:119:11 __conditional_t 'typename __conditional<_Cond>::template type<_If, _Else>'
| |   `-DependentTemplateSpecializationType 0x918d70 'typename __conditional<_Cond>::template type<_If, _Else>' dependent
| |-ClassTemplateDecl 0x919060 <line:123:3, line:125:27> line:124:12 __type_identity
| | |-TemplateTypeParmDecl 0x918f38 <line:123:13, col:22> col:22 referenced typename depth 0 index 0 _Type
| | `-CXXRecordDecl 0x918fd0 <line:124:5, line:125:27> line:124:12 struct __type_identity definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9192a0 <col:5, col:12> col:12 implicit struct __type_identity
| |   `-TypeAliasDecl 0x919340 <line:125:7, col:20> col:13 type '_Type'
| |     `-TemplateTypeParmType 0x918f90 '_Type' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x918f38 '_Type'
| |-TypeAliasTemplateDecl 0x919600 <line:127:3, line:128:62> col:5 __type_identity_t
| | |-TemplateTypeParmDecl 0x9193b8 <line:127:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9195a0 <line:128:5, col:62> col:11 __type_identity_t 'typename __type_identity<_Tp>::type'
| |   `-DependentNameType 0x919530 'typename __type_identity<_Tp>::type' dependent
| |-ClassTemplateDecl 0x9197b0 <line:130:3, line:131:12> col:12 __or_
| | |-TemplateTypeParmDecl 0x919658 <line:130:12> col:23 typename depth 0 index 0 ...
| | |-CXXRecordDecl 0x919720 <line:131:5, col:12> col:12 struct __or_
| | `-ClassTemplateSpecialization 0x919a28 '__or_'
| |-ClassTemplateSpecializationDecl 0x919a28 <line:133:3, line:136:7> line:134:12 struct __or_ definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument pack
| | `-CXXRecordDecl 0x91afe8 <col:5, col:12> col:12 implicit struct __or_
| |-ClassTemplatePartialSpecializationDecl 0x91b210 <line:138:3, line:141:7> line:139:12 struct __or_ definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_B1'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x91b090 <line:138:12, col:21> col:21 referenced typename depth 0 index 0 _B1
| | `-CXXRecordDecl 0x91b498 <line:139:5, col:12> col:12 implicit struct __or_
| |-ClassTemplatePartialSpecializationDecl 0x91b7b0 <line:143:3, line:146:7> line:144:12 struct __or_ definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__conditional_t<_B1::value, _B1, _B2>':'typename __conditional<_B1::value>::template type<type-parameter-0-0, type-parameter-0-1>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | | `-TemplateArgument type 'type-parameter-0-1'
| | |   `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0x91b540 <line:143:12, col:21> col:21 referenced typename depth 0 index 0 _B1
| | |-TemplateTypeParmDecl 0x91b5b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _B2
| | `-CXXRecordDecl 0x91c4a8 <line:144:5, col:12> col:12 implicit struct __or_
| |-ClassTemplatePartialSpecializationDecl 0x91ca30 <line:148:3, line:151:7> line:149:12 struct __or_ definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__conditional_t<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>':'typename __conditional<_B1::value>::template type<type-parameter-0-0, __or_<type-parameter-0-1, type-parameter-0-2, type-parameter-0-3...>>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | | |-TemplateArgument type 'type-parameter-0-1'
| | | | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | | |-TemplateArgument type 'type-parameter-0-2'
| | | | `-TemplateTypeParmType 0x918b80 'type-parameter-0-2' dependent depth 0 index 2
| | | `-TemplateArgument type 'type-parameter-0-3...'
| | |   `-PackExpansionType 0x91c7f0 'type-parameter-0-3...' dependent
| | |     `-TemplateTypeParmType 0x91c720 'type-parameter-0-3' dependent contains_unexpanded_pack depth 0 index 3 pack
| | |-TemplateTypeParmDecl 0x91c550 <line:148:12, col:21> col:21 referenced typename depth 0 index 0 _B1
| | |-TemplateTypeParmDecl 0x91c5c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _B2
| | |-TemplateTypeParmDecl 0x91c648 <col:40, col:49> col:49 referenced typename depth 0 index 2 _B3
| | |-TemplateTypeParmDecl 0x91c6c8 <col:54, col:66> col:66 referenced typename depth 0 index 3 ... _Bn
| | `-CXXRecordDecl 0x91d648 <line:149:5, col:12> col:12 implicit struct __or_
| |-ClassTemplateDecl 0x91d810 <line:153:3, line:154:12> col:12 __and_
| | |-TemplateTypeParmDecl 0x91d6f0 <line:153:12> col:23 typename depth 0 index 0 ...
| | |-CXXRecordDecl 0x91d780 <line:154:5, col:12> col:12 struct __and_
| | `-ClassTemplateSpecialization 0x91da58 '__and_'
| |-ClassTemplateSpecializationDecl 0x91da58 <line:156:3, line:159:7> line:157:12 struct __and_ definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument pack
| | `-CXXRecordDecl 0x91ec20 <col:5, col:12> col:12 implicit struct __and_
| |-ClassTemplatePartialSpecializationDecl 0x91ee50 <line:161:3, line:164:7> line:162:12 struct __and_ definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_B1'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x91ecc8 <line:161:12, col:21> col:21 referenced typename depth 0 index 0 _B1
| | `-CXXRecordDecl 0x91f0d8 <line:162:5, col:12> col:12 implicit struct __and_
| |-ClassTemplatePartialSpecializationDecl 0x91f3f0 <line:166:3, line:169:7> line:167:12 struct __and_ definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__conditional_t<_B1::value, _B2, _B1>':'typename __conditional<_B1::value>::template type<type-parameter-0-1, type-parameter-0-0>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | | `-TemplateArgument type 'type-parameter-0-1'
| | |   `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0x91f180 <line:166:12, col:21> col:21 referenced typename depth 0 index 0 _B1
| | |-TemplateTypeParmDecl 0x91f1f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _B2
| | `-CXXRecordDecl 0x91fb28 <line:167:5, col:12> col:12 implicit struct __and_
| |-ClassTemplatePartialSpecializationDecl 0x920180 <line:171:3, line:174:7> line:172:12 struct __and_ definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__conditional_t<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>':'typename __conditional<_B1::value>::template type<__and_<type-parameter-0-1, type-parameter-0-2, type-parameter-0-3...>, type-parameter-0-0>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | | |-TemplateArgument type 'type-parameter-0-1'
| | | | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | | |-TemplateArgument type 'type-parameter-0-2'
| | | | `-TemplateTypeParmType 0x918b80 'type-parameter-0-2' dependent depth 0 index 2
| | | `-TemplateArgument type 'type-parameter-0-3...'
| | |   `-PackExpansionType 0x91c7f0 'type-parameter-0-3...' dependent
| | |     `-TemplateTypeParmType 0x91c720 'type-parameter-0-3' dependent contains_unexpanded_pack depth 0 index 3 pack
| | |-TemplateTypeParmDecl 0x91fbd0 <line:171:12, col:21> col:21 referenced typename depth 0 index 0 _B1
| | |-TemplateTypeParmDecl 0x91fd78 <col:26, col:35> col:35 referenced typename depth 0 index 1 _B2
| | |-TemplateTypeParmDecl 0x91fdf8 <col:40, col:49> col:49 referenced typename depth 0 index 2 _B3
| | |-TemplateTypeParmDecl 0x91fe78 <col:54, col:66> col:66 referenced typename depth 0 index 3 ... _Bn
| | `-CXXRecordDecl 0x920b18 <line:172:5, col:12> col:12 implicit struct __and_
| |-ClassTemplateDecl 0x920ce0 <line:176:3, line:179:7> line:177:12 __not_
| | |-TemplateTypeParmDecl 0x920bc0 <line:176:12, col:21> col:21 typename depth 0 index 0 _Pp
| | `-CXXRecordDecl 0x920c50 <line:177:5, line:179:7> line:177:12 struct __not_ definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<!bool(_Pp::value)>':'integral_constant<bool, !bool(_Pp::value)>'
| |   `-CXXRecordDecl 0x922218 <col:5, col:12> col:12 implicit struct __not_
| |-ClassTemplateDecl 0x9223e0 <line:224:3, line:225:12> col:12 is_reference
| | |-TemplateTypeParmDecl 0x9222c0 <line:224:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0x922350 <line:225:5, col:12> col:12 struct is_reference
| |-ClassTemplateDecl 0x9226e0 <line:226:3, line:227:12> col:12 is_function
| | |-TemplateTypeParmDecl 0x9225b8 <line:226:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0x922650 <line:227:5, col:12> col:12 struct is_function
| |-ClassTemplateDecl 0x9229e0 <line:228:3, line:229:12> col:12 is_void
| | |-TemplateTypeParmDecl 0x9228b8 <line:228:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0x922950 <line:229:5, col:12> col:12 struct is_void
| | `-ClassTemplateSpecializationDecl 0xa41db8 <line:284:3, line:287:7> line:285:12 struct is_void definition
| |   |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_void_helper<__remove_cv_t<void>>::type':'std::integral_constant<bool, true>'
| |   |-TemplateArgument type 'void'
| |   | `-BuiltinType 0x826200 'void'
| |   `-CXXRecordDecl 0xa42660 <col:5, col:12> col:12 implicit struct is_void
| |-ClassTemplateDecl 0x922ce0 <line:230:3, line:231:12> col:12 remove_cv
| | |-TemplateTypeParmDecl 0x922bb8 <line:230:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0x922c50 <line:231:5, col:12> col:12 struct remove_cv
| | |-ClassTemplateSpecializationDecl 0x9da358 <line:230:3, line:231:12> line:1562:12 struct remove_cv definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0x8267a0 'wchar_t'
| | | |-CXXRecordDecl 0x9da5f8 <col:5, col:12> col:12 implicit struct remove_cv
| | | `-TypeAliasDecl 0x9da6c8 <line:1563:7, col:20> col:13 referenced type 'wchar_t':'wchar_t'
| | |   `-SubstTemplateTypeParmType 0x9da690 'wchar_t' sugar
| | |     |-TemplateTypeParmType 0x9a7e30 '_Tp' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0x9a7dd8 '_Tp'
| | |     `-BuiltinType 0x8267a0 'wchar_t'
| | |-ClassTemplateSpecializationDecl 0x9dcda8 <line:230:3, line:231:12> line:1562:12 struct remove_cv definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0x826340 'unsigned int'
| | | |-CXXRecordDecl 0x9dd048 <col:5, col:12> col:12 implicit struct remove_cv
| | | `-TypeAliasDecl 0x9dd118 <line:1563:7, col:20> col:13 referenced type 'unsigned int':'unsigned int'
| | |   `-SubstTemplateTypeParmType 0x9dd0e0 'unsigned int' sugar
| | |     |-TemplateTypeParmType 0x9a7e30 '_Tp' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0x9a7dd8 '_Tp'
| | |     `-BuiltinType 0x826340 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0x9e0208 <line:230:3, line:231:12> line:1562:12 struct remove_cv definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0x8267e0 'char16_t'
| | | |-CXXRecordDecl 0x9e04a8 <col:5, col:12> col:12 implicit struct remove_cv
| | | `-TypeAliasDecl 0x9e0578 <line:1563:7, col:20> col:13 referenced type 'char16_t':'char16_t'
| | |   `-SubstTemplateTypeParmType 0x9e0540 'char16_t' sugar
| | |     |-TemplateTypeParmType 0x9a7e30 '_Tp' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0x9a7dd8 '_Tp'
| | |     `-BuiltinType 0x8267e0 'char16_t'
| | |-ClassTemplateSpecializationDecl 0x9e2b18 <line:230:3, line:231:12> line:1562:12 struct remove_cv definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0x826320 'unsigned short'
| | | |-CXXRecordDecl 0x9e2db8 <col:5, col:12> col:12 implicit struct remove_cv
| | | `-TypeAliasDecl 0x9e2e88 <line:1563:7, col:20> col:13 referenced type 'unsigned short':'unsigned short'
| | |   `-SubstTemplateTypeParmType 0x9e2e50 'unsigned short' sugar
| | |     |-TemplateTypeParmType 0x9a7e30 '_Tp' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0x9a7dd8 '_Tp'
| | |     `-BuiltinType 0x826320 'unsigned short'
| | |-ClassTemplateSpecializationDecl 0x9e7208 <line:230:3, line:231:12> line:1562:12 struct remove_cv definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'char32_t'
| | | | `-BuiltinType 0x826800 'char32_t'
| | | |-CXXRecordDecl 0x9e74a8 <col:5, col:12> col:12 implicit struct remove_cv
| | | `-TypeAliasDecl 0x9e7578 <line:1563:7, col:20> col:13 referenced type 'char32_t':'char32_t'
| | |   `-SubstTemplateTypeParmType 0x9e7540 'char32_t' sugar
| | |     |-TemplateTypeParmType 0x9a7e30 '_Tp' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0x9a7dd8 '_Tp'
| | |     `-BuiltinType 0x826800 'char32_t'
| | `-ClassTemplateSpecializationDecl 0xa42088 <line:230:3, line:231:12> line:1562:12 struct remove_cv definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-TemplateArgument type 'void'
| |   | `-BuiltinType 0x826200 'void'
| |   |-CXXRecordDecl 0xa42328 <col:5, col:12> col:12 implicit struct remove_cv
| |   `-TypeAliasDecl 0xa423f8 <line:1563:7, col:20> col:13 referenced type 'void':'void'
| |     `-SubstTemplateTypeParmType 0xa423c0 'void' sugar
| |       |-TemplateTypeParmType 0x9a7e30 '_Tp' dependent depth 0 index 0
| |       | `-TemplateTypeParm 0x9a7dd8 '_Tp'
| |       `-BuiltinType 0x826200 'void'
| |-ClassTemplateDecl 0x923a70 <line:232:3, line:233:12> col:12 is_const
| | |-TemplateTypeParmDecl 0x923948 <line:232:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0x9239e0 <line:233:5, col:12> col:12 struct is_const
| | |-ClassTemplateSpecializationDecl 0x9cacb8 <line:705:3, line:707:27> line:706:12 struct is_const definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0x8267a0 'wchar_t'
| | | `-CXXRecordDecl 0x9caf18 <col:5, col:12> col:12 implicit struct is_const
| | |-ClassTemplateSpecializationDecl 0x9cea18 <line:705:3, line:707:27> line:706:12 struct is_const definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0x8267e0 'char16_t'
| | | `-CXXRecordDecl 0x9cec78 <col:5, col:12> col:12 implicit struct is_const
| | |-ClassTemplateSpecializationDecl 0x9d1418 <line:705:3, line:707:27> line:706:12 struct is_const definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'char32_t'
| | | | `-BuiltinType 0x826800 'char32_t'
| | | `-CXXRecordDecl 0x9d1678 <col:5, col:12> col:12 implicit struct is_const
| | |-ClassTemplateSpecializationDecl 0x9de0d8 <line:705:3, line:707:27> line:706:12 struct is_const definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0x826340 'unsigned int'
| | | `-CXXRecordDecl 0x9de338 <col:5, col:12> col:12 implicit struct is_const
| | `-ClassTemplateSpecializationDecl 0x9e44b8 <line:705:3, line:707:27> line:706:12 struct is_const definition
| |   |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   |-TemplateArgument type 'unsigned short'
| |   | `-BuiltinType 0x826320 'unsigned short'
| |   `-CXXRecordDecl 0x9e4718 <col:5, col:12> col:12 implicit struct is_const
| |-ClassTemplateDecl 0x923d70 <line:236:3, line:237:12> col:12 __is_array_unknown_bounds
| | |-TemplateTypeParmDecl 0x923c48 <line:236:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0x923ce0 <line:237:5, col:12> col:12 struct __is_array_unknown_bounds
| |-FunctionTemplateDecl 0x9242d8 <line:242:3, line:244:18> line:243:25 __is_complete_or_unbounded
| | |-TemplateTypeParmDecl 0x923f48 <line:242:13, col:22> col:22 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x924030 <col:27, col:46> col:34 'std::size_t':'unsigned long' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-UnaryExprOrTypeTraitExpr 0x924000 <col:36, col:46> 'unsigned long' sizeof '_Tp'
| | `-FunctionDecl 0x924238 <line:243:5, line:244:18> line:243:25 constexpr __is_complete_or_unbounded 'std::true_type (__type_identity<_Tp>)'
| |   |-ParmVarDecl 0x924140 <col:52, col:71> col:72 '__type_identity<_Tp>'
| |   `-CompoundStmt 0x924440 <line:244:5, col:18>
| |     `-ReturnStmt 0x924430 <col:7, col:15>
| |       `-InitListExpr 0x9243f0 <col:14, col:15> 'std::true_type':'std::integral_constant<bool, true>'
| |-FunctionTemplateDecl 0x925c58 <line:246:3, line:254:18> line:253:13 __is_complete_or_unbounded
| | |-TemplateTypeParmDecl 0x924458 <line:246:13, col:22> col:22 referenced typename depth 0 index 0 _TypeIdentity
| | |-TemplateTypeParmDecl 0x9245b0 <line:247:7, col:54> col:16 referenced typename depth 0 index 1 _NestedType
| | | `-TemplateArgument type 'typename _TypeIdentity::type'
| | |   `-DependentNameType 0x924540 'typename _TypeIdentity::type' dependent
| | `-FunctionDecl 0x925bb8 <line:248:5, line:254:18> line:253:13 constexpr __is_complete_or_unbounded 'typename __or_<is_reference<_NestedType>, is_function<_NestedType>, is_void<_NestedType>, __is_array_unknown_bounds<_NestedType>>::type (_TypeIdentity)'
| |   |-ParmVarDecl 0x925ab0 <col:40> col:53 '_TypeIdentity'
| |   `-CompoundStmt 0x925d90 <line:254:5, col:18>
| |     `-ReturnStmt 0x925d80 <col:7, col:15>
| |       `-InitListExpr 0x925d40 <col:14, col:15> 'void'
| |-ClassTemplateDecl 0x925ed0 <line:261:3, line:263:25> line:262:12 __success_type
| | |-TemplateTypeParmDecl 0x925da8 <line:261:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x925e40 <line:262:5, line:263:25> line:262:12 struct __success_type definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x926110 <col:5, col:12> col:12 implicit struct __success_type
| |   `-TypedefDecl 0x9261b0 <line:263:7, col:19> col:19 type '_Tp'
| |     `-TemplateTypeParmType 0x925e00 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x925da8 '_Tp'
| |-CXXRecordDecl 0x926220 <line:265:3, line:266:5> line:265:10 referenced struct __failure_type definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | `-CXXRecordDecl 0x926338 <col:3, col:10> col:10 implicit struct __failure_type
| |-TypeAliasTemplateDecl 0x926e40 <line:269:3, line:270:52> col:5 __remove_cv_t
| | |-TemplateTypeParmDecl 0x9263e0 <line:269:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9265c0 <line:270:5, col:52> col:11 __remove_cv_t 'typename remove_cv<_Tp>::type'
| |   `-DependentNameType 0x926550 'typename remove_cv<_Tp>::type' dependent
| |-ClassTemplateDecl 0x926fc0 <line:274:3, line:276:27> line:275:12 __is_void_helper
| | |-TemplateTypeParmDecl 0x926e98 <line:274:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0x926f30 <line:275:5, line:276:27> line:275:12 struct __is_void_helper definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | `-CXXRecordDecl 0x927240 <col:5, col:12> col:12 implicit struct __is_void_helper
| | `-ClassTemplateSpecialization 0x927308 '__is_void_helper'
| |-ClassTemplateSpecializationDecl 0x927308 <line:278:3, line:280:26> line:279:12 struct __is_void_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0x826200 'void'
| | `-CXXRecordDecl 0x927558 <col:5, col:12> col:12 implicit struct __is_void_helper
| |-ClassTemplateDecl 0x927720 prev 0x9229e0 <line:284:3, line:287:7> line:285:12 is_void
| | |-TemplateTypeParmDecl 0x927600 <line:284:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x927690 prev 0x922950 <line:285:5, line:287:7> line:285:12 struct is_void definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '__is_void_helper<__remove_cv_t<_Tp>>::type'
| | | `-CXXRecordDecl 0x927bb0 <col:5, col:12> col:12 implicit struct is_void
| | `-ClassTemplateSpecialization 0xa41db8 'is_void'
| |-ClassTemplateDecl 0x927d80 <line:290:3, line:292:27> line:291:12 __is_integral_helper
| | |-TemplateTypeParmDecl 0x927c58 <line:290:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0x927cf0 <line:291:5, line:292:27> line:291:12 struct __is_integral_helper definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | `-CXXRecordDecl 0x9285c0 <col:5, col:12> col:12 implicit struct __is_integral_helper
| | |-ClassTemplateSpecialization 0x928688 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x9289a0 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x928cb8 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x928fd8 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x9299a0 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x929cb0 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x929fc0 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x92a2d8 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x92a5f8 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x92acd0 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x92afe8 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x92b308 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x92b628 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x92b948 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x92bec0 '__is_integral_helper'
| | |-ClassTemplateSpecialization 0x92c1d8 '__is_integral_helper'
| | `-ClassTemplateSpecialization 0x92c4f8 '__is_integral_helper'
| |-ClassTemplateSpecializationDecl 0x928688 <line:294:3, line:296:26> line:295:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'bool'
| | | `-BuiltinType 0x826220 'bool'
| | `-CXXRecordDecl 0x9288d8 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x9289a0 <line:298:3, line:300:26> line:299:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'char'
| | | `-BuiltinType 0x826240 'char'
| | `-CXXRecordDecl 0x928be8 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x928cb8 <line:302:3, line:304:26> line:303:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'signed char'
| | | `-BuiltinType 0x826260 'signed char'
| | `-CXXRecordDecl 0x928f08 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x928fd8 <line:306:3, line:308:26> line:307:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'unsigned char'
| | | `-BuiltinType 0x826300 'unsigned char'
| | `-CXXRecordDecl 0x929228 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x9299a0 <line:313:3, line:315:26> line:314:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'wchar_t'
| | | `-BuiltinType 0x8267a0 'wchar_t'
| | `-CXXRecordDecl 0x929be8 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x929cb0 <line:323:3, line:325:26> line:324:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'char16_t'
| | | `-BuiltinType 0x8267e0 'char16_t'
| | `-CXXRecordDecl 0x929ef8 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x929fc0 <line:327:3, line:329:26> line:328:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'char32_t'
| | | `-BuiltinType 0x826800 'char32_t'
| | `-CXXRecordDecl 0x92a208 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x92a2d8 <line:331:3, line:333:26> line:332:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'short'
| | | `-BuiltinType 0x826280 'short'
| | `-CXXRecordDecl 0x92a528 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x92a5f8 <line:335:3, line:337:26> line:336:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'unsigned short'
| | | `-BuiltinType 0x826320 'unsigned short'
| | `-CXXRecordDecl 0x92a848 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x92acd0 <line:339:3, line:341:26> line:340:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'int'
| | | `-BuiltinType 0x8262a0 'int'
| | `-CXXRecordDecl 0x92af18 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x92afe8 <line:343:3, line:345:26> line:344:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'unsigned int'
| | | `-BuiltinType 0x826340 'unsigned int'
| | `-CXXRecordDecl 0x92b238 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x92b308 <line:347:3, line:349:26> line:348:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'long'
| | | `-BuiltinType 0x8262c0 'long'
| | `-CXXRecordDecl 0x92b558 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x92b628 <line:351:3, line:353:26> line:352:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'unsigned long'
| | | `-BuiltinType 0x826360 'unsigned long'
| | `-CXXRecordDecl 0x92b878 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x92b948 <line:355:3, line:357:26> line:356:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'long long'
| | | `-BuiltinType 0x8262e0 'long long'
| | `-CXXRecordDecl 0x92bb98 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x92bec0 <line:359:3, line:361:26> line:360:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'unsigned long long'
| | | `-BuiltinType 0x826380 'unsigned long long'
| | `-CXXRecordDecl 0x92c108 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x92c1d8 <line:367:3, line:369:26> line:368:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type '__int128'
| | | `-BuiltinType 0x826760 '__int128'
| | `-CXXRecordDecl 0x92c428 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateSpecializationDecl 0x92c4f8 <line:372:3, line:374:26> line:373:12 struct __is_integral_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'unsigned __int128'
| | | `-BuiltinType 0x826780 'unsigned __int128'
| | `-CXXRecordDecl 0x92c748 <col:5, col:12> col:12 implicit struct __is_integral_helper
| |-ClassTemplateDecl 0x92c910 <line:412:3, line:415:7> line:413:12 is_integral
| | |-TemplateTypeParmDecl 0x92c7f0 <line:412:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x92c880 <line:413:5, line:415:7> line:413:12 struct is_integral definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '__is_integral_helper<__remove_cv_t<_Tp>>::type'
| | | `-CXXRecordDecl 0x92e450 <col:5, col:12> col:12 implicit struct is_integral
| | |-ClassTemplateSpecializationDecl 0x9da088 <line:412:3, line:415:7> line:413:12 struct is_integral definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '__is_integral_helper<__remove_cv_t<wchar_t>>::type':'std::integral_constant<bool, true>'
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0x8267a0 'wchar_t'
| | | `-CXXRecordDecl 0x9da950 <col:5, col:12> col:12 implicit struct is_integral
| | |-ClassTemplateSpecializationDecl 0x9dcad8 <line:412:3, line:415:7> line:413:12 struct is_integral definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '__is_integral_helper<__remove_cv_t<unsigned int>>::type':'std::integral_constant<bool, true>'
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0x826340 'unsigned int'
| | | `-CXXRecordDecl 0x9dd380 <col:5, col:12> col:12 implicit struct is_integral
| | |-ClassTemplateSpecializationDecl 0x9dff38 <line:412:3, line:415:7> line:413:12 struct is_integral definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '__is_integral_helper<__remove_cv_t<char16_t>>::type':'std::integral_constant<bool, true>'
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0x8267e0 'char16_t'
| | | `-CXXRecordDecl 0x9e1600 <col:5, col:12> col:12 implicit struct is_integral
| | |-ClassTemplateSpecializationDecl 0x9e2848 <line:412:3, line:415:7> line:413:12 struct is_integral definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '__is_integral_helper<__remove_cv_t<unsigned short>>::type':'std::integral_constant<bool, true>'
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0x826320 'unsigned short'
| | | `-CXXRecordDecl 0x9e30f0 <col:5, col:12> col:12 implicit struct is_integral
| | `-ClassTemplateSpecializationDecl 0x9e6f38 <line:412:3, line:415:7> line:413:12 struct is_integral definition
| |   |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_integral_helper<__remove_cv_t<char32_t>>::type':'std::integral_constant<bool, true>'
| |   |-TemplateArgument type 'char32_t'
| |   | `-BuiltinType 0x826800 'char32_t'
| |   `-CXXRecordDecl 0x9e77e0 <col:5, col:12> col:12 implicit struct is_integral
| |-ClassTemplateDecl 0x92e620 <line:418:3, line:420:27> line:419:12 __is_floating_point_helper
| | |-TemplateTypeParmDecl 0x92e4f8 <line:418:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0x92e590 <line:419:5, line:420:27> line:419:12 struct __is_floating_point_helper definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | `-CXXRecordDecl 0x92e8a0 <col:5, col:12> col:12 implicit struct __is_floating_point_helper
| | |-ClassTemplateSpecialization 0x92e970 '__is_floating_point_helper'
| | |-ClassTemplateSpecialization 0x92ec88 '__is_floating_point_helper'
| | |-ClassTemplateSpecialization 0x92efa8 '__is_floating_point_helper'
| | `-ClassTemplateSpecialization 0x92f2c8 '__is_floating_point_helper'
| |-ClassTemplateSpecializationDecl 0x92e970 <line:422:3, line:424:26> line:423:12 struct __is_floating_point_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'float'
| | | `-BuiltinType 0x8263a0 'float'
| | `-CXXRecordDecl 0x92ebb8 <col:5, col:12> col:12 implicit struct __is_floating_point_helper
| |-ClassTemplateSpecializationDecl 0x92ec88 <line:426:3, line:428:26> line:427:12 struct __is_floating_point_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'double'
| | | `-BuiltinType 0x8263c0 'double'
| | `-CXXRecordDecl 0x92eed8 <col:5, col:12> col:12 implicit struct __is_floating_point_helper
| |-ClassTemplateSpecializationDecl 0x92efa8 <line:430:3, line:432:26> line:431:12 struct __is_floating_point_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'long double'
| | | `-BuiltinType 0x8263e0 'long double'
| | `-CXXRecordDecl 0x92f1f8 <col:5, col:12> col:12 implicit struct __is_floating_point_helper
| |-ClassTemplateSpecializationDecl 0x92f2c8 <line:435:3, line:437:26> line:436:12 struct __is_floating_point_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type '__float128'
| | | `-BuiltinType 0x826400 '__float128'
| | `-CXXRecordDecl 0x92fb48 <col:5, col:12> col:12 implicit struct __is_floating_point_helper
| |-ClassTemplateDecl 0x92fd10 <line:442:3, line:445:7> line:443:12 is_floating_point
| | |-TemplateTypeParmDecl 0x92fbf0 <line:442:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x92fc80 <line:443:5, line:445:7> line:443:12 struct is_floating_point definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_floating_point_helper<__remove_cv_t<_Tp>>::type'
| |   `-CXXRecordDecl 0x9302f0 <col:5, col:12> col:12 implicit struct is_floating_point
| |-ClassTemplateDecl 0x9304c0 <line:448:3, line:450:27> line:449:12 is_array
| | |-TemplateTypeParmDecl 0x930398 <line:448:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0x930430 <line:449:5, line:450:27> line:449:12 struct is_array definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0x930740 <col:5, col:12> col:12 implicit struct is_array
| |-ClassTemplatePartialSpecializationDecl 0x931470 <line:452:3, line:454:26> line:453:12 struct is_array definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0[_Size]'
| | | `-DependentSizedArrayType 0x9309a0 'type-parameter-0-0[_Size]' dependent   <col:24, col:30>
| | |   |-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |   `-DeclRefExpr 0x930980 <col:25> 'std::size_t':'unsigned long' NonTypeTemplateParm 0x930900 '_Size' 'std::size_t':'unsigned long'
| | |-TemplateTypeParmDecl 0x9307e8 <line:452:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x930900 <col:26, col:38> col:38 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Size
| | `-CXXRecordDecl 0x9316d8 <line:453:5, col:12> col:12 implicit struct is_array
| |-ClassTemplatePartialSpecializationDecl 0x931940 <line:456:3, line:458:26> line:457:12 struct is_array definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0[]'
| | | `-IncompleteArrayType 0x931810 'type-parameter-0-0[]' dependent 
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x931780 <line:456:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x931ba8 <line:457:5, col:12> col:12 implicit struct is_array
| |-ClassTemplateDecl 0x931d70 <line:460:3, line:462:27> line:461:12 __is_pointer_helper
| | |-TemplateTypeParmDecl 0x931c50 <line:460:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0x931ce0 <line:461:5, line:462:27> line:461:12 struct __is_pointer_helper definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0x931ff0 <col:5, col:12> col:12 implicit struct __is_pointer_helper
| |-ClassTemplatePartialSpecializationDecl 0x932220 <line:464:3, line:466:26> line:465:12 struct __is_pointer_helper definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0 *'
| | | `-PointerType 0x8fb540 'type-parameter-0-0 *' dependent
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x932098 <line:464:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9329c8 <line:465:5, col:12> col:12 implicit struct __is_pointer_helper
| |-ClassTemplateDecl 0x932b90 <line:469:3, line:472:7> line:470:12 is_pointer
| | |-TemplateTypeParmDecl 0x932a70 <line:469:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x932b00 <line:470:5, line:472:7> line:470:12 struct is_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_pointer_helper<__remove_cv_t<_Tp>>::type'
| |   `-CXXRecordDecl 0x933170 <col:5, col:12> col:12 implicit struct is_pointer
| |-ClassTemplateDecl 0x933340 <line:475:3, line:477:27> line:476:12 is_lvalue_reference
| | |-TemplateTypeParmDecl 0x933218 <line:475:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0x9332b0 <line:476:5, line:477:27> line:476:12 struct is_lvalue_reference definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0x9335c0 <col:5, col:12> col:12 implicit struct is_lvalue_reference
| |-ClassTemplatePartialSpecializationDecl 0x9337f0 <line:479:3, line:481:26> line:480:12 struct is_lvalue_reference definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0x8fb470 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x933668 <line:479:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9343b8 <line:480:5, col:12> col:12 implicit struct is_lvalue_reference
| |-ClassTemplateDecl 0x934580 <line:484:3, line:486:27> line:485:12 is_rvalue_reference
| | |-TemplateTypeParmDecl 0x934460 <line:484:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0x9344f0 <line:485:5, line:486:27> line:485:12 struct is_rvalue_reference definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0x934800 <col:5, col:12> col:12 implicit struct is_rvalue_reference
| |-ClassTemplatePartialSpecializationDecl 0x934a60 <line:488:3, line:490:26> line:489:12 struct is_rvalue_reference definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0 &&'
| | | `-RValueReferenceType 0x934940 'type-parameter-0-0 &&' dependent
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x9348a8 <line:488:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x934cb8 <line:489:5, col:12> col:12 implicit struct is_rvalue_reference
| |-ClassTemplateDecl 0x934e80 <line:492:3, line:494:27> line:493:12 __is_member_object_pointer_helper
| | |-TemplateTypeParmDecl 0x934d60 <line:492:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0x934df0 <line:493:5, line:494:27> line:493:12 struct __is_member_object_pointer_helper definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0x935100 <col:5, col:12> col:12 implicit struct __is_member_object_pointer_helper
| |-ClassTemplatePartialSpecializationDecl 0x936250 <line:496:3, line:498:47> line:497:12 struct __is_member_object_pointer_helper definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__not_<is_function<_Tp>>::type'
| | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| | | `-MemberPointerType 0x936100 'type-parameter-0-0 type-parameter-0-1::*' dependent
| | |   |-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x9351a8 <line:496:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x936040 <col:26, col:35> col:35 typename depth 0 index 1 _Cp
| | `-CXXRecordDecl 0x9366c0 <line:497:5, col:12> col:12 implicit struct __is_member_object_pointer_helper
| |-ClassTemplateDecl 0x936890 <line:501:3, line:504:7> line:502:12 is_member_object_pointer
| | |-TemplateTypeParmDecl 0x936768 <line:501:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x936800 <line:502:5, line:504:7> line:502:12 struct is_member_object_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_member_object_pointer_helper<__remove_cv_t<_Tp>>::type'
| |   `-CXXRecordDecl 0x936e70 <col:5, col:12> col:12 implicit struct is_member_object_pointer
| |-ClassTemplateDecl 0x937530 <line:506:3, line:508:27> line:507:12 __is_member_function_pointer_helper
| | |-TemplateTypeParmDecl 0x936f18 <line:506:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0x936fb0 <line:507:5, line:508:27> line:507:12 struct __is_member_function_pointer_helper definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0x9377b0 <col:5, col:12> col:12 implicit struct __is_member_function_pointer_helper
| |-ClassTemplatePartialSpecializationDecl 0x937ac0 <line:510:3, line:512:39> line:511:12 struct __is_member_function_pointer_helper definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'is_function<_Tp>::type'
| | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| | | `-MemberPointerType 0x936100 'type-parameter-0-0 type-parameter-0-1::*' dependent
| | |   |-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x937858 <line:510:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x9378d8 <col:26, col:35> col:35 typename depth 0 index 1 _Cp
| | `-CXXRecordDecl 0x937e70 <line:511:5, col:12> col:12 implicit struct __is_member_function_pointer_helper
| |-ClassTemplateDecl 0x938040 <line:515:3, line:518:7> line:516:12 is_member_function_pointer
| | |-TemplateTypeParmDecl 0x937f18 <line:515:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x937fb0 <line:516:5, line:518:7> line:516:12 struct is_member_function_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_member_function_pointer_helper<__remove_cv_t<_Tp>>::type'
| |   `-CXXRecordDecl 0x93aab0 <col:5, col:12> col:12 implicit struct is_member_function_pointer
| |-ClassTemplateDecl 0x93ac80 <line:521:3, line:524:7> line:522:12 is_enum
| | |-TemplateTypeParmDecl 0x93ab58 <line:521:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x93abf0 <line:522:5, line:524:7> line:522:12 struct is_enum definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'integral_constant<bool, __is_enum(_Tp)>'
| | | `-CXXRecordDecl 0x93b030 <col:5, col:12> col:12 implicit struct is_enum
| | |-ClassTemplateSpecializationDecl 0x9dac90 <line:521:3, line:524:7> line:522:12 struct is_enum definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'integral_constant<bool, __is_enum(wchar_t)>':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0x8267a0 'wchar_t'
| | | `-CXXRecordDecl 0x9dafd0 <col:5, col:12> col:12 implicit struct is_enum
| | |-ClassTemplateSpecializationDecl 0x9dd4d0 <line:521:3, line:524:7> line:522:12 struct is_enum definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'integral_constant<bool, __is_enum(unsigned int)>':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0x826340 'unsigned int'
| | | `-CXXRecordDecl 0x9dd810 <col:5, col:12> col:12 implicit struct is_enum
| | |-ClassTemplateSpecializationDecl 0x9e1750 <line:521:3, line:524:7> line:522:12 struct is_enum definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'integral_constant<bool, __is_enum(char16_t)>':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0x8267e0 'char16_t'
| | | `-CXXRecordDecl 0x9e1a90 <col:5, col:12> col:12 implicit struct is_enum
| | |-ClassTemplateSpecializationDecl 0x9e3240 <line:521:3, line:524:7> line:522:12 struct is_enum definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'integral_constant<bool, __is_enum(unsigned short)>':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0x826320 'unsigned short'
| | | `-CXXRecordDecl 0x9e3be8 <col:5, col:12> col:12 implicit struct is_enum
| | `-ClassTemplateSpecializationDecl 0x9e7930 <line:521:3, line:524:7> line:522:12 struct is_enum definition
| |   |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_enum(char32_t)>':'std::integral_constant<bool, false>'
| |   |-TemplateArgument type 'char32_t'
| |   | `-BuiltinType 0x826800 'char32_t'
| |   `-CXXRecordDecl 0x9e7c70 <col:5, col:12> col:12 implicit struct is_enum
| |-ClassTemplateDecl 0x93b200 <line:527:3, line:530:7> line:528:12 is_union
| | |-TemplateTypeParmDecl 0x93b0d8 <line:527:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x93b170 <line:528:5, line:530:7> line:528:12 struct is_union definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_union(_Tp)>'
| |   `-CXXRecordDecl 0x93b5b0 <col:5, col:12> col:12 implicit struct is_union
| |-ClassTemplateDecl 0x93b780 <line:533:3, line:536:7> line:534:12 is_class
| | |-TemplateTypeParmDecl 0x93b658 <line:533:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x93b6f0 <line:534:5, line:536:7> line:534:12 struct is_class definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_class(_Tp)>'
| |   `-CXXRecordDecl 0x93d1a0 <col:5, col:12> col:12 implicit struct is_class
| |-ClassTemplateDecl 0x93d370 prev 0x9226e0 <line:539:3, line:541:61> line:540:12 is_function
| | |-TemplateTypeParmDecl 0x93d248 <line:539:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x93d2e0 prev 0x922650 <line:540:5, line:541:61> line:540:12 struct is_function definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<!is_const<const _Tp>::value>':'integral_constant<bool, !is_const<const _Tp>::value>'
| |   `-CXXRecordDecl 0x93d798 <col:5, col:12> col:12 implicit struct is_function
| |-ClassTemplatePartialSpecializationDecl 0x93d9c0 <line:543:3, line:545:27> line:544:12 struct is_function definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0x8fb470 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x93d840 <line:543:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x93dc18 <line:544:5, col:12> col:12 implicit struct is_function
| |-ClassTemplatePartialSpecializationDecl 0x93de40 <line:547:3, line:549:27> line:548:12 struct is_function definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0 &&'
| | | `-RValueReferenceType 0x934940 'type-parameter-0-0 &&' dependent
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x93dcc0 <line:547:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x93e208 <line:548:5, col:12> col:12 implicit struct is_function
| |-ClassTemplateDecl 0x93e3d0 <line:553:3, line:555:27> line:554:12 __is_null_pointer_helper
| | |-TemplateTypeParmDecl 0x93e2b0 <line:553:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0x93e340 <line:554:5, line:555:27> line:554:12 struct __is_null_pointer_helper definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | `-CXXRecordDecl 0x93e650 <col:5, col:12> col:12 implicit struct __is_null_pointer_helper
| | `-ClassTemplateSpecialization 0x93e7a8 '__is_null_pointer_helper'
| |-ClassTemplateSpecializationDecl 0x93e7a8 <line:557:3, line:559:26> line:558:12 struct __is_null_pointer_helper definition
| | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'std::nullptr_t'
| | | `-BuiltinType 0x826990 'std::nullptr_t'
| | `-CXXRecordDecl 0x93e9f8 <col:5, col:12> col:12 implicit struct __is_null_pointer_helper
| |-ClassTemplateDecl 0x93ebc0 <line:562:3, line:565:7> line:563:12 is_null_pointer
| | |-TemplateTypeParmDecl 0x93eaa0 <line:562:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x93eb30 <line:563:5, line:565:7> line:563:12 struct is_null_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_null_pointer_helper<__remove_cv_t<_Tp>>::type'
| |   `-CXXRecordDecl 0x940330 <col:5, col:12> col:12 implicit struct is_null_pointer
| |-ClassTemplateDecl 0x940500 <line:569:3, line:572:7> line:570:12 __is_nullptr_t
| | |-TemplateTypeParmDecl 0x9403d8 <line:569:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x940470 <line:570:5, line:572:7> line:570:12 struct __is_nullptr_t definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'is_null_pointer<_Tp>'
| |   |-DeprecatedAttr 0x940930 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:96:19, col:58> "use 'std::is_null_pointer' instead" ""
| |   `-CXXRecordDecl 0x9407e0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/type_traits:570:5, col:12> col:12 implicit struct __is_nullptr_t
| |-ClassTemplateDecl 0x940b00 prev 0x9223e0 <line:577:3, line:581:7> line:578:12 is_reference
| | |-TemplateTypeParmDecl 0x9409e0 <line:577:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x940a70 prev 0x922350 <line:578:5, line:581:7> line:578:12 struct is_reference definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__or_<is_lvalue_reference<_Tp>, is_rvalue_reference<_Tp>>::type'
| |   `-CXXRecordDecl 0x940f10 <col:5, col:12> col:12 implicit struct is_reference
| |-ClassTemplateDecl 0x9410e0 <line:584:3, line:587:7> line:585:12 is_arithmetic
| | |-TemplateTypeParmDecl 0x940fb8 <line:584:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x941050 <line:585:5, line:587:7> line:585:12 struct is_arithmetic definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__or_<is_integral<_Tp>, is_floating_point<_Tp>>::type'
| |   `-CXXRecordDecl 0x942010 <col:5, col:12> col:12 implicit struct is_arithmetic
| |-ClassTemplateDecl 0x9421e0 <line:590:3, line:594:7> line:591:12 is_fundamental
| | |-TemplateTypeParmDecl 0x9420b8 <line:590:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x942150 <line:591:5, line:594:7> line:591:12 struct is_fundamental definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__or_<is_arithmetic<_Tp>, is_void<_Tp>, is_null_pointer<_Tp>>::type'
| |   `-CXXRecordDecl 0x942850 <col:5, col:12> col:12 implicit struct is_fundamental
| |-ClassTemplateDecl 0x942a20 <line:597:3, line:601:7> line:598:12 is_object
| | |-TemplateTypeParmDecl 0x9428f8 <line:597:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x942990 <line:598:5, line:601:7> line:598:12 struct is_object definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__not_<__or_<is_function<_Tp>, is_reference<_Tp>, is_void<_Tp>>>::type'
| |   `-CXXRecordDecl 0x943ad0 <col:5, col:12> col:12 implicit struct is_object
| |-ClassTemplateDecl 0x943ca0 <line:603:3, line:604:12> col:12 is_member_pointer
| | |-TemplateTypeParmDecl 0x943b78 <line:603:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0x943c10 <line:604:5, col:12> col:12 struct is_member_pointer
| |-ClassTemplateDecl 0x943fa0 <line:607:3, line:611:7> line:608:12 is_scalar
| | |-TemplateTypeParmDecl 0x943e78 <line:607:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x943f10 <line:608:5, line:611:7> line:608:12 struct is_scalar definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>, is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type'
| |   `-CXXRecordDecl 0x9461d0 <col:5, col:12> col:12 implicit struct is_scalar
| |-ClassTemplateDecl 0x9463a0 <line:614:3, line:616:50> line:615:12 is_compound
| | |-TemplateTypeParmDecl 0x946278 <line:614:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x946310 <line:615:5, line:616:50> line:615:12 struct is_compound definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__not_<is_fundamental<_Tp>>::type'
| |   `-CXXRecordDecl 0x946820 <col:5, col:12> col:12 implicit struct is_compound
| |-ClassTemplateDecl 0x9469f0 <line:619:3, line:621:27> line:620:12 __is_member_pointer_helper
| | |-TemplateTypeParmDecl 0x9468c8 <line:619:12, col:21> col:21 typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x946960 <line:620:5, line:621:27> line:620:12 struct __is_member_pointer_helper definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0x946c70 <col:5, col:12> col:12 implicit struct __is_member_pointer_helper
| |-ClassTemplatePartialSpecializationDecl 0x947900 <line:623:3, line:625:26> line:624:12 struct __is_member_pointer_helper definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| | | `-MemberPointerType 0x936100 'type-parameter-0-0 type-parameter-0-1::*' dependent
| | |   |-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x946d18 <line:623:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x946d98 <col:26, col:35> col:35 typename depth 0 index 1 _Cp
| | `-CXXRecordDecl 0x947b68 <line:624:5, col:12> col:12 implicit struct __is_member_pointer_helper
| |-ClassTemplateDecl 0x947d30 prev 0x943ca0 <line:629:3, line:632:7> line:630:12 is_member_pointer
| | |-TemplateTypeParmDecl 0x947c10 <line:629:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x947ca0 prev 0x943c10 <line:630:5, line:632:7> line:630:12 struct is_member_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_member_pointer_helper<__remove_cv_t<_Tp>>::type'
| |   `-CXXRecordDecl 0x948190 <col:5, col:12> col:12 implicit struct is_member_pointer
| |-ClassTemplateDecl 0x9483e8 <line:634:3, line:635:12> col:12 is_same
| | |-TemplateTypeParmDecl 0x948238 <line:634:12> col:20 typename depth 0 index 0
| | |-TemplateTypeParmDecl 0x9482b8 <col:22> col:30 typename depth 0 index 1
| | `-CXXRecordDecl 0x948358 <line:635:5, col:12> col:12 struct is_same
| |-TypeAliasTemplateDecl 0x948f60 <line:638:3, line:639:54> col:5 __is_one_of
| | |-TemplateTypeParmDecl 0x948608 <line:638:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x948688 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Types
| | `-TypeAliasDecl 0x948f00 <line:639:5, col:54> col:11 __is_one_of '__or_<is_same<_Tp, _Types>...>'
| |   `-TemplateSpecializationType 0x948e80 '__or_<is_same<_Tp, _Types>...>' dependent __or_
| |     `-TemplateArgument type 'is_same<_Tp, _Types>...'
| |       `-PackExpansionType 0x948db0 'is_same<_Tp, _Types>...' dependent
| |         `-TemplateSpecializationType 0x9487e0 'is_same<_Tp, _Types>' dependent contains_unexpanded_pack is_same
| |           |-TemplateArgument type '_Tp'
| |           | `-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |           |   `-TemplateTypeParm 0x948608 '_Tp'
| |           `-TemplateArgument type '_Types'
| |             `-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |               `-TemplateTypeParm 0x948688 '_Types'
| |-TypeAliasTemplateDecl 0x94a3a8 <line:643:3, line:659:4> line:644:5 __is_signed_integer
| | |-TemplateTypeParmDecl 0x948fb8 <line:643:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x94a348 <line:644:5, line:659:4> line:644:11 __is_signed_integer '__is_one_of<__remove_cv_t<_Tp>, signed char, short, int, long, long long, __int128>':'__or_<is_same<typename remove_cv<type-parameter-0-0>::type, signed char>, is_same<typename remove_cv<type-parameter-0-0>::type, short>, is_same<typename remove_cv<type-parameter-0-0>::type, int>, is_same<typename remove_cv<type-parameter-0-0>::type, long>, is_same<typename remove_cv<type-parameter-0-0>::type, long long>, is_same<typename remove_cv<type-parameter-0-0>::type, __int128>>'
| |   `-TemplateSpecializationType 0x94a1d0 '__is_one_of<__remove_cv_t<_Tp>, signed char, short, int, long, long long, __int128>' sugar dependent alias __is_one_of
| |     |-TemplateArgument type '__remove_cv_t<_Tp>':'typename remove_cv<type-parameter-0-0>::type'
| |     | `-TemplateSpecializationType 0x9491b0 '__remove_cv_t<_Tp>' sugar dependent alias __remove_cv_t
| |     |   |-TemplateArgument type '_Tp'
| |     |   | `-TemplateTypeParmType 0x949010 '_Tp' dependent depth 0 index 0
| |     |   |   `-TemplateTypeParm 0x948fb8 '_Tp'
| |     |   `-DependentNameType 0x949160 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |-TemplateArgument type 'signed char'
| |     | `-BuiltinType 0x826260 'signed char'
| |     |-TemplateArgument type 'short'
| |     | `-BuiltinType 0x826280 'short'
| |     |-TemplateArgument type 'int'
| |     | `-BuiltinType 0x8262a0 'int'
| |     |-TemplateArgument type 'long'
| |     | `-BuiltinType 0x8262c0 'long'
| |     |-TemplateArgument type 'long long'
| |     | `-BuiltinType 0x8262e0 'long long'
| |     |-TemplateArgument type '__int128'
| |     | `-BuiltinType 0x826760 '__int128'
| |     `-TemplateSpecializationType 0x949ca0 '__or_<is_same<typename remove_cv<type-parameter-0-0>::type, signed char>, is_same<typename remove_cv<type-parameter-0-0>::type, short>, is_same<typename remove_cv<type-parameter-0-0>::type, int>, is_same<typename remove_cv<type-parameter-0-0>::type, long>, is_same<typename remove_cv<type-parameter-0-0>::type, long long>, is_same<typename remove_cv<type-parameter-0-0>::type, __int128>>' dependent __or_
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, signed char>'
| |       | `-TemplateSpecializationType 0x9494d0 'is_same<typename remove_cv<type-parameter-0-0>::type, signed char>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'signed char':'signed char'
| |       |     `-SubstTemplateTypeParmType 0x949430 'signed char' sugar
| |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |       |       `-BuiltinType 0x826260 'signed char'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, short>'
| |       | `-TemplateSpecializationType 0x949600 'is_same<typename remove_cv<type-parameter-0-0>::type, short>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'short':'short'
| |       |     `-SubstTemplateTypeParmType 0x949560 'short' sugar
| |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |       |       `-BuiltinType 0x826280 'short'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, int>'
| |       | `-TemplateSpecializationType 0x949730 'is_same<typename remove_cv<type-parameter-0-0>::type, int>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'int':'int'
| |       |     `-SubstTemplateTypeParmType 0x949690 'int' sugar
| |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |       |       `-BuiltinType 0x8262a0 'int'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, long>'
| |       | `-TemplateSpecializationType 0x949860 'is_same<typename remove_cv<type-parameter-0-0>::type, long>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'long':'long'
| |       |     `-SubstTemplateTypeParmType 0x9497c0 'long' sugar
| |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |       |       `-BuiltinType 0x8262c0 'long'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, long long>'
| |       | `-TemplateSpecializationType 0x949990 'is_same<typename remove_cv<type-parameter-0-0>::type, long long>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'long long':'long long'
| |       |     `-SubstTemplateTypeParmType 0x9498f0 'long long' sugar
| |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |       |       `-BuiltinType 0x8262e0 'long long'
| |       `-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, __int128>'
| |         `-TemplateSpecializationType 0x949ac0 'is_same<typename remove_cv<type-parameter-0-0>::type, __int128>' dependent is_same
| |           |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |           | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |           |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |           |   | `-TemplateTypeParm 0x948608 '_Tp'
| |           |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |           `-TemplateArgument type '__int128':'__int128'
| |             `-SubstTemplateTypeParmType 0x949a20 '__int128' sugar
| |               |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |               | `-TemplateTypeParm 0x948688 '_Types'
| |               `-BuiltinType 0x826760 '__int128'
| |-TypeAliasTemplateDecl 0x94b5d8 <line:663:3, line:679:4> line:664:5 __is_unsigned_integer
| | |-TemplateTypeParmDecl 0x94a400 <line:663:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x94b578 <line:664:5, line:679:4> line:664:11 __is_unsigned_integer '__is_one_of<__remove_cv_t<_Tp>, unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long, unsigned __int128>':'__or_<is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>>'
| |   `-TemplateSpecializationType 0x94b400 '__is_one_of<__remove_cv_t<_Tp>, unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long, unsigned __int128>' sugar dependent alias __is_one_of
| |     |-TemplateArgument type '__remove_cv_t<_Tp>':'typename remove_cv<type-parameter-0-0>::type'
| |     | `-TemplateSpecializationType 0x94a5f0 '__remove_cv_t<_Tp>' sugar dependent alias __remove_cv_t
| |     |   |-TemplateArgument type '_Tp'
| |     |   | `-TemplateTypeParmType 0x94a450 '_Tp' dependent depth 0 index 0
| |     |   |   `-TemplateTypeParm 0x94a400 '_Tp'
| |     |   `-DependentNameType 0x94a5a0 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |-TemplateArgument type 'unsigned char'
| |     | `-BuiltinType 0x826300 'unsigned char'
| |     |-TemplateArgument type 'unsigned short'
| |     | `-BuiltinType 0x826320 'unsigned short'
| |     |-TemplateArgument type 'unsigned int'
| |     | `-BuiltinType 0x826340 'unsigned int'
| |     |-TemplateArgument type 'unsigned long'
| |     | `-BuiltinType 0x826360 'unsigned long'
| |     |-TemplateArgument type 'unsigned long long'
| |     | `-BuiltinType 0x826380 'unsigned long long'
| |     |-TemplateArgument type 'unsigned __int128'
| |     | `-BuiltinType 0x826780 'unsigned __int128'
| |     `-TemplateSpecializationType 0x94b0b0 '__or_<is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>>' dependent __or_
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>'
| |       | `-TemplateSpecializationType 0x94a8e0 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'unsigned char':'unsigned char'
| |       |     `-SubstTemplateTypeParmType 0x94a840 'unsigned char' sugar
| |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |       |       `-BuiltinType 0x826300 'unsigned char'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>'
| |       | `-TemplateSpecializationType 0x94aa10 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'unsigned short':'unsigned short'
| |       |     `-SubstTemplateTypeParmType 0x94a970 'unsigned short' sugar
| |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |       |       `-BuiltinType 0x826320 'unsigned short'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>'
| |       | `-TemplateSpecializationType 0x94ab40 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'unsigned int':'unsigned int'
| |       |     `-SubstTemplateTypeParmType 0x94aaa0 'unsigned int' sugar
| |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |       |       `-BuiltinType 0x826340 'unsigned int'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>'
| |       | `-TemplateSpecializationType 0x94ac70 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'unsigned long':'unsigned long'
| |       |     `-SubstTemplateTypeParmType 0x94abd0 'unsigned long' sugar
| |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |       |       `-BuiltinType 0x826360 'unsigned long'
| |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>'
| |       | `-TemplateSpecializationType 0x94ada0 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>' dependent is_same
| |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |       |   `-TemplateArgument type 'unsigned long long':'unsigned long long'
| |       |     `-SubstTemplateTypeParmType 0x94ad00 'unsigned long long' sugar
| |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |       |       `-BuiltinType 0x826380 'unsigned long long'
| |       `-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>'
| |         `-TemplateSpecializationType 0x94aed0 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>' dependent is_same
| |           |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |           | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |           |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |           |   | `-TemplateTypeParm 0x948608 '_Tp'
| |           |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |           `-TemplateArgument type 'unsigned __int128':'unsigned __int128'
| |             `-SubstTemplateTypeParmType 0x94ae30 'unsigned __int128' sugar
| |               |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |               | `-TemplateTypeParm 0x948688 '_Types'
| |               `-BuiltinType 0x826780 'unsigned __int128'
| |-TypeAliasTemplateDecl 0x94d4e8 <line:682:3, line:684:67> line:683:5 __is_standard_integer
| | |-TemplateTypeParmDecl 0x94b630 <line:682:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x94d488 <line:683:5, line:684:67> line:683:11 __is_standard_integer '__or_<__is_signed_integer<_Tp>, __is_unsigned_integer<_Tp>>'
| |   `-TemplateSpecializationType 0x94d3e0 '__or_<__is_signed_integer<_Tp>, __is_unsigned_integer<_Tp>>' dependent __or_
| |     |-TemplateArgument type '__is_signed_integer<_Tp>':'__or_<is_same<typename remove_cv<type-parameter-0-0>::type, signed char>, is_same<typename remove_cv<type-parameter-0-0>::type, short>, is_same<typename remove_cv<type-parameter-0-0>::type, int>, is_same<typename remove_cv<type-parameter-0-0>::type, long>, is_same<typename remove_cv<type-parameter-0-0>::type, long long>, is_same<typename remove_cv<type-parameter-0-0>::type, __int128>>'
| |     | `-TemplateSpecializationType 0x94c210 '__is_signed_integer<_Tp>' sugar dependent alias __is_signed_integer
| |     |   |-TemplateArgument type '_Tp'
| |     |   | `-TemplateTypeParmType 0x94b680 '_Tp' dependent depth 0 index 0
| |     |   |   `-TemplateTypeParm 0x94b630 '_Tp'
| |     |   `-TemplateSpecializationType 0x94c0e0 '__is_one_of<__remove_cv_t<type-parameter-0-0>, signed char, short, int, long, long long, __int128>' sugar dependent alias __is_one_of
| |     |     |-TemplateArgument type '__remove_cv_t<type-parameter-0-0>':'typename remove_cv<type-parameter-0-0>::type'
| |     |     | `-TemplateSpecializationType 0x94b970 '__remove_cv_t<type-parameter-0-0>' sugar dependent alias __remove_cv_t
| |     |     |   |-TemplateArgument type 'type-parameter-0-0':'type-parameter-0-0'
| |     |     |   | `-SubstTemplateTypeParmType 0x94b7e0 'type-parameter-0-0' sugar dependent
| |     |     |   |   |-TemplateTypeParmType 0x949010 '_Tp' dependent depth 0 index 0
| |     |     |   |   | `-TemplateTypeParm 0x948fb8 '_Tp'
| |     |     |   |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| |     |     |   `-DependentNameType 0x94b920 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |     |-TemplateArgument type 'signed char'
| |     |     | `-BuiltinType 0x826260 'signed char'
| |     |     |-TemplateArgument type 'short'
| |     |     | `-BuiltinType 0x826280 'short'
| |     |     |-TemplateArgument type 'int'
| |     |     | `-BuiltinType 0x8262a0 'int'
| |     |     |-TemplateArgument type 'long'
| |     |     | `-BuiltinType 0x8262c0 'long'
| |     |     |-TemplateArgument type 'long long'
| |     |     | `-BuiltinType 0x8262e0 'long long'
| |     |     |-TemplateArgument type '__int128'
| |     |     | `-BuiltinType 0x826760 '__int128'
| |     |     `-TemplateSpecializationType 0x94bfe0 '__or_<is_same<typename remove_cv<type-parameter-0-0>::type, signed char>, is_same<typename remove_cv<type-parameter-0-0>::type, short>, is_same<typename remove_cv<type-parameter-0-0>::type, int>, is_same<typename remove_cv<type-parameter-0-0>::type, long>, is_same<typename remove_cv<type-parameter-0-0>::type, long long>, is_same<typename remove_cv<type-parameter-0-0>::type, __int128>>' dependent __or_
| |     |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, signed char>'
| |     |       | `-TemplateSpecializationType 0x94bb20 'is_same<typename remove_cv<type-parameter-0-0>::type, signed char>' dependent is_same
| |     |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |     |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |     |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |     |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |     |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |       |   `-TemplateArgument type 'signed char':'signed char'
| |     |       |     `-SubstTemplateTypeParmType 0x949430 'signed char' sugar
| |     |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |     |       |       `-BuiltinType 0x826260 'signed char'
| |     |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, short>'
| |     |       | `-TemplateSpecializationType 0x94bbc0 'is_same<typename remove_cv<type-parameter-0-0>::type, short>' dependent is_same
| |     |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |     |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |     |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |     |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |     |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |       |   `-TemplateArgument type 'short':'short'
| |     |       |     `-SubstTemplateTypeParmType 0x949560 'short' sugar
| |     |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |     |       |       `-BuiltinType 0x826280 'short'
| |     |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, int>'
| |     |       | `-TemplateSpecializationType 0x94bc60 'is_same<typename remove_cv<type-parameter-0-0>::type, int>' dependent is_same
| |     |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |     |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |     |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |     |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |     |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |       |   `-TemplateArgument type 'int':'int'
| |     |       |     `-SubstTemplateTypeParmType 0x949690 'int' sugar
| |     |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |     |       |       `-BuiltinType 0x8262a0 'int'
| |     |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, long>'
| |     |       | `-TemplateSpecializationType 0x94bd00 'is_same<typename remove_cv<type-parameter-0-0>::type, long>' dependent is_same
| |     |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |     |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |     |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |     |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |     |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |       |   `-TemplateArgument type 'long':'long'
| |     |       |     `-SubstTemplateTypeParmType 0x9497c0 'long' sugar
| |     |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |     |       |       `-BuiltinType 0x8262c0 'long'
| |     |       |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, long long>'
| |     |       | `-TemplateSpecializationType 0x94bda0 'is_same<typename remove_cv<type-parameter-0-0>::type, long long>' dependent is_same
| |     |       |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |     |       |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |     |       |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |     |       |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |     |       |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |       |   `-TemplateArgument type 'long long':'long long'
| |     |       |     `-SubstTemplateTypeParmType 0x9498f0 'long long' sugar
| |     |       |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |       |       | `-TemplateTypeParm 0x948688 '_Types'
| |     |       |       `-BuiltinType 0x8262e0 'long long'
| |     |       `-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, __int128>'
| |     |         `-TemplateSpecializationType 0x94be40 'is_same<typename remove_cv<type-parameter-0-0>::type, __int128>' dependent is_same
| |     |           |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |     |           | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |     |           |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |     |           |   | `-TemplateTypeParm 0x948608 '_Tp'
| |     |           |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |     |           `-TemplateArgument type '__int128':'__int128'
| |     |             `-SubstTemplateTypeParmType 0x949a20 '__int128' sugar
| |     |               |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |               | `-TemplateTypeParm 0x948688 '_Types'
| |     |               `-BuiltinType 0x826760 '__int128'
| |     `-TemplateArgument type '__is_unsigned_integer<_Tp>':'__or_<is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>>'
| |       `-TemplateSpecializationType 0x94d2b0 '__is_unsigned_integer<_Tp>' sugar dependent alias __is_unsigned_integer
| |         |-TemplateArgument type '_Tp'
| |         | `-TemplateTypeParmType 0x94b680 '_Tp' dependent depth 0 index 0
| |         |   `-TemplateTypeParm 0x94b630 '_Tp'
| |         `-TemplateSpecializationType 0x94d180 '__is_one_of<__remove_cv_t<type-parameter-0-0>, unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long, unsigned __int128>' sugar dependent alias __is_one_of
| |           |-TemplateArgument type '__remove_cv_t<type-parameter-0-0>':'typename remove_cv<type-parameter-0-0>::type'
| |           | `-TemplateSpecializationType 0x94ca10 '__remove_cv_t<type-parameter-0-0>' sugar dependent alias __remove_cv_t
| |           |   |-TemplateArgument type 'type-parameter-0-0':'type-parameter-0-0'
| |           |   | `-SubstTemplateTypeParmType 0x94c880 'type-parameter-0-0' sugar dependent
| |           |   |   |-TemplateTypeParmType 0x94a450 '_Tp' dependent depth 0 index 0
| |           |   |   | `-TemplateTypeParm 0x94a400 '_Tp'
| |           |   |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| |           |   `-DependentNameType 0x94c9c0 'typename remove_cv<type-parameter-0-0>::type' dependent
| |           |-TemplateArgument type 'unsigned char'
| |           | `-BuiltinType 0x826300 'unsigned char'
| |           |-TemplateArgument type 'unsigned short'
| |           | `-BuiltinType 0x826320 'unsigned short'
| |           |-TemplateArgument type 'unsigned int'
| |           | `-BuiltinType 0x826340 'unsigned int'
| |           |-TemplateArgument type 'unsigned long'
| |           | `-BuiltinType 0x826360 'unsigned long'
| |           |-TemplateArgument type 'unsigned long long'
| |           | `-BuiltinType 0x826380 'unsigned long long'
| |           |-TemplateArgument type 'unsigned __int128'
| |           | `-BuiltinType 0x826780 'unsigned __int128'
| |           `-TemplateSpecializationType 0x94d080 '__or_<is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>, is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>>' dependent __or_
| |             |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>'
| |             | `-TemplateSpecializationType 0x94cbc0 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned char>' dependent is_same
| |             |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |             |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |             |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |             |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |             |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |             |   `-TemplateArgument type 'unsigned char':'unsigned char'
| |             |     `-SubstTemplateTypeParmType 0x94a840 'unsigned char' sugar
| |             |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |             |       | `-TemplateTypeParm 0x948688 '_Types'
| |             |       `-BuiltinType 0x826300 'unsigned char'
| |             |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>'
| |             | `-TemplateSpecializationType 0x94cc60 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned short>' dependent is_same
| |             |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |             |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |             |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |             |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |             |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |             |   `-TemplateArgument type 'unsigned short':'unsigned short'
| |             |     `-SubstTemplateTypeParmType 0x94a970 'unsigned short' sugar
| |             |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |             |       | `-TemplateTypeParm 0x948688 '_Types'
| |             |       `-BuiltinType 0x826320 'unsigned short'
| |             |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>'
| |             | `-TemplateSpecializationType 0x94cd00 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned int>' dependent is_same
| |             |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |             |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |             |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |             |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |             |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |             |   `-TemplateArgument type 'unsigned int':'unsigned int'
| |             |     `-SubstTemplateTypeParmType 0x94aaa0 'unsigned int' sugar
| |             |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |             |       | `-TemplateTypeParm 0x948688 '_Types'
| |             |       `-BuiltinType 0x826340 'unsigned int'
| |             |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>'
| |             | `-TemplateSpecializationType 0x94cda0 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long>' dependent is_same
| |             |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |             |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |             |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |             |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |             |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |             |   `-TemplateArgument type 'unsigned long':'unsigned long'
| |             |     `-SubstTemplateTypeParmType 0x94abd0 'unsigned long' sugar
| |             |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |             |       | `-TemplateTypeParm 0x948688 '_Types'
| |             |       `-BuiltinType 0x826360 'unsigned long'
| |             |-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>'
| |             | `-TemplateSpecializationType 0x94ce40 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned long long>' dependent is_same
| |             |   |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |             |   | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |             |   |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |             |   |   | `-TemplateTypeParm 0x948608 '_Tp'
| |             |   |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |             |   `-TemplateArgument type 'unsigned long long':'unsigned long long'
| |             |     `-SubstTemplateTypeParmType 0x94ad00 'unsigned long long' sugar
| |             |       |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |             |       | `-TemplateTypeParm 0x948688 '_Types'
| |             |       `-BuiltinType 0x826380 'unsigned long long'
| |             `-TemplateArgument type 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>'
| |               `-TemplateSpecializationType 0x94cee0 'is_same<typename remove_cv<type-parameter-0-0>::type, unsigned __int128>' dependent is_same
| |                 |-TemplateArgument type 'typename remove_cv<type-parameter-0-0>::type':'typename remove_cv<type-parameter-0-0>::type'
| |                 | `-SubstTemplateTypeParmType 0x9493f0 'typename remove_cv<type-parameter-0-0>::type' sugar dependent
| |                 |   |-TemplateTypeParmType 0x948660 '_Tp' dependent depth 0 index 0
| |                 |   | `-TemplateTypeParm 0x948608 '_Tp'
| |                 |   `-DependentNameType 0x926520 'typename remove_cv<type-parameter-0-0>::type' dependent
| |                 `-TemplateArgument type 'unsigned __int128':'unsigned __int128'
| |                   `-SubstTemplateTypeParmType 0x94ae30 'unsigned __int128' sugar
| |                     |-TemplateTypeParmType 0x948710 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |                     | `-TemplateTypeParm 0x948688 '_Types'
| |                     `-BuiltinType 0x826780 'unsigned __int128'
| |-TypeAliasTemplateDecl 0x94d640 <line:687:3, col:42> col:25 __void_t
| | |-TemplateTypeParmDecl 0x94d540 <col:12> col:23 typename depth 0 index 0 ...
| | `-TypeAliasDecl 0x94d5e0 <col:25, col:42> col:31 __void_t 'void'
| |   `-BuiltinType 0x826200 'void'
| |-ClassTemplateDecl 0x94d870 <line:691:3, line:694:7> line:692:12 __is_referenceable
| | |-TemplateTypeParmDecl 0x94d698 <line:691:12, col:21> col:21 typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x94d728 <col:26, col:37> col:35 typename depth 0 index 1
| | | `-TemplateArgument type 'void'
| | |   `-BuiltinType 0x826200 'void'
| | `-CXXRecordDecl 0x94d7c8 <line:692:5, line:694:7> line:692:12 struct __is_referenceable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0x94db30 <col:5, col:12> col:12 implicit struct __is_referenceable
| |-ClassTemplatePartialSpecializationDecl 0x94de68 <line:696:3, line:699:7> line:697:12 struct __is_referenceable definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0x826200 'void'
| | |-TemplateTypeParmDecl 0x94dbd8 <line:696:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x94e108 <line:697:5, col:12> col:12 implicit struct __is_referenceable
| |-ClassTemplateDecl 0x94e2d0 prev 0x923a70 <line:705:3, line:707:27> line:706:12 is_const
| | |-TemplateTypeParmDecl 0x94e1b0 <line:705:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0x94e240 prev 0x9239e0 <line:706:5, line:707:27> line:706:12 struct is_const definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | `-CXXRecordDecl 0x94e3d0 <col:5, col:12> col:12 implicit struct is_const
| | |-ClassTemplateSpecialization 0x9cacb8 'is_const'
| | |-ClassTemplateSpecialization 0x9cea18 'is_const'
| | |-ClassTemplateSpecialization 0x9d1418 'is_const'
| | |-ClassTemplateSpecialization 0x9de0d8 'is_const'
| | `-ClassTemplateSpecialization 0x9e44b8 'is_const'
| |-ClassTemplatePartialSpecializationDecl 0x94e590 <line:709:3, line:711:26> line:710:12 struct is_const definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'const type-parameter-0-0'
| | | `-QualType 0x8fb401 'const type-parameter-0-0' const
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x94e478 <line:709:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x94edc0 <line:710:5, col:12> col:12 implicit struct is_const
| |-ClassTemplateDecl 0x94ef90 <line:714:3, line:716:27> line:715:12 is_volatile
| | |-TemplateTypeParmDecl 0x94ee68 <line:714:12> col:20 typename depth 0 index 0
| | |-CXXRecordDecl 0x94ef00 <line:715:5, line:716:27> line:715:12 struct is_volatile definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | `-CXXRecordDecl 0x94f210 <col:5, col:12> col:12 implicit struct is_volatile
| | |-ClassTemplateSpecializationDecl 0x9cb280 <line:714:3, line:716:27> line:715:12 struct is_volatile definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0x8267a0 'wchar_t'
| | | `-CXXRecordDecl 0x9cb4d8 <col:5, col:12> col:12 implicit struct is_volatile
| | |-ClassTemplateSpecializationDecl 0x9cedc8 <line:714:3, line:716:27> line:715:12 struct is_volatile definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0x8267e0 'char16_t'
| | | `-CXXRecordDecl 0x9cf5d0 <col:5, col:12> col:12 implicit struct is_volatile
| | |-ClassTemplateSpecializationDecl 0x9d17c8 <line:714:3, line:716:27> line:715:12 struct is_volatile definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'char32_t'
| | | | `-BuiltinType 0x826800 'char32_t'
| | | `-CXXRecordDecl 0x9d1a28 <col:5, col:12> col:12 implicit struct is_volatile
| | |-ClassTemplateSpecializationDecl 0x9de740 <line:714:3, line:716:27> line:715:12 struct is_volatile definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0x826340 'unsigned int'
| | | `-CXXRecordDecl 0x9de998 <col:5, col:12> col:12 implicit struct is_volatile
| | `-ClassTemplateSpecializationDecl 0x9e4868 <line:714:3, line:716:27> line:715:12 struct is_volatile definition
| |   |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   |-TemplateArgument type 'unsigned short'
| |   | `-BuiltinType 0x826320 'unsigned short'
| |   `-CXXRecordDecl 0x9e4ac8 <col:5, col:12> col:12 implicit struct is_volatile
| |-ClassTemplatePartialSpecializationDecl 0x94f410 <line:718:3, line:720:26> line:719:12 struct is_volatile definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'volatile type-parameter-0-0'
| | | `-QualType 0x8fb404 'volatile type-parameter-0-0' volatile
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x94f2b8 <line:718:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x94f668 <line:719:5, col:12> col:12 implicit struct is_volatile
| |-ClassTemplateDecl 0x94f830 <line:723:3, line:729:5> line:724:12 is_trivial
| | |-TemplateTypeParmDecl 0x94f710 <line:723:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x94f7a0 <line:724:5, line:729:5> line:724:12 struct is_trivial definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_trivial(_Tp)>'
| |   |-CXXRecordDecl 0x94fbe0 <col:5, col:12> col:12 implicit struct is_trivial
| |   `-StaticAssertDecl 0x9508b0 <line:727:7, line:728:68> line:727:7
| |     |-CallExpr 0x9507b8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x94fc90 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x950790 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x94fd70 <col:73, col:74> 'void'
| |     `-StringLiteral 0x950858 <line:728:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x950a30 <line:732:3, line:738:5> line:733:12 is_trivially_copyable
| | |-TemplateTypeParmDecl 0x950908 <line:732:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9509a0 <line:733:5, line:738:5> line:733:12 struct is_trivially_copyable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_trivially_copyable(_Tp)>'
| |   |-CXXRecordDecl 0x950de0 <col:5, col:12> col:12 implicit struct is_trivially_copyable
| |   `-StaticAssertDecl 0x951058 <line:736:7, line:737:68> line:736:7
| |     |-CallExpr 0x950fd8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x950e90 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x950fb0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x950f70 <col:73, col:74> 'void'
| |     `-StringLiteral 0x951000 <line:737:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x9511d0 <line:741:3, line:747:5> line:742:12 is_standard_layout
| | |-TemplateTypeParmDecl 0x9510b0 <line:741:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x951140 <line:742:5, line:747:5> line:742:12 struct is_standard_layout definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_standard_layout(_Tp)>'
| |   |-CXXRecordDecl 0x951580 <col:5, col:12> col:12 implicit struct is_standard_layout
| |   `-StaticAssertDecl 0x952120 <line:745:7, line:746:68> line:745:7
| |     |-CallExpr 0x9520a0 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x951630 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x951750 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x951710 <col:73, col:74> 'void'
| |     `-StringLiteral 0x9520c8 <line:746:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x9522a0 <line:754:3, line:762:5> line:757:5 is_pod
| | |-TemplateTypeParmDecl 0x952178 <line:754:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x952210 <line:755:5, line:762:5> line:757:5 struct is_pod definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_pod(_Tp)>'
| |   |-CXXRecordDecl 0x952650 <line:755:5, line:757:5> col:5 implicit struct is_pod
| |   `-StaticAssertDecl 0x9528c8 <line:760:7, line:761:68> line:760:7
| |     |-CallExpr 0x952848 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x952700 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x952820 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x9527e0 <col:73, col:74> 'void'
| |     `-StringLiteral 0x952870 <line:761:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x952a40 <line:768:3, line:776:5> line:771:5 is_literal_type
| | |-TemplateTypeParmDecl 0x952920 <line:768:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9529b0 <line:769:5, line:776:5> line:771:5 struct is_literal_type definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_literal(_Tp)>'
| |   |-CXXRecordDecl 0x952df0 <line:769:5, line:771:5> col:5 implicit struct is_literal_type
| |   `-StaticAssertDecl 0x9539b0 <line:774:7, line:775:68> line:774:7
| |     |-CallExpr 0x952fe8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x952ea0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x952fc0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x952f80 <col:73, col:74> 'void'
| |     `-StringLiteral 0x953010 <line:775:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x953b30 <line:779:3, line:782:7> line:780:12 is_empty
| | |-TemplateTypeParmDecl 0x953a08 <line:779:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x953aa0 <line:780:5, line:782:7> line:780:12 struct is_empty definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_empty(_Tp)>'
| |   `-CXXRecordDecl 0x953ee0 <col:5, col:12> col:12 implicit struct is_empty
| |-ClassTemplateDecl 0x9540b0 <line:785:3, line:788:7> line:786:12 is_polymorphic
| | |-TemplateTypeParmDecl 0x953f88 <line:785:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x954020 <line:786:5, line:788:7> line:786:12 struct is_polymorphic definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_polymorphic(_Tp)>'
| |   `-CXXRecordDecl 0x954460 <col:5, col:12> col:12 implicit struct is_polymorphic
| |-ClassTemplateDecl 0x954630 <line:794:3, line:797:7> line:795:12 is_final
| | |-TemplateTypeParmDecl 0x954508 <line:794:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9545a0 <line:795:5, line:797:7> line:795:12 struct is_final definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_final(_Tp)>'
| |   `-CXXRecordDecl 0x955710 <col:5, col:12> col:12 implicit struct is_final
| |-ClassTemplateDecl 0x9558e0 <line:801:3, line:804:7> line:802:12 is_abstract
| | |-TemplateTypeParmDecl 0x9557b8 <line:801:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x955850 <line:802:5, line:804:7> line:802:12 struct is_abstract definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_abstract(_Tp)>'
| |   `-CXXRecordDecl 0x955c90 <col:5, col:12> col:12 implicit struct is_abstract
| |-ClassTemplateDecl 0x955fe0 <line:807:3, line:810:27> line:809:12 __is_signed_helper
| | |-TemplateTypeParmDecl 0x955d38 <line:807:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x955eb8 <line:808:5, col:32> col:10 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x955f18 <col:12, col:32> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x955e70 <col:12, col:32> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x955f50 <line:809:5, line:810:27> line:809:12 struct __is_signed_helper definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0x9562c0 <col:5, col:12> col:12 implicit struct __is_signed_helper
| |-ClassTemplatePartialSpecializationDecl 0x956548 <line:812:3, line:815:7> line:813:12 struct __is_signed_helper definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'integral_constant<bool, _Tp(-1) < _Tp(0)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x956368 <line:812:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9587b0 <line:813:5, col:12> col:12 implicit struct __is_signed_helper
| |-ClassTemplateDecl 0x958980 <line:819:3, line:822:7> line:820:12 is_signed
| | |-TemplateTypeParmDecl 0x958858 <line:819:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9588f0 <line:820:5, line:822:7> line:820:12 struct is_signed definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_signed_helper<_Tp>::type'
| |   `-CXXRecordDecl 0x958ed0 <col:5, col:12> col:12 implicit struct is_signed
| |-ClassTemplateDecl 0x9590a0 <line:825:3, line:828:7> line:826:12 is_unsigned
| | |-TemplateTypeParmDecl 0x958f78 <line:825:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x959010 <line:826:5, line:828:7> line:826:12 struct is_unsigned definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>'
| |   `-CXXRecordDecl 0x95a000 <col:5, col:12> col:12 implicit struct is_unsigned
| |-FunctionTemplateDecl 0x95a3b8 <line:831:3, line:833:18> col:5 __declval
| | |-TemplateTypeParmDecl 0x95a0a8 <line:831:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x95a168 <col:26, col:44> col:35 referenced typename depth 0 index 1 _Up
| | | `-TemplateArgument type '_Tp &&'
| | |   `-RValueReferenceType 0x95a130 '_Tp &&' dependent
| | |     `-TemplateTypeParmType 0x95a100 '_Tp' dependent depth 0 index 0
| | |       `-TemplateTypeParm 0x95a0a8 '_Tp'
| | `-FunctionDecl 0x95a318 <line:832:5, line:833:18> col:5 __declval '_Up (int)'
| |   `-ParmVarDecl 0x95a220 <col:15> col:18 'int'
| |-FunctionTemplateDecl 0x95a6c8 <line:835:3, line:837:19> col:5 __declval
| | |-TemplateTypeParmDecl 0x95a490 <line:835:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0x95a628 <line:836:5, line:837:19> col:5 __declval '_Tp (long)'
| |   `-ParmVarDecl 0x95a538 <col:15> col:19 'long'
| |-FunctionTemplateDecl 0x95ab00 <line:840:3, line:841:10> col:10 declval
| | |-TemplateTypeParmDecl 0x95a7b0 <line:840:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0x95aa60 <line:841:5, col:10> col:10 declval 'auto () noexcept -> decltype(__declval<_Tp>(0))'
| |-ClassTemplateDecl 0x95adc8 <line:843:3, line:844:12> col:12 extent
| | |-TemplateTypeParmDecl 0x95abd0 <line:843:12> col:20 typename depth 0 index 0
| | |-NonTypeTemplateParmDecl 0x95ac80 <col:22, col:33> col:31 'unsigned int' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ConstantExpr 0x95acf8 <col:33> 'unsigned int'
| | |     |-value: Int 0
| | |     `-ImplicitCastExpr 0x95ace0 <col:33> 'unsigned int' <IntegralCast>
| | |       `-IntegerLiteral 0x95ac48 <col:33> 'int' 0
| | `-CXXRecordDecl 0x95ad38 <line:844:5, col:12> col:12 struct extent
| |-ClassTemplateDecl 0x95b7e0 <line:846:3, line:847:12> col:12 remove_all_extents
| | |-TemplateTypeParmDecl 0x95b6b8 <line:846:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0x95b750 <line:847:5, col:12> col:12 struct remove_all_extents
| |-ClassTemplateDecl 0x95bae0 <line:850:3, line:853:7> line:851:12 __is_array_known_bounds
| | |-TemplateTypeParmDecl 0x95b9b8 <line:850:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x95ba50 <line:851:5, line:853:7> line:851:12 struct __is_array_known_bounds definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, (extent<_Tp>::value > 0)>'
| |   `-CXXRecordDecl 0x95c090 <col:5, col:12> col:12 implicit struct __is_array_known_bounds
| |-ClassTemplateDecl 0x95c260 prev 0x923d70 <line:855:3, line:858:7> line:856:12 __is_array_unknown_bounds
| | |-TemplateTypeParmDecl 0x95c138 <line:855:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x95c1d0 prev 0x923ce0 <line:856:5, line:858:7> line:856:12 struct __is_array_unknown_bounds definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__and_<is_array<_Tp>, __not_<extent<_Tp>>>'
| |   `-CXXRecordDecl 0x95d370 <col:5, col:12> col:12 implicit struct __is_array_unknown_bounds
| |-CXXRecordDecl 0x95d418 <line:867:3, line:874:3> line:867:10 referenced struct __do_is_destructible_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x95d538 <col:3, col:10> col:10 implicit struct __do_is_destructible_impl
| | |-FunctionTemplateDecl 0x95da98 <line:869:5, line:870:34> col:24 __test
| | | |-TemplateTypeParmDecl 0x95d5c8 <line:869:14, col:23> col:23 referenced typename depth 0 index 0 _Tp
| | | |-TemplateTypeParmDecl 0x95d818 <col:28, col:70> col:37 typename depth 0 index 1
| | | | `-TemplateArgument type 'decltype(declval<_Tp &>().~_Tp())'
| | | |   `-DecltypeType 0x95d7e0 'decltype(declval<_Tp &>().~_Tp())' dependent
| | | |     `-CallExpr 0x95d780 <col:48, col:69> 'void'
| | | |       `-CXXPseudoDestructorExpr 0x95d730 <col:48, col:65> '<bound member function type>'
| | | |         `-CallExpr 0x95d700 <col:48, col:62> '<dependent type>'
| | | |           `-UnresolvedLookupExpr 0x95d688 <col:48, col:60> '<dependent type>' lvalue (ADL) = 'declval' 0x95ab00
| | | `-CXXMethodDecl 0x95d9f8 <line:870:7, col:34> col:24 __test 'std::true_type (int)' static
| | |   `-ParmVarDecl 0x95d8d0 <col:31> col:34 'int'
| | `-FunctionTemplateDecl 0x95dcb0 <line:872:5, line:873:35> col:25 __test
| |   |-TemplateTypeParmDecl 0x95daf8 <line:872:14> col:22 typename depth 0 index 0
| |   `-CXXMethodDecl 0x95dc10 <line:873:7, col:35> col:25 __test 'std::false_type (...)' static
| |-ClassTemplateDecl 0x95de50 <line:876:3, line:881:5> line:877:12 __is_destructible_impl
| | |-TemplateTypeParmDecl 0x95dd30 <line:876:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x95ddc0 <line:877:5, line:881:5> line:877:12 struct __is_destructible_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::__do_is_destructible_impl'
| |   |-CXXRecordDecl 0x95e0d0 <col:5, col:12> col:12 implicit struct __is_destructible_impl
| |   `-TypedefDecl 0x95ec48 <line:880:7, col:40> col:40 type 'decltype(__test<_Tp>(0))'
| |     `-DecltypeType 0x95ec10 'decltype(__test<_Tp>(0))' dependent
| |       `-CallExpr 0x95eba0 <col:24, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x95eb00 <col:24, col:34> '<dependent type>' lvalue (no ADL) = '__test' 0x95da98 0x95dcb0
| |         `-IntegerLiteral 0x95eb80 <col:36> 'int' 0
| |-ClassTemplateDecl 0x95f558 <line:883:3, line:888:12> col:12 __is_destructible_safe
| | |-TemplateTypeParmDecl 0x95ecb8 <line:883:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x95f0e8 <line:884:12, line:886:44> line:884:17 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x95f148 <col:19, line:886:44> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x95f0a0 <line:884:19, line:886:44> '<dependent type>' lvalue
| | |-NonTypeTemplateParmDecl 0x95f428 <line:887:12, col:61> col:17 'bool' depth 0 index 2
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x95f488 <col:19, col:61> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x95f3e0 <col:19, col:61> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x95f4c8 <line:888:5, col:12> col:12 struct __is_destructible_safe
| |-ClassTemplatePartialSpecializationDecl 0x95fa30 <line:890:3, line:894:7> line:891:12 struct __is_destructible_safe definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_destructible_impl<typename remove_all_extents<_Tp>::type>::type'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x95f7d8 <line:890:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x960450 <line:891:5, col:12> col:12 implicit struct __is_destructible_safe
| |-ClassTemplatePartialSpecializationDecl 0x960750 <line:896:3, line:898:27> line:897:12 struct __is_destructible_safe definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x9604f8 <line:896:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x960a78 <line:897:5, col:12> col:12 implicit struct __is_destructible_safe
| |-ClassTemplatePartialSpecializationDecl 0x960d70 <line:900:3, line:902:26> line:901:12 struct __is_destructible_safe definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x960b20 <line:900:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x961178 <line:901:5, col:12> col:12 implicit struct __is_destructible_safe
| |-ClassTemplateDecl 0x961340 <line:906:3, line:912:5> line:907:12 is_destructible
| | |-TemplateTypeParmDecl 0x961220 <line:906:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9612b0 <line:907:5, line:912:5> line:907:12 struct is_destructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_destructible_safe<_Tp>::type'
| |   |-CXXRecordDecl 0x961d10 <col:5, col:12> col:12 implicit struct is_destructible
| |   `-StaticAssertDecl 0x961f88 <line:910:7, line:911:68> line:910:7
| |     |-CallExpr 0x961f08 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x961dc0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x961ee0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x961ea0 <col:73, col:74> 'void'
| |     `-StringLiteral 0x961f30 <line:911:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-CXXRecordDecl 0x962d10 <line:920:3, line:928:3> line:920:10 referenced struct __do_is_nt_destructible_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x962e28 <col:3, col:10> col:10 implicit struct __do_is_nt_destructible_impl
| | |-FunctionTemplateDecl 0x963478 <line:922:5, line:924:17> col:7 __test
| | | |-TemplateTypeParmDecl 0x962eb8 <line:922:14, col:23> col:23 referenced typename depth 0 index 0 _Tp
| | | `-CXXMethodDecl 0x9633d8 <line:923:7, line:924:17> col:7 __test '__bool_constant<noexcept(declval<_Tp &>().~_Tp())> (int)' static
| | |   `-ParmVarDecl 0x9632a0 <col:14> col:17 'int'
| | `-FunctionTemplateDecl 0x963630 <line:926:5, line:927:35> col:25 __test
| |   |-TemplateTypeParmDecl 0x9634d8 <line:926:14> col:22 typename depth 0 index 0
| |   `-CXXMethodDecl 0x963590 <line:927:7, col:35> col:25 __test 'std::false_type (...)' static
| |-ClassTemplateDecl 0x9637d0 <line:930:3, line:935:5> line:931:12 __is_nt_destructible_impl
| | |-TemplateTypeParmDecl 0x9636b0 <line:930:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x963740 <line:931:5, line:935:5> line:931:12 struct __is_nt_destructible_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::__do_is_nt_destructible_impl'
| |   |-CXXRecordDecl 0x963a50 <col:5, col:12> col:12 implicit struct __is_nt_destructible_impl
| |   `-TypedefDecl 0x963c08 <line:934:7, col:40> col:40 type 'decltype(__test<_Tp>(0))'
| |     `-DecltypeType 0x963bd0 'decltype(__test<_Tp>(0))' dependent
| |       `-CallExpr 0x963ba8 <col:24, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x963b08 <col:24, col:34> '<dependent type>' lvalue (no ADL) = '__test' 0x963478 0x963630
| |         `-IntegerLiteral 0x963b88 <col:36> 'int' 0
| |-ClassTemplateDecl 0x9646b8 <line:937:3, line:942:12> col:12 __is_nt_destructible_safe
| | |-TemplateTypeParmDecl 0x963c78 <line:937:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x964288 <line:938:12, line:940:44> line:938:17 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9642e8 <col:19, line:940:44> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x964240 <line:938:19, line:940:44> '<dependent type>' lvalue
| | |-NonTypeTemplateParmDecl 0x964588 <line:941:12, col:61> col:17 'bool' depth 0 index 2
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9645e8 <col:19, col:61> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x964540 <col:19, col:61> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x964628 <line:942:5, col:12> col:12 struct __is_nt_destructible_safe
| |-ClassTemplatePartialSpecializationDecl 0x964b90 <line:944:3, line:948:7> line:945:12 struct __is_nt_destructible_safe definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_nt_destructible_impl<typename remove_all_extents<_Tp>::type>::type'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x964938 <line:944:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x938be0 <line:945:5, col:12> col:12 implicit struct __is_nt_destructible_safe
| |-ClassTemplatePartialSpecializationDecl 0x938ee0 <line:950:3, line:952:27> line:951:12 struct __is_nt_destructible_safe definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x938c88 <line:950:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x939208 <line:951:5, col:12> col:12 implicit struct __is_nt_destructible_safe
| |-ClassTemplatePartialSpecializationDecl 0x939500 <line:954:3, line:956:26> line:955:12 struct __is_nt_destructible_safe definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x9392b0 <line:954:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x939828 <line:955:5, col:12> col:12 implicit struct __is_nt_destructible_safe
| |-ClassTemplateDecl 0x9693f0 <line:960:3, line:966:5> line:961:12 is_nothrow_destructible
| | |-TemplateTypeParmDecl 0x9398d0 <line:960:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x969360 <line:961:5, line:966:5> line:961:12 struct is_nothrow_destructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nt_destructible_safe<_Tp>::type'
| |   |-CXXRecordDecl 0x969d90 <col:5, col:12> col:12 implicit struct is_nothrow_destructible
| |   `-StaticAssertDecl 0x96a008 <line:964:7, line:965:68> line:964:7
| |     |-CallExpr 0x969f88 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x969e40 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x969f60 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x969f20 <col:73, col:74> 'void'
| |     `-StringLiteral 0x969fb0 <line:965:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x96a208 <line:969:3, line:972:7> line:970:12 __is_constructible_impl
| | |-TemplateTypeParmDecl 0x96a060 <line:969:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x96a0d8 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-CXXRecordDecl 0x96a178 <line:970:5, line:972:7> line:970:12 struct __is_constructible_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<__is_constructible(_Tp, _Args...)>':'integral_constant<bool, __is_constructible(_Tp, _Args...)>'
| |   `-CXXRecordDecl 0x96a798 <col:5, col:12> col:12 implicit struct __is_constructible_impl
| |-ClassTemplateDecl 0x96a9e8 <line:976:3, line:982:5> line:977:12 is_constructible
| | |-TemplateTypeParmDecl 0x96a840 <line:976:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x96a8b8 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-CXXRecordDecl 0x96a958 <line:977:5, line:982:5> line:977:12 struct is_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_constructible_impl<_Tp, _Args...>'
| |   |-CXXRecordDecl 0x96ade0 <col:5, col:12> col:12 implicit struct is_constructible
| |   `-StaticAssertDecl 0x96b058 <line:980:7, line:981:68> line:980:7
| |     |-CallExpr 0x96afd8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x96ae90 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x96afb0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x96af70 <col:73, col:74> 'void'
| |     `-StringLiteral 0x96b000 <line:981:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x96b1d0 <line:985:3, line:991:5> line:986:12 is_default_constructible
| | |-TemplateTypeParmDecl 0x96b0b0 <line:985:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x96b140 <line:986:5, line:991:5> line:986:12 struct is_default_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_constructible_impl<_Tp>::type'
| |   |-CXXRecordDecl 0x96b840 <col:5, col:12> col:12 implicit struct is_default_constructible
| |   `-StaticAssertDecl 0x96bab8 <line:989:7, line:990:68> line:989:7
| |     |-CallExpr 0x96ba38 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x96b8f0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x96ba10 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x96b9d0 <col:73, col:74> 'void'
| |     `-StringLiteral 0x96ba60 <line:990:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x96bdb0 <line:994:3, line:995:12> col:12 __is_copy_constructible_impl
| | |-TemplateTypeParmDecl 0x96bb10 <line:994:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x96bc88 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x96bce8 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x96bc40 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x96bd20 <line:995:5, col:12> col:12 struct __is_copy_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0x96c1c8 <line:997:3, line:999:27> line:998:12 struct __is_copy_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x96bfe8 <line:997:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x96c488 <line:998:5, col:12> col:12 implicit struct __is_copy_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0x96cc08 <line:1001:3, line:1004:7> line:1002:12 struct __is_copy_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_constructible_impl<_Tp, const _Tp &>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x96c530 <line:1001:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x96d050 <line:1002:5, col:12> col:12 implicit struct __is_copy_constructible_impl
| |-ClassTemplateDecl 0x96d220 <line:1008:3, line:1014:5> line:1009:12 is_copy_constructible
| | |-TemplateTypeParmDecl 0x96d0f8 <line:1008:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x96d190 <line:1009:5, line:1014:5> line:1009:12 struct is_copy_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_copy_constructible_impl<_Tp>'
| |   |-CXXRecordDecl 0x96d690 <col:5, col:12> col:12 implicit struct is_copy_constructible
| |   `-StaticAssertDecl 0x96d908 <line:1012:7, line:1013:68> line:1012:7
| |     |-CallExpr 0x96d888 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x96d740 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x96d860 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x96d820 <col:73, col:74> 'void'
| |     `-StringLiteral 0x96d8b0 <line:1013:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x96f108 <line:1017:3, line:1018:12> col:12 __is_move_constructible_impl
| | |-TemplateTypeParmDecl 0x96d960 <line:1017:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x96efe0 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x96f040 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x96ef98 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x96f078 <line:1018:5, col:12> col:12 struct __is_move_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0x96f528 <line:1020:3, line:1022:27> line:1021:12 struct __is_move_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x96f348 <line:1020:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x96f7e8 <line:1021:5, col:12> col:12 implicit struct __is_move_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0x96fa68 <line:1024:3, line:1027:7> line:1025:12 struct __is_move_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_constructible_impl<_Tp, _Tp &&>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x96f890 <line:1024:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x96fe80 <line:1025:5, col:12> col:12 implicit struct __is_move_constructible_impl
| |-ClassTemplateDecl 0x971490 <line:1031:3, line:1037:5> line:1032:12 is_move_constructible
| | |-TemplateTypeParmDecl 0x96ff28 <line:1031:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x971400 <line:1032:5, line:1037:5> line:1032:12 struct is_move_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_move_constructible_impl<_Tp>'
| |   |-CXXRecordDecl 0x9718f0 <col:5, col:12> col:12 implicit struct is_move_constructible
| |   `-StaticAssertDecl 0x971b68 <line:1035:7, line:1036:68> line:1035:7
| |     |-CallExpr 0x971ae8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x9719a0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x971ac0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x971a80 <col:73, col:74> 'void'
| |     `-StringLiteral 0x971b10 <line:1036:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-TypeAliasTemplateDecl 0x971fa8 <line:1040:3, line:1042:66> line:1041:5 __is_nothrow_constructible_impl
| | |-TemplateTypeParmDecl 0x971bc0 <line:1040:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x971c38 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-TypeAliasDecl 0x971f48 <line:1041:5, line:1042:66> line:1041:11 __is_nothrow_constructible_impl '__bool_constant<__is_nothrow_constructible(_Tp, _Args...)>':'integral_constant<bool, __is_nothrow_constructible(_Tp, _Args...)>'
| |   `-TemplateSpecializationType 0x971ec0 '__bool_constant<__is_nothrow_constructible(_Tp, _Args...)>' sugar dependent alias __bool_constant
| |     |-TemplateArgument expr
| |     | `-TypeTraitExpr 0x971d38 <line:1042:25, col:65> 'bool' __is_nothrow_constructible
| |     `-TemplateSpecializationType 0x971e40 'integral_constant<bool, __is_nothrow_constructible(_Tp, _Args...)>' dependent integral_constant
| |       |-TemplateArgument type 'bool'
| |       | `-BuiltinType 0x826220 'bool'
| |       `-TemplateArgument expr
| |         `-SubstNonTypeTemplateParmExpr 0x971d98 <line:90:53> 'bool'
| |           |-NonTypeTemplateParmDecl 0x90ee48 <line:89:12, col:17> col:17 referenced 'bool' depth 0 index 0 __v
| |           `-TypeTraitExpr 0x971d38 <line:1042:25, col:65> 'bool' __is_nothrow_constructible
| |-ClassTemplateDecl 0x9721a8 <line:1046:3, line:1052:5> line:1047:12 is_nothrow_constructible
| | |-TemplateTypeParmDecl 0x972000 <line:1046:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x972078 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-CXXRecordDecl 0x972118 <line:1047:5, line:1052:5> line:1047:12 struct is_nothrow_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_constructible_impl<_Tp, _Args...>::type'
| |   |-CXXRecordDecl 0x972ba0 <col:5, col:12> col:12 implicit struct is_nothrow_constructible
| |   `-StaticAssertDecl 0x972e18 <line:1050:7, line:1051:68> line:1050:7
| |     |-CallExpr 0x972d98 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x972c50 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x972d70 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x972d30 <col:73, col:74> 'void'
| |     `-StringLiteral 0x972dc0 <line:1051:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x972f90 <line:1055:3, line:1061:5> line:1056:12 is_nothrow_default_constructible
| | |-TemplateTypeParmDecl 0x972e70 <line:1055:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x972f00 <line:1056:5, line:1061:5> line:1056:12 struct is_nothrow_default_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<__is_nothrow_constructible(_Tp)>':'integral_constant<bool, __is_nothrow_constructible(_Tp)>'
| |   |-CXXRecordDecl 0x9733f8 <col:5, col:12> col:12 implicit struct is_nothrow_default_constructible
| |   `-StaticAssertDecl 0x973ab8 <line:1059:7, line:1060:68> line:1059:7
| |     |-CallExpr 0x973a38 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x9734a8 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x973a10 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x973590 <col:73, col:74> 'void'
| |     `-StringLiteral 0x973a60 <line:1060:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x973db0 <line:1064:3, line:1065:12> col:12 __is_nothrow_copy_constructible_impl
| | |-TemplateTypeParmDecl 0x973b10 <line:1064:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x973c88 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x973ce8 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x973c40 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x973d20 <line:1065:5, col:12> col:12 struct __is_nothrow_copy_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0x9741c8 <line:1067:3, line:1069:27> line:1068:12 struct __is_nothrow_copy_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x973fe8 <line:1067:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x974488 <line:1068:5, col:12> col:12 implicit struct __is_nothrow_copy_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0x974708 <line:1071:3, line:1074:7> line:1072:12 struct __is_nothrow_copy_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_nothrow_constructible_impl<_Tp, const _Tp &>':'integral_constant<bool, __is_nothrow_constructible(type-parameter-0-0, const type-parameter-0-0 &)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x974530 <line:1071:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x975198 <line:1072:5, col:12> col:12 implicit struct __is_nothrow_copy_constructible_impl
| |-ClassTemplateDecl 0x975360 <line:1078:3, line:1084:5> line:1079:12 is_nothrow_copy_constructible
| | |-TemplateTypeParmDecl 0x975240 <line:1078:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9752d0 <line:1079:5, line:1084:5> line:1079:12 struct is_nothrow_copy_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_copy_constructible_impl<_Tp>::type'
| |   |-CXXRecordDecl 0x9758a0 <col:5, col:12> col:12 implicit struct is_nothrow_copy_constructible
| |   `-StaticAssertDecl 0x975b18 <line:1082:7, line:1083:68> line:1082:7
| |     |-CallExpr 0x975a98 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x975950 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x975a70 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x975a30 <col:73, col:74> 'void'
| |     `-StringLiteral 0x975ac0 <line:1083:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x975e10 <line:1087:3, line:1088:12> col:12 __is_nothrow_move_constructible_impl
| | |-TemplateTypeParmDecl 0x975b70 <line:1087:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x975ce8 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x975d48 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x975ca0 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x975d80 <line:1088:5, col:12> col:12 struct __is_nothrow_move_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0x976758 <line:1090:3, line:1092:27> line:1091:12 struct __is_nothrow_move_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x976578 <line:1090:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x976a18 <line:1091:5, col:12> col:12 implicit struct __is_nothrow_move_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0x976c98 <line:1094:3, line:1097:7> line:1095:12 struct __is_nothrow_move_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_nothrow_constructible_impl<_Tp, _Tp &&>':'integral_constant<bool, __is_nothrow_constructible(type-parameter-0-0, type-parameter-0-0 &&)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x976ac0 <line:1094:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x977298 <line:1095:5, col:12> col:12 implicit struct __is_nothrow_move_constructible_impl
| |-ClassTemplateDecl 0x978570 <line:1101:3, line:1107:5> line:1102:12 is_nothrow_move_constructible
| | |-TemplateTypeParmDecl 0x977340 <line:1101:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9784e0 <line:1102:5, line:1107:5> line:1102:12 struct is_nothrow_move_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_move_constructible_impl<_Tp>::type'
| |   |-CXXRecordDecl 0x978ab0 <col:5, col:12> col:12 implicit struct is_nothrow_move_constructible
| |   `-StaticAssertDecl 0x978d28 <line:1105:7, line:1106:68> line:1105:7
| |     |-CallExpr 0x978ca8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x978b60 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x978c80 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x978c40 <col:73, col:74> 'void'
| |     `-StringLiteral 0x978cd0 <line:1106:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x978f28 <line:1110:3, line:1116:5> line:1111:12 is_assignable
| | |-TemplateTypeParmDecl 0x978d80 <line:1110:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x978df8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0x978e98 <line:1111:5, line:1116:5> line:1111:12 struct is_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<__is_assignable(_Tp, _Up)>':'integral_constant<bool, __is_assignable(_Tp, _Up)>'
| |   |-CXXRecordDecl 0x9793e8 <col:5, col:12> col:12 implicit struct is_assignable
| |   `-StaticAssertDecl 0x979f78 <line:1114:7, line:1115:68> line:1114:7
| |     |-CallExpr 0x979ef8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x979db0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x979ed0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x979e90 <col:73, col:74> 'void'
| |     `-StringLiteral 0x979f20 <line:1115:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x97a270 <line:1118:3, line:1119:12> col:12 __is_copy_assignable_impl
| | |-TemplateTypeParmDecl 0x979fd0 <line:1118:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x97a148 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x97a1a8 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x97a100 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x97a1e0 <line:1119:5, col:12> col:12 struct __is_copy_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0x97a688 <line:1121:3, line:1123:27> line:1122:12 struct __is_copy_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x97a4a8 <line:1121:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x97a948 <line:1122:5, col:12> col:12 implicit struct __is_copy_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0x97abc8 <line:1125:3, line:1128:7> line:1126:12 struct __is_copy_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__bool_constant<__is_assignable(_Tp &, const _Tp &)>':'integral_constant<bool, __is_assignable(_Tp &, const _Tp &)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x97a9f0 <line:1125:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x97c588 <line:1126:5, col:12> col:12 implicit struct __is_copy_assignable_impl
| |-ClassTemplateDecl 0x97c750 <line:1131:3, line:1137:5> line:1132:12 is_copy_assignable
| | |-TemplateTypeParmDecl 0x97c630 <line:1131:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x97c6c0 <line:1132:5, line:1137:5> line:1132:12 struct is_copy_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_copy_assignable_impl<_Tp>::type'
| |   |-CXXRecordDecl 0x97cc90 <col:5, col:12> col:12 implicit struct is_copy_assignable
| |   `-StaticAssertDecl 0x97cf08 <line:1135:7, line:1136:68> line:1135:7
| |     |-CallExpr 0x97ce88 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x97cd40 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x97ce60 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x97ce20 <col:73, col:74> 'void'
| |     `-StringLiteral 0x97ceb0 <line:1136:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x97d740 <line:1139:3, line:1140:12> col:12 __is_move_assignable_impl
| | |-TemplateTypeParmDecl 0x97cf60 <line:1139:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x97d0d8 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x97d138 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x97d090 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x97d170 <line:1140:5, col:12> col:12 struct __is_move_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0x97db58 <line:1142:3, line:1144:27> line:1143:12 struct __is_move_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x97d978 <line:1142:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x97de18 <line:1143:5, col:12> col:12 implicit struct __is_move_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0x97e098 <line:1146:3, line:1149:7> line:1147:12 struct __is_move_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__bool_constant<__is_assignable(_Tp &, _Tp &&)>':'integral_constant<bool, __is_assignable(_Tp &, _Tp &&)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x97dec0 <line:1146:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x97e5b8 <line:1147:5, col:12> col:12 implicit struct __is_move_assignable_impl
| |-ClassTemplateDecl 0x97ecc0 <line:1152:3, line:1158:5> line:1153:12 is_move_assignable
| | |-TemplateTypeParmDecl 0x97e660 <line:1152:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x97ec30 <line:1153:5, line:1158:5> line:1153:12 struct is_move_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_move_assignable_impl<_Tp>::type'
| |   |-CXXRecordDecl 0x97f200 <col:5, col:12> col:12 implicit struct is_move_assignable
| |   `-StaticAssertDecl 0x97f478 <line:1156:7, line:1157:68> line:1156:7
| |     |-CallExpr 0x97f3f8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x97f2b0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x97f3d0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x97f390 <col:73, col:74> 'void'
| |     `-StringLiteral 0x97f420 <line:1157:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-TypeAliasTemplateDecl 0x97f878 <line:1160:3, line:1162:58> line:1161:5 __is_nothrow_assignable_impl
| | |-TemplateTypeParmDecl 0x97f4d0 <line:1160:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x97f548 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-TypeAliasDecl 0x97f818 <line:1161:5, line:1162:58> line:1161:11 __is_nothrow_assignable_impl '__bool_constant<__is_nothrow_assignable(_Tp, _Up)>':'integral_constant<bool, __is_nothrow_assignable(_Tp, _Up)>'
| |   `-TemplateSpecializationType 0x97f790 '__bool_constant<__is_nothrow_assignable(_Tp, _Up)>' sugar dependent alias __bool_constant
| |     |-TemplateArgument expr
| |     | `-TypeTraitExpr 0x97f608 <line:1162:25, col:57> 'bool' __is_nothrow_assignable
| |     `-TemplateSpecializationType 0x97f710 'integral_constant<bool, __is_nothrow_assignable(_Tp, _Up)>' dependent integral_constant
| |       |-TemplateArgument type 'bool'
| |       | `-BuiltinType 0x826220 'bool'
| |       `-TemplateArgument expr
| |         `-SubstNonTypeTemplateParmExpr 0x97f668 <line:90:53> 'bool'
| |           |-NonTypeTemplateParmDecl 0x90ee48 <line:89:12, col:17> col:17 referenced 'bool' depth 0 index 0 __v
| |           `-TypeTraitExpr 0x97f608 <line:1162:25, col:57> 'bool' __is_nothrow_assignable
| |-ClassTemplateDecl 0x97fa78 <line:1165:3, line:1171:5> line:1166:12 is_nothrow_assignable
| | |-TemplateTypeParmDecl 0x97f8d0 <line:1165:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x97f948 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0x97f9e8 <line:1166:5, line:1171:5> line:1166:12 struct is_nothrow_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_assignable_impl<_Tp, _Up>':'integral_constant<bool, __is_nothrow_assignable(type-parameter-0-0, type-parameter-0-1)>'
| |   |-CXXRecordDecl 0x9808d8 <col:5, col:12> col:12 implicit struct is_nothrow_assignable
| |   `-StaticAssertDecl 0x980b58 <line:1169:7, line:1170:68> line:1169:7
| |     |-CallExpr 0x980ad8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x980988 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x980ab0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x980a70 <col:73, col:74> 'void'
| |     `-StringLiteral 0x980b00 <line:1170:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x980e50 <line:1173:3, line:1174:12> col:12 __is_nt_copy_assignable_impl
| | |-TemplateTypeParmDecl 0x980bb0 <line:1173:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x980d28 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x980d88 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x980ce0 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x980dc0 <line:1174:5, col:12> col:12 struct __is_nt_copy_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0x981268 <line:1176:3, line:1178:27> line:1177:12 struct __is_nt_copy_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x981088 <line:1176:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x981a18 <line:1177:5, col:12> col:12 implicit struct __is_nt_copy_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0x981c98 <line:1180:3, line:1183:7> line:1181:12 struct __is_nt_copy_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_nothrow_assignable_impl<_Tp &, const _Tp &>':'integral_constant<bool, __is_nothrow_assignable(type-parameter-0-0 &, const type-parameter-0-0 &)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x981ac0 <line:1180:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9822e8 <line:1181:5, col:12> col:12 implicit struct __is_nt_copy_assignable_impl
| |-ClassTemplateDecl 0x9824b0 <line:1186:3, line:1192:5> line:1187:12 is_nothrow_copy_assignable
| | |-TemplateTypeParmDecl 0x982390 <line:1186:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x982420 <line:1187:5, line:1192:5> line:1187:12 struct is_nothrow_copy_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nt_copy_assignable_impl<_Tp>'
| |   |-CXXRecordDecl 0x982e60 <col:5, col:12> col:12 implicit struct is_nothrow_copy_assignable
| |   `-StaticAssertDecl 0x9830d8 <line:1190:7, line:1191:68> line:1190:7
| |     |-CallExpr 0x983058 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x982f10 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x983030 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x982ff0 <col:73, col:74> 'void'
| |     `-StringLiteral 0x983080 <line:1191:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x9833d0 <line:1194:3, line:1195:12> col:12 __is_nt_move_assignable_impl
| | |-TemplateTypeParmDecl 0x983130 <line:1194:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x9832a8 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x983308 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x983260 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x983340 <line:1195:5, col:12> col:12 struct __is_nt_move_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0x9837e8 <line:1197:3, line:1199:27> line:1198:12 struct __is_nt_move_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x983608 <line:1197:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x983aa8 <line:1198:5, col:12> col:12 implicit struct __is_nt_move_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0x983d28 <line:1201:3, line:1204:7> line:1202:12 struct __is_nt_move_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__is_nothrow_assignable_impl<_Tp &, _Tp &&>':'integral_constant<bool, __is_nothrow_assignable(type-parameter-0-0 &, type-parameter-0-0 &&)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x983b50 <line:1201:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x984858 <line:1202:5, col:12> col:12 implicit struct __is_nt_move_assignable_impl
| |-ClassTemplateDecl 0x984a20 <line:1207:3, line:1213:5> line:1208:12 is_nothrow_move_assignable
| | |-TemplateTypeParmDecl 0x984900 <line:1207:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x984990 <line:1208:5, line:1213:5> line:1208:12 struct is_nothrow_move_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nt_move_assignable_impl<_Tp>'
| |   |-CXXRecordDecl 0x984e80 <col:5, col:12> col:12 implicit struct is_nothrow_move_assignable
| |   `-StaticAssertDecl 0x9850f8 <line:1211:7, line:1212:68> line:1211:7
| |     |-CallExpr 0x985078 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x984f30 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x985050 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x985010 <col:73, col:74> 'void'
| |     `-StringLiteral 0x9850a0 <line:1212:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x9852f8 <line:1216:3, line:1222:5> line:1217:12 is_trivially_constructible
| | |-TemplateTypeParmDecl 0x985150 <line:1216:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x9851c8 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-CXXRecordDecl 0x985268 <line:1217:5, line:1222:5> line:1217:12 struct is_trivially_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<__is_trivially_constructible(_Tp, _Args...)>':'integral_constant<bool, __is_trivially_constructible(_Tp, _Args...)>'
| |   |-CXXRecordDecl 0x986128 <col:5, col:12> col:12 implicit struct is_trivially_constructible
| |   `-StaticAssertDecl 0x9863a8 <line:1220:7, line:1221:68> line:1220:7
| |     |-CallExpr 0x986328 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x9861d8 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x986300 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x9862c0 <col:73, col:74> 'void'
| |     `-StringLiteral 0x986350 <line:1221:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x986520 <line:1225:3, line:1231:5> line:1226:12 is_trivially_default_constructible
| | |-TemplateTypeParmDecl 0x986400 <line:1225:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x986490 <line:1226:5, line:1231:5> line:1226:12 struct is_trivially_default_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<__is_trivially_constructible(_Tp)>':'integral_constant<bool, __is_trivially_constructible(_Tp)>'
| |   |-CXXRecordDecl 0x986988 <col:5, col:12> col:12 implicit struct is_trivially_default_constructible
| |   `-StaticAssertDecl 0x986c08 <line:1229:7, line:1230:68> line:1229:7
| |     |-CallExpr 0x986b88 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x986a38 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x986b60 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x986b20 <col:73, col:74> 'void'
| |     `-StringLiteral 0x986bb0 <line:1230:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-CXXRecordDecl 0x988588 <line:1233:3, line:1243:3> line:1233:10 referenced struct __do_is_implicitly_default_constructible_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x9886a8 <col:3, col:10> col:10 implicit struct __do_is_implicitly_default_constructible_impl
| | |-FunctionTemplateDecl 0x9889c8 <line:1235:5, line:1236:36> col:17 __helper
| | | |-TemplateTypeParmDecl 0x988738 <line:1235:15, col:24> col:24 referenced typename depth 0 index 0 _Tp
| | | `-CXXMethodDecl 0x988928 <line:1236:5, col:36> col:17 __helper 'void (const _Tp &)' static
| | |   `-ParmVarDecl 0x988808 <col:26, col:35> col:36 'const _Tp &'
| | |-FunctionTemplateDecl 0x988ee8 <line:1238:5, line:1240:68> line:1239:22 __test
| | | |-TemplateTypeParmDecl 0x988a28 <line:1238:15, col:24> col:24 referenced typename depth 0 index 0 _Tp
| | | `-CXXMethodDecl 0x988e48 <line:1239:5, line:1240:68> line:1239:22 __test 'std::true_type (const _Tp &, decltype(__helper<const _Tp &>({})) *)' static
| | |   |-ParmVarDecl 0x988af8 <col:29, col:38> col:39 'const _Tp &'
| | |   `-ParmVarDecl 0x988d30 <line:1240:29, col:67> col:65 'decltype(__helper<const _Tp &>({})) *' cinit
| | |     `-IntegerLiteral 0x989038 <col:67> 'int' 0
| | `-CXXMethodDecl 0x988f70 <line:1242:5, col:33> col:23 __test 'std::false_type (...)' static
| |-ClassTemplateDecl 0x9891f0 <line:1245:3, line:1250:5> line:1246:12 __is_implicitly_default_constructible_impl
| | |-TemplateTypeParmDecl 0x9890d0 <line:1245:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x989160 <line:1246:5, line:1250:5> line:1246:12 struct __is_implicitly_default_constructible_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::__do_is_implicitly_default_constructible_impl'
| |   |-CXXRecordDecl 0x989470 <col:5, col:12> col:12 implicit struct __is_implicitly_default_constructible_impl
| |   `-TypedefDecl 0x989da8 <line:1249:7, col:48> col:48 type 'decltype(__test(declval<_Tp>()))'
| |     `-DecltypeType 0x989d70 'decltype(__test(declval<_Tp>()))' dependent
| |       `-CallExpr 0x989d08 <col:24, col:45> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x989500 <col:24> '<overloaded function type>' lvalue (no ADL) = '__test' 0x988ee8 0x988f70
| |         `-CallExpr 0x989ce8 <col:31, col:44> '<dependent type>'
| |           `-UnresolvedLookupExpr 0x989c70 <col:31, col:42> '<dependent type>' lvalue (ADL) = 'declval' 0x95ab00
| |-ClassTemplateDecl 0x989f40 <line:1252:3, line:1255:7> line:1253:12 __is_implicitly_default_constructible_safe
| | |-TemplateTypeParmDecl 0x989e18 <line:1252:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x989eb0 <line:1253:5, line:1255:7> line:1253:12 struct __is_implicitly_default_constructible_safe definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_implicitly_default_constructible_impl<_Tp>::type'
| |   `-CXXRecordDecl 0x98a300 <col:5, col:12> col:12 implicit struct __is_implicitly_default_constructible_safe
| |-ClassTemplateDecl 0x98a4d0 <line:1257:3, line:1261:7> line:1258:12 __is_implicitly_default_constructible
| | |-TemplateTypeParmDecl 0x98a3a8 <line:1257:13, col:22> col:22 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x98a440 <line:1258:5, line:1261:7> line:1258:12 struct __is_implicitly_default_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__and_<__is_constructible_impl<_Tp>, __is_implicitly_default_constructible_safe<_Tp>>'
| |   `-CXXRecordDecl 0x98a980 <col:5, col:12> col:12 implicit struct __is_implicitly_default_constructible
| |-ClassTemplateDecl 0x98b610 <line:1263:3, line:1264:12> col:12 __is_trivially_copy_constructible_impl
| | |-TemplateTypeParmDecl 0x98aa28 <line:1263:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x98aba8 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x98ac08 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x98ab60 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x98b580 <line:1264:5, col:12> col:12 struct __is_trivially_copy_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0x98ba28 <line:1266:3, line:1268:27> line:1267:12 struct __is_trivially_copy_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x98b848 <line:1266:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x98bce8 <line:1267:5, col:12> col:12 implicit struct __is_trivially_copy_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0x98bf68 <line:1270:3, line:1275:7> line:1271:12 struct __is_trivially_copy_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__and_<__is_copy_constructible_impl<_Tp>, integral_constant<bool, __is_trivially_constructible(_Tp, const _Tp &)>>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x98bd90 <line:1270:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x98d0b0 <line:1271:5, col:12> col:12 implicit struct __is_trivially_copy_constructible_impl
| |-ClassTemplateDecl 0x98d280 <line:1278:3, line:1284:5> line:1279:12 is_trivially_copy_constructible
| | |-TemplateTypeParmDecl 0x98d158 <line:1278:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x98d1f0 <line:1279:5, line:1284:5> line:1279:12 struct is_trivially_copy_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_trivially_copy_constructible_impl<_Tp>'
| |   |-CXXRecordDecl 0x98d6e0 <col:5, col:12> col:12 implicit struct is_trivially_copy_constructible
| |   `-StaticAssertDecl 0x98d958 <line:1282:7, line:1283:68> line:1282:7
| |     |-CallExpr 0x98d8d8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x98d790 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x98d8b0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x98d870 <col:73, col:74> 'void'
| |     `-StringLiteral 0x98d900 <line:1283:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x98dc50 <line:1286:3, line:1287:12> col:12 __is_trivially_move_constructible_impl
| | |-TemplateTypeParmDecl 0x98d9b0 <line:1286:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x98db28 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x98db88 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x98dae0 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x98dbc0 <line:1287:5, col:12> col:12 struct __is_trivially_move_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0x98e978 <line:1289:3, line:1291:27> line:1290:12 struct __is_trivially_move_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x98de88 <line:1289:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x98ec38 <line:1290:5, col:12> col:12 implicit struct __is_trivially_move_constructible_impl
| |-ClassTemplatePartialSpecializationDecl 0x98eeb8 <line:1293:3, line:1298:7> line:1294:12 struct __is_trivially_move_constructible_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__and_<__is_move_constructible_impl<_Tp>, integral_constant<bool, __is_trivially_constructible(_Tp, _Tp &&)>>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x98ece0 <line:1293:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x98f5c0 <line:1294:5, col:12> col:12 implicit struct __is_trivially_move_constructible_impl
| |-ClassTemplateDecl 0x98f790 <line:1301:3, line:1307:5> line:1302:12 is_trivially_move_constructible
| | |-TemplateTypeParmDecl 0x98f668 <line:1301:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x98f700 <line:1302:5, line:1307:5> line:1302:12 struct is_trivially_move_constructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_trivially_move_constructible_impl<_Tp>'
| |   |-CXXRecordDecl 0x9900f0 <col:5, col:12> col:12 implicit struct is_trivially_move_constructible
| |   `-StaticAssertDecl 0x990368 <line:1305:7, line:1306:68> line:1305:7
| |     |-CallExpr 0x9902e8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x9901a0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x9902c0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x990280 <col:73, col:74> 'void'
| |     `-StringLiteral 0x990310 <line:1306:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x990568 <line:1310:3, line:1316:5> line:1311:12 is_trivially_assignable
| | |-TemplateTypeParmDecl 0x9903c0 <line:1310:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x990438 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0x9904d8 <line:1311:5, line:1316:5> line:1311:12 struct is_trivially_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<__is_trivially_assignable(_Tp, _Up)>':'integral_constant<bool, __is_trivially_assignable(_Tp, _Up)>'
| |   |-CXXRecordDecl 0x990a28 <col:5, col:12> col:12 implicit struct is_trivially_assignable
| |   `-StaticAssertDecl 0x990ca8 <line:1314:7, line:1315:68> line:1314:7
| |     |-CallExpr 0x990c28 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x990ad8 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x990c00 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x990bc0 <col:73, col:74> 'void'
| |     `-StringLiteral 0x990c50 <line:1315:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x9914c0 <line:1318:3, line:1319:12> col:12 __is_trivially_copy_assignable_impl
| | |-TemplateTypeParmDecl 0x990d00 <line:1318:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x991398 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9913f8 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x991350 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x991430 <line:1319:5, col:12> col:12 struct __is_trivially_copy_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0x9918d8 <line:1321:3, line:1323:27> line:1322:12 struct __is_trivially_copy_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x9916f8 <line:1321:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x991b98 <line:1322:5, col:12> col:12 implicit struct __is_trivially_copy_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0x991e18 <line:1325:3, line:1328:7> line:1326:12 struct __is_trivially_copy_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__bool_constant<__is_trivially_assignable(_Tp &, const _Tp &)>':'integral_constant<bool, __is_trivially_assignable(_Tp &, const _Tp &)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x991c40 <line:1325:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9927d8 <line:1326:5, col:12> col:12 implicit struct __is_trivially_copy_assignable_impl
| |-ClassTemplateDecl 0x9929a0 <line:1331:3, line:1337:5> line:1332:12 is_trivially_copy_assignable
| | |-TemplateTypeParmDecl 0x992880 <line:1331:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x992910 <line:1332:5, line:1337:5> line:1332:12 struct is_trivially_copy_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_trivially_copy_assignable_impl<_Tp>'
| |   |-CXXRecordDecl 0x992e00 <col:5, col:12> col:12 implicit struct is_trivially_copy_assignable
| |   `-StaticAssertDecl 0x993078 <line:1335:7, line:1336:68> line:1335:7
| |     |-CallExpr 0x992ff8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x992eb0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x992fd0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x992f90 <col:73, col:74> 'void'
| |     `-StringLiteral 0x993020 <line:1336:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x993370 <line:1339:3, line:1340:12> col:12 __is_trivially_move_assignable_impl
| | |-TemplateTypeParmDecl 0x9930d0 <line:1339:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x993248 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9932a8 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x993200 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x9932e0 <line:1340:5, col:12> col:12 struct __is_trivially_move_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0x9940a0 <line:1342:3, line:1344:27> line:1343:12 struct __is_trivially_move_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::false_type':'std::integral_constant<bool, false>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x9935a8 <line:1342:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x994358 <line:1343:5, col:12> col:12 implicit struct __is_trivially_move_assignable_impl
| |-ClassTemplatePartialSpecializationDecl 0x9945d8 <line:1346:3, line:1349:7> line:1347:12 struct __is_trivially_move_assignable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__bool_constant<__is_trivially_assignable(_Tp &, _Tp &&)>':'integral_constant<bool, __is_trivially_assignable(_Tp &, _Tp &&)>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x994400 <line:1346:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x994af8 <line:1347:5, col:12> col:12 implicit struct __is_trivially_move_assignable_impl
| |-ClassTemplateDecl 0x994cc0 <line:1352:3, line:1358:5> line:1353:12 is_trivially_move_assignable
| | |-TemplateTypeParmDecl 0x994ba0 <line:1352:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x994c30 <line:1353:5, line:1358:5> line:1353:12 struct is_trivially_move_assignable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_trivially_move_assignable_impl<_Tp>'
| |   |-CXXRecordDecl 0x995e40 <col:5, col:12> col:12 implicit struct is_trivially_move_assignable
| |   `-StaticAssertDecl 0x9960b8 <line:1356:7, line:1357:68> line:1356:7
| |     |-CallExpr 0x996038 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x995ef0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x996010 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x995fd0 <col:73, col:74> 'void'
| |     `-StringLiteral 0x996060 <line:1357:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x996230 <line:1361:3, line:1368:5> line:1362:12 is_trivially_destructible
| | |-TemplateTypeParmDecl 0x996110 <line:1361:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9961a0 <line:1362:5, line:1368:5> line:1362:12 struct is_trivially_destructible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__and_<__is_destructible_safe<_Tp>, __bool_constant<__has_trivial_destructor(_Tp)>>'
| |   |-CXXRecordDecl 0x997290 <col:5, col:12> col:12 implicit struct is_trivially_destructible
| |   `-StaticAssertDecl 0x997508 <line:1366:7, line:1367:68> line:1366:7
| |     |-CallExpr 0x997488 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x997340 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x997460 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x997420 <col:73, col:74> 'void'
| |     `-StringLiteral 0x9974b0 <line:1367:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x997680 <line:1372:3, line:1378:5> line:1373:12 has_virtual_destructor
| | |-TemplateTypeParmDecl 0x997560 <line:1372:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9975f0 <line:1373:5, line:1378:5> line:1373:12 struct has_virtual_destructor definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __has_virtual_destructor(_Tp)>'
| |   |-CXXRecordDecl 0x997a30 <col:5, col:12> col:12 implicit struct has_virtual_destructor
| |   `-StaticAssertDecl 0x997ca8 <line:1376:7, line:1377:68> line:1376:7
| |     |-CallExpr 0x997c28 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x997ae0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x997c00 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x997bc0 <col:73, col:74> 'void'
| |     `-StringLiteral 0x997c50 <line:1377:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x997e20 <line:1384:3, line:1390:5> line:1385:12 alignment_of
| | |-TemplateTypeParmDecl 0x997d00 <line:1384:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x997d90 <line:1385:5, line:1390:5> line:1385:12 struct alignment_of definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<std::size_t, alignof(_Tp)>'
| |   |-CXXRecordDecl 0x998ba0 <col:5, col:12> col:12 implicit struct alignment_of
| |   `-StaticAssertDecl 0x998e18 <line:1388:7, line:1389:68> line:1388:7
| |     |-CallExpr 0x998d98 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x998c50 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0x998d70 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0x998d30 <col:73, col:74> 'void'
| |     `-StringLiteral 0x998dc0 <line:1389:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0x998f90 <line:1393:3, line:1395:50> line:1394:12 rank
| | |-TemplateTypeParmDecl 0x998e70 <line:1393:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0x998f00 <line:1394:5, line:1395:50> line:1394:12 struct rank definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<std::size_t, 0>':'std::integral_constant<unsigned long, 0>'
| |   `-CXXRecordDecl 0x999fe0 <col:5, col:12> col:12 implicit struct rank
| |-ClassTemplatePartialSpecializationDecl 0x99a310 <line:1397:3, line:1399:69> line:1398:12 struct rank definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'integral_constant<std::size_t, 1 + rank<_Tp>::value>'
| | |-TemplateArgument type 'type-parameter-0-0[_Size]'
| | | `-DependentSizedArrayType 0x9309a0 'type-parameter-0-0[_Size]' dependent   <line:453:24, col:30>
| | |   |-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |   `-DeclRefExpr 0x930980 <col:25> 'std::size_t':'unsigned long' NonTypeTemplateParm 0x930900 '_Size' 'std::size_t':'unsigned long'
| | |-TemplateTypeParmDecl 0x99a088 <line:1397:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x99a158 <col:26, col:38> col:38 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Size
| | `-CXXRecordDecl 0x99a810 <line:1398:5, col:12> col:12 implicit struct rank
| |-ClassTemplatePartialSpecializationDecl 0x99aa50 <line:1401:3, line:1403:69> line:1402:12 struct rank definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'integral_constant<std::size_t, 1 + rank<_Tp>::value>'
| | |-TemplateArgument type 'type-parameter-0-0[]'
| | | `-IncompleteArrayType 0x931810 'type-parameter-0-0[]' dependent 
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x99a8b8 <line:1401:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x99aed0 <line:1402:5, col:12> col:12 implicit struct rank
| |-ClassTemplateDecl 0x99b260 prev 0x95adc8 <line:1406:3, line:1408:50> line:1407:12 extent
| | |-TemplateTypeParmDecl 0x99af78 <line:1406:12> col:20 typename depth 0 index 0
| | |-NonTypeTemplateParmDecl 0x99b150 <col:22, col:31> col:31 'unsigned int' depth 0 index 1 _Uint
| | | `-TemplateArgument expr
| | |   |-inherited from NonTypeTemplateParm 0x95ac80 '' 'unsigned int'
| | |   `-ConstantExpr 0x95acf8 <line:843:33> 'unsigned int'
| | |     |-value: Int 0
| | |     `-ImplicitCastExpr 0x95ace0 <col:33> 'unsigned int' <IntegralCast>
| | |       `-IntegerLiteral 0x95ac48 <col:33> 'int' 0
| | `-CXXRecordDecl 0x99b1d0 prev 0x95ad38 <line:1407:5, line:1408:50> line:1407:12 struct extent definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<std::size_t, 0>':'std::integral_constant<unsigned long, 0>'
| |   `-CXXRecordDecl 0x99b490 <col:5, col:12> col:12 implicit struct extent
| |-ClassTemplatePartialSpecializationDecl 0x99b8f8 <line:1410:3, line:1415:7> line:1411:12 struct extent definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'integral_constant<std::size_t, _Uint == 0 ? _Size : extent<_Tp, _Uint - 1>::value>'
| | |-TemplateArgument type 'type-parameter-0-0[_Size]'
| | | `-DependentSizedArrayType 0x99b730 'type-parameter-0-0[_Size]' dependent   <col:22, col:28>
| | |   |-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |   `-DeclRefExpr 0x99b708 <col:23> 'std::size_t':'unsigned long' NonTypeTemplateParm 0x99b680 '_Size' 'std::size_t':'unsigned long'
| | |-TemplateArgument expr
| | | `-DeclRefExpr 0x99b7d0 <col:31> 'unsigned int' NonTypeTemplateParm 0x99b5d0 '_Uint' 'unsigned int'
| | |-TemplateTypeParmDecl 0x99b538 <line:1410:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x99b5d0 <col:26, col:35> col:35 referenced 'unsigned int' depth 0 index 1 _Uint
| | |-NonTypeTemplateParmDecl 0x99b680 <col:42, col:54> col:54 referenced 'std::size_t':'unsigned long' depth 0 index 2 _Size
| | `-CXXRecordDecl 0x99c040 <line:1411:5, col:12> col:12 implicit struct extent
| |-ClassTemplatePartialSpecializationDecl 0x99d478 <line:1417:3, line:1422:7> line:1418:12 struct extent definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'integral_constant<std::size_t, _Uint == 0 ? 0 : extent<_Tp, _Uint - 1>::value>'
| | |-TemplateArgument type 'type-parameter-0-0[]'
| | | `-IncompleteArrayType 0x931810 'type-parameter-0-0[]' dependent 
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument expr
| | | `-DeclRefExpr 0x99d348 <col:26> 'unsigned int' NonTypeTemplateParm 0x99d280 '_Uint' 'unsigned int'
| | |-TemplateTypeParmDecl 0x99d1f0 <line:1417:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x99d280 <col:26, col:35> col:35 referenced 'unsigned int' depth 0 index 1 _Uint
| | `-CXXRecordDecl 0x99db40 <line:1418:5, col:12> col:12 implicit struct extent
| |-ClassTemplateDecl 0x99dd98 prev 0x9483e8 <line:1428:3, line:1435:7> line:1429:12 is_same
| | |-TemplateTypeParmDecl 0x99dbe8 <line:1428:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x99dc68 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0x99dd08 prev 0x948358 <line:1429:5, line:1435:7> line:1429:12 struct is_same definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_same(_Tp, _Up)>'
| |   `-CXXRecordDecl 0x99dfe0 <col:5, col:12> col:12 implicit struct is_same
| |-ClassTemplateDecl 0x99e350 <line:1445:3, line:1448:7> line:1446:12 is_base_of
| | |-TemplateTypeParmDecl 0x99e088 <line:1445:12, col:21> col:21 referenced typename depth 0 index 0 _Base
| | |-TemplateTypeParmDecl 0x99e108 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Derived
| | `-CXXRecordDecl 0x99e2c0 <line:1446:5, line:1448:7> line:1446:12 struct is_base_of definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'integral_constant<bool, __is_base_of(_Base, _Derived)>'
| |   `-CXXRecordDecl 0x99e760 <col:5, col:12> col:12 implicit struct is_base_of
| |-ClassTemplateDecl 0x99ee28 <line:1450:3, line:1456:5> line:1453:12 __is_convertible_helper
| | |-TemplateTypeParmDecl 0x99e808 <line:1450:12, col:21> col:21 referenced typename depth 0 index 0 _From
| | |-TemplateTypeParmDecl 0x99e888 <col:28, col:37> col:37 referenced typename depth 0 index 1 _To
| | |-NonTypeTemplateParmDecl 0x99ecf8 <line:1451:12, line:1452:41> line:1451:17 'bool' depth 0 index 2
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x99ed58 <col:19, line:1452:41> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x99ecb0 <line:1451:19, line:1452:41> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x99ed98 <line:1453:5, line:1456:5> line:1453:12 struct __is_convertible_helper definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x99f0f0 <col:5, col:12> col:12 implicit struct __is_convertible_helper
| |   `-TypedefDecl 0x99fbf0 <line:1455:7, col:43> col:43 type 'typename is_void<_To>::type'
| |     `-DependentNameType 0x99f260 'typename is_void<_To>::type' dependent
| |-ClassTemplatePartialSpecializationDecl 0x99ff20 <line:1460:3, line:1477:5> line:1461:11 class __is_convertible_helper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x99fc60 <line:1460:12, col:21> col:21 referenced typename depth 0 index 0 _From
| | |-TemplateTypeParmDecl 0x99fcd8 <col:28, col:37> col:37 referenced typename depth 0 index 1 _To
| | |-CXXRecordDecl 0x9a01e8 <line:1461:5, col:11> col:11 implicit class __is_convertible_helper
| | |-FunctionTemplateDecl 0x9a04f0 <line:1463:7, line:1464:31> col:14 __test_aux
| | | |-TemplateTypeParmDecl 0x9a0278 <line:1463:16, col:25> col:25 referenced typename depth 1 index 0 _To1
| | | `-CXXMethodDecl 0x9a0450 <line:1464:2, col:31> col:14 __test_aux 'void (_To1) noexcept' static
| | |   `-ParmVarDecl 0x9a0320 <col:25> col:29 '_To1'
| | |-FunctionTemplateDecl 0x9a0a88 <line:1466:7, line:1469:12> col:2 __test
| | | |-TemplateTypeParmDecl 0x9a0550 <line:1466:16, col:25> col:25 referenced typename depth 1 index 0 _From1
| | | |-TemplateTypeParmDecl 0x9a05c8 <col:33, col:42> col:42 referenced typename depth 1 index 1 _To1
| | | |-TemplateTypeParmDecl 0x9a0868 <line:1467:9, col:69> col:18 typename depth 1 index 2
| | | | `-TemplateArgument type 'decltype(__test_aux<_To1>(std::declval<_From1>()))'
| | | |   `-DecltypeType 0x9a0830 'decltype(__test_aux<_To1>(std::declval<_From1>()))' dependent
| | | |     `-CallExpr 0x9a07b0 <col:29, col:68> '<dependent type>'
| | | |       |-UnresolvedLookupExpr 0x9a0658 <col:29, col:44> '<dependent type>' lvalue (no ADL) = '__test_aux' 0x9a04f0
| | | |       `-CallExpr 0x9a0790 <col:46, col:67> '<dependent type>'
| | | |         `-UnresolvedLookupExpr 0x9a0718 <col:46, col:65> '<dependent type>' lvalue (no ADL) = 'declval' 0x95ab00
| | | `-CXXMethodDecl 0x9a09e8 <line:1468:2, line:1469:12> col:2 __test 'std::true_type (int)' static
| | |   `-ParmVarDecl 0x9a0958 <col:9> col:12 'int'
| | |-FunctionTemplateDecl 0x9a1308 <line:1471:7, line:1473:12> col:2 __test
| | | |-TemplateTypeParmDecl 0x9a0ae8 <line:1471:16> col:24 typename depth 1 index 0
| | | |-TemplateTypeParmDecl 0x9a0b68 <col:26> col:34 typename depth 1 index 1
| | | `-CXXMethodDecl 0x9a1268 <line:1472:2, line:1473:12> col:2 __test 'std::false_type (...)' static
| | |-AccessSpecDecl 0x9a1370 <line:1475:5, col:11> col:5 public
| | `-TypedefDecl 0x9a1538 <line:1476:7, col:47> col:47 type 'decltype(__test<_From, _To>(0))'
| |   `-DecltypeType 0x9a1500 'decltype(__test<_From, _To>(0))' dependent
| |     `-CallExpr 0x9a1490 <col:24, col:44> '<dependent type>'
| |       |-UnresolvedLookupExpr 0x9a13d0 <col:24, col:41> '<dependent type>' lvalue (no ADL) = '__test' 0x9a1308 0x9a0a88
| |       `-IntegerLiteral 0x9a1470 <col:43> 'int' 0
| |-ClassTemplateDecl 0x9a1758 <line:1481:3, line:1484:7> line:1482:12 is_convertible
| | |-TemplateTypeParmDecl 0x9a15a8 <line:1481:12, col:21> col:21 referenced typename depth 0 index 0 _From
| | |-TemplateTypeParmDecl 0x9a1628 <col:28, col:37> col:37 referenced typename depth 0 index 1 _To
| | `-CXXRecordDecl 0x9a16c8 <line:1482:5, line:1484:7> line:1482:12 struct is_convertible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_convertible_helper<_From, _To>::type'
| |   `-CXXRecordDecl 0x9a1f70 <col:5, col:12> col:12 implicit struct is_convertible
| |-TypeAliasTemplateDecl 0x9a2948 <line:1487:3, line:1489:66> line:1488:5 __is_array_convertible
| | |-TemplateTypeParmDecl 0x9a2018 <line:1487:12, col:21> col:21 referenced typename depth 0 index 0 _ToElementType
| | |-TemplateTypeParmDecl 0x9a2098 <col:37, col:46> col:46 referenced typename depth 0 index 1 _FromElementType
| | `-TypeAliasDecl 0x9a28e8 <line:1488:5, line:1489:66> line:1488:11 __is_array_convertible 'is_convertible<_FromElementType (*)[], _ToElementType (*)[]>'
| |   `-TemplateSpecializationType 0x9a2840 'is_convertible<_FromElementType (*)[], _ToElementType (*)[]>' dependent is_convertible
| |     |-TemplateArgument type '_FromElementType (*)[]'
| |     | `-PointerType 0x9a2690 '_FromElementType (*)[]' dependent
| |     |   `-ParenType 0x9a21a0 '_FromElementType[]' sugar dependent
| |     |     `-IncompleteArrayType 0x9a2170 '_FromElementType[]' dependent 
| |     |       `-TemplateTypeParmType 0x9a20f0 '_FromElementType' dependent depth 0 index 1
| |     |         `-TemplateTypeParm 0x9a2098 '_FromElementType'
| |     `-TemplateArgument type '_ToElementType (*)[]'
| |       `-PointerType 0x9a2780 '_ToElementType (*)[]' dependent
| |         `-ParenType 0x9a2720 '_ToElementType[]' sugar dependent
| |           `-IncompleteArrayType 0x9a26f0 '_ToElementType[]' dependent 
| |             `-TemplateTypeParmType 0x9a2070 '_ToElementType' dependent depth 0 index 0
| |               `-TemplateTypeParm 0x9a2018 '_ToElementType'
| |-ClassTemplateDecl 0x9a2f38 <line:1491:3, line:1496:7> line:1494:12 __is_nt_convertible_helper
| | |-TemplateTypeParmDecl 0x9a29a0 <line:1491:12, col:21> col:21 referenced typename depth 0 index 0 _From
| | |-TemplateTypeParmDecl 0x9a2a18 <col:28, col:37> col:37 referenced typename depth 0 index 1 _To
| | |-NonTypeTemplateParmDecl 0x9a2e08 <line:1492:12, line:1493:41> line:1492:17 'bool' depth 0 index 2
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9a2e68 <col:19, line:1493:41> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x9a2dc0 <line:1492:19, line:1493:41> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x9a2ea8 <line:1494:5, line:1496:7> line:1494:12 struct __is_nt_convertible_helper definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'is_void<_To>'
| |   `-CXXRecordDecl 0x9a32a0 <col:5, col:12> col:12 implicit struct __is_nt_convertible_helper
| |-ClassTemplatePartialSpecializationDecl 0x9a3b20 <line:1500:3, line:1517:5> line:1501:11 class __is_nt_convertible_helper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x9a3348 <line:1500:12, col:21> col:21 referenced typename depth 0 index 0 _From
| | |-TemplateTypeParmDecl 0x9a33c8 <col:28, col:37> col:37 referenced typename depth 0 index 1 _To
| | |-CXXRecordDecl 0x9a3de8 <line:1501:5, col:11> col:11 implicit class __is_nt_convertible_helper
| | |-FunctionTemplateDecl 0x9a40c0 <line:1503:7, line:1504:31> col:14 __test_aux
| | | |-TemplateTypeParmDecl 0x9a3e78 <line:1503:16, col:25> col:25 referenced typename depth 1 index 0 _To1
| | | `-CXXMethodDecl 0x9a4020 <line:1504:2, col:31> col:14 __test_aux 'void (_To1) noexcept' static
| | |   `-ParmVarDecl 0x9a3f20 <col:25> col:29 '_To1'
| | |-FunctionTemplateDecl 0x9a4758 <line:1506:7, line:1509:12> col:2 __test
| | | |-TemplateTypeParmDecl 0x9a4120 <line:1506:16, col:25> col:25 referenced typename depth 1 index 0 _From1
| | | |-TemplateTypeParmDecl 0x9a4198 <col:33, col:42> col:42 referenced typename depth 1 index 1 _To1
| | | `-CXXMethodDecl 0x9a46b8 <line:1507:2, line:1509:12> col:2 __test '__bool_constant<noexcept(__test_aux<_To1>(std::declval<_From1>()))> (int)' static
| | |   `-ParmVarDecl 0x9a45b0 <col:9> col:12 'int'
| | |-FunctionTemplateDecl 0x9a4998 <line:1511:7, line:1513:12> col:2 __test
| | | |-TemplateTypeParmDecl 0x9a47b8 <line:1511:16> col:24 typename depth 1 index 0
| | | |-TemplateTypeParmDecl 0x9a4838 <col:26> col:34 typename depth 1 index 1
| | | `-CXXMethodDecl 0x9a48f8 <line:1512:2, line:1513:12> col:2 __test 'std::false_type (...)' static
| | |-AccessSpecDecl 0x9a4a00 <line:1515:5, col:11> col:5 public
| | `-TypeAliasDecl 0x9a5008 <line:1516:7, col:50> col:13 type 'decltype(__test<_From, _To>(0))'
| |   `-DecltypeType 0x9a4fd0 'decltype(__test<_From, _To>(0))' dependent
| |     `-CallExpr 0x9a4fa0 <col:29, col:49> '<dependent type>'
| |       |-UnresolvedLookupExpr 0x9a4a60 <col:29, col:46> '<dependent type>' lvalue (no ADL) = '__test' 0x9a4998 0x9a4758
| |       `-IntegerLiteral 0x9a4b00 <col:48> 'int' 0
| |-ClassTemplateDecl 0x9a5228 <line:1521:3, line:1524:7> line:1522:12 __is_nothrow_convertible
| | |-TemplateTypeParmDecl 0x9a5080 <line:1521:12, col:21> col:21 referenced typename depth 0 index 0 _From
| | |-TemplateTypeParmDecl 0x9a50f8 <col:28, col:37> col:37 referenced typename depth 0 index 1 _To
| | `-CXXRecordDecl 0x9a5198 <line:1522:5, line:1524:7> line:1522:12 struct __is_nothrow_convertible definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nt_convertible_helper<_From, _To>::type'
| |   `-CXXRecordDecl 0x9a5a30 <col:5, col:12> col:12 implicit struct __is_nothrow_convertible
| |-ClassTemplateDecl 0x9a5c00 <line:1543:3, line:1545:29> line:1544:12 remove_const
| | |-TemplateTypeParmDecl 0x9a5ad8 <line:1543:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9a5b70 <line:1544:5, line:1545:29> line:1544:12 struct remove_const definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9a5e40 <col:5, col:12> col:12 implicit struct remove_const
| |   `-TypedefDecl 0x9a5ee0 <line:1545:7, col:23> col:23 type '_Tp'
| |     `-TemplateTypeParmType 0x9a5b30 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9a5ad8 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9a71c0 <line:1547:3, line:1549:29> line:1548:12 struct remove_const definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'const type-parameter-0-0'
| | | `-QualType 0x8fb401 'const type-parameter-0-0' const
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x9a5f50 <line:1547:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9a73d8 <line:1548:5, col:12> col:12 implicit struct remove_const
| | `-TypedefDecl 0x9a7478 <line:1549:7, col:23> col:23 type '_Tp'
| |   `-TemplateTypeParmType 0x9a70c0 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0x9a5f50 '_Tp'
| |-ClassTemplateDecl 0x9a7610 <line:1552:3, line:1554:29> line:1553:12 remove_volatile
| | |-TemplateTypeParmDecl 0x9a74e8 <line:1552:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9a7580 <line:1553:5, line:1554:29> line:1553:12 struct remove_volatile definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9a7850 <col:5, col:12> col:12 implicit struct remove_volatile
| |   `-TypedefDecl 0x9a78f0 <line:1554:7, col:23> col:23 type '_Tp'
| |     `-TemplateTypeParmType 0x9a7540 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9a74e8 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9a7ab0 <line:1556:3, line:1558:29> line:1557:12 struct remove_volatile definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'volatile type-parameter-0-0'
| | | `-QualType 0x8fb404 'volatile type-parameter-0-0' volatile
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x9a7960 <line:1556:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9a7cc8 <line:1557:5, col:12> col:12 implicit struct remove_volatile
| | `-TypedefDecl 0x9a7d68 <line:1558:7, col:23> col:23 type '_Tp'
| |   `-TemplateTypeParmType 0x9a79b0 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0x9a7960 '_Tp'
| |-ClassTemplateDecl 0x9a7f00 prev 0x922ce0 <line:1561:3, line:1563:25> line:1562:12 remove_cv
| | |-TemplateTypeParmDecl 0x9a7dd8 <line:1561:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9a7e70 prev 0x922c50 <line:1562:5, line:1563:25> line:1562:12 struct remove_cv definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0x9a7fc0 <col:5, col:12> col:12 implicit struct remove_cv
| | | `-TypeAliasDecl 0x9a8060 <line:1563:7, col:20> col:13 type '_Tp'
| | |   `-TemplateTypeParmType 0x9a7e30 '_Tp' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0x9a7dd8 '_Tp'
| | |-ClassTemplateSpecialization 0x9da358 'remove_cv'
| | |-ClassTemplateSpecialization 0x9dcda8 'remove_cv'
| | |-ClassTemplateSpecialization 0x9e0208 'remove_cv'
| | |-ClassTemplateSpecialization 0x9e2b18 'remove_cv'
| | |-ClassTemplateSpecialization 0x9e7208 'remove_cv'
| | `-ClassTemplateSpecialization 0xa42088 'remove_cv'
| |-ClassTemplatePartialSpecializationDecl 0x9a87e0 <line:1565:3, line:1567:25> line:1566:12 struct remove_cv definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'const type-parameter-0-0'
| | | `-QualType 0x8fb401 'const type-parameter-0-0' const
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x9a8688 <line:1565:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9a89f8 <line:1566:5, col:12> col:12 implicit struct remove_cv
| | `-TypeAliasDecl 0x9a8a98 <line:1567:7, col:20> col:13 type '_Tp'
| |   `-TemplateTypeParmType 0x9a86e0 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0x9a8688 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9a8c60 <line:1569:3, line:1571:25> line:1570:12 struct remove_cv definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'volatile type-parameter-0-0'
| | | `-QualType 0x8fb404 'volatile type-parameter-0-0' volatile
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x9a8b10 <line:1569:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9a8e78 <line:1570:5, col:12> col:12 implicit struct remove_cv
| | `-TypeAliasDecl 0x9a8f18 <line:1571:7, col:20> col:13 type '_Tp'
| |   `-TemplateTypeParmType 0x9a8b60 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0x9a8b10 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9a90e0 <line:1573:3, line:1575:25> line:1574:12 struct remove_cv definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'const volatile type-parameter-0-0'
| | | `-QualType 0x8fb405 'const volatile type-parameter-0-0' const volatile
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x9a8f90 <line:1573:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9a92f8 <line:1574:5, col:12> col:12 implicit struct remove_cv
| | `-TypeAliasDecl 0x9a9398 <line:1575:7, col:20> col:13 type '_Tp'
| |   `-TemplateTypeParmType 0x9a8fe0 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0x9a8f90 '_Tp'
| |-ClassTemplateDecl 0x9a9530 <line:1578:3, line:1580:35> line:1579:12 add_const
| | |-TemplateTypeParmDecl 0x9a9410 <line:1578:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9a94a0 <line:1579:5, line:1580:35> line:1579:12 struct add_const definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9a9cd0 <col:5, col:12> col:12 implicit struct add_const
| |   `-TypedefDecl 0x9a9d70 <line:1580:7, col:29> col:29 type 'const _Tp'
| |     `-QualType 0x9a9461 'const _Tp' const
| |       `-TemplateTypeParmType 0x9a9460 '_Tp' dependent depth 0 index 0
| |         `-TemplateTypeParm 0x9a9410 '_Tp'
| |-ClassTemplateDecl 0x9a9f00 <line:1583:3, line:1585:38> line:1584:12 add_volatile
| | |-TemplateTypeParmDecl 0x9a9de0 <line:1583:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9a9e70 <line:1584:5, line:1585:38> line:1584:12 struct add_volatile definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9aa140 <col:5, col:12> col:12 implicit struct add_volatile
| |   `-TypedefDecl 0x9aa1e0 <line:1585:7, col:32> col:32 type 'volatile _Tp'
| |     `-QualType 0x9a9e34 'volatile _Tp' volatile
| |       `-TemplateTypeParmType 0x9a9e30 '_Tp' dependent depth 0 index 0
| |         `-TemplateTypeParm 0x9a9de0 '_Tp'
| |-ClassTemplateDecl 0x9aa370 <line:1588:3, line:1593:5> line:1589:12 add_cv
| | |-TemplateTypeParmDecl 0x9aa250 <line:1588:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9aa2e0 <line:1589:5, line:1593:5> line:1589:12 struct add_cv definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9aa5b0 <col:5, col:12> col:12 implicit struct add_cv
| |   `-TypedefDecl 0x9aa910 <line:1591:7, line:1592:61> col:61 type 'typename add_const<typename add_volatile<_Tp>::type>::type'
| |     `-DependentNameType 0x9aa8a0 'typename add_const<typename add_volatile<_Tp>::type>::type' dependent
| |-TypeAliasTemplateDecl 0x9ab530 <line:1600:3, line:1601:56> col:5 remove_const_t
| | |-TemplateTypeParmDecl 0x9aa980 <line:1600:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9aab60 <line:1601:5, col:56> col:11 remove_const_t 'typename remove_const<_Tp>::type'
| |   `-DependentNameType 0x9aaaf0 'typename remove_const<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0x9ab7d0 <line:1604:3, line:1605:62> col:5 remove_volatile_t
| | |-TemplateTypeParmDecl 0x9ab588 <line:1604:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9ab770 <line:1605:5, col:62> col:11 remove_volatile_t 'typename remove_volatile<_Tp>::type'
| |   `-DependentNameType 0x9ab700 'typename remove_volatile<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0x9aba20 <line:1608:3, line:1609:50> col:5 remove_cv_t
| | |-TemplateTypeParmDecl 0x9ab828 <line:1608:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9ab9c0 <line:1609:5, col:50> col:11 remove_cv_t 'typename remove_cv<_Tp>::type'
| |   `-DependentNameType 0x9ab950 'typename remove_cv<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0x9abcc0 <line:1612:3, line:1613:50> col:5 add_const_t
| | |-TemplateTypeParmDecl 0x9aba78 <line:1612:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9abc60 <line:1613:5, col:50> col:11 add_const_t 'typename add_const<_Tp>::type'
| |   `-DependentNameType 0x9abbf0 'typename add_const<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0x9abf10 <line:1616:3, line:1617:56> col:5 add_volatile_t
| | |-TemplateTypeParmDecl 0x9abd18 <line:1616:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9abeb0 <line:1617:5, col:56> col:11 add_volatile_t 'typename add_volatile<_Tp>::type'
| |   `-DependentNameType 0x9abe40 'typename add_volatile<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0x9ac1b0 <line:1620:3, line:1621:44> col:5 add_cv_t
| | |-TemplateTypeParmDecl 0x9abf68 <line:1620:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9ac150 <line:1621:5, col:44> col:11 add_cv_t 'typename add_cv<_Tp>::type'
| |   `-DependentNameType 0x9ac0e0 'typename add_cv<_Tp>::type' dependent
| |-ClassTemplateDecl 0x9ac330 <line:1627:3, line:1629:27> line:1628:12 remove_reference
| | |-TemplateTypeParmDecl 0x9ac208 <line:1627:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9ac2a0 <line:1628:5, line:1629:27> line:1628:12 struct remove_reference definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9ac9c8 <col:5, col:12> col:12 implicit struct remove_reference
| |   `-TypedefDecl 0x9aca68 <line:1629:7, col:21> col:21 type '_Tp'
| |     `-TemplateTypeParmType 0x9ac260 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9ac208 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9acc60 <line:1631:3, line:1633:27> line:1632:12 struct remove_reference definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0x8fb470 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x9acad8 <line:1631:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9ace78 <line:1632:5, col:12> col:12 implicit struct remove_reference
| | `-TypedefDecl 0x9acf18 <line:1633:7, col:21> col:21 type '_Tp'
| |   `-TemplateTypeParmType 0x9acb30 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0x9acad8 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9ad110 <line:1635:3, line:1637:27> line:1636:12 struct remove_reference definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0 &&'
| | | `-RValueReferenceType 0x934940 'type-parameter-0-0 &&' dependent
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x9acf88 <line:1635:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9ad328 <line:1636:5, col:12> col:12 implicit struct remove_reference
| | `-TypedefDecl 0x9ad3c8 <line:1637:7, col:21> col:21 type '_Tp'
| |   `-TemplateTypeParmType 0x9acfe0 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0x9acf88 '_Tp'
| |-ClassTemplateDecl 0x9ad6e0 <line:1639:3, line:1641:27> line:1640:12 __add_lvalue_reference_helper
| | |-TemplateTypeParmDecl 0x9ad438 <line:1639:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x9ad5b8 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9ad618 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x9ad570 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x9ad650 <line:1640:5, line:1641:27> line:1640:12 struct __add_lvalue_reference_helper definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9adf18 <col:5, col:12> col:12 implicit struct __add_lvalue_reference_helper
| |   `-TypedefDecl 0x9adfb8 <line:1641:7, col:21> col:21 type '_Tp'
| |     `-TemplateTypeParmType 0x9ad490 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9ad438 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9ae208 <line:1643:3, line:1645:28> line:1644:12 struct __add_lvalue_reference_helper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x9ae028 <line:1643:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9ae488 <line:1644:5, col:12> col:12 implicit struct __add_lvalue_reference_helper
| | `-TypedefDecl 0x9ae558 <line:1645:7, col:22> col:22 type '_Tp &'
| |   `-LValueReferenceType 0x9ae520 '_Tp &' dependent
| |     `-TemplateTypeParmType 0x9ae080 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9ae028 '_Tp'
| |-ClassTemplateDecl 0x9ae6f0 <line:1648:3, line:1651:7> line:1649:12 add_lvalue_reference
| | |-TemplateTypeParmDecl 0x9ae5c8 <line:1648:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9ae660 <line:1649:5, line:1651:7> line:1649:12 struct add_lvalue_reference definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__add_lvalue_reference_helper<_Tp>'
| |   `-CXXRecordDecl 0x9aeb50 <col:5, col:12> col:12 implicit struct add_lvalue_reference
| |-ClassTemplateDecl 0x9b0410 <line:1653:3, line:1655:27> line:1654:12 __add_rvalue_reference_helper
| | |-TemplateTypeParmDecl 0x9aebf8 <line:1653:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x9aed78 <col:26, col:58> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9aedd8 <col:33, col:58> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x9aed30 <col:33, col:58> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x9aee10 <line:1654:5, line:1655:27> line:1654:12 struct __add_rvalue_reference_helper definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9b06b0 <col:5, col:12> col:12 implicit struct __add_rvalue_reference_helper
| |   `-TypedefDecl 0x9b0750 <line:1655:7, col:21> col:21 type '_Tp'
| |     `-TemplateTypeParmType 0x9aec50 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9aebf8 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9b0998 <line:1657:3, line:1659:29> line:1658:12 struct __add_rvalue_reference_helper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x9b07c0 <line:1657:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9b0c18 <line:1658:5, col:12> col:12 implicit struct __add_rvalue_reference_helper
| | `-TypedefDecl 0x9b0ce8 <line:1659:7, col:23> col:23 type '_Tp &&'
| |   `-RValueReferenceType 0x9b0cb0 '_Tp &&' dependent
| |     `-TemplateTypeParmType 0x9b0810 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9b07c0 '_Tp'
| |-ClassTemplateDecl 0x9b0e80 <line:1662:3, line:1665:7> line:1663:12 add_rvalue_reference
| | |-TemplateTypeParmDecl 0x9b0d58 <line:1662:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9b0df0 <line:1663:5, line:1665:7> line:1663:12 struct add_rvalue_reference definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__add_rvalue_reference_helper<_Tp>'
| |   `-CXXRecordDecl 0x9b12e0 <col:5, col:12> col:12 implicit struct add_rvalue_reference
| |-TypeAliasTemplateDecl 0x9b1f50 <line:1669:3, line:1670:64> col:5 remove_reference_t
| | |-TemplateTypeParmDecl 0x9b1388 <line:1669:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9b1ef0 <line:1670:5, col:64> col:11 remove_reference_t 'typename remove_reference<_Tp>::type'
| |   `-DependentNameType 0x9b1e80 'typename remove_reference<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0x9b21f0 <line:1673:3, line:1674:72> col:5 add_lvalue_reference_t
| | |-TemplateTypeParmDecl 0x9b1fa8 <line:1673:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9b2190 <line:1674:5, col:72> col:11 add_lvalue_reference_t 'typename add_lvalue_reference<_Tp>::type'
| |   `-DependentNameType 0x9b2120 'typename add_lvalue_reference<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0x9b2490 <line:1677:3, line:1678:72> col:5 add_rvalue_reference_t
| | |-TemplateTypeParmDecl 0x9b2248 <line:1677:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9b2430 <line:1678:5, col:72> col:11 add_rvalue_reference_t 'typename add_rvalue_reference<_Tp>::type'
| |   `-DependentNameType 0x9b23c0 'typename add_rvalue_reference<_Tp>::type' dependent
| |-ClassTemplateDecl 0x9b2700 <line:1686:3, line:1687:12> col:12 __cv_selector
| | |-TemplateTypeParmDecl 0x9b24e8 <line:1686:12, col:21> col:21 typename depth 0 index 0 _Unqualified
| | |-NonTypeTemplateParmDecl 0x9b2578 <col:35, col:40> col:40 'bool' depth 0 index 1 _IsConst
| | |-NonTypeTemplateParmDecl 0x9b25e8 <col:50, col:55> col:55 'bool' depth 0 index 2 _IsVol
| | |-CXXRecordDecl 0x9b2670 <line:1687:5, col:12> col:12 struct __cv_selector
| | |-ClassTemplateSpecializationDecl 0x9cbea8 <line:1689:3, line:1691:36> line:1690:12 struct __cv_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0x826340 'unsigned int'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0x9cc320 <col:5, col:12> col:12 implicit struct __cv_selector
| | | `-TypedefDecl 0x9cc3c0 <line:1691:7, col:28> col:28 referenced __type 'unsigned int':'unsigned int'
| | |   `-SubstTemplateTypeParmType 0x9cc1a0 'unsigned int' sugar
| | |     |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |     `-BuiltinType 0x826340 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0x9cfad8 <line:1689:3, line:1691:36> line:1690:12 struct __cv_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0x826320 'unsigned short'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0x9cff50 <col:5, col:12> col:12 implicit struct __cv_selector
| | | `-TypedefDecl 0x9cfff0 <line:1691:7, col:28> col:28 referenced __type 'unsigned short':'unsigned short'
| | |   `-SubstTemplateTypeParmType 0x9cfdd0 'unsigned short' sugar
| | |     |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |     `-BuiltinType 0x826320 'unsigned short'
| | |-ClassTemplateSpecializationDecl 0x9dee98 <line:1689:3, line:1691:36> line:1690:12 struct __cv_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'int'
| | | | `-BuiltinType 0x8262a0 'int'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0x9df310 <col:5, col:12> col:12 implicit struct __cv_selector
| | | `-TypedefDecl 0x9df3b0 <line:1691:7, col:28> col:28 referenced __type 'int':'int'
| | |   `-SubstTemplateTypeParmType 0x9df190 'int' sugar
| | |     |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |     | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |     `-BuiltinType 0x8262a0 'int'
| | `-ClassTemplateSpecializationDecl 0x9e4fc8 <line:1689:3, line:1691:36> line:1690:12 struct __cv_selector definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-TemplateArgument type 'short'
| |   | `-BuiltinType 0x826280 'short'
| |   |-TemplateArgument integral 0
| |   |-TemplateArgument integral 0
| |   |-CXXRecordDecl 0x9e5440 <col:5, col:12> col:12 implicit struct __cv_selector
| |   `-TypedefDecl 0x9e54e0 <line:1691:7, col:28> col:28 referenced __type 'short':'short'
| |     `-SubstTemplateTypeParmType 0x9e52c0 'short' sugar
| |       |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| |       | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| |       `-BuiltinType 0x826280 'short'
| |-ClassTemplatePartialSpecializationDecl 0x9b2bd0 <line:1689:3, line:1691:36> line:1690:12 struct __cv_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x9b2978 <line:1689:12, col:21> col:21 referenced typename depth 0 index 0 _Unqualified
| | |-CXXRecordDecl 0x9b32e8 <line:1690:5, col:12> col:12 implicit struct __cv_selector
| | `-TypedefDecl 0x9b3388 <line:1691:7, col:28> col:28 __type '_Unqualified'
| |   `-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| |     `-TemplateTypeParm 0x9b2978 '_Unqualified'
| |-ClassTemplatePartialSpecializationDecl 0x9b3650 <line:1693:3, line:1695:45> line:1694:12 struct __cv_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x9b33f8 <line:1693:12, col:21> col:21 referenced typename depth 0 index 0 _Unqualified
| | |-CXXRecordDecl 0x9b3938 <line:1694:5, col:12> col:12 implicit struct __cv_selector
| | `-TypedefDecl 0x9b39d8 <line:1695:7, col:37> col:37 __type 'volatile _Unqualified'
| |   `-QualType 0x9b3454 'volatile _Unqualified' volatile
| |     `-TemplateTypeParmType 0x9b3450 '_Unqualified' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9b33f8 '_Unqualified'
| |-ClassTemplatePartialSpecializationDecl 0x9b3ca0 <line:1697:3, line:1699:42> line:1698:12 struct __cv_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x9b3a48 <line:1697:12, col:21> col:21 referenced typename depth 0 index 0 _Unqualified
| | |-CXXRecordDecl 0x9b3f88 <line:1698:5, col:12> col:12 implicit struct __cv_selector
| | `-TypedefDecl 0x9b4028 <line:1699:7, col:34> col:34 __type 'const _Unqualified'
| |   `-QualType 0x9b3aa1 'const _Unqualified' const
| |     `-TemplateTypeParmType 0x9b3aa0 '_Unqualified' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9b3a48 '_Unqualified'
| |-ClassTemplatePartialSpecializationDecl 0x9b4430 <line:1701:3, line:1703:51> line:1702:12 struct __cv_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x9b4098 <line:1701:12, col:21> col:21 referenced typename depth 0 index 0 _Unqualified
| | |-CXXRecordDecl 0x9b4718 <line:1702:5, col:12> col:12 implicit struct __cv_selector
| | `-TypedefDecl 0x9b47b8 <line:1703:7, col:43> col:43 __type 'const volatile _Unqualified'
| |   `-QualType 0x9b40f5 'const volatile _Unqualified' const volatile
| |     `-TemplateTypeParmType 0x9b40f0 '_Unqualified' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9b4098 '_Unqualified'
| |-ClassTemplateDecl 0x9b4cd0 <line:1705:3, line:1714:5> line:1708:11 __match_cv_qualifiers
| | |-TemplateTypeParmDecl 0x9b4828 <line:1705:12, col:21> col:21 referenced typename depth 0 index 0 _Qualified
| | |-TemplateTypeParmDecl 0x9b48a8 <col:33, col:42> col:42 referenced typename depth 0 index 1 _Unqualified
| | |-NonTypeTemplateParmDecl 0x9b4a28 <line:1706:5, col:43> col:10 referenced 'bool' depth 0 index 2 _IsConst
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9b4a88 <col:21, col:43> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x9b49e0 <col:21, col:43> '<dependent type>' lvalue
| | |-NonTypeTemplateParmDecl 0x9b4b98 <line:1707:5, col:44> col:10 referenced 'bool' depth 0 index 3 _IsVol
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9b4bf8 <col:19, col:44> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x9b4b50 <col:19, col:44> '<dependent type>' lvalue
| | |-CXXRecordDecl 0x9b4c40 <line:1708:5, line:1714:5> line:1708:11 class __match_cv_qualifiers definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0x9b4ff0 <col:5, col:11> col:11 implicit class __match_cv_qualifiers
| | | |-TypedefDecl 0x9b57d0 <line:1710:7, col:61> col:61 referenced __match '__cv_selector<_Unqualified, _IsConst, _IsVol>'
| | | | `-TemplateSpecializationType 0x9b51d0 '__cv_selector<_Unqualified, _IsConst, _IsVol>' dependent __cv_selector
| | | |   |-TemplateArgument type '_Unqualified'
| | | |   | `-TemplateTypeParmType 0x9b4900 '_Unqualified' dependent depth 0 index 1
| | | |   |   `-TemplateTypeParm 0x9b48a8 '_Unqualified'
| | | |   |-TemplateArgument expr
| | | |   | `-DeclRefExpr 0x9b50d8 <col:43> 'bool' NonTypeTemplateParm 0x9b4a28 '_IsConst' 'bool'
| | | |   `-TemplateArgument expr
| | | |     `-DeclRefExpr 0x9b5140 <col:53> 'bool' NonTypeTemplateParm 0x9b4b98 '_IsVol' 'bool'
| | | |-AccessSpecDecl 0x9b5828 <line:1712:5, col:11> col:5 public
| | | `-TypedefDecl 0x9b5960 <line:1713:7, col:40> col:40 __type 'typename __match::__type'
| | |   `-DependentNameType 0x9b58f0 'typename __match::__type' dependent
| | |-ClassTemplateSpecializationDecl 0x9cbae0 <line:1705:3, line:1714:5> line:1708:11 class __match_cv_qualifiers definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0x8267a0 'wchar_t'
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0x826340 'unsigned int'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0x9cbd40 <col:5, col:11> col:11 implicit class __match_cv_qualifiers
| | | |-TypedefDecl 0x9cc080 <line:1710:7, col:61> col:61 __match '__cv_selector<unsigned int, false, false>':'std::__cv_selector<unsigned int, false, false>'
| | | | `-TemplateSpecializationType 0x9cbfe0 '__cv_selector<unsigned int, false, false>' sugar __cv_selector
| | | |   |-TemplateArgument type 'unsigned int':'unsigned int'
| | | |   | `-SubstTemplateTypeParmType 0x9cbdd0 'unsigned int' sugar
| | | |   |   |-TemplateTypeParmType 0x9b4900 '_Unqualified' dependent depth 0 index 1
| | | |   |   | `-TemplateTypeParm 0x9b48a8 '_Unqualified'
| | | |   |   `-BuiltinType 0x826340 'unsigned int'
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0x9cbe68 <col:43> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0x9cbe18 <col:43> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0x9b4a28 <line:1706:5, col:43> col:10 referenced 'bool' depth 0 index 2 _IsConst
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0x9b4a88 <col:21, col:43> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0x9b49e0 <col:21, col:43> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0x9cbe08 <line:1710:43> 'bool' false
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0x9cbe88 <col:53> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0x9cbe48 <col:53> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0x9b4b98 <line:1707:5, col:44> col:10 referenced 'bool' depth 0 index 3 _IsVol
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0x9b4bf8 <col:19, col:44> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0x9b4b50 <col:19, col:44> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0x9cbe38 <line:1710:53> 'bool' false
| | | |   `-RecordType 0x9cbfc0 'std::__cv_selector<unsigned int, false, false>'
| | | |     `-ClassTemplateSpecialization 0x9cbea8 '__cv_selector'
| | | |-AccessSpecDecl 0x9cc0d8 <line:1712:5, col:11> col:5 public
| | | `-TypedefDecl 0x9cc4a0 <line:1713:7, col:40> col:40 referenced __type 'typename __match::__type':'unsigned int'
| | |   `-ElaboratedType 0x9cc450 'typename __match::__type' sugar
| | |     `-TypedefType 0x9cc430 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | |       |-Typedef 0x9cc3c0 '__type'
| | |       `-SubstTemplateTypeParmType 0x9cc1a0 'unsigned int' sugar
| | |         |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |         | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |         `-BuiltinType 0x826340 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0x9cf710 <line:1705:3, line:1714:5> line:1708:11 class __match_cv_qualifiers definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0x8267e0 'char16_t'
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0x826320 'unsigned short'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0x9cf970 <col:5, col:11> col:11 implicit class __match_cv_qualifiers
| | | |-TypedefDecl 0x9cfcb0 <line:1710:7, col:61> col:61 __match '__cv_selector<unsigned short, false, false>':'std::__cv_selector<unsigned short, false, false>'
| | | | `-TemplateSpecializationType 0x9cfc10 '__cv_selector<unsigned short, false, false>' sugar __cv_selector
| | | |   |-TemplateArgument type 'unsigned short':'unsigned short'
| | | |   | `-SubstTemplateTypeParmType 0x9cfa00 'unsigned short' sugar
| | | |   |   |-TemplateTypeParmType 0x9b4900 '_Unqualified' dependent depth 0 index 1
| | | |   |   | `-TemplateTypeParm 0x9b48a8 '_Unqualified'
| | | |   |   `-BuiltinType 0x826320 'unsigned short'
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0x9cfa98 <col:43> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0x9cfa48 <col:43> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0x9b4a28 <line:1706:5, col:43> col:10 referenced 'bool' depth 0 index 2 _IsConst
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0x9b4a88 <col:21, col:43> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0x9b49e0 <col:21, col:43> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0x9cfa38 <line:1710:43> 'bool' false
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0x9cfab8 <col:53> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0x9cfa78 <col:53> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0x9b4b98 <line:1707:5, col:44> col:10 referenced 'bool' depth 0 index 3 _IsVol
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0x9b4bf8 <col:19, col:44> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0x9b4b50 <col:19, col:44> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0x9cfa68 <line:1710:53> 'bool' false
| | | |   `-RecordType 0x9cfbf0 'std::__cv_selector<unsigned short, false, false>'
| | | |     `-ClassTemplateSpecialization 0x9cfad8 '__cv_selector'
| | | |-AccessSpecDecl 0x9cfd08 <line:1712:5, col:11> col:5 public
| | | `-TypedefDecl 0x9d00d0 <line:1713:7, col:40> col:40 referenced __type 'typename __match::__type':'unsigned short'
| | |   `-ElaboratedType 0x9d0080 'typename __match::__type' sugar
| | |     `-TypedefType 0x9d0060 'std::__cv_selector<unsigned short, false, false>::__type' sugar
| | |       |-Typedef 0x9cfff0 '__type'
| | |       `-SubstTemplateTypeParmType 0x9cfdd0 'unsigned short' sugar
| | |         |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |         | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |         `-BuiltinType 0x826320 'unsigned short'
| | |-ClassTemplateSpecializationDecl 0x9d2528 <line:1705:3, line:1714:5> line:1708:11 class __match_cv_qualifiers definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'char32_t'
| | | | `-BuiltinType 0x826800 'char32_t'
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0x826340 'unsigned int'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0x9d2780 <col:5, col:11> col:11 implicit class __match_cv_qualifiers
| | | |-TypedefDecl 0x9d2960 <line:1710:7, col:61> col:61 __match '__cv_selector<unsigned int, false, false>':'std::__cv_selector<unsigned int, false, false>'
| | | | `-TemplateSpecializationType 0x9d28c0 '__cv_selector<unsigned int, false, false>' sugar __cv_selector
| | | |   |-TemplateArgument type 'unsigned int':'unsigned int'
| | | |   | `-SubstTemplateTypeParmType 0x9cbdd0 'unsigned int' sugar
| | | |   |   |-TemplateTypeParmType 0x9b4900 '_Unqualified' dependent depth 0 index 1
| | | |   |   | `-TemplateTypeParm 0x9b48a8 '_Unqualified'
| | | |   |   `-BuiltinType 0x826340 'unsigned int'
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0x9d2880 <col:43> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0x9d2830 <col:43> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0x9b4a28 <line:1706:5, col:43> col:10 referenced 'bool' depth 0 index 2 _IsConst
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0x9b4a88 <col:21, col:43> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0x9b49e0 <col:21, col:43> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0x9d2820 <line:1710:43> 'bool' false
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0x9d28a0 <col:53> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0x9d2860 <col:53> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0x9b4b98 <line:1707:5, col:44> col:10 referenced 'bool' depth 0 index 3 _IsVol
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0x9b4bf8 <col:19, col:44> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0x9b4b50 <col:19, col:44> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0x9d2850 <line:1710:53> 'bool' false
| | | |   `-RecordType 0x9cbfc0 'std::__cv_selector<unsigned int, false, false>'
| | | |     `-ClassTemplateSpecialization 0x9cbea8 '__cv_selector'
| | | |-AccessSpecDecl 0x9d29b8 <line:1712:5, col:11> col:5 public
| | | `-TypedefDecl 0x9d2a90 <line:1713:7, col:40> col:40 referenced __type 'typename __match::__type':'unsigned int'
| | |   `-ElaboratedType 0x9d2a40 'typename __match::__type' sugar
| | |     `-TypedefType 0x9cc430 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | |       |-Typedef 0x9cc3c0 '__type'
| | |       `-SubstTemplateTypeParmType 0x9cc1a0 'unsigned int' sugar
| | |         |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |         | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |         `-BuiltinType 0x826340 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0x9dead8 <line:1705:3, line:1714:5> line:1708:11 class __match_cv_qualifiers definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0x826340 'unsigned int'
| | | |-TemplateArgument type 'int'
| | | | `-BuiltinType 0x8262a0 'int'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0x9ded30 <col:5, col:11> col:11 implicit class __match_cv_qualifiers
| | | |-TypedefDecl 0x9df070 <line:1710:7, col:61> col:61 __match '__cv_selector<int, false, false>':'std::__cv_selector<int, false, false>'
| | | | `-TemplateSpecializationType 0x9defd0 '__cv_selector<int, false, false>' sugar __cv_selector
| | | |   |-TemplateArgument type 'int':'int'
| | | |   | `-SubstTemplateTypeParmType 0x9dedc0 'int' sugar
| | | |   |   |-TemplateTypeParmType 0x9b4900 '_Unqualified' dependent depth 0 index 1
| | | |   |   | `-TemplateTypeParm 0x9b48a8 '_Unqualified'
| | | |   |   `-BuiltinType 0x8262a0 'int'
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0x9dee58 <col:43> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0x9dee08 <col:43> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0x9b4a28 <line:1706:5, col:43> col:10 referenced 'bool' depth 0 index 2 _IsConst
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0x9b4a88 <col:21, col:43> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0x9b49e0 <col:21, col:43> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0x9dedf8 <line:1710:43> 'bool' false
| | | |   |-TemplateArgument expr
| | | |   | `-ConstantExpr 0x9dee78 <col:53> 'bool'
| | | |   |   |-value: Int 0
| | | |   |   `-SubstNonTypeTemplateParmExpr 0x9dee38 <col:53> 'bool'
| | | |   |     |-NonTypeTemplateParmDecl 0x9b4b98 <line:1707:5, col:44> col:10 referenced 'bool' depth 0 index 3 _IsVol
| | | |   |     | `-TemplateArgument expr
| | | |   |     |   `-ImplicitCastExpr 0x9b4bf8 <col:19, col:44> 'bool' <Dependent>
| | | |   |     |     `-DependentScopeDeclRefExpr 0x9b4b50 <col:19, col:44> '<dependent type>' lvalue
| | | |   |     `-CXXBoolLiteralExpr 0x9dee28 <line:1710:53> 'bool' false
| | | |   `-RecordType 0x9defb0 'std::__cv_selector<int, false, false>'
| | | |     `-ClassTemplateSpecialization 0x9dee98 '__cv_selector'
| | | |-AccessSpecDecl 0x9df0c8 <line:1712:5, col:11> col:5 public
| | | `-TypedefDecl 0x9df490 <line:1713:7, col:40> col:40 referenced __type 'typename __match::__type':'int'
| | |   `-ElaboratedType 0x9df440 'typename __match::__type' sugar
| | |     `-TypedefType 0x9df420 'std::__cv_selector<int, false, false>::__type' sugar
| | |       |-Typedef 0x9df3b0 '__type'
| | |       `-SubstTemplateTypeParmType 0x9df190 'int' sugar
| | |         |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |         | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |         `-BuiltinType 0x8262a0 'int'
| | `-ClassTemplateSpecializationDecl 0x9e4c08 <line:1705:3, line:1714:5> line:1708:11 class __match_cv_qualifiers definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-TemplateArgument type 'unsigned short'
| |   | `-BuiltinType 0x826320 'unsigned short'
| |   |-TemplateArgument type 'short'
| |   | `-BuiltinType 0x826280 'short'
| |   |-TemplateArgument integral 0
| |   |-TemplateArgument integral 0
| |   |-CXXRecordDecl 0x9e4e60 <col:5, col:11> col:11 implicit class __match_cv_qualifiers
| |   |-TypedefDecl 0x9e51a0 <line:1710:7, col:61> col:61 __match '__cv_selector<short, false, false>':'std::__cv_selector<short, false, false>'
| |   | `-TemplateSpecializationType 0x9e5100 '__cv_selector<short, false, false>' sugar __cv_selector
| |   |   |-TemplateArgument type 'short':'short'
| |   |   | `-SubstTemplateTypeParmType 0x9e4ef0 'short' sugar
| |   |   |   |-TemplateTypeParmType 0x9b4900 '_Unqualified' dependent depth 0 index 1
| |   |   |   | `-TemplateTypeParm 0x9b48a8 '_Unqualified'
| |   |   |   `-BuiltinType 0x826280 'short'
| |   |   |-TemplateArgument expr
| |   |   | `-ConstantExpr 0x9e4f88 <col:43> 'bool'
| |   |   |   |-value: Int 0
| |   |   |   `-SubstNonTypeTemplateParmExpr 0x9e4f38 <col:43> 'bool'
| |   |   |     |-NonTypeTemplateParmDecl 0x9b4a28 <line:1706:5, col:43> col:10 referenced 'bool' depth 0 index 2 _IsConst
| |   |   |     | `-TemplateArgument expr
| |   |   |     |   `-ImplicitCastExpr 0x9b4a88 <col:21, col:43> 'bool' <Dependent>
| |   |   |     |     `-DependentScopeDeclRefExpr 0x9b49e0 <col:21, col:43> '<dependent type>' lvalue
| |   |   |     `-CXXBoolLiteralExpr 0x9e4f28 <line:1710:43> 'bool' false
| |   |   |-TemplateArgument expr
| |   |   | `-ConstantExpr 0x9e4fa8 <col:53> 'bool'
| |   |   |   |-value: Int 0
| |   |   |   `-SubstNonTypeTemplateParmExpr 0x9e4f68 <col:53> 'bool'
| |   |   |     |-NonTypeTemplateParmDecl 0x9b4b98 <line:1707:5, col:44> col:10 referenced 'bool' depth 0 index 3 _IsVol
| |   |   |     | `-TemplateArgument expr
| |   |   |     |   `-ImplicitCastExpr 0x9b4bf8 <col:19, col:44> 'bool' <Dependent>
| |   |   |     |     `-DependentScopeDeclRefExpr 0x9b4b50 <col:19, col:44> '<dependent type>' lvalue
| |   |   |     `-CXXBoolLiteralExpr 0x9e4f58 <line:1710:53> 'bool' false
| |   |   `-RecordType 0x9e50e0 'std::__cv_selector<short, false, false>'
| |   |     `-ClassTemplateSpecialization 0x9e4fc8 '__cv_selector'
| |   |-AccessSpecDecl 0x9e51f8 <line:1712:5, col:11> col:5 public
| |   `-TypedefDecl 0x9e55c0 <line:1713:7, col:40> col:40 referenced __type 'typename __match::__type':'short'
| |     `-ElaboratedType 0x9e5570 'typename __match::__type' sugar
| |       `-TypedefType 0x9e5550 'std::__cv_selector<short, false, false>::__type' sugar
| |         |-Typedef 0x9e54e0 '__type'
| |         `-SubstTemplateTypeParmType 0x9e52c0 'short' sugar
| |           |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| |           | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| |           `-BuiltinType 0x826280 'short'
| |-ClassTemplateDecl 0x9b5af0 <line:1717:3, line:1719:27> line:1718:12 __make_unsigned
| | |-TemplateTypeParmDecl 0x9b59d0 <line:1717:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9b5a60 <line:1718:5, line:1719:27> line:1718:12 struct __make_unsigned definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0x9b5d30 <col:5, col:12> col:12 implicit struct __make_unsigned
| | | `-TypedefDecl 0x9b5dd0 <line:1719:7, col:19> col:19 __type '_Tp'
| | |   `-TemplateTypeParmType 0x9b5a20 '_Tp' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0x9b59d0 '_Tp'
| | |-ClassTemplateSpecialization 0x9b5e60 '__make_unsigned'
| | |-ClassTemplateSpecialization 0x9b61a8 '__make_unsigned'
| | |-ClassTemplateSpecialization 0x9b64f8 '__make_unsigned'
| | |-ClassTemplateSpecialization 0x9b7e28 '__make_unsigned'
| | |-ClassTemplateSpecialization 0x9b8178 '__make_unsigned'
| | |-ClassTemplateSpecialization 0x9b84c8 '__make_unsigned'
| | |-ClassTemplateSpecialization 0x9b8818 '__make_unsigned'
| | |-ClassTemplateSpecialization 0x968888 '__make_unsigned'
| | |-ClassTemplateSpecialization 0x9cc728 '__make_unsigned'
| | `-ClassTemplateSpecialization 0x9d0358 '__make_unsigned'
| |-ClassTemplateSpecializationDecl 0x9b5e60 <line:1721:3, line:1723:37> line:1722:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char'
| | | `-BuiltinType 0x826240 'char'
| | |-CXXRecordDecl 0x9b6068 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0x9b6110 <line:1723:7, col:29> col:29 __type 'unsigned char'
| |   `-BuiltinType 0x826300 'unsigned char'
| |-ClassTemplateSpecializationDecl 0x9b61a8 <line:1725:3, line:1727:37> line:1726:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'signed char'
| | | `-BuiltinType 0x826260 'signed char'
| | |-CXXRecordDecl 0x9b63b8 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0x9b6460 <line:1727:7, col:29> col:29 __type 'unsigned char'
| |   `-BuiltinType 0x826300 'unsigned char'
| |-ClassTemplateSpecializationDecl 0x9b64f8 <line:1729:3, line:1731:38> line:1730:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'short'
| | | `-BuiltinType 0x826280 'short'
| | |-CXXRecordDecl 0x9b6708 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0x9b7d90 <line:1731:7, col:30> col:30 __type 'unsigned short'
| |   `-BuiltinType 0x826320 'unsigned short'
| |-ClassTemplateSpecializationDecl 0x9b7e28 <line:1733:3, line:1735:36> line:1734:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'int'
| | | `-BuiltinType 0x8262a0 'int'
| | |-CXXRecordDecl 0x9b8038 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0x9b80e0 <line:1735:7, col:28> col:28 __type 'unsigned int'
| |   `-BuiltinType 0x826340 'unsigned int'
| |-ClassTemplateSpecializationDecl 0x9b8178 <line:1737:3, line:1739:37> line:1738:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'long'
| | | `-BuiltinType 0x8262c0 'long'
| | |-CXXRecordDecl 0x9b8388 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0x9b8430 <line:1739:7, col:29> col:29 __type 'unsigned long'
| |   `-BuiltinType 0x826360 'unsigned long'
| |-ClassTemplateSpecializationDecl 0x9b84c8 <line:1741:3, line:1743:42> line:1742:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'long long'
| | | `-BuiltinType 0x8262e0 'long long'
| | |-CXXRecordDecl 0x9b86d8 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0x9b8780 <line:1743:7, col:34> col:34 __type 'unsigned long long'
| |   `-BuiltinType 0x826380 'unsigned long long'
| |-ClassTemplateSpecializationDecl 0x9b8818 <line:1747:3, line:1749:55> line:1748:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type '__int128'
| | | `-BuiltinType 0x826760 '__int128'
| | |-CXXRecordDecl 0x9b8a28 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypedefDecl 0x9b8ad0 <line:1749:7, col:47> col:47 __type 'unsigned __int128'
| |   `-BuiltinType 0x826780 'unsigned __int128'
| |-ClassTemplateDecl 0x9b90f8 <line:1771:3, line:1774:11> col:11 __make_unsigned_selector
| | |-TemplateTypeParmDecl 0x9b8b40 <line:1771:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x9b8cb8 <line:1772:5, col:37> col:10 'bool' depth 0 index 1 _IsInt
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9b8d18 <col:19, col:37> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x9b8c70 <col:19, col:37> '<dependent type>' lvalue
| | |-NonTypeTemplateParmDecl 0x9b8fc8 <line:1773:5, col:34> col:10 'bool' depth 0 index 2 _IsEnum
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9b9028 <col:20, col:34> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x9b8f80 <col:20, col:34> '<dependent type>' lvalue
| | |-CXXRecordDecl 0x9b9068 <line:1774:5, col:11> col:11 class __make_unsigned_selector
| | |-ClassTemplateSpecializationDecl 0x9c87a0 <line:1810:3, line:1823:5> line:1811:11 class __make_unsigned_selector definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-private 'std::__make_unsigned_selector_base'
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0x8267a0 'wchar_t'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 1
| | | |-CXXRecordDecl 0x9c8b20 <col:5, col:11> col:11 implicit class __make_unsigned_selector
| | | |-TypeAliasDecl 0x9c8bb0 <line:1815:7, line:1816:40> line:1815:13 _UInts '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | `-TemplateSpecializationType 0x9bea20 '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>' sugar _List
| | | |   |-TemplateArgument type 'unsigned char'
| | | |   | `-BuiltinType 0x826300 'unsigned char'
| | | |   |-TemplateArgument type 'unsigned short'
| | | |   | `-BuiltinType 0x826320 'unsigned short'
| | | |   |-TemplateArgument type 'unsigned int'
| | | |   | `-BuiltinType 0x826340 'unsigned int'
| | | |   |-TemplateArgument type 'unsigned long'
| | | |   | `-BuiltinType 0x826360 'unsigned long'
| | | |   |-TemplateArgument type 'unsigned long long'
| | | |   | `-BuiltinType 0x826380 'unsigned long long'
| | | |   `-RecordType 0x9bea00 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | |     `-ClassTemplateSpecialization 0x9be918 '_List'
| | | |-TypeAliasDecl 0x9cabb0 <line:1818:7, col:71> col:13 __unsigned_type 'typename __select<sizeof(wchar_t), _UInts>::__type':'unsigned int'
| | | | `-ElaboratedType 0x9cab60 'typename __select<sizeof(wchar_t), _UInts>::__type' sugar
| | | |   `-TypedefType 0x9cab40 'std::__make_unsigned_selector_base::__select<4, std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>, true>::__type' sugar
| | | |     |-TypeAlias 0x9ca918 '__type'
| | | |     `-SubstTemplateTypeParmType 0x9ca590 'unsigned int' sugar
| | | |       |-TemplateTypeParmType 0x9bc450 '_Uint' dependent depth 0 index 1
| | | |       | `-TemplateTypeParm 0x9bc3f8 '_Uint'
| | | |       `-BuiltinType 0x826340 'unsigned int'
| | | |-AccessSpecDecl 0x9cac10 <line:1820:5, col:11> col:5 public
| | | `-TypeAliasDecl 0x9cc580 <line:1821:7, line:1822:58> line:1821:13 referenced __type 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type':'unsigned int'
| | |   `-ElaboratedType 0x9cc530 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type' sugar
| | |     `-TypedefType 0x9cc510 'std::__match_cv_qualifiers<wchar_t, unsigned int, false, false>::__type' sugar
| | |       |-Typedef 0x9cc4a0 '__type'
| | |       `-ElaboratedType 0x9cc450 'typename __match::__type' sugar
| | |         `-TypedefType 0x9cc430 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | |           |-Typedef 0x9cc3c0 '__type'
| | |           `-SubstTemplateTypeParmType 0x9cc1a0 'unsigned int' sugar
| | |             |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |             `-BuiltinType 0x826340 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0x9cd020 <line:1810:3, line:1823:5> line:1811:11 class __make_unsigned_selector definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-private 'std::__make_unsigned_selector_base'
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0x8267e0 'char16_t'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 1
| | | |-CXXRecordDecl 0x9cd3a0 <col:5, col:11> col:11 implicit class __make_unsigned_selector
| | | |-TypeAliasDecl 0x9cd430 <line:1815:7, line:1816:40> line:1815:13 _UInts '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | `-TemplateSpecializationType 0x9bea20 '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>' sugar _List
| | | |   |-TemplateArgument type 'unsigned char'
| | | |   | `-BuiltinType 0x826300 'unsigned char'
| | | |   |-TemplateArgument type 'unsigned short'
| | | |   | `-BuiltinType 0x826320 'unsigned short'
| | | |   |-TemplateArgument type 'unsigned int'
| | | |   | `-BuiltinType 0x826340 'unsigned int'
| | | |   |-TemplateArgument type 'unsigned long'
| | | |   | `-BuiltinType 0x826360 'unsigned long'
| | | |   |-TemplateArgument type 'unsigned long long'
| | | |   | `-BuiltinType 0x826380 'unsigned long long'
| | | |   `-RecordType 0x9bea00 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | |     `-ClassTemplateSpecialization 0x9be918 '_List'
| | | |-TypeAliasDecl 0x9ce910 <line:1818:7, col:71> col:13 __unsigned_type 'typename __select<sizeof(char16_t), _UInts>::__type':'unsigned short'
| | | | `-ElaboratedType 0x9ce8c0 'typename __select<sizeof(char16_t), _UInts>::__type' sugar
| | | |   `-TypedefType 0x9ce8a0 'std::__make_unsigned_selector_base::__select<2, std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>, true>::__type' sugar
| | | |     |-TypeAlias 0x9ce750 '__type'
| | | |     `-SubstTemplateTypeParmType 0x9ce3b0 'unsigned short' sugar
| | | |       |-TemplateTypeParmType 0x9bc450 '_Uint' dependent depth 0 index 1
| | | |       | `-TemplateTypeParm 0x9bc3f8 '_Uint'
| | | |       `-BuiltinType 0x826320 'unsigned short'
| | | |-AccessSpecDecl 0x9ce970 <line:1820:5, col:11> col:5 public
| | | `-TypeAliasDecl 0x9d01b0 <line:1821:7, line:1822:58> line:1821:13 referenced __type 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type':'unsigned short'
| | |   `-ElaboratedType 0x9d0160 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type' sugar
| | |     `-TypedefType 0x9d0140 'std::__match_cv_qualifiers<char16_t, unsigned short, false, false>::__type' sugar
| | |       |-Typedef 0x9d00d0 '__type'
| | |       `-ElaboratedType 0x9d0080 'typename __match::__type' sugar
| | |         `-TypedefType 0x9d0060 'std::__cv_selector<unsigned short, false, false>::__type' sugar
| | |           |-Typedef 0x9cfff0 '__type'
| | |           `-SubstTemplateTypeParmType 0x9cfdd0 'unsigned short' sugar
| | |             |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |             `-BuiltinType 0x826320 'unsigned short'
| | |-ClassTemplateSpecializationDecl 0x9d0c10 <line:1810:3, line:1823:5> line:1811:11 class __make_unsigned_selector definition
| | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-private 'std::__make_unsigned_selector_base'
| | | |-TemplateArgument type 'char32_t'
| | | | `-BuiltinType 0x826800 'char32_t'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 1
| | | |-CXXRecordDecl 0x9d0f90 <col:5, col:11> col:11 implicit class __make_unsigned_selector
| | | |-TypeAliasDecl 0x9d1020 <line:1815:7, line:1816:40> line:1815:13 _UInts '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | `-TemplateSpecializationType 0x9bea20 '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>' sugar _List
| | | |   |-TemplateArgument type 'unsigned char'
| | | |   | `-BuiltinType 0x826300 'unsigned char'
| | | |   |-TemplateArgument type 'unsigned short'
| | | |   | `-BuiltinType 0x826320 'unsigned short'
| | | |   |-TemplateArgument type 'unsigned int'
| | | |   | `-BuiltinType 0x826340 'unsigned int'
| | | |   |-TemplateArgument type 'unsigned long'
| | | |   | `-BuiltinType 0x826360 'unsigned long'
| | | |   |-TemplateArgument type 'unsigned long long'
| | | |   | `-BuiltinType 0x826380 'unsigned long long'
| | | |   `-RecordType 0x9bea00 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | |     `-ClassTemplateSpecialization 0x9be918 '_List'
| | | |-TypeAliasDecl 0x9d1310 <line:1818:7, col:71> col:13 __unsigned_type 'typename __select<sizeof(char32_t), _UInts>::__type':'unsigned int'
| | | | `-ElaboratedType 0x9d12c0 'typename __select<sizeof(char32_t), _UInts>::__type' sugar
| | | |   `-TypedefType 0x9cab40 'std::__make_unsigned_selector_base::__select<4, std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>, true>::__type' sugar
| | | |     |-TypeAlias 0x9ca918 '__type'
| | | |     `-SubstTemplateTypeParmType 0x9ca590 'unsigned int' sugar
| | | |       |-TemplateTypeParmType 0x9bc450 '_Uint' dependent depth 0 index 1
| | | |       | `-TemplateTypeParm 0x9bc3f8 '_Uint'
| | | |       `-BuiltinType 0x826340 'unsigned int'
| | | |-AccessSpecDecl 0x9d1370 <line:1820:5, col:11> col:5 public
| | | `-TypeAliasDecl 0x9d2b70 <line:1821:7, line:1822:58> line:1821:13 referenced __type 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type':'unsigned int'
| | |   `-ElaboratedType 0x9d2b20 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type' sugar
| | |     `-TypedefType 0x9d2b00 'std::__match_cv_qualifiers<char32_t, unsigned int, false, false>::__type' sugar
| | |       |-Typedef 0x9d2a90 '__type'
| | |       `-ElaboratedType 0x9d2a40 'typename __match::__type' sugar
| | |         `-TypedefType 0x9cc430 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | |           |-Typedef 0x9cc3c0 '__type'
| | |           `-SubstTemplateTypeParmType 0x9cc1a0 'unsigned int' sugar
| | |             |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |             `-BuiltinType 0x826340 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0x9db110 <line:1776:3, line:1785:5> line:1777:11 class __make_unsigned_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0x8267a0 'wchar_t'
| | | |-TemplateArgument integral 1
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0x9db420 <col:5, col:11> col:11 implicit class __make_unsigned_selector
| | | |-TypeAliasDecl 0x9dc4d0 <line:1779:7, line:1780:50> line:1779:13 __unsigned_type 'typename __make_unsigned<__remove_cv_t<wchar_t>>::__type':'unsigned int'
| | | | `-ElaboratedType 0x9dc480 'typename __make_unsigned<__remove_cv_t<wchar_t>>::__type' sugar
| | | |   `-TypedefType 0x9dc460 'std::__make_unsigned<wchar_t>::__type' sugar
| | | |     |-TypeAlias 0x9cc690 '__type'
| | | |     `-ElaboratedType 0x9cc620 'typename __make_unsigned_selector<wchar_t, false, true>::__type' sugar
| | | |       `-TypedefType 0x9cc600 'std::__make_unsigned_selector<wchar_t, false, true>::__type' sugar
| | | |         |-TypeAlias 0x9cc580 '__type'
| | | |         `-ElaboratedType 0x9cc530 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type' sugar
| | | |           `-TypedefType 0x9cc510 'std::__match_cv_qualifiers<wchar_t, unsigned int, false, false>::__type' sugar
| | | |             |-Typedef 0x9cc4a0 '__type'
| | | |             `-ElaboratedType 0x9cc450 'typename __match::__type' sugar
| | | |               `-TypedefType 0x9cc430 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | | |                 |-Typedef 0x9cc3c0 '__type'
| | | |                 `-SubstTemplateTypeParmType 0x9cc1a0 'unsigned int' sugar
| | | |                   |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | | |                   | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | | |                   `-BuiltinType 0x826340 'unsigned int'
| | | |-AccessSpecDecl 0x9dc530 <line:1782:5, col:11> col:5 public
| | | `-TypeAliasDecl 0x9dc900 <line:1783:7, line:1784:58> line:1783:13 referenced __type 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type':'unsigned int'
| | |   `-ElaboratedType 0x9dc8b0 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type' sugar
| | |     `-TypedefType 0x9cc510 'std::__match_cv_qualifiers<wchar_t, unsigned int, false, false>::__type' sugar
| | |       |-Typedef 0x9cc4a0 '__type'
| | |       `-ElaboratedType 0x9cc450 'typename __match::__type' sugar
| | |         `-TypedefType 0x9cc430 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | |           |-Typedef 0x9cc3c0 '__type'
| | |           `-SubstTemplateTypeParmType 0x9cc1a0 'unsigned int' sugar
| | |             |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |             `-BuiltinType 0x826340 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0x9e1bd0 <line:1776:3, line:1785:5> line:1777:11 class __make_unsigned_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0x8267e0 'char16_t'
| | | |-TemplateArgument integral 1
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0x9e1ee0 <col:5, col:11> col:11 implicit class __make_unsigned_selector
| | | |-TypeAliasDecl 0x9e2240 <line:1779:7, line:1780:50> line:1779:13 __unsigned_type 'typename __make_unsigned<__remove_cv_t<char16_t>>::__type':'unsigned short'
| | | | `-ElaboratedType 0x9e21f0 'typename __make_unsigned<__remove_cv_t<char16_t>>::__type' sugar
| | | |   `-TypedefType 0x9e21d0 'std::__make_unsigned<char16_t>::__type' sugar
| | | |     |-TypeAlias 0x9d02c0 '__type'
| | | |     `-ElaboratedType 0x9d0250 'typename __make_unsigned_selector<char16_t, false, true>::__type' sugar
| | | |       `-TypedefType 0x9d0230 'std::__make_unsigned_selector<char16_t, false, true>::__type' sugar
| | | |         |-TypeAlias 0x9d01b0 '__type'
| | | |         `-ElaboratedType 0x9d0160 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type' sugar
| | | |           `-TypedefType 0x9d0140 'std::__match_cv_qualifiers<char16_t, unsigned short, false, false>::__type' sugar
| | | |             |-Typedef 0x9d00d0 '__type'
| | | |             `-ElaboratedType 0x9d0080 'typename __match::__type' sugar
| | | |               `-TypedefType 0x9d0060 'std::__cv_selector<unsigned short, false, false>::__type' sugar
| | | |                 |-Typedef 0x9cfff0 '__type'
| | | |                 `-SubstTemplateTypeParmType 0x9cfdd0 'unsigned short' sugar
| | | |                   |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | | |                   | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | | |                   `-BuiltinType 0x826320 'unsigned short'
| | | |-AccessSpecDecl 0x9e22a0 <line:1782:5, col:11> col:5 public
| | | `-TypeAliasDecl 0x9e2670 <line:1783:7, line:1784:58> line:1783:13 referenced __type 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type':'unsigned short'
| | |   `-ElaboratedType 0x9e2620 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type' sugar
| | |     `-TypedefType 0x9d0140 'std::__match_cv_qualifiers<char16_t, unsigned short, false, false>::__type' sugar
| | |       |-Typedef 0x9d00d0 '__type'
| | |       `-ElaboratedType 0x9d0080 'typename __match::__type' sugar
| | |         `-TypedefType 0x9d0060 'std::__cv_selector<unsigned short, false, false>::__type' sugar
| | |           |-Typedef 0x9cfff0 '__type'
| | |           `-SubstTemplateTypeParmType 0x9cfdd0 'unsigned short' sugar
| | |             |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |             `-BuiltinType 0x826320 'unsigned short'
| | `-ClassTemplateSpecializationDecl 0x9e7db0 <line:1776:3, line:1785:5> line:1777:11 class __make_unsigned_selector definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-TemplateArgument type 'char32_t'
| |   | `-BuiltinType 0x826800 'char32_t'
| |   |-TemplateArgument integral 1
| |   |-TemplateArgument integral 0
| |   |-CXXRecordDecl 0x9e80c0 <col:5, col:11> col:11 implicit class __make_unsigned_selector
| |   |-TypeAliasDecl 0x9e8420 <line:1779:7, line:1780:50> line:1779:13 __unsigned_type 'typename __make_unsigned<__remove_cv_t<char32_t>>::__type':'unsigned int'
| |   | `-ElaboratedType 0x9e83d0 'typename __make_unsigned<__remove_cv_t<char32_t>>::__type' sugar
| |   |   `-TypedefType 0x9e83b0 'std::__make_unsigned<char32_t>::__type' sugar
| |   |     |-TypeAlias 0x9d2c80 '__type'
| |   |     `-ElaboratedType 0x9d2c10 'typename __make_unsigned_selector<char32_t, false, true>::__type' sugar
| |   |       `-TypedefType 0x9d2bf0 'std::__make_unsigned_selector<char32_t, false, true>::__type' sugar
| |   |         |-TypeAlias 0x9d2b70 '__type'
| |   |         `-ElaboratedType 0x9d2b20 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type' sugar
| |   |           `-TypedefType 0x9d2b00 'std::__match_cv_qualifiers<char32_t, unsigned int, false, false>::__type' sugar
| |   |             |-Typedef 0x9d2a90 '__type'
| |   |             `-ElaboratedType 0x9d2a40 'typename __match::__type' sugar
| |   |               `-TypedefType 0x9cc430 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| |   |                 |-Typedef 0x9cc3c0 '__type'
| |   |                 `-SubstTemplateTypeParmType 0x9cc1a0 'unsigned int' sugar
| |   |                   |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| |   |                   | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| |   |                   `-BuiltinType 0x826340 'unsigned int'
| |   |-AccessSpecDecl 0x9e8480 <line:1782:5, col:11> col:5 public
| |   `-TypeAliasDecl 0x9e8850 <line:1783:7, line:1784:58> line:1783:13 referenced __type 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type':'unsigned int'
| |     `-ElaboratedType 0x9e8800 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type' sugar
| |       `-TypedefType 0x9d2b00 'std::__match_cv_qualifiers<char32_t, unsigned int, false, false>::__type' sugar
| |         |-Typedef 0x9d2a90 '__type'
| |         `-ElaboratedType 0x9d2a40 'typename __match::__type' sugar
| |           `-TypedefType 0x9cc430 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| |             |-Typedef 0x9cc3c0 '__type'
| |             `-SubstTemplateTypeParmType 0x9cc1a0 'unsigned int' sugar
| |               |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| |               | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| |               `-BuiltinType 0x826340 'unsigned int'
| |-ClassTemplatePartialSpecializationDecl 0x9b95d0 <line:1776:3, line:1785:5> line:1777:11 class __make_unsigned_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x9b9378 <line:1776:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9b98b8 <line:1777:5, col:11> col:11 implicit class __make_unsigned_selector
| | |-TypeAliasDecl 0x9b9cc0 <line:1779:7, line:1780:50> line:1779:13 referenced __unsigned_type 'typename __make_unsigned<__remove_cv_t<_Tp>>::__type'
| | | `-DependentNameType 0x9b9c50 'typename __make_unsigned<__remove_cv_t<_Tp>>::__type' dependent
| | |-AccessSpecDecl 0x9b9d20 <line:1782:5, col:11> col:5 public
| | `-TypeAliasDecl 0x9ba650 <line:1783:7, line:1784:58> line:1783:13 __type 'typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type'
| |   `-DependentNameType 0x9ba5e0 'typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type' dependent
| |-CXXRecordDecl 0x9ba6c8 <line:1787:3, line:1807:3> line:1787:9 referenced class __make_unsigned_selector_base definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x9ba7e8 <col:3, col:9> col:9 implicit class __make_unsigned_selector_base
| | |-AccessSpecDecl 0x9ba878 <line:1789:3, col:12> col:3 protected
| | |-ClassTemplateDecl 0x9ba9c0 <line:1790:5, col:42> col:34 _List
| | | |-TemplateTypeParmDecl 0x9ba8a0 <col:14> col:25 typename depth 0 index 0 ...
| | | |-CXXRecordDecl 0x9ba930 <col:27, col:42> col:34 struct _List definition
| | | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | `-CXXRecordDecl 0x9bac60 <col:27, col:34> col:34 implicit struct _List
| | | |-ClassTemplateSpecializationDecl 0x9be918 <line:1792:5, line:1794:55> line:1793:14 struct _List definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '_List<unsigned short, unsigned int, unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | |-TemplateArgument pack
| | | | | |-TemplateArgument type 'unsigned char'
| | | | | | `-BuiltinType 0x826300 'unsigned char'
| | | | | |-TemplateArgument type 'unsigned short'
| | | | | | `-BuiltinType 0x826320 'unsigned short'
| | | | | |-TemplateArgument type 'unsigned int'
| | | | | | `-BuiltinType 0x826340 'unsigned int'
| | | | | |-TemplateArgument type 'unsigned long'
| | | | | | `-BuiltinType 0x826360 'unsigned long'
| | | | | `-TemplateArgument type 'unsigned long long'
| | | | |   `-BuiltinType 0x826380 'unsigned long long'
| | | | |-CXXRecordDecl 0x967f20 <col:7, col:14> col:14 implicit struct _List
| | | | `-VarDecl 0x967fb0 <line:1794:9, col:52> col:33 referenced __size 'const std::size_t':'const unsigned long' static constexpr cinit
| | | |   |-value: Int 1
| | | |   `-UnaryExprOrTypeTraitExpr 0x968038 <col:42, col:52> 'unsigned long' sizeof 'unsigned char':'unsigned char'
| | | |-ClassTemplateSpecializationDecl 0x9bf0e8 <line:1792:5, line:1794:55> line:1793:14 struct _List definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '_List<unsigned int, unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>'
| | | | |-TemplateArgument pack
| | | | | |-TemplateArgument type 'unsigned short'
| | | | | | `-BuiltinType 0x826320 'unsigned short'
| | | | | |-TemplateArgument type 'unsigned int'
| | | | | | `-BuiltinType 0x826340 'unsigned int'
| | | | | |-TemplateArgument type 'unsigned long'
| | | | | | `-BuiltinType 0x826360 'unsigned long'
| | | | | `-TemplateArgument type 'unsigned long long'
| | | | |   `-BuiltinType 0x826380 'unsigned long long'
| | | | |-CXXRecordDecl 0x967d48 <col:7, col:14> col:14 implicit struct _List
| | | | `-VarDecl 0x967dd8 <line:1794:9, col:52> col:33 referenced __size 'const std::size_t':'const unsigned long' static constexpr cinit
| | | |   |-value: Int 2
| | | |   `-UnaryExprOrTypeTraitExpr 0x967e60 <col:42, col:52> 'unsigned long' sizeof 'unsigned short':'unsigned short'
| | | |-ClassTemplateSpecializationDecl 0x9bf690 <line:1792:5, line:1794:55> line:1793:14 struct _List definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '_List<unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned long, unsigned long long>'
| | | | |-TemplateArgument pack
| | | | | |-TemplateArgument type 'unsigned int'
| | | | | | `-BuiltinType 0x826340 'unsigned int'
| | | | | |-TemplateArgument type 'unsigned long'
| | | | | | `-BuiltinType 0x826360 'unsigned long'
| | | | | `-TemplateArgument type 'unsigned long long'
| | | | |   `-BuiltinType 0x826380 'unsigned long long'
| | | | |-CXXRecordDecl 0x967b70 <col:7, col:14> col:14 implicit struct _List
| | | | `-VarDecl 0x967c00 <line:1794:9, col:52> col:33 referenced __size 'const std::size_t':'const unsigned long' static constexpr cinit
| | | |   |-value: Int 4
| | | |   `-UnaryExprOrTypeTraitExpr 0x967c88 <col:42, col:52> 'unsigned long' sizeof 'unsigned int':'unsigned int'
| | | |-ClassTemplateSpecializationDecl 0x9bfaa8 <line:1792:5, line:1794:55> line:1793:14 struct _List definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '_List<unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned long long>'
| | | | |-TemplateArgument pack
| | | | | |-TemplateArgument type 'unsigned long'
| | | | | | `-BuiltinType 0x826360 'unsigned long'
| | | | | `-TemplateArgument type 'unsigned long long'
| | | | |   `-BuiltinType 0x826380 'unsigned long long'
| | | | |-CXXRecordDecl 0x9c0518 <col:7, col:14> col:14 implicit struct _List
| | | | `-VarDecl 0x9c05a8 <line:1794:9, col:52> col:33 __size 'const std::size_t':'const unsigned long' static constexpr cinit
| | | |   |-value: Int 8
| | | |   `-UnaryExprOrTypeTraitExpr 0x9c0630 <col:42, col:52> 'unsigned long' sizeof 'unsigned long':'unsigned long'
| | | |-ClassTemplateSpecializationDecl 0x9bfe08 <line:1792:5, line:1794:55> line:1793:14 struct _List definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '_List<>':'std::__make_unsigned_selector_base::_List<>'
| | | | |-TemplateArgument pack
| | | | | `-TemplateArgument type 'unsigned long long'
| | | | |   `-BuiltinType 0x826380 'unsigned long long'
| | | | |-CXXRecordDecl 0x9c0340 <col:7, col:14> col:14 implicit struct _List
| | | | `-VarDecl 0x9c03d0 <line:1794:9, col:52> col:33 __size 'const std::size_t':'const unsigned long' static constexpr cinit
| | | |   |-value: Int 8
| | | |   `-UnaryExprOrTypeTraitExpr 0x9c0458 <col:42, col:52> 'unsigned long' sizeof 'unsigned long long':'unsigned long long'
| | | `-ClassTemplateSpecializationDecl 0x9c00b8 <line:1790:5, col:42> col:34 struct _List definition
| | |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-TemplateArgument pack
| | |   `-CXXRecordDecl 0x9c0268 <col:27, col:34> col:34 implicit struct _List
| | |-ClassTemplatePartialSpecializationDecl 0x9bafc0 <line:1792:5, line:1794:55> line:1793:14 struct _List definition
| | | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public '_List<_Up...>'
| | | |-TemplateArgument pack
| | | | |-TemplateArgument type 'type-parameter-0-0'
| | | | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | | | `-TemplateArgument type 'type-parameter-0-1...'
| | | |   `-PackExpansionType 0x96a370 'type-parameter-0-1...' dependent
| | | |     `-TemplateTypeParmType 0x9486e0 'type-parameter-0-1' dependent contains_unexpanded_pack depth 0 index 1 pack
| | | |-TemplateTypeParmDecl 0x9bad08 <line:1792:14, col:23> col:23 referenced typename depth 0 index 0 _Tp
| | | |-TemplateTypeParmDecl 0x9bad88 <col:28, col:40> col:40 referenced typename depth 0 index 1 ... _Up
| | | |-CXXRecordDecl 0x9bbcb0 <line:1793:7, col:14> col:14 implicit struct _List
| | | `-VarDecl 0x9bbd50 <line:1794:9, col:52> col:33 __size 'const std::size_t':'const unsigned long' static constexpr cinit
| | |   `-UnaryExprOrTypeTraitExpr 0x9bbdc8 <col:42, col:52> 'unsigned long' sizeof '_Tp'
| | |-ClassTemplateDecl 0x9bc110 <line:1796:5, line:1797:14> col:14 __select
| | | |-NonTypeTemplateParmDecl 0x9bbe10 <line:1796:14, col:21> col:21 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Sz
| | | |-TemplateTypeParmDecl 0x9bbe70 <col:26, col:35> col:35 typename depth 0 index 1 _Tp
| | | |-NonTypeTemplateParmDecl 0x9bbfe0 <col:40, col:66> col:45 'bool' depth 0 index 2
| | | | `-TemplateArgument expr
| | | |   `-ImplicitCastExpr 0x9bc040 <col:47, col:66> 'bool' <Dependent>
| | | |     `-ParenExpr 0x9bbfb0 <col:47, col:66> '<dependent type>'
| | | |       `-BinaryOperator 0x9bbf90 <col:48, col:60> '<dependent type>' '<='
| | | |         |-DeclRefExpr 0x9bbee8 <col:48> 'std::size_t':'unsigned long' NonTypeTemplateParm 0x9bbe10 '_Sz' 'std::size_t':'unsigned long'
| | | |         `-DependentScopeDeclRefExpr 0x9bbf58 <col:55, col:60> '<dependent type>' lvalue
| | | |-CXXRecordDecl 0x9bc080 <line:1797:7, col:14> col:14 struct __select
| | | |-ClassTemplateSpecializationDecl 0x9c8d98 <line:1803:5, line:1806:9> line:1804:14 struct __select definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '__select<4UL, _List<unsigned short, unsigned int, unsigned long, unsigned long long>>':'std::__make_unsigned_selector_base::__select<4, std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>, false>'
| | | | |-TemplateArgument integral 4
| | | | |-TemplateArgument type 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | | `-RecordType 0x9bea00 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | |   `-ClassTemplateSpecialization 0x9be918 '_List'
| | | | |-TemplateArgument integral 0
| | | | `-CXXRecordDecl 0x9caa98 <col:7, col:14> col:14 implicit struct __select
| | | |-ClassTemplateSpecializationDecl 0x9c9908 <line:1803:5, line:1806:9> line:1804:14 struct __select definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '__select<4UL, _List<unsigned int, unsigned long, unsigned long long>>':'std::__make_unsigned_selector_base::__select<4, std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>, true>'
| | | | |-TemplateArgument integral 4
| | | | |-TemplateArgument type 'std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | | `-RecordType 0x9bf1d0 'std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | |   `-ClassTemplateSpecialization 0x9bf0e8 '_List'
| | | | |-TemplateArgument integral 0
| | | | `-CXXRecordDecl 0x9ca9c0 <col:7, col:14> col:14 implicit struct __select
| | | |-ClassTemplateSpecializationDecl 0x9ca258 <line:1799:5, line:1801:31> line:1800:14 struct __select definition
| | | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-TemplateArgument integral 4
| | | | |-TemplateArgument type 'std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>'
| | | | | `-RecordType 0x9bf770 'std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>'
| | | | |   `-ClassTemplateSpecialization 0x9bf690 '_List'
| | | | |-TemplateArgument integral 1
| | | | |-CXXRecordDecl 0x9ca878 <col:7, col:14> col:14 implicit struct __select
| | | | `-TypeAliasDecl 0x9ca918 <line:1801:9, col:24> col:15 referenced __type 'unsigned int':'unsigned int'
| | | |   `-SubstTemplateTypeParmType 0x9ca590 'unsigned int' sugar
| | | |     |-TemplateTypeParmType 0x9bc450 '_Uint' dependent depth 0 index 1
| | | |     | `-TemplateTypeParm 0x9bc3f8 '_Uint'
| | | |     `-BuiltinType 0x826340 'unsigned int'
| | | |-ClassTemplateSpecializationDecl 0x9cd618 <line:1803:5, line:1806:9> line:1804:14 struct __select definition
| | | | |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-public '__select<2UL, _List<unsigned short, unsigned int, unsigned long, unsigned long long>>':'std::__make_unsigned_selector_base::__select<2, std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>, true>'
| | | | |-TemplateArgument integral 2
| | | | |-TemplateArgument type 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | | `-RecordType 0x9bea00 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | | |   `-ClassTemplateSpecialization 0x9be918 '_List'
| | | | |-TemplateArgument integral 0
| | | | `-CXXRecordDecl 0x9ce7f8 <col:7, col:14> col:14 implicit struct __select
| | | `-ClassTemplateSpecializationDecl 0x9ce030 <line:1799:5, line:1801:31> line:1800:14 struct __select definition
| | |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-TemplateArgument integral 2
| | |   |-TemplateArgument type 'std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>'
| | |   | `-RecordType 0x9bf1d0 'std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>'
| | |   |   `-ClassTemplateSpecialization 0x9bf0e8 '_List'
| | |   |-TemplateArgument integral 1
| | |   |-CXXRecordDecl 0x9ce6b0 <col:7, col:14> col:14 implicit struct __select
| | |   `-TypeAliasDecl 0x9ce750 <line:1801:9, col:24> col:15 referenced __type 'unsigned short':'unsigned short'
| | |     `-SubstTemplateTypeParmType 0x9ce3b0 'unsigned short' sugar
| | |       |-TemplateTypeParmType 0x9bc450 '_Uint' dependent depth 0 index 1
| | |       | `-TemplateTypeParm 0x9bc3f8 '_Uint'
| | |       `-BuiltinType 0x826320 'unsigned short'
| | |-ClassTemplatePartialSpecializationDecl 0x9bc8d0 <line:1799:5, line:1801:31> line:1800:14 struct __select definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x9bc550 <col:23> 'std::size_t':'unsigned long' NonTypeTemplateParm 0x9bc398 '_Sz' 'std::size_t':'unsigned long'
| | | |-TemplateArgument type '_List<type-parameter-0-1, type-parameter-0-2...>'
| | | | `-TemplateSpecializationType 0x9bc660 '_List<type-parameter-0-1, type-parameter-0-2...>' dependent _List
| | | |   `-TemplateArgument pack
| | | |     |-TemplateArgument type 'type-parameter-0-1'
| | | |     | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | | |     `-TemplateArgument type 'type-parameter-0-2...'
| | | |       `-PackExpansionType 0x9bc590 'type-parameter-0-2...' dependent
| | | |         `-TemplateTypeParmType 0x9bc4d0 'type-parameter-0-2' dependent contains_unexpanded_pack depth 0 index 2 pack
| | | |-TemplateArgument integral 1
| | | |-NonTypeTemplateParmDecl 0x9bc398 <line:1799:14, col:21> col:21 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Sz
| | | |-TemplateTypeParmDecl 0x9bc3f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Uint
| | | |-TemplateTypeParmDecl 0x9bc478 <col:42, col:54> col:54 referenced typename depth 0 index 2 ... _UInts
| | | |-CXXRecordDecl 0x9bcb98 <line:1800:7, col:14> col:14 implicit struct __select
| | | `-TypeAliasDecl 0x9bcc38 <line:1801:9, col:24> col:15 __type '_Uint'
| | |   `-TemplateTypeParmType 0x9bc450 '_Uint' dependent depth 0 index 1
| | |     `-TemplateTypeParm 0x9bc3f8 '_Uint'
| | `-ClassTemplatePartialSpecializationDecl 0x9bda50 <line:1803:5, line:1806:9> line:1804:14 struct __select definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__select<_Sz, _List<_UInts...>>'
| |   |-TemplateArgument expr
| |   | `-DeclRefExpr 0x9bd740 <col:23> 'std::size_t':'unsigned long' NonTypeTemplateParm 0x9bd5c0 '_Sz' 'std::size_t':'unsigned long'
| |   |-TemplateArgument type '_List<type-parameter-0-1, type-parameter-0-2...>'
| |   | `-TemplateSpecializationType 0x9bc660 '_List<type-parameter-0-1, type-parameter-0-2...>' dependent _List
| |   |   `-TemplateArgument pack
| |   |     |-TemplateArgument type 'type-parameter-0-1'
| |   |     | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| |   |     `-TemplateArgument type 'type-parameter-0-2...'
| |   |       `-PackExpansionType 0x9bc590 'type-parameter-0-2...' dependent
| |   |         `-TemplateTypeParmType 0x9bc4d0 'type-parameter-0-2' dependent contains_unexpanded_pack depth 0 index 2 pack
| |   |-TemplateArgument integral 0
| |   |-NonTypeTemplateParmDecl 0x9bd5c0 <line:1803:14, col:21> col:21 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Sz
| |   |-TemplateTypeParmDecl 0x9bd620 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Uint
| |   |-TemplateTypeParmDecl 0x9bd698 <col:42, col:54> col:54 referenced typename depth 0 index 2 ... _UInts
| |   `-CXXRecordDecl 0x9be0e0 <line:1804:7, col:14> col:14 implicit struct __select
| |-ClassTemplatePartialSpecializationDecl 0x9be3f0 <line:1810:3, line:1823:5> line:1811:11 class __make_unsigned_selector definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-private 'std::__make_unsigned_selector_base'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x9be1a0 <line:1810:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9be798 <line:1811:5, col:11> col:11 implicit class __make_unsigned_selector
| | |-TypeAliasDecl 0x9beb40 <line:1815:7, line:1816:40> line:1815:13 referenced _UInts '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>':'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | | `-TemplateSpecializationType 0x9bea20 '_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>' sugar _List
| | |   |-TemplateArgument type 'unsigned char'
| | |   | `-BuiltinType 0x826300 'unsigned char'
| | |   |-TemplateArgument type 'unsigned short'
| | |   | `-BuiltinType 0x826320 'unsigned short'
| | |   |-TemplateArgument type 'unsigned int'
| | |   | `-BuiltinType 0x826340 'unsigned int'
| | |   |-TemplateArgument type 'unsigned long'
| | |   | `-BuiltinType 0x826360 'unsigned long'
| | |   |-TemplateArgument type 'unsigned long long'
| | |   | `-BuiltinType 0x826380 'unsigned long long'
| | |   `-RecordType 0x9bea00 'std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>'
| | |     `-ClassTemplateSpecialization 0x9be918 '_List'
| | |-TypeAliasDecl 0x968350 <line:1818:7, col:71> col:13 referenced __unsigned_type 'typename __select<sizeof(_Tp), _UInts>::__type'
| | | `-DependentNameType 0x9682e0 'typename __select<sizeof(_Tp), _UInts>::__type' dependent
| | |-AccessSpecDecl 0x9683b0 <line:1820:5, col:11> col:5 public
| | `-TypeAliasDecl 0x9687f0 <line:1821:7, line:1822:58> line:1821:13 __type 'typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type'
| |   `-DependentNameType 0x968780 'typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type' dependent
| |-ClassTemplateSpecializationDecl 0x968888 <line:1829:3, line:1834:5> line:1830:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'wchar_t'
| | | `-BuiltinType 0x8267a0 'wchar_t'
| | |-CXXRecordDecl 0x9c86a0 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypeAliasDecl 0x9cc690 <line:1832:7, line:1833:61> line:1832:13 referenced __type 'typename __make_unsigned_selector<wchar_t, false, true>::__type':'unsigned int'
| |   `-ElaboratedType 0x9cc620 'typename __make_unsigned_selector<wchar_t, false, true>::__type' sugar
| |     `-TypedefType 0x9cc600 'std::__make_unsigned_selector<wchar_t, false, true>::__type' sugar
| |       |-TypeAlias 0x9cc580 '__type'
| |       `-ElaboratedType 0x9cc530 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type' sugar
| |         `-TypedefType 0x9cc510 'std::__match_cv_qualifiers<wchar_t, unsigned int, false, false>::__type' sugar
| |           |-Typedef 0x9cc4a0 '__type'
| |           `-ElaboratedType 0x9cc450 'typename __match::__type' sugar
| |             `-TypedefType 0x9cc430 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| |               |-Typedef 0x9cc3c0 '__type'
| |               `-SubstTemplateTypeParmType 0x9cc1a0 'unsigned int' sugar
| |                 |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| |                 | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| |                 `-BuiltinType 0x826340 'unsigned int'
| |-VarDecl 0x9cb028 parent 0x90ec18 prev 0x919d58 <line:78:5, col:48> col:48 used value 'const bool':'const bool' constexpr
| |-ClassTemplateSpecializationDecl 0x9cc728 <line:1845:3, line:1850:5> line:1846:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char16_t'
| | | `-BuiltinType 0x8267e0 'char16_t'
| | |-CXXRecordDecl 0x9cc938 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypeAliasDecl 0x9d02c0 <line:1848:7, line:1849:62> line:1848:13 referenced __type 'typename __make_unsigned_selector<char16_t, false, true>::__type':'unsigned short'
| |   `-ElaboratedType 0x9d0250 'typename __make_unsigned_selector<char16_t, false, true>::__type' sugar
| |     `-TypedefType 0x9d0230 'std::__make_unsigned_selector<char16_t, false, true>::__type' sugar
| |       |-TypeAlias 0x9d01b0 '__type'
| |       `-ElaboratedType 0x9d0160 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type' sugar
| |         `-TypedefType 0x9d0140 'std::__match_cv_qualifiers<char16_t, unsigned short, false, false>::__type' sugar
| |           |-Typedef 0x9d00d0 '__type'
| |           `-ElaboratedType 0x9d0080 'typename __match::__type' sugar
| |             `-TypedefType 0x9d0060 'std::__cv_selector<unsigned short, false, false>::__type' sugar
| |               |-Typedef 0x9cfff0 '__type'
| |               `-SubstTemplateTypeParmType 0x9cfdd0 'unsigned short' sugar
| |                 |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| |                 | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| |                 `-BuiltinType 0x826320 'unsigned short'
| |-ClassTemplateSpecializationDecl 0x9d0358 <line:1852:3, line:1857:5> line:1853:12 struct __make_unsigned definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char32_t'
| | | `-BuiltinType 0x826800 'char32_t'
| | |-CXXRecordDecl 0x9d0b10 <col:5, col:12> col:12 implicit struct __make_unsigned
| | `-TypeAliasDecl 0x9d2c80 <line:1855:7, line:1856:62> line:1855:13 referenced __type 'typename __make_unsigned_selector<char32_t, false, true>::__type':'unsigned int'
| |   `-ElaboratedType 0x9d2c10 'typename __make_unsigned_selector<char32_t, false, true>::__type' sugar
| |     `-TypedefType 0x9d2bf0 'std::__make_unsigned_selector<char32_t, false, true>::__type' sugar
| |       |-TypeAlias 0x9d2b70 '__type'
| |       `-ElaboratedType 0x9d2b20 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type' sugar
| |         `-TypedefType 0x9d2b00 'std::__match_cv_qualifiers<char32_t, unsigned int, false, false>::__type' sugar
| |           |-Typedef 0x9d2a90 '__type'
| |           `-ElaboratedType 0x9d2a40 'typename __match::__type' sugar
| |             `-TypedefType 0x9cc430 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| |               |-Typedef 0x9cc3c0 '__type'
| |               `-SubstTemplateTypeParmType 0x9cc1a0 'unsigned int' sugar
| |                 |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| |                 | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| |                 `-BuiltinType 0x826340 'unsigned int'
| |-ClassTemplateDecl 0x9d2e20 <line:1864:3, line:1866:68> line:1865:12 make_unsigned
| | |-TemplateTypeParmDecl 0x9d2cf8 <line:1864:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9d2d90 <line:1865:5, line:1866:68> line:1865:12 struct make_unsigned definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0x9d3060 <col:5, col:12> col:12 implicit struct make_unsigned
| | | `-TypedefDecl 0x9d39f0 <line:1866:7, col:62> col:62 type 'typename __make_unsigned_selector<_Tp>::__type'
| | |   `-DependentNameType 0x9d3480 'typename __make_unsigned_selector<_Tp>::__type' dependent
| | `-ClassTemplateSpecialization 0x9d3a80 'make_unsigned'
| |-ClassTemplateSpecializationDecl 0x9d3a80 <line:1869:3, line:1870:30> col:12 struct make_unsigned
| | `-TemplateArgument type 'bool'
| |   `-BuiltinType 0x826220 'bool'
| |-ClassTemplateDecl 0x9d3d40 <line:1875:3, line:1877:27> line:1876:12 __make_signed
| | |-TemplateTypeParmDecl 0x9d3c20 <line:1875:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9d3cb0 <line:1876:5, line:1877:27> line:1876:12 struct __make_signed definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0x9d3f80 <col:5, col:12> col:12 implicit struct __make_signed
| | | `-TypedefDecl 0x9d4020 <line:1877:7, col:19> col:19 __type '_Tp'
| | |   `-TemplateTypeParmType 0x9d3c70 '_Tp' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0x9d3c20 '_Tp'
| | |-ClassTemplateSpecialization 0x9d40b0 '__make_signed'
| | |-ClassTemplateSpecialization 0x9d43f8 '__make_signed'
| | |-ClassTemplateSpecialization 0x9d4748 '__make_signed'
| | |-ClassTemplateSpecialization 0x9d6020 '__make_signed'
| | |-ClassTemplateSpecialization 0x9d6368 '__make_signed'
| | |-ClassTemplateSpecialization 0x9d66b8 '__make_signed'
| | |-ClassTemplateSpecialization 0x9d6a08 '__make_signed'
| | |-ClassTemplateSpecialization 0x9d9950 '__make_signed'
| | |-ClassTemplateSpecialization 0x9df7f8 '__make_signed'
| | `-ClassTemplateSpecialization 0x9e5928 '__make_signed'
| |-ClassTemplateSpecializationDecl 0x9d40b0 <line:1879:3, line:1881:35> line:1880:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char'
| | | `-BuiltinType 0x826240 'char'
| | |-CXXRecordDecl 0x9d42b8 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0x9d4360 <line:1881:7, col:27> col:27 __type 'signed char'
| |   `-BuiltinType 0x826260 'signed char'
| |-ClassTemplateSpecializationDecl 0x9d43f8 <line:1883:3, line:1885:35> line:1884:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned char'
| | | `-BuiltinType 0x826300 'unsigned char'
| | |-CXXRecordDecl 0x9d4608 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0x9d46b0 <line:1885:7, col:27> col:27 __type 'signed char'
| |   `-BuiltinType 0x826260 'signed char'
| |-ClassTemplateSpecializationDecl 0x9d4748 <line:1887:3, line:1889:36> line:1888:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned short'
| | | `-BuiltinType 0x826320 'unsigned short'
| | |-CXXRecordDecl 0x9d5ee0 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0x9d5f88 <line:1889:7, col:28> col:28 referenced __type 'short'
| |   `-BuiltinType 0x826280 'short'
| |-ClassTemplateSpecializationDecl 0x9d6020 <line:1891:3, line:1893:34> line:1892:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned int'
| | | `-BuiltinType 0x826340 'unsigned int'
| | |-CXXRecordDecl 0x9d6228 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0x9d62d0 <line:1893:7, col:26> col:26 referenced __type 'int'
| |   `-BuiltinType 0x8262a0 'int'
| |-ClassTemplateSpecializationDecl 0x9d6368 <line:1895:3, line:1897:35> line:1896:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned long'
| | | `-BuiltinType 0x826360 'unsigned long'
| | |-CXXRecordDecl 0x9d6578 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0x9d6620 <line:1897:7, col:27> col:27 __type 'long'
| |   `-BuiltinType 0x8262c0 'long'
| |-ClassTemplateSpecializationDecl 0x9d66b8 <line:1899:3, line:1901:40> line:1900:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned long long'
| | | `-BuiltinType 0x826380 'unsigned long long'
| | |-CXXRecordDecl 0x9d68c8 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0x9d6970 <line:1901:7, col:32> col:32 __type 'long long'
| |   `-BuiltinType 0x8262e0 'long long'
| |-ClassTemplateSpecializationDecl 0x9d6a08 <line:1905:3, line:1907:46> line:1906:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned __int128'
| | | `-BuiltinType 0x826780 'unsigned __int128'
| | |-CXXRecordDecl 0x9d6c18 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypedefDecl 0x9d6cc0 <line:1907:7, col:38> col:38 __type '__int128'
| |   `-BuiltinType 0x826760 '__int128'
| |-ClassTemplateDecl 0x9d79a8 <line:1929:3, line:1932:11> col:11 __make_signed_selector
| | |-TemplateTypeParmDecl 0x9d6d30 <line:1929:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x9d7700 <line:1930:5, col:37> col:10 'bool' depth 0 index 1 _IsInt
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9d7760 <col:19, col:37> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x9d6e60 <col:19, col:37> '<dependent type>' lvalue
| | |-NonTypeTemplateParmDecl 0x9d7878 <line:1931:5, col:34> col:10 'bool' depth 0 index 2 _IsEnum
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9d78d8 <col:20, col:34> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x9d7830 <col:20, col:34> '<dependent type>' lvalue
| | |-CXXRecordDecl 0x9d7918 <line:1932:5, col:11> col:11 class __make_signed_selector
| | |-ClassTemplateSpecializationDecl 0x9d9c58 <line:1946:3, line:1953:5> line:1947:11 class __make_signed_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0x8267a0 'wchar_t'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 1
| | | |-CXXRecordDecl 0x9d9fb0 <col:5, col:11> col:11 implicit class __make_signed_selector
| | | |-TypedefDecl 0x9dc9f0 <line:1949:7, col:62> col:62 __unsigned_type 'typename __make_unsigned_selector<wchar_t>::__type':'unsigned int'
| | | | `-ElaboratedType 0x9dc9a0 'typename __make_unsigned_selector<wchar_t>::__type' sugar
| | | |   `-TypedefType 0x9dc980 'std::__make_unsigned_selector<wchar_t, true, false>::__type' sugar
| | | |     |-TypeAlias 0x9dc900 '__type'
| | | |     `-ElaboratedType 0x9dc8b0 'typename __match_cv_qualifiers<wchar_t, __unsigned_type>::__type' sugar
| | | |       `-TypedefType 0x9cc510 'std::__match_cv_qualifiers<wchar_t, unsigned int, false, false>::__type' sugar
| | | |         |-Typedef 0x9cc4a0 '__type'
| | | |         `-ElaboratedType 0x9cc450 'typename __match::__type' sugar
| | | |           `-TypedefType 0x9cc430 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| | | |             |-Typedef 0x9cc3c0 '__type'
| | | |             `-SubstTemplateTypeParmType 0x9cc1a0 'unsigned int' sugar
| | | |               |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | | |               | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | | |               `-BuiltinType 0x826340 'unsigned int'
| | | |-AccessSpecDecl 0x9dca48 <line:1951:5, col:11> col:5 public
| | | `-TypedefDecl 0x9df660 <line:1952:7, col:72> col:72 referenced __type 'typename __make_signed_selector<__unsigned_type>::__type':'int'
| | |   `-ElaboratedType 0x9df610 'typename __make_signed_selector<__unsigned_type>::__type' sugar
| | |     `-TypedefType 0x9df5f0 'std::__make_signed_selector<unsigned int, true, false>::__type' sugar
| | |       |-TypeAlias 0x9df570 '__type'
| | |       `-ElaboratedType 0x9df520 'typename __match_cv_qualifiers<unsigned int, __signed_type>::__type' sugar
| | |         `-TypedefType 0x9df500 'std::__match_cv_qualifiers<unsigned int, int, false, false>::__type' sugar
| | |           |-Typedef 0x9df490 '__type'
| | |           `-ElaboratedType 0x9df440 'typename __match::__type' sugar
| | |             `-TypedefType 0x9df420 'std::__cv_selector<int, false, false>::__type' sugar
| | |               |-Typedef 0x9df3b0 '__type'
| | |               `-SubstTemplateTypeParmType 0x9df190 'int' sugar
| | |                 |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |                 | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |                 `-BuiltinType 0x8262a0 'int'
| | |-ClassTemplateSpecializationDecl 0x9dd950 <line:1934:3, line:1943:5> line:1935:11 class __make_signed_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0x826340 'unsigned int'
| | | |-TemplateArgument integral 1
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0x9ddc70 <col:5, col:11> col:11 implicit class __make_signed_selector
| | | |-TypeAliasDecl 0x9ddfd0 <line:1937:7, line:1938:48> line:1937:13 __signed_type 'typename __make_signed<__remove_cv_t<unsigned int>>::__type':'int'
| | | | `-ElaboratedType 0x9ddf80 'typename __make_signed<__remove_cv_t<unsigned int>>::__type' sugar
| | | |   `-TypedefType 0x9ddf60 'std::__make_signed<unsigned int>::__type' sugar
| | | |     |-Typedef 0x9d62d0 '__type'
| | | |     `-BuiltinType 0x8262a0 'int'
| | | |-AccessSpecDecl 0x9de030 <line:1940:5, col:11> col:5 public
| | | `-TypeAliasDecl 0x9df570 <line:1941:7, line:1942:56> line:1941:13 referenced __type 'typename __match_cv_qualifiers<unsigned int, __signed_type>::__type':'int'
| | |   `-ElaboratedType 0x9df520 'typename __match_cv_qualifiers<unsigned int, __signed_type>::__type' sugar
| | |     `-TypedefType 0x9df500 'std::__match_cv_qualifiers<unsigned int, int, false, false>::__type' sugar
| | |       |-Typedef 0x9df490 '__type'
| | |       `-ElaboratedType 0x9df440 'typename __match::__type' sugar
| | |         `-TypedefType 0x9df420 'std::__cv_selector<int, false, false>::__type' sugar
| | |           |-Typedef 0x9df3b0 '__type'
| | |           `-SubstTemplateTypeParmType 0x9df190 'int' sugar
| | |             |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |             `-BuiltinType 0x8262a0 'int'
| | |-ClassTemplateSpecializationDecl 0x9dfb08 <line:1946:3, line:1953:5> line:1947:11 class __make_signed_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0x8267e0 'char16_t'
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument integral 1
| | | |-CXXRecordDecl 0x9dfe60 <col:5, col:11> col:11 implicit class __make_signed_selector
| | | |-TypedefDecl 0x9e2760 <line:1949:7, col:62> col:62 __unsigned_type 'typename __make_unsigned_selector<char16_t>::__type':'unsigned short'
| | | | `-ElaboratedType 0x9e2710 'typename __make_unsigned_selector<char16_t>::__type' sugar
| | | |   `-TypedefType 0x9e26f0 'std::__make_unsigned_selector<char16_t, true, false>::__type' sugar
| | | |     |-TypeAlias 0x9e2670 '__type'
| | | |     `-ElaboratedType 0x9e2620 'typename __match_cv_qualifiers<char16_t, __unsigned_type>::__type' sugar
| | | |       `-TypedefType 0x9d0140 'std::__match_cv_qualifiers<char16_t, unsigned short, false, false>::__type' sugar
| | | |         |-Typedef 0x9d00d0 '__type'
| | | |         `-ElaboratedType 0x9d0080 'typename __match::__type' sugar
| | | |           `-TypedefType 0x9d0060 'std::__cv_selector<unsigned short, false, false>::__type' sugar
| | | |             |-Typedef 0x9cfff0 '__type'
| | | |             `-SubstTemplateTypeParmType 0x9cfdd0 'unsigned short' sugar
| | | |               |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | | |               | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | | |               `-BuiltinType 0x826320 'unsigned short'
| | | |-AccessSpecDecl 0x9e27b8 <line:1951:5, col:11> col:5 public
| | | `-TypedefDecl 0x9e5790 <line:1952:7, col:72> col:72 referenced __type 'typename __make_signed_selector<__unsigned_type>::__type':'short'
| | |   `-ElaboratedType 0x9e5740 'typename __make_signed_selector<__unsigned_type>::__type' sugar
| | |     `-TypedefType 0x9e5720 'std::__make_signed_selector<unsigned short, true, false>::__type' sugar
| | |       |-TypeAlias 0x9e56a0 '__type'
| | |       `-ElaboratedType 0x9e5650 'typename __match_cv_qualifiers<unsigned short, __signed_type>::__type' sugar
| | |         `-TypedefType 0x9e5630 'std::__match_cv_qualifiers<unsigned short, short, false, false>::__type' sugar
| | |           |-Typedef 0x9e55c0 '__type'
| | |           `-ElaboratedType 0x9e5570 'typename __match::__type' sugar
| | |             `-TypedefType 0x9e5550 'std::__cv_selector<short, false, false>::__type' sugar
| | |               |-Typedef 0x9e54e0 '__type'
| | |               `-SubstTemplateTypeParmType 0x9e52c0 'short' sugar
| | |                 |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |                 | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |                 `-BuiltinType 0x826280 'short'
| | |-ClassTemplateSpecializationDecl 0x9e3d28 <line:1934:3, line:1943:5> line:1935:11 class __make_signed_selector definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0x826320 'unsigned short'
| | | |-TemplateArgument integral 1
| | | |-TemplateArgument integral 0
| | | |-CXXRecordDecl 0x9e4050 <col:5, col:11> col:11 implicit class __make_signed_selector
| | | |-TypeAliasDecl 0x9e43b0 <line:1937:7, line:1938:48> line:1937:13 __signed_type 'typename __make_signed<__remove_cv_t<unsigned short>>::__type':'short'
| | | | `-ElaboratedType 0x9e4360 'typename __make_signed<__remove_cv_t<unsigned short>>::__type' sugar
| | | |   `-TypedefType 0x9e4340 'std::__make_signed<unsigned short>::__type' sugar
| | | |     |-Typedef 0x9d5f88 '__type'
| | | |     `-BuiltinType 0x826280 'short'
| | | |-AccessSpecDecl 0x9e4410 <line:1940:5, col:11> col:5 public
| | | `-TypeAliasDecl 0x9e56a0 <line:1941:7, line:1942:56> line:1941:13 referenced __type 'typename __match_cv_qualifiers<unsigned short, __signed_type>::__type':'short'
| | |   `-ElaboratedType 0x9e5650 'typename __match_cv_qualifiers<unsigned short, __signed_type>::__type' sugar
| | |     `-TypedefType 0x9e5630 'std::__match_cv_qualifiers<unsigned short, short, false, false>::__type' sugar
| | |       |-Typedef 0x9e55c0 '__type'
| | |       `-ElaboratedType 0x9e5570 'typename __match::__type' sugar
| | |         `-TypedefType 0x9e5550 'std::__cv_selector<short, false, false>::__type' sugar
| | |           |-Typedef 0x9e54e0 '__type'
| | |           `-SubstTemplateTypeParmType 0x9e52c0 'short' sugar
| | |             |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| | |             | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| | |             `-BuiltinType 0x826280 'short'
| | `-ClassTemplateSpecializationDecl 0x9e6b10 <line:1946:3, line:1953:5> line:1947:11 class __make_signed_selector definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-TemplateArgument type 'char32_t'
| |   | `-BuiltinType 0x826800 'char32_t'
| |   |-TemplateArgument integral 0
| |   |-TemplateArgument integral 1
| |   |-CXXRecordDecl 0x9e6e60 <col:5, col:11> col:11 implicit class __make_signed_selector
| |   |-TypedefDecl 0x9e8940 <line:1949:7, col:62> col:62 __unsigned_type 'typename __make_unsigned_selector<char32_t>::__type':'unsigned int'
| |   | `-ElaboratedType 0x9e88f0 'typename __make_unsigned_selector<char32_t>::__type' sugar
| |   |   `-TypedefType 0x9e88d0 'std::__make_unsigned_selector<char32_t, true, false>::__type' sugar
| |   |     |-TypeAlias 0x9e8850 '__type'
| |   |     `-ElaboratedType 0x9e8800 'typename __match_cv_qualifiers<char32_t, __unsigned_type>::__type' sugar
| |   |       `-TypedefType 0x9d2b00 'std::__match_cv_qualifiers<char32_t, unsigned int, false, false>::__type' sugar
| |   |         |-Typedef 0x9d2a90 '__type'
| |   |         `-ElaboratedType 0x9d2a40 'typename __match::__type' sugar
| |   |           `-TypedefType 0x9cc430 'std::__cv_selector<unsigned int, false, false>::__type' sugar
| |   |             |-Typedef 0x9cc3c0 '__type'
| |   |             `-SubstTemplateTypeParmType 0x9cc1a0 'unsigned int' sugar
| |   |               |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| |   |               | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| |   |               `-BuiltinType 0x826340 'unsigned int'
| |   |-AccessSpecDecl 0x9e8998 <line:1951:5, col:11> col:5 public
| |   `-TypedefDecl 0x9e97b0 <line:1952:7, col:72> col:72 referenced __type 'typename __make_signed_selector<__unsigned_type>::__type':'int'
| |     `-ElaboratedType 0x9e9760 'typename __make_signed_selector<__unsigned_type>::__type' sugar
| |       `-TypedefType 0x9df5f0 'std::__make_signed_selector<unsigned int, true, false>::__type' sugar
| |         |-TypeAlias 0x9df570 '__type'
| |         `-ElaboratedType 0x9df520 'typename __match_cv_qualifiers<unsigned int, __signed_type>::__type' sugar
| |           `-TypedefType 0x9df500 'std::__match_cv_qualifiers<unsigned int, int, false, false>::__type' sugar
| |             |-Typedef 0x9df490 '__type'
| |             `-ElaboratedType 0x9df440 'typename __match::__type' sugar
| |               `-TypedefType 0x9df420 'std::__cv_selector<int, false, false>::__type' sugar
| |                 |-Typedef 0x9df3b0 '__type'
| |                 `-SubstTemplateTypeParmType 0x9df190 'int' sugar
| |                   |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| |                   | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| |                   `-BuiltinType 0x8262a0 'int'
| |-ClassTemplatePartialSpecializationDecl 0x9d7e80 <line:1934:3, line:1943:5> line:1935:11 class __make_signed_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x9d7c28 <line:1934:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9d8168 <line:1935:5, col:11> col:11 implicit class __make_signed_selector
| | |-TypeAliasDecl 0x9d8570 <line:1937:7, line:1938:48> line:1937:13 referenced __signed_type 'typename __make_signed<__remove_cv_t<_Tp>>::__type'
| | | `-DependentNameType 0x9d8500 'typename __make_signed<__remove_cv_t<_Tp>>::__type' dependent
| | |-AccessSpecDecl 0x9d85d0 <line:1940:5, col:11> col:5 public
| | `-TypeAliasDecl 0x9d8a10 <line:1941:7, line:1942:56> line:1941:13 __type 'typename __match_cv_qualifiers<_Tp, __signed_type>::__type'
| |   `-DependentNameType 0x9d89a0 'typename __match_cv_qualifiers<_Tp, __signed_type>::__type' dependent
| |-ClassTemplatePartialSpecializationDecl 0x9d8ce0 <line:1946:3, line:1953:5> line:1947:11 class __make_signed_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x9d8a88 <line:1946:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9d8fc8 <line:1947:5, col:11> col:11 implicit class __make_signed_selector
| | |-TypedefDecl 0x9d9340 <line:1949:7, col:62> col:62 referenced __unsigned_type 'typename __make_unsigned_selector<_Tp>::__type'
| | | `-DependentNameType 0x9d92d0 'typename __make_unsigned_selector<_Tp>::__type' dependent
| | |-AccessSpecDecl 0x9d9398 <line:1951:5, col:11> col:5 public
| | `-TypedefDecl 0x9d98c0 <line:1952:7, col:72> col:72 __type 'typename __make_signed_selector<__unsigned_type>::__type'
| |   `-DependentNameType 0x9d9850 'typename __make_signed_selector<__unsigned_type>::__type' dependent
| |-ClassTemplateSpecializationDecl 0x9d9950 <line:1959:3, line:1964:5> line:1960:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'wchar_t'
| | | `-BuiltinType 0x8267a0 'wchar_t'
| | |-CXXRecordDecl 0x9d9b58 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypeAliasDecl 0x9df760 <line:1962:7, line:1963:59> line:1962:13 __type 'typename __make_signed_selector<wchar_t, false, true>::__type':'int'
| |   `-ElaboratedType 0x9df6f0 'typename __make_signed_selector<wchar_t, false, true>::__type' sugar
| |     `-TypedefType 0x9df6d0 'std::__make_signed_selector<wchar_t, false, true>::__type' sugar
| |       |-Typedef 0x9df660 '__type'
| |       `-ElaboratedType 0x9df610 'typename __make_signed_selector<__unsigned_type>::__type' sugar
| |         `-TypedefType 0x9df5f0 'std::__make_signed_selector<unsigned int, true, false>::__type' sugar
| |           |-TypeAlias 0x9df570 '__type'
| |           `-ElaboratedType 0x9df520 'typename __match_cv_qualifiers<unsigned int, __signed_type>::__type' sugar
| |             `-TypedefType 0x9df500 'std::__match_cv_qualifiers<unsigned int, int, false, false>::__type' sugar
| |               |-Typedef 0x9df490 '__type'
| |               `-ElaboratedType 0x9df440 'typename __match::__type' sugar
| |                 `-TypedefType 0x9df420 'std::__cv_selector<int, false, false>::__type' sugar
| |                   |-Typedef 0x9df3b0 '__type'
| |                   `-SubstTemplateTypeParmType 0x9df190 'int' sugar
| |                     |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| |                     | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| |                     `-BuiltinType 0x8262a0 'int'
| |-VarDecl 0x9daa38 parent 0x90e998 prev 0x91dd88 <line:78:5, col:48> col:48 used value 'const bool':'const bool' constexpr
| |-ClassTemplateSpecializationDecl 0x9df7f8 <line:1975:3, line:1980:5> line:1976:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char16_t'
| | | `-BuiltinType 0x8267e0 'char16_t'
| | |-CXXRecordDecl 0x9dfa08 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypeAliasDecl 0x9e5890 <line:1978:7, line:1979:60> line:1978:13 __type 'typename __make_signed_selector<char16_t, false, true>::__type':'short'
| |   `-ElaboratedType 0x9e5820 'typename __make_signed_selector<char16_t, false, true>::__type' sugar
| |     `-TypedefType 0x9e5800 'std::__make_signed_selector<char16_t, false, true>::__type' sugar
| |       |-Typedef 0x9e5790 '__type'
| |       `-ElaboratedType 0x9e5740 'typename __make_signed_selector<__unsigned_type>::__type' sugar
| |         `-TypedefType 0x9e5720 'std::__make_signed_selector<unsigned short, true, false>::__type' sugar
| |           |-TypeAlias 0x9e56a0 '__type'
| |           `-ElaboratedType 0x9e5650 'typename __match_cv_qualifiers<unsigned short, __signed_type>::__type' sugar
| |             `-TypedefType 0x9e5630 'std::__match_cv_qualifiers<unsigned short, short, false, false>::__type' sugar
| |               |-Typedef 0x9e55c0 '__type'
| |               `-ElaboratedType 0x9e5570 'typename __match::__type' sugar
| |                 `-TypedefType 0x9e5550 'std::__cv_selector<short, false, false>::__type' sugar
| |                   |-Typedef 0x9e54e0 '__type'
| |                   `-SubstTemplateTypeParmType 0x9e52c0 'short' sugar
| |                     |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| |                     | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| |                     `-BuiltinType 0x826280 'short'
| |-ClassTemplateSpecializationDecl 0x9e5928 <line:1982:3, line:1987:5> line:1983:12 struct __make_signed definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char32_t'
| | | `-BuiltinType 0x826800 'char32_t'
| | |-CXXRecordDecl 0x9e6a10 <col:5, col:12> col:12 implicit struct __make_signed
| | `-TypeAliasDecl 0x9e98b0 <line:1985:7, line:1986:60> line:1985:13 __type 'typename __make_signed_selector<char32_t, false, true>::__type':'int'
| |   `-ElaboratedType 0x9e9840 'typename __make_signed_selector<char32_t, false, true>::__type' sugar
| |     `-TypedefType 0x9e9820 'std::__make_signed_selector<char32_t, false, true>::__type' sugar
| |       |-Typedef 0x9e97b0 '__type'
| |       `-ElaboratedType 0x9e9760 'typename __make_signed_selector<__unsigned_type>::__type' sugar
| |         `-TypedefType 0x9df5f0 'std::__make_signed_selector<unsigned int, true, false>::__type' sugar
| |           |-TypeAlias 0x9df570 '__type'
| |           `-ElaboratedType 0x9df520 'typename __match_cv_qualifiers<unsigned int, __signed_type>::__type' sugar
| |             `-TypedefType 0x9df500 'std::__match_cv_qualifiers<unsigned int, int, false, false>::__type' sugar
| |               |-Typedef 0x9df490 '__type'
| |               `-ElaboratedType 0x9df440 'typename __match::__type' sugar
| |                 `-TypedefType 0x9df420 'std::__cv_selector<int, false, false>::__type' sugar
| |                   |-Typedef 0x9df3b0 '__type'
| |                   `-SubstTemplateTypeParmType 0x9df190 'int' sugar
| |                     |-TemplateTypeParmType 0x9b29d0 '_Unqualified' dependent depth 0 index 0
| |                     | `-TemplateTypeParm 0x9b2978 '_Unqualified'
| |                     `-BuiltinType 0x8262a0 'int'
| |-ClassTemplateDecl 0x9e9a50 <line:1994:3, line:1996:66> line:1995:12 make_signed
| | |-TemplateTypeParmDecl 0x9e9928 <line:1994:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9e99c0 <line:1995:5, line:1996:66> line:1995:12 struct make_signed definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0x9e9c90 <col:5, col:12> col:12 implicit struct make_signed
| | | `-TypedefDecl 0x9ea0f0 <line:1996:7, col:60> col:60 type 'typename __make_signed_selector<_Tp>::__type'
| | |   `-DependentNameType 0x9ea080 'typename __make_signed_selector<_Tp>::__type' dependent
| | `-ClassTemplateSpecialization 0x9ea180 'make_signed'
| |-ClassTemplateSpecializationDecl 0x9ea180 <line:1999:3, line:2000:28> col:12 struct make_signed
| | `-TemplateArgument type 'bool'
| |   `-BuiltinType 0x826220 'bool'
| |-TypeAliasTemplateDecl 0x9ea560 <line:2004:3, line:2005:54> col:5 make_signed_t
| | |-TemplateTypeParmDecl 0x9ea320 <line:2004:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9ea500 <line:2005:5, col:54> col:11 make_signed_t 'typename make_signed<_Tp>::type'
| |   `-DependentNameType 0x9ea490 'typename make_signed<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0x9ea800 <line:2008:3, line:2009:58> col:5 make_unsigned_t
| | |-TemplateTypeParmDecl 0x9ea5b8 <line:2008:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9ea7a0 <line:2009:5, col:58> col:11 make_unsigned_t 'typename make_unsigned<_Tp>::type'
| |   `-DependentNameType 0x9ea730 'typename make_unsigned<_Tp>::type' dependent
| |-ClassTemplateDecl 0x9ea980 <line:2015:3, line:2017:29> line:2016:12 remove_extent
| | |-TemplateTypeParmDecl 0x9ea858 <line:2015:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9ea8f0 <line:2016:5, line:2017:29> line:2016:12 struct remove_extent definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9eabc0 <col:5, col:12> col:12 implicit struct remove_extent
| |   `-TypedefDecl 0x9eac60 <line:2017:7, col:23> col:23 type '_Tp'
| |     `-TemplateTypeParmType 0x9ea8b0 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9ea858 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9eaf50 <line:2019:3, line:2021:29> line:2020:12 struct remove_extent definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0[_Size]'
| | | `-DependentSizedArrayType 0x9309a0 'type-parameter-0-0[_Size]' dependent   <line:453:24, col:30>
| | |   |-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |   `-DeclRefExpr 0x930980 <col:25> 'std::size_t':'unsigned long' NonTypeTemplateParm 0x930900 '_Size' 'std::size_t':'unsigned long'
| | |-TemplateTypeParmDecl 0x9eacd0 <line:2019:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x9ead98 <col:26, col:38> col:38 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Size
| | |-CXXRecordDecl 0x9eb178 <line:2020:5, col:12> col:12 implicit struct remove_extent
| | `-TypedefDecl 0x9eb218 <line:2021:7, col:23> col:23 type '_Tp'
| |   `-TemplateTypeParmType 0x9ead20 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0x9eacd0 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9ec610 <line:2023:3, line:2025:29> line:2024:12 struct remove_extent definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0[]'
| | | `-IncompleteArrayType 0x931810 'type-parameter-0-0[]' dependent 
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x9eb288 <line:2023:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9ec838 <line:2024:5, col:12> col:12 implicit struct remove_extent
| | `-TypedefDecl 0x9ec8d8 <line:2025:7, col:23> col:23 type '_Tp'
| |   `-TemplateTypeParmType 0x9eb2e0 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0x9eb288 '_Tp'
| |-ClassTemplateDecl 0x9eca70 prev 0x95b7e0 <line:2028:3, line:2030:29> line:2029:12 remove_all_extents
| | |-TemplateTypeParmDecl 0x9ec948 <line:2028:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9ec9e0 prev 0x95b750 <line:2029:5, line:2030:29> line:2029:12 struct remove_all_extents definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9ecb30 <col:5, col:12> col:12 implicit struct remove_all_extents
| |   `-TypedefDecl 0x9ecbd0 <line:2030:7, col:23> col:23 type '_Tp'
| |     `-TemplateTypeParmType 0x9ec9a0 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9ec948 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9ecec0 <line:2032:3, line:2034:64> line:2033:12 struct remove_all_extents definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0[_Size]'
| | | `-DependentSizedArrayType 0x9309a0 'type-parameter-0-0[_Size]' dependent   <line:453:24, col:30>
| | |   |-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |   `-DeclRefExpr 0x930980 <col:25> 'std::size_t':'unsigned long' NonTypeTemplateParm 0x930900 '_Size' 'std::size_t':'unsigned long'
| | |-TemplateTypeParmDecl 0x9ecc40 <line:2032:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x9ecd08 <col:26, col:38> col:38 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Size
| | |-CXXRecordDecl 0x9ed0e8 <line:2033:5, col:12> col:12 implicit struct remove_all_extents
| | `-TypedefDecl 0x9ed280 <line:2034:7, col:58> col:58 type 'typename remove_all_extents<_Tp>::type'
| |   `-DependentNameType 0x9ed210 'typename remove_all_extents<_Tp>::type' dependent
| |-ClassTemplatePartialSpecializationDecl 0x9ed480 <line:2036:3, line:2038:64> line:2037:12 struct remove_all_extents definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0[]'
| | | `-IncompleteArrayType 0x931810 'type-parameter-0-0[]' dependent 
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x9ed2f0 <line:2036:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9ed6a8 <line:2037:5, col:12> col:12 implicit struct remove_all_extents
| | `-TypedefDecl 0x9ed840 <line:2038:7, col:58> col:58 type 'typename remove_all_extents<_Tp>::type'
| |   `-DependentNameType 0x9ed7d0 'typename remove_all_extents<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0x9edaf0 <line:2042:3, line:2043:58> col:5 remove_extent_t
| | |-TemplateTypeParmDecl 0x9ed8b0 <line:2042:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9eda90 <line:2043:5, col:58> col:11 remove_extent_t 'typename remove_extent<_Tp>::type'
| |   `-DependentNameType 0x9eda20 'typename remove_extent<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0x9edd40 <line:2046:3, line:2047:68> col:5 remove_all_extents_t
| | |-TemplateTypeParmDecl 0x9edb48 <line:2046:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9edce0 <line:2047:5, col:68> col:11 remove_all_extents_t 'typename remove_all_extents<_Tp>::type'
| |   `-DependentNameType 0x9edc70 'typename remove_all_extents<_Tp>::type' dependent
| |-ClassTemplateDecl 0x9edf48 <line:2052:3, line:2054:29> line:2053:12 __remove_pointer_helper
| | |-TemplateTypeParmDecl 0x9edd98 <line:2052:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x9ede18 <col:26> col:34 typename depth 0 index 1
| | `-CXXRecordDecl 0x9edeb8 <line:2053:5, line:2054:29> line:2053:12 struct __remove_pointer_helper definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9ee1d0 <col:5, col:12> col:12 implicit struct __remove_pointer_helper
| |   `-TypedefDecl 0x9ee270 <line:2054:7, col:23> col:23 type '_Tp'
| |     `-TemplateTypeParmType 0x9eddf0 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9edd98 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9efc30 <line:2056:3, line:2058:29> line:2057:12 struct __remove_pointer_helper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1 *'
| | | `-PointerType 0x9ee410 'type-parameter-0-1 *' dependent
| | |   `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0x9ee2e0 <line:2056:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x9ee358 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | |-CXXRecordDecl 0x9efe88 <line:2057:5, col:12> col:12 implicit struct __remove_pointer_helper
| | `-TypedefDecl 0x9eff28 <line:2058:7, col:23> col:23 type '_Up'
| |   `-TemplateTypeParmType 0x9ee3b0 '_Up' dependent depth 0 index 1
| |     `-TemplateTypeParm 0x9ee358 '_Up'
| |-ClassTemplateDecl 0x9f00c0 <line:2061:3, line:2064:7> line:2062:12 remove_pointer
| | |-TemplateTypeParmDecl 0x9eff98 <line:2061:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9f0030 <line:2062:5, line:2064:7> line:2062:12 struct remove_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__remove_pointer_helper<_Tp, __remove_cv_t<_Tp>>'
| |   `-CXXRecordDecl 0x9f0610 <col:5, col:12> col:12 implicit struct remove_pointer
| |-ClassTemplateDecl 0x9f0b30 <line:2066:3, line:2069:29> line:2068:12 __add_pointer_helper
| | |-TemplateTypeParmDecl 0x9f06b8 <line:2066:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0x9f0a08 <col:26, line:2067:26> line:2066:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9f0a68 <col:33, line:2067:26> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x9f09c0 <line:2066:33, line:2067:26> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x9f0aa0 <line:2068:5, line:2069:29> line:2068:12 struct __add_pointer_helper definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9f0dd0 <col:5, col:12> col:12 implicit struct __add_pointer_helper
| |   `-TypedefDecl 0x9f0e70 <line:2069:7, col:23> col:23 type '_Tp'
| |     `-TemplateTypeParmType 0x9f0710 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9f06b8 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9f10b8 <line:2071:3, line:2073:63> line:2072:12 struct __add_pointer_helper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x9f0ee0 <line:2071:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9f1338 <line:2072:5, col:12> col:12 implicit struct __add_pointer_helper
| | `-TypedefDecl 0x9f1530 <line:2073:7, col:57> col:57 type 'typename remove_reference<_Tp>::type *'
| |   `-PointerType 0x9f14e0 'typename remove_reference<_Tp>::type *' dependent
| |     `-DependentNameType 0x9f1460 'typename remove_reference<_Tp>::type' dependent
| |-ClassTemplateDecl 0x9f16c0 <line:2076:3, line:2079:7> line:2077:12 add_pointer
| | |-TemplateTypeParmDecl 0x9f15a0 <line:2076:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9f1630 <line:2077:5, line:2079:7> line:2077:12 struct add_pointer definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__add_pointer_helper<_Tp>'
| |   `-CXXRecordDecl 0x9f2a70 <col:5, col:12> col:12 implicit struct add_pointer
| |-TypeAliasTemplateDecl 0x9f2d60 <line:2083:3, line:2084:60> col:5 remove_pointer_t
| | |-TemplateTypeParmDecl 0x9f2b18 <line:2083:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9f2d00 <line:2084:5, col:60> col:11 remove_pointer_t 'typename remove_pointer<_Tp>::type'
| |   `-DependentNameType 0x9f2c90 'typename remove_pointer<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0x9f3000 <line:2087:3, line:2088:54> col:5 add_pointer_t
| | |-TemplateTypeParmDecl 0x9f2db8 <line:2087:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9f2fa0 <line:2088:5, col:54> col:11 add_pointer_t 'typename add_pointer<_Tp>::type'
| |   `-DependentNameType 0x9f2f30 'typename add_pointer<_Tp>::type' dependent
| |-ClassTemplateDecl 0x9f31b0 <line:2091:3, line:2099:5> line:2092:12 __aligned_storage_msa
| | |-NonTypeTemplateParmDecl 0x9f30a8 <line:2091:12, col:24> col:24 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Len
| | `-CXXRecordDecl 0x9f3120 <line:2092:5, line:2099:5> line:2092:12 struct __aligned_storage_msa definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9f3410 <col:5, col:12> col:12 implicit struct __aligned_storage_msa
| |   `-CXXRecordDecl 0x9f34a0 <line:2094:7, line:2098:7> line:2094:13 union __type definition
| |     |-DefinitionData aggregate standard_layout trivially_copyable pod trivial has_variant_members
| |     | |-DefaultConstructor exists trivial needs_implicit
| |     | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | |-MoveConstructor exists simple trivial needs_implicit
| |     | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | |-MoveAssignment exists simple trivial needs_implicit
| |     | `-Destructor simple irrelevant trivial needs_implicit
| |     |-CXXRecordDecl 0x9f35b8 <col:7, col:13> col:13 implicit union __type
| |     |-FieldDecl 0x9f36d8 <line:2096:2, col:27> col:16 __data 'unsigned char[_Len]'
| |     |-CXXRecordDecl 0x9f3728 <line:2097:2, col:40> col:2 struct definition
| |     | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |     | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |     | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | | |-MoveConstructor exists simple trivial needs_implicit
| |     | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | | |-MoveAssignment exists simple trivial needs_implicit
| |     | | `-Destructor simple irrelevant trivial needs_implicit
| |     | `-AlignedAttr 0x9f3848 <col:24> aligned
| |     |   `-<<<NULL>>>
| |     `-FieldDecl 0x9f3918 <col:2, col:42> col:42 __align 'struct (unnamed struct at /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/type_traits:2097:2)':'std::__aligned_storage_msa::__type::(unnamed struct at /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/type_traits:2097:2)'
| |-ClassTemplateDecl 0x9f3d40 <line:2111:3, line:2120:5> line:2113:12 aligned_storage
| | |-NonTypeTemplateParmDecl 0x9f3a00 <line:2111:12, col:24> col:24 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Len
| | |-NonTypeTemplateParmDecl 0x9f3c30 <col:30, line:2112:61> line:2111:42 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Align
| | | `-TemplateArgument expr
| | |   `-UnaryExprOrTypeTraitExpr 0x9f3bf0 <line:2112:5, col:61> 'unsigned long' __alignof 'typename __aligned_storage_msa<_Len>::__type'
| | `-CXXRecordDecl 0x9f3cb0 <line:2113:5, line:2120:5> line:2113:12 struct aligned_storage definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9f4000 <col:5, col:12> col:12 implicit struct aligned_storage
| |   `-CXXRecordDecl 0x9f4090 <line:2115:7, line:2119:7> line:2115:13 union type definition
| |     |-DefinitionData aggregate standard_layout trivially_copyable pod trivial has_variant_members
| |     | |-DefaultConstructor exists trivial needs_implicit
| |     | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | |-MoveConstructor exists simple trivial needs_implicit
| |     | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | |-MoveAssignment exists simple trivial needs_implicit
| |     | `-Destructor simple irrelevant trivial needs_implicit
| |     |-CXXRecordDecl 0x9f41a8 <col:7, col:13> col:13 implicit union type
| |     |-FieldDecl 0x9f42c8 <line:2117:2, col:27> col:16 __data 'unsigned char[_Len]'
| |     |-CXXRecordDecl 0x9f43a0 <line:2118:2, col:50> col:2 struct definition
| |     | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |     | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |     | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | | |-MoveConstructor exists simple trivial needs_implicit
| |     | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | | |-MoveAssignment exists simple trivial needs_implicit
| |     | | `-Destructor simple irrelevant trivial needs_implicit
| |     | `-AlignedAttr 0x9f44b8 <col:24, col:44> aligned
| |     |   `-ParenExpr 0x9f4380 <col:36, col:43> 'std::size_t':'unsigned long'
| |     |     `-DeclRefExpr 0x9f4360 <col:37> 'std::size_t':'unsigned long' NonTypeTemplateParm 0x9f3c30 '_Align' 'std::size_t':'unsigned long'
| |     `-FieldDecl 0x9f4588 <col:2, col:52> col:52 __align 'struct (unnamed struct at /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/type_traits:2118:2)':'std::aligned_storage::type::(unnamed struct at /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/type_traits:2118:2)'
| |-ClassTemplateDecl 0x9f4740 <line:2122:3, line:2127:5> line:2123:12 __strictest_alignment
| | |-TemplateTypeParmDecl 0x9f4620 <line:2122:13, col:25> col:25 typename depth 0 index 0 ... _Types
| | `-CXXRecordDecl 0x9f46b0 <line:2123:5, line:2127:5> line:2123:12 struct __strictest_alignment definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9f6de0 <col:5, col:12> col:12 implicit struct __strictest_alignment
| |   |-VarDecl 0x9f6e80 <line:2125:7, col:42> col:27 _S_alignment 'const std::size_t':'const unsigned long' static cinit
| |   | `-ImplicitCastExpr 0x9f6f08 <col:42> 'const std::size_t':'const unsigned long' <IntegralCast>
| |   |   `-IntegerLiteral 0x9f6ee8 <col:42> 'int' 0
| |   `-VarDecl 0x9f6f88 <line:2126:7, col:37> col:27 _S_size 'const std::size_t':'const unsigned long' static cinit
| |     `-ImplicitCastExpr 0x9f7010 <col:37> 'const std::size_t':'const unsigned long' <IntegralCast>
| |       `-IntegerLiteral 0x9f6ff0 <col:37> 'int' 0
| |-ClassTemplatePartialSpecializationDecl 0x9f7350 <line:2129:3, line:2138:5> line:2130:12 struct __strictest_alignment definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | | `-TemplateArgument type 'type-parameter-0-1...'
| | |   `-PackExpansionType 0x96a370 'type-parameter-0-1...' dependent
| | |     `-TemplateTypeParmType 0x9486e0 'type-parameter-0-1' dependent contains_unexpanded_pack depth 0 index 1 pack
| | |-TemplateTypeParmDecl 0x9f7098 <line:2129:13, col:22> col:22 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0x9f7118 <col:27, col:39> col:39 referenced typename depth 0 index 1 ... _Types
| | |-CXXRecordDecl 0x9f75f8 <line:2130:5, col:12> col:12 implicit struct __strictest_alignment
| | |-VarDecl 0x9f7698 <line:2132:7, line:2134:53> line:2132:27 _S_alignment 'const std::size_t':'const unsigned long' static cinit
| | | `-ConditionalOperator 0x9f7a18 <line:2133:9, line:2134:53> '<dependent type>'
| | |   |-BinaryOperator 0x9f7898 <line:2133:9, col:58> '<dependent type>' '>'
| | |   | |-UnaryExprOrTypeTraitExpr 0x9f7710 <col:9, col:20> 'unsigned long' alignof '_Tp'
| | |   | `-DependentScopeDeclRefExpr 0x9f7860 <col:24, col:58> '<dependent type>' lvalue
| | |   |-UnaryExprOrTypeTraitExpr 0x9f78c8 <line:2134:4, col:15> 'unsigned long' alignof '_Tp'
| | |   `-DependentScopeDeclRefExpr 0x9f79e0 <col:19, col:53> '<dependent type>' lvalue
| | `-VarDecl 0x9f7a58 <line:2135:7, line:2137:52> line:2135:27 _S_size 'const std::size_t':'const unsigned long' static cinit
| |   `-ConditionalOperator 0x9f7d98 <line:2136:9, line:2137:52> '<dependent type>'
| |     |-BinaryOperator 0x9f7c18 <line:2136:9, col:57> '<dependent type>' '>'
| |     | |-UnaryExprOrTypeTraitExpr 0x9f7ad0 <col:9, col:19> 'unsigned long' sizeof '_Tp'
| |     | `-DependentScopeDeclRefExpr 0x9f7be0 <col:23, col:57> '<dependent type>' lvalue
| |     |-UnaryExprOrTypeTraitExpr 0x9f7c48 <line:2137:4, col:14> 'unsigned long' sizeof '_Tp'
| |     `-DependentScopeDeclRefExpr 0x9f7d60 <col:18, col:52> '<dependent type>' lvalue
| |-ClassTemplateDecl 0x9f7f78 <line:2150:3, line:2164:5> line:2151:12 aligned_union
| | |-NonTypeTemplateParmDecl 0x9f7df0 <line:2150:13, col:20> col:20 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Len
| | |-TemplateTypeParmDecl 0x9f7e50 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Types
| | `-CXXRecordDecl 0x9f7ee8 <line:2151:5, line:2164:5> line:2151:12 struct aligned_union definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9f8280 <col:5, col:12> col:12 implicit struct aligned_union
| |   |-AccessSpecDecl 0x9f8310 <line:2153:5, col:12> col:5 private
| |   |-StaticAssertDecl 0x9f8470 <line:2154:7, col:76> col:7
| |   | |-BinaryOperator 0x9f8398 <col:21, col:42> 'bool' '!='
| |   | | |-SizeOfPackExpr 0x9f8338 <col:21, col:37> 'unsigned long' 0x9f7e50 _Types
| |   | | `-ImplicitCastExpr 0x9f8380 <col:42> 'unsigned long' <IntegralCast>
| |   | |   `-IntegerLiteral 0x9f8360 <col:42> 'int' 0
| |   | `-StringLiteral 0x9f8438 <col:45> 'const char[30]' lvalue "At least one type is required"
| |   |-TypeAliasDecl 0x9f8580 <line:2156:7, col:58> col:13 referenced __strictest '__strictest_alignment<_Types...>'
| |   | `-TemplateSpecializationType 0x9f8500 '__strictest_alignment<_Types...>' dependent __strictest_alignment
| |   |   `-TemplateArgument type '_Types...'
| |   |     `-PackExpansionType 0x9f80d0 '_Types...' dependent
| |   |       `-TemplateTypeParmType 0x9f7ea0 '_Types' dependent contains_unexpanded_pack depth 0 index 1 pack
| |   |         `-TemplateTypeParm 0x9f7e50 '_Types'
| |   |-VarDecl 0x9f85f0 <line:2157:7, line:2158:24> line:2157:27 referenced _S_len 'const std::size_t':'const unsigned long' static cinit
| |   | `-ConditionalOperator 0x9f87d8 <col:36, line:2158:24> '<dependent type>'
| |   |   |-BinaryOperator 0x9f8728 <line:2157:36, col:56> '<dependent type>' '>'
| |   |   | |-DeclRefExpr 0x9f8658 <col:36> 'std::size_t':'unsigned long' NonTypeTemplateParm 0x9f7df0 '_Len' 'std::size_t':'unsigned long'
| |   |   | `-DependentScopeDeclRefExpr 0x9f86f0 <col:43, col:56> '<dependent type>' lvalue
| |   |   |-DeclRefExpr 0x9f8748 <line:2158:4> 'std::size_t':'unsigned long' NonTypeTemplateParm 0x9f7df0 '_Len' 'std::size_t':'unsigned long'
| |   |   `-DependentScopeDeclRefExpr 0x9f87a0 <col:11, col:24> '<dependent type>' lvalue
| |   |-AccessSpecDecl 0x9f8808 <line:2159:5, col:11> col:5 public
| |   |-VarDecl 0x9f8840 <line:2161:7, col:58> col:27 referenced alignment_value 'const std::size_t':'const unsigned long' static cinit
| |   | `-DependentScopeDeclRefExpr 0x9f88e0 <col:45, col:58> '<dependent type>' lvalue
| |   `-TypedefDecl 0x9f8be0 <line:2163:7, col:71> col:71 type 'typename aligned_storage<_S_len, alignment_value>::type'
| |     `-DependentNameType 0x9f8b70 'typename aligned_storage<_S_len, alignment_value>::type' dependent
| |-VarDecl 0x9fa138 parent 0x9f7ee8 prev 0x9f8840 <line:2166:3, line:2167:50> col:50 alignment_value 'const std::size_t':'const unsigned long'
| |-ClassTemplateDecl 0x9fa608 <line:2173:3, line:2176:12> col:12 __decay_selector
| | |-TemplateTypeParmDecl 0x9fa1e8 <line:2173:12, col:21> col:21 referenced typename depth 0 index 0 _Up
| | |-NonTypeTemplateParmDecl 0x9fa368 <line:2174:5, col:36> col:10 'bool' depth 0 index 1 _IsArray
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9fa3c8 <col:21, col:36> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x9fa320 <col:21, col:36> '<dependent type>' lvalue
| | |-NonTypeTemplateParmDecl 0x9fa4d8 <line:2175:5, col:42> col:10 'bool' depth 0 index 2 _IsFunction
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0x9fa538 <col:24, col:42> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0x9fa490 <col:24, col:42> '<dependent type>' lvalue
| | `-CXXRecordDecl 0x9fa578 <line:2176:5, col:12> col:12 struct __decay_selector
| |-ClassTemplatePartialSpecializationDecl 0x9faae0 <line:2179:3, line:2181:42> line:2180:12 struct __decay_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x9fa888 <line:2179:12, col:21> col:21 referenced typename depth 0 index 0 _Up
| | |-CXXRecordDecl 0x9fadc8 <line:2180:5, col:12> col:12 implicit struct __decay_selector
| | `-TypedefDecl 0x9fb048 <line:2181:7, col:34> col:34 __type '__remove_cv_t<_Up>':'typename remove_cv<type-parameter-0-0>::type'
| |   `-TemplateSpecializationType 0x9fafc0 '__remove_cv_t<_Up>' sugar dependent alias __remove_cv_t
| |     |-TemplateArgument type '_Up'
| |     | `-TemplateTypeParmType 0x9fa8e0 '_Up' dependent depth 0 index 0
| |     |   `-TemplateTypeParm 0x9fa888 '_Up'
| |     `-DependentNameType 0x9faf70 'typename remove_cv<type-parameter-0-0>::type' dependent
| |-ClassTemplatePartialSpecializationDecl 0x9fb310 <line:2183:3, line:2185:58> line:2184:12 struct __decay_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0x9fb0b8 <line:2183:12, col:21> col:21 referenced typename depth 0 index 0 _Up
| | |-CXXRecordDecl 0x9fb5f8 <line:2184:5, col:12> col:12 implicit struct __decay_selector
| | `-TypedefDecl 0x9fb7f0 <line:2185:7, col:50> col:50 __type 'typename remove_extent<_Up>::type *'
| |   `-PointerType 0x9fb7a0 'typename remove_extent<_Up>::type *' dependent
| |     `-DependentNameType 0x9fb720 'typename remove_extent<_Up>::type' dependent
| |-ClassTemplatePartialSpecializationDecl 0x9fbab0 <line:2187:3, line:2189:55> line:2188:12 struct __decay_selector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateTypeParmDecl 0x9fb860 <line:2187:12, col:21> col:21 referenced typename depth 0 index 0 _Up
| | |-CXXRecordDecl 0x9fbd98 <line:2188:5, col:12> col:12 implicit struct __decay_selector
| | `-TypedefDecl 0x9fc4b0 <line:2189:7, col:47> col:47 __type 'typename add_pointer<_Up>::type'
| |   `-DependentNameType 0x9fbec0 'typename add_pointer<_Up>::type' dependent
| |-ClassTemplateDecl 0x9fc640 <line:2193:3, line:2200:5> line:2194:11 decay
| | |-TemplateTypeParmDecl 0x9fc520 <line:2193:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9fc5b0 <line:2194:5, line:2200:5> line:2194:11 class decay definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9fc880 <col:5, col:11> col:11 implicit class decay
| |   |-TypedefDecl 0x9fca10 <line:2196:7, col:52> col:52 referenced __remove_type 'typename remove_reference<_Tp>::type'
| |   | `-DependentNameType 0x9fc9a0 'typename remove_reference<_Tp>::type' dependent
| |   |-AccessSpecDecl 0x9fca68 <line:2198:5, col:11> col:5 public
| |   `-TypedefDecl 0x9fcf30 <line:2199:7, col:64> col:64 type 'typename __decay_selector<__remove_type>::__type'
| |     `-DependentNameType 0x9fcec0 'typename __decay_selector<__remove_type>::__type' dependent
| |-ClassTemplateDecl 0x9fd0c0 <line:2205:3, line:2209:5> line:2206:12 __strip_reference_wrapper
| | |-TemplateTypeParmDecl 0x9fcfa0 <line:2205:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0x9fd030 <line:2206:5, line:2209:5> line:2206:12 struct __strip_reference_wrapper definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0x9fd300 <col:5, col:12> col:12 implicit struct __strip_reference_wrapper
| |   `-TypedefDecl 0x9fd3a0 <line:2208:7, col:19> col:19 __type '_Tp'
| |     `-TemplateTypeParmType 0x9fcff0 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9fcfa0 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0x9fd5e0 <line:2211:3, line:2215:5> line:2212:12 struct __strip_reference_wrapper definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'reference_wrapper<type-parameter-0-0>'
| | | `-TemplateSpecializationType 0x90b5e0 'reference_wrapper<type-parameter-0-0>' dependent reference_wrapper
| | |   `-TemplateArgument type 'type-parameter-0-0'
| | |     `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x9fd410 <line:2211:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9fd818 <line:2212:5, col:12> col:12 implicit struct __strip_reference_wrapper
| | `-TypedefDecl 0x9fd8e8 <line:2214:7, col:20> col:20 __type '_Tp &'
| |   `-LValueReferenceType 0x9fd8b0 '_Tp &' dependent
| |     `-TemplateTypeParmType 0x9fd460 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0x9fd410 '_Tp'
| |-TypeAliasTemplateDecl 0x9fdba0 <line:2218:3, line:2219:44> col:5 __decay_t
| | |-TemplateTypeParmDecl 0x9fd958 <line:2218:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9fdb40 <line:2219:5, col:44> col:11 __decay_t 'typename decay<_Tp>::type'
| |   `-DependentNameType 0x9fdad0 'typename decay<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0x9fdfd0 <line:2221:3, line:2222:71> col:5 __decay_and_strip
| | |-TemplateTypeParmDecl 0x9fdbf8 <line:2221:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0x9fdf70 <line:2222:5, col:71> col:11 __decay_and_strip '__strip_reference_wrapper<__decay_t<_Tp>>'
| |   `-TemplateSpecializationType 0x9fdef0 '__strip_reference_wrapper<__decay_t<_Tp>>' dependent __strip_reference_wrapper
| |     `-TemplateArgument type '__decay_t<_Tp>':'typename decay<type-parameter-0-0>::type'
| |       `-TemplateSpecializationType 0x9fde20 '__decay_t<_Tp>' sugar dependent alias __decay_t
| |         |-TemplateArgument type '_Tp'
| |         | `-TemplateTypeParmType 0x9fdc50 '_Tp' dependent depth 0 index 0
| |         |   `-TemplateTypeParm 0x9fdbf8 '_Tp'
| |         `-DependentNameType 0x9fddd0 'typename decay<type-parameter-0-0>::type' dependent
| |-ClassTemplateDecl 0x9fe1d8 <line:2227:3, line:2229:7> line:2228:12 enable_if
| | |-NonTypeTemplateParmDecl 0x9fe038 <line:2227:12> col:16 'bool' depth 0 index 0
| | |-TemplateTypeParmDecl 0x9fe0a8 <col:18, col:33> col:27 typename depth 0 index 1 _Tp
| | | `-TemplateArgument type 'void'
| | |   `-BuiltinType 0x826200 'void'
| | `-CXXRecordDecl 0x9fe148 <line:2228:5, line:2229:7> line:2228:12 struct enable_if definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   `-CXXRecordDecl 0x9ff650 <col:5, col:12> col:12 implicit struct enable_if
| |-ClassTemplatePartialSpecializationDecl 0x9ff8d8 <line:2232:3, line:2234:25> line:2233:12 struct enable_if definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0x9ff6f8 <line:2232:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0x9ffb58 <line:2233:5, col:12> col:12 implicit struct enable_if
| | `-TypedefDecl 0x9ffbf8 <line:2234:7, col:19> col:19 type '_Tp'
| |   `-TemplateTypeParmType 0x9ff750 '_Tp' dependent depth 0 index 0
| |     `-TemplateTypeParm 0x9ff6f8 '_Tp'
| |-TypeAliasTemplateDecl 0x9fff80 <line:2239:3, line:2240:59> col:5 __enable_if_t
| | |-NonTypeTemplateParmDecl 0x9ffc78 <line:2239:12, col:17> col:17 referenced 'bool' depth 0 index 0 _Cond
| | |-TemplateTypeParmDecl 0x9ffce8 <col:24, col:39> col:33 referenced typename depth 0 index 1 _Tp
| | | `-TemplateArgument type 'void'
| | |   `-BuiltinType 0x826200 'void'
| | `-TypeAliasDecl 0x9fff20 <line:2240:5, col:59> col:11 __enable_if_t 'typename enable_if<_Cond, _Tp>::type'
| |   `-DependentNameType 0x9ffeb0 'typename enable_if<_Cond, _Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xa00558 <line:2243:3, line:2244:59> col:5 _Require
| | |-TemplateTypeParmDecl 0x9fffd8 <line:2243:12, col:24> col:24 referenced typename depth 0 index 0 ... _Cond
| | `-TypeAliasDecl 0xa004f8 <line:2244:5, col:59> col:11 _Require '__enable_if_t<__and_<_Cond...>::value>':'typename enable_if<__and_<_Cond...>::value, void>::type'
| |   `-TemplateSpecializationType 0xa00470 '__enable_if_t<__and_<_Cond...>::value>' sugar dependent alias __enable_if_t
| |     |-TemplateArgument expr
| |     | `-ImplicitCastExpr 0xa001e0 <col:36, col:54> 'bool' <Dependent>
| |     |   `-DependentScopeDeclRefExpr 0xa001a8 <col:36, col:54> '<dependent type>' lvalue
| |     `-DependentNameType 0xa00420 'typename enable_if<__and_<_Cond...>::value, void>::type' dependent
| |-TypeAliasTemplateDecl 0xa00920 <line:2247:3, line:2249:66> line:2248:5 __remove_cvref_t
| | |-TemplateTypeParmDecl 0xa005b0 <line:2247:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xa008c0 <line:2248:5, line:2249:66> line:2248:11 __remove_cvref_t 'typename remove_cv<typename remove_reference<_Tp>::type>::type'
| |   `-DependentNameType 0xa00850 'typename remove_cv<typename remove_reference<_Tp>::type>::type' dependent
| |-ClassTemplateDecl 0xa00ba0 <line:2254:3, line:2256:29> line:2255:12 conditional
| | |-NonTypeTemplateParmDecl 0xa00988 <line:2254:12, col:17> col:17 'bool' depth 0 index 0 _Cond
| | |-TemplateTypeParmDecl 0xa009e8 <col:24, col:33> col:33 referenced typename depth 0 index 1 _Iftrue
| | |-TemplateTypeParmDecl 0xa00a68 <col:42, col:51> col:51 typename depth 0 index 2 _Iffalse
| | `-CXXRecordDecl 0xa00b10 <line:2255:5, line:2256:29> line:2255:12 struct conditional definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xa00e60 <col:5, col:12> col:12 implicit struct conditional
| |   `-TypedefDecl 0xa00f00 <line:2256:7, col:23> col:23 type '_Iftrue'
| |     `-TemplateTypeParmType 0xa00a40 '_Iftrue' dependent depth 0 index 1
| |       `-TemplateTypeParm 0xa009e8 '_Iftrue'
| |-ClassTemplatePartialSpecializationDecl 0xa01230 <line:2259:3, line:2261:30> line:2260:12 struct conditional definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0xa00f70 <line:2259:12, col:21> col:21 referenced typename depth 0 index 0 _Iftrue
| | |-TemplateTypeParmDecl 0xa00fe8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Iffalse
| | |-CXXRecordDecl 0xa014f8 <line:2260:5, col:12> col:12 implicit struct conditional
| | `-TypedefDecl 0xa01598 <line:2261:7, col:24> col:24 type '_Iffalse'
| |   `-TemplateTypeParmType 0xa01040 '_Iffalse' dependent depth 0 index 1
| |     `-TemplateTypeParm 0xa00fe8 '_Iffalse'
| |-ClassTemplateDecl 0xa03850 <line:2264:3, line:2265:12> col:12 common_type
| | |-TemplateTypeParmDecl 0xa03730 <line:2264:12, col:24> col:24 typename depth 0 index 0 ... _Tp
| | |-CXXRecordDecl 0xa037c0 <line:2265:5, col:12> col:12 struct common_type
| | `-ClassTemplateSpecialization 0xa050a0 'common_type'
| |-CXXRecordDecl 0xa03a88 <line:2270:3, line:2297:3> line:2270:10 referenced struct __do_common_type_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xa03ba8 <col:3, col:10> col:10 implicit struct __do_common_type_impl
| | |-TypeAliasTemplateDecl 0xa04008 <line:2272:5, line:2274:61> line:2273:7 __cond_t
| | | |-TemplateTypeParmDecl 0xa03c38 <line:2272:14, col:23> col:23 referenced typename depth 0 index 0 _Tp
| | | |-TemplateTypeParmDecl 0xa03cb8 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Up
| | | `-TypeAliasDecl 0xa03fa8 <line:2273:7, line:2274:61> line:2273:13 __cond_t 'decltype(true ? std::declval<_Tp>() : std::declval<_Up>())'
| | |   `-DecltypeType 0xa03f70 'decltype(true ? std::declval<_Tp>() : std::declval<_Up>())' dependent
| | |     `-ConditionalOperator 0xa03ef8 <line:2274:13, col:60> '<dependent type>'
| | |       |-CXXBoolLiteralExpr 0xa03d58 <col:13> 'bool' true
| | |       |-CallExpr 0xa03e10 <col:20, col:38> '<dependent type>'
| | |       | `-UnresolvedLookupExpr 0xa03d98 <col:20, col:36> '<dependent type>' lvalue (no ADL) = 'declval' 0x95ab00
| | |       `-CallExpr 0xa03ed8 <col:42, col:60> '<dependent type>'
| | |         `-UnresolvedLookupExpr 0xa03e60 <col:42, col:58> '<dependent type>' lvalue (no ADL) = 'declval' 0x95ab00
| | |-FunctionTemplateDecl 0xa04988 <line:2278:5, line:2280:18> col:7 _S_test
| | | |-TemplateTypeParmDecl 0xa04060 <line:2278:14, col:23> col:23 referenced typename depth 0 index 0 _Tp
| | | |-TemplateTypeParmDecl 0xa040d8 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Up
| | | `-CXXMethodDecl 0xa048e8 <line:2279:7, line:2280:18> col:7 _S_test '__success_type<__decay_t<__cond_t<_Tp, _Up>>> (int)' static
| | |   `-ParmVarDecl 0xa047b8 <col:15> col:18 'int'
| | |-FunctionTemplateDecl 0xa04c00 <line:2290:5, line:2292:20> col:7 _S_test_2
| | | |-TemplateTypeParmDecl 0xa049e8 <line:2290:14> col:22 typename depth 0 index 0
| | | |-TemplateTypeParmDecl 0xa04a68 <col:24> col:32 typename depth 0 index 1
| | | `-CXXMethodDecl 0xa04b60 <line:2291:7, line:2292:20> col:7 _S_test_2 'std::__failure_type (...)' static
| | `-FunctionTemplateDecl 0xa05010 <line:2294:5, line:2296:18> col:7 _S_test
| |   |-TemplateTypeParmDecl 0xa04c58 <line:2294:14, col:23> col:23 referenced typename depth 0 index 0 _Tp
| |   |-TemplateTypeParmDecl 0xa04cd8 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Up
| |   `-CXXMethodDecl 0xa04f70 <line:2295:7, line:2296:18> col:7 _S_test 'decltype(_S_test_2<_Tp, _Up>(0)) (...)' static
| |-ClassTemplateSpecializationDecl 0xa050a0 <line:2300:3, line:2302:7> line:2301:12 struct common_type definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument pack
| | `-CXXRecordDecl 0xa05288 <col:5, col:12> col:12 implicit struct common_type
| |-ClassTemplatePartialSpecializationDecl 0xa054b0 <line:2305:3, line:2308:7> line:2306:12 struct common_type definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'common_type<_Tp0, _Tp0>'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xa05330 <line:2305:12, col:21> col:21 referenced typename depth 0 index 0 _Tp0
| | `-CXXRecordDecl 0xa06cb0 <line:2306:5, col:12> col:12 implicit struct common_type
| |-ClassTemplateDecl 0xa074d8 <line:2311:3, line:2318:5> line:2313:12 __common_type_impl
| | |-TemplateTypeParmDecl 0xa06d58 <line:2311:12, col:21> col:21 referenced typename depth 0 index 0 _Tp1
| | |-TemplateTypeParmDecl 0xa06dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Tp2
| | |-TemplateTypeParmDecl 0xa07048 <line:2312:5, col:35> col:14 referenced typename depth 0 index 2 _Dp1
| | | `-TemplateArgument type '__decay_t<_Tp1>':'typename decay<type-parameter-0-0>::type'
| | |   `-TemplateSpecializationType 0xa06fc0 '__decay_t<_Tp1>' sugar dependent alias __decay_t
| | |     |-TemplateArgument type '_Tp1'
| | |     | `-TemplateTypeParmType 0xa06db0 '_Tp1' dependent depth 0 index 0
| | |     |   `-TemplateTypeParm 0xa06d58 '_Tp1'
| | |     `-DependentNameType 0xa06f70 'typename decay<type-parameter-0-0>::type' dependent
| | |-TemplateTypeParmDecl 0xa07368 <col:38, <scratch space>:80:1> /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/type_traits:2312:47 referenced typename depth 0 index 3 _Dp2
| | | `-TemplateArgument type '__decay_t<_Tp2>':'typename decay<type-parameter-0-1>::type'
| | |   `-TemplateSpecializationType 0xa072e0 '__decay_t<_Tp2>' sugar dependent alias __decay_t
| | |     |-TemplateArgument type '_Tp2'
| | |     | `-TemplateTypeParmType 0xa06e30 '_Tp2' dependent depth 0 index 1
| | |     |   `-TemplateTypeParm 0xa06dd8 '_Tp2'
| | |     `-DependentNameType 0xa07290 'typename decay<type-parameter-0-1>::type' dependent
| | `-CXXRecordDecl 0xa07448 <line:2313:5, line:2318:5> line:2313:12 struct __common_type_impl definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xa077c0 <col:5, col:12> col:12 implicit struct __common_type_impl
| |   `-TypeAliasDecl 0xa079b8 <line:2317:7, col:42> col:13 type 'common_type<_Dp1, _Dp2>'
| |     `-TemplateSpecializationType 0xa07910 'common_type<_Dp1, _Dp2>' dependent common_type
| |       |-TemplateArgument type '_Dp1'
| |       | `-TemplateTypeParmType 0xa070a0 '_Dp1' dependent depth 0 index 2
| |       |   `-TemplateTypeParm 0xa07048 '_Dp1'
| |       `-TemplateArgument type '_Dp2'
| |         `-TemplateTypeParmType 0xa073f0 '_Dp2' dependent depth 0 index 3
| |           `-TemplateTypeParm 0xa07368 '_Dp2'
| |-ClassTemplatePartialSpecializationDecl 0xa07d38 <line:2320:3, line:2327:5> line:2321:12 struct __common_type_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-private 'std::__do_common_type_impl'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0xa07a30 <line:2320:12, col:21> col:21 referenced typename depth 0 index 0 _Tp1
| | |-TemplateTypeParmDecl 0xa07aa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Tp2
| | |-CXXRecordDecl 0xa08068 <line:2321:5, col:12> col:12 implicit struct __common_type_impl
| | `-TypeAliasDecl 0xa08298 <line:2326:7, col:51> col:13 type 'decltype(_S_test<_Tp1, _Tp2>(0))'
| |   `-DecltypeType 0xa08260 'decltype(_S_test<_Tp1, _Tp2>(0))' dependent
| |     `-CallExpr 0xa081f0 <col:29, col:50> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xa08130 <col:29, col:47> '<dependent type>' lvalue (no ADL) = '_S_test' 0xa04988 0xa05010
| |       `-IntegerLiteral 0xa081d0 <col:49> 'int' 0
| |-ClassTemplatePartialSpecializationDecl 0xa08580 <line:2330:3, line:2333:7> line:2331:12 struct common_type definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__common_type_impl<_Tp1, _Tp2>::type'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | | `-TemplateArgument type 'type-parameter-0-1'
| | |   `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0xa08310 <line:2330:12, col:21> col:21 referenced typename depth 0 index 0 _Tp1
| | |-TemplateTypeParmDecl 0xa08388 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Tp2
| | `-CXXRecordDecl 0xa0a350 <line:2331:5, col:12> col:12 implicit struct common_type
| |-ClassTemplateDecl 0xa0a520 <line:2335:3, line:2337:7> line:2336:12 __common_type_pack
| | |-TemplateTypeParmDecl 0xa0a3f8 <line:2335:12> col:23 typename depth 0 index 0 ...
| | `-CXXRecordDecl 0xa0a490 <line:2336:5, line:2337:7> line:2336:12 struct __common_type_pack definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   `-CXXRecordDecl 0xa0a7c0 <col:5, col:12> col:12 implicit struct __common_type_pack
| |-ClassTemplateDecl 0xa0aab0 <line:2339:3, line:2340:12> col:12 __common_type_fold
| | |-TemplateTypeParmDecl 0xa0a868 <line:2339:12> col:20 typename depth 0 index 0
| | |-TemplateTypeParmDecl 0xa0a8e8 <col:22> col:30 typename depth 0 index 1
| | |-TemplateTypeParmDecl 0xa0a978 <col:32, col:43> col:41 typename depth 0 index 2
| | | `-TemplateArgument type 'void'
| | |   `-BuiltinType 0x826200 'void'
| | `-CXXRecordDecl 0xa0aa20 <line:2340:5, col:12> col:12 struct __common_type_fold
| |-ClassTemplatePartialSpecializationDecl 0xa0b080 <line:2343:3, line:2347:7> line:2344:12 struct common_type definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__common_type_fold<common_type<_Tp1, _Tp2>, __common_type_pack<_Rp...>>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-0'
| | | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | | |-TemplateArgument type 'type-parameter-0-1'
| | | | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | | `-TemplateArgument type 'type-parameter-0-2...'
| | |   `-PackExpansionType 0x9bc590 'type-parameter-0-2...' dependent
| | |     `-TemplateTypeParmType 0x9bc4d0 'type-parameter-0-2' dependent contains_unexpanded_pack depth 0 index 2 pack
| | |-TemplateTypeParmDecl 0xa0ace8 <line:2343:12, col:21> col:21 referenced typename depth 0 index 0 _Tp1
| | |-TemplateTypeParmDecl 0xa0ad68 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Tp2
| | |-TemplateTypeParmDecl 0xa0ade8 <col:42, col:54> col:54 referenced typename depth 0 index 2 ... _Rp
| | `-CXXRecordDecl 0xa0b6f0 <line:2344:5, col:12> col:12 implicit struct common_type
| |-ClassTemplatePartialSpecializationDecl 0xa0bcb0 <line:2352:3, line:2356:7> line:2353:12 struct __common_type_fold definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'common_type<typename _CTp::type, _Rp...>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type '__common_type_pack<type-parameter-0-1...>'
| | | `-TemplateSpecializationType 0xa0b950 '__common_type_pack<type-parameter-0-1...>' dependent __common_type_pack
| | |   `-TemplateArgument pack
| | |     `-TemplateArgument type 'type-parameter-0-1...'
| | |       `-PackExpansionType 0x96a370 'type-parameter-0-1...' dependent
| | |         `-TemplateTypeParmType 0x9486e0 'type-parameter-0-1' dependent contains_unexpanded_pack depth 0 index 1 pack
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0x826200 'void'
| | |-TemplateTypeParmDecl 0xa0b798 <line:2352:12, col:21> col:21 referenced typename depth 0 index 0 _CTp
| | |-TemplateTypeParmDecl 0xa0b818 <col:27, col:39> col:39 referenced typename depth 0 index 1 ... _Rp
| | `-CXXRecordDecl 0xa0caa0 <line:2353:5, col:12> col:12 implicit struct __common_type_fold
| |-ClassTemplatePartialSpecializationDecl 0xa0cdf0 <line:2359:3, line:2361:7> line:2360:12 struct __common_type_fold definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0x826200 'void'
| | |-TemplateTypeParmDecl 0xa0cb48 <line:2359:12, col:21> col:21 referenced typename depth 0 index 0 _CTp
| | |-TemplateTypeParmDecl 0xa0cbc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Rp
| | `-CXXRecordDecl 0xa0d098 <line:2360:5, col:12> col:12 implicit struct __common_type_fold
| |-ClassTemplateDecl 0xa0d3e0 <line:2363:3, line:2367:5> line:2364:12 __underlying_type_impl
| | |-TemplateTypeParmDecl 0xa0d140 <line:2363:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xa0d2b8 <col:26, col:47> col:31 'bool' depth 0 index 1
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xa0d318 <col:33, col:47> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xa0d270 <col:33, col:47> '<dependent type>' lvalue
| | `-CXXRecordDecl 0xa0d350 <line:2364:5, line:2367:5> line:2364:12 struct __underlying_type_impl definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xa0d680 <col:5, col:12> col:12 implicit struct __underlying_type_impl
| |   `-TypeAliasDecl 0xa0d7b0 <line:2366:7, col:41> col:13 type '__underlying_type(_Tp)'
| |     `-UnaryTransformType 0xa0d760 '__underlying_type(_Tp)' dependent underlying_type
| |       `-TemplateTypeParmType 0xa0d190 '_Tp' dependent depth 0 index 0
| |         `-TemplateTypeParm 0xa0d140 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xa0da08 <line:2369:3, line:2371:7> line:2370:12 struct __underlying_type_impl definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument integral 0
| | |-TemplateTypeParmDecl 0xa0d828 <line:2369:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xa0dc88 <line:2370:5, col:12> col:12 implicit struct __underlying_type_impl
| |-ClassTemplateDecl 0xa0de50 <line:2375:3, line:2378:7> line:2376:12 underlying_type
| | |-TemplateTypeParmDecl 0xa0dd30 <line:2375:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xa0ddc0 <line:2376:5, line:2378:7> line:2376:12 struct underlying_type definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__underlying_type_impl<_Tp>'
| |   `-CXXRecordDecl 0xa0e2b0 <col:5, col:12> col:12 implicit struct underlying_type
| |-ClassTemplateDecl 0xa0e480 <line:2381:3, line:2385:5> line:2382:12 __declval_protector
| | |-TemplateTypeParmDecl 0xa0e358 <line:2381:12, col:21> col:21 typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xa0e3f0 <line:2382:5, line:2385:5> line:2382:12 struct __declval_protector definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xa0e6c0 <col:5, col:12> col:12 implicit struct __declval_protector
| |   `-VarDecl 0xa0e760 <line:2384:7, col:34> col:25 __stop 'const bool' static cinit
| |     `-CXXBoolLiteralExpr 0xa0e7c8 <col:34> 'bool' false
| |-FunctionTemplateDecl 0xa10220 prev 0x95ab00 <line:2392:3, line:2398:5> line:2393:10 declval
| | |-TemplateTypeParmDecl 0xa0e848 <line:2392:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xa10180 prev 0x95aa60 <line:2393:5, line:2398:5> line:2393:10 declval 'auto () noexcept -> decltype(__declval<_Tp>(0))'
| |   `-CompoundStmt 0xa10578 <line:2394:5, line:2398:5>
| |     |-DeclStmt 0xa10460 <line:2395:7, line:2396:37>
| |     | `-StaticAssertDecl 0xa10420 <line:2395:7, line:2396:36> line:2395:7
| |     |   |-DependentScopeDeclRefExpr 0xa10330 <col:21, col:47> '<dependent type>' lvalue
| |     |   `-StringLiteral 0xa103e8 <line:2396:7> 'const char[28]' lvalue "declval() must not be used!"
| |     `-ReturnStmt 0xa10568 <line:2397:7, col:30>
| |       `-CallExpr 0xa10540 <col:14, col:30> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xa104a0 <col:14, col:27> '<dependent type>' lvalue (ADL) = '__declval' 0x95a6c8 0x95a3b8
| |         `-IntegerLiteral 0xa10520 <col:29> 'int' 0
| |-ClassTemplateDecl 0xa106c0 <line:2401:3, line:2402:12> col:12 result_of
| | |-TemplateTypeParmDecl 0xa10598 <line:2401:12, col:21> col:21 typename depth 0 index 0 _Signature
| | `-CXXRecordDecl 0xa10630 <line:2402:5, col:12> col:12 struct result_of
| |-CXXRecordDecl 0xa10898 <line:2409:3, col:32> col:10 referenced struct __invoke_memfun_ref definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | `-CXXRecordDecl 0xa109b8 <col:3, col:10> col:10 implicit struct __invoke_memfun_ref
| |-CXXRecordDecl 0xa10a60 <line:2410:3, col:34> col:10 referenced struct __invoke_memfun_deref definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | `-CXXRecordDecl 0xa10b78 <col:3, col:10> col:10 implicit struct __invoke_memfun_deref
| |-CXXRecordDecl 0xa10c20 <line:2411:3, col:32> col:10 referenced struct __invoke_memobj_ref definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | `-CXXRecordDecl 0xa10d38 <col:3, col:10> col:10 implicit struct __invoke_memobj_ref
| |-CXXRecordDecl 0xa10de0 <line:2412:3, col:34> col:10 referenced struct __invoke_memobj_deref definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | `-CXXRecordDecl 0xa10ef8 <col:3, col:10> col:10 implicit struct __invoke_memobj_deref
| |-CXXRecordDecl 0xa10fa0 <line:2413:3, col:27> col:10 referenced struct __invoke_other definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | `-CXXRecordDecl 0xa110b8 <col:3, col:10> col:10 implicit struct __invoke_other
| |-ClassTemplateDecl 0xa11308 <line:2416:3, line:2418:35> line:2417:12 __result_of_success
| | |-TemplateTypeParmDecl 0xa11160 <line:2416:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xa111d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Tag
| | `-CXXRecordDecl 0xa11278 <line:2417:5, line:2418:35> line:2417:12 struct __result_of_success definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__success_type<_Tp>'
| |   |-CXXRecordDecl 0xa11630 <col:5, col:12> col:12 implicit struct __result_of_success
| |   `-TypeAliasDecl 0xa116d0 <line:2418:7, col:29> col:13 __invoke_type '_Tag'
| |     `-TemplateTypeParmType 0xa11230 '_Tag' dependent depth 0 index 1
| |       `-TemplateTypeParm 0xa111d8 '_Tag'
| |-CXXRecordDecl 0xa11748 <line:2421:3, line:2430:3> line:2421:10 referenced struct __result_of_memfun_ref_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xa11868 <col:3, col:10> col:10 implicit struct __result_of_memfun_ref_impl
| | |-FunctionTemplateDecl 0xa12bf0 <line:2423:5, line:2426:42> col:31 _S_test
| | | |-TemplateTypeParmDecl 0xa118f8 <line:2423:14, col:23> col:23 referenced typename depth 0 index 0 _Fp
| | | |-TemplateTypeParmDecl 0xa11978 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Tp1
| | | |-TemplateTypeParmDecl 0xa119f8 <col:43, col:55> col:55 referenced typename depth 0 index 2 ... _Args
| | | `-CXXMethodDecl 0xa12b50 <line:2424:7, line:2426:42> col:31 _S_test '__result_of_success<decltype((std::declval<_Tp1>() .* std::declval<_Fp>())(std::declval<_Args>()...)), std::__invoke_memfun_ref> (int)' static
| | |   `-ParmVarDecl 0xa11f38 <col:39> col:42 'int'
| | `-FunctionTemplateDecl 0xa12da0 <line:2428:5, line:2429:40> col:29 _S_test
| |   |-TemplateTypeParmDecl 0xa12c50 <line:2428:14> col:25 typename depth 0 index 0 ...
| |   `-CXXMethodDecl 0xa12d00 <line:2429:7, col:40> col:29 _S_test 'std::__failure_type (...)' static
| |-ClassTemplateDecl 0xa13050 <line:2432:3, line:2437:5> line:2433:12 __result_of_memfun_ref
| | |-TemplateTypeParmDecl 0xa12e20 <line:2432:12, col:21> col:21 referenced typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xa12e98 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Arg
| | |-TemplateTypeParmDecl 0xa12f18 <col:45, col:57> col:57 referenced typename depth 0 index 2 ... _Args
| | `-CXXRecordDecl 0xa12fc0 <line:2433:5, line:2437:5> line:2433:12 struct __result_of_memfun_ref definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-private 'std::__result_of_memfun_ref_impl'
| |   |-CXXRecordDecl 0xa13390 <col:5, col:12> col:12 implicit struct __result_of_memfun_ref
| |   `-TypedefDecl 0xa135f8 <line:2436:7, col:61> col:61 type 'decltype(_S_test<_MemPtr, _Arg, _Args...>(0))'
| |     `-DecltypeType 0xa135c0 'decltype(_S_test<_MemPtr, _Arg, _Args...>(0))' dependent
| |       `-CallExpr 0xa13558 <col:24, col:58> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xa13478 <col:24, col:55> '<dependent type>' lvalue (no ADL) = '_S_test' 0xa12bf0 0xa12da0
| |         `-IntegerLiteral 0xa13538 <col:57> 'int' 0
| |-CXXRecordDecl 0xa13668 <line:2440:3, line:2449:3> line:2440:10 referenced struct __result_of_memfun_deref_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xa13788 <col:3, col:10> col:10 implicit struct __result_of_memfun_deref_impl
| | |-FunctionTemplateDecl 0xa14040 <line:2442:5, line:2445:44> col:33 _S_test
| | | |-TemplateTypeParmDecl 0xa13818 <line:2442:14, col:23> col:23 referenced typename depth 0 index 0 _Fp
| | | |-TemplateTypeParmDecl 0xa13898 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Tp1
| | | |-TemplateTypeParmDecl 0xa13918 <col:43, col:55> col:55 referenced typename depth 0 index 2 ... _Args
| | | `-CXXMethodDecl 0xa13fa0 <line:2443:7, line:2445:44> col:33 _S_test '__result_of_success<decltype(((*std::declval<_Tp1>()) .* std::declval<_Fp>())(std::declval<_Args>()...)), std::__invoke_memfun_deref> (int)' static
| | |   `-ParmVarDecl 0xa13e68 <col:41> col:44 'int'
| | `-FunctionTemplateDecl 0xa141f0 <line:2447:5, line:2448:40> col:29 _S_test
| |   |-TemplateTypeParmDecl 0xa140a0 <line:2447:14> col:25 typename depth 0 index 0 ...
| |   `-CXXMethodDecl 0xa14150 <line:2448:7, col:40> col:29 _S_test 'std::__failure_type (...)' static
| |-ClassTemplateDecl 0xa144a0 <line:2451:3, line:2456:5> line:2452:12 __result_of_memfun_deref
| | |-TemplateTypeParmDecl 0xa14270 <line:2451:12, col:21> col:21 referenced typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xa142e8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Arg
| | |-TemplateTypeParmDecl 0xa14368 <col:45, col:57> col:57 referenced typename depth 0 index 2 ... _Args
| | `-CXXRecordDecl 0xa14410 <line:2452:5, line:2456:5> line:2452:12 struct __result_of_memfun_deref definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-private 'std::__result_of_memfun_deref_impl'
| |   |-CXXRecordDecl 0xa147e0 <col:5, col:12> col:12 implicit struct __result_of_memfun_deref
| |   `-TypedefDecl 0xa14a08 <line:2455:7, col:61> col:61 type 'decltype(_S_test<_MemPtr, _Arg, _Args...>(0))'
| |     `-DecltypeType 0xa149d0 'decltype(_S_test<_MemPtr, _Arg, _Args...>(0))' dependent
| |       `-CallExpr 0xa149a8 <col:24, col:58> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xa148c8 <col:24, col:55> '<dependent type>' lvalue (no ADL) = '_S_test' 0xa14040 0xa141f0
| |         `-IntegerLiteral 0xa14988 <col:57> 'int' 0
| |-CXXRecordDecl 0xa14a78 <line:2459:3, line:2468:3> line:2459:10 referenced struct __result_of_memobj_ref_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xa15528 <col:3, col:10> col:10 implicit struct __result_of_memobj_ref_impl
| | |-FunctionTemplateDecl 0xa15bf0 <line:2461:5, line:2464:42> col:31 _S_test
| | | |-TemplateTypeParmDecl 0xa155b8 <line:2461:14, col:23> col:23 referenced typename depth 0 index 0 _Fp
| | | |-TemplateTypeParmDecl 0xa15638 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Tp1
| | | `-CXXMethodDecl 0xa15b50 <line:2462:7, line:2464:42> col:31 _S_test '__result_of_success<decltype(std::declval<_Tp1>() .* std::declval<_Fp>()), std::__invoke_memobj_ref> (int)' static
| | |   `-ParmVarDecl 0xa15a18 <col:39> col:42 'int'
| | `-FunctionTemplateDecl 0xa15e28 <line:2466:5, line:2467:40> col:29 _S_test
| |   |-TemplateTypeParmDecl 0xa15c50 <line:2466:14> col:22 typename depth 0 index 0
| |   |-TemplateTypeParmDecl 0xa15cc8 <col:24> col:32 typename depth 0 index 1
| |   `-CXXMethodDecl 0xa15d88 <line:2467:7, col:40> col:29 _S_test 'std::__failure_type (...)' static
| |-ClassTemplateDecl 0xa16058 <line:2470:3, line:2475:5> line:2471:12 __result_of_memobj_ref
| | |-TemplateTypeParmDecl 0xa15ea8 <line:2470:12, col:21> col:21 referenced typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xa15f28 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Arg
| | `-CXXRecordDecl 0xa15fc8 <line:2471:5, line:2475:5> line:2471:12 struct __result_of_memobj_ref definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-private 'std::__result_of_memobj_ref_impl'
| |   |-CXXRecordDecl 0xa16320 <col:5, col:12> col:12 implicit struct __result_of_memobj_ref
| |   `-TypedefDecl 0xa16508 <line:2474:7, col:51> col:51 type 'decltype(_S_test<_MemPtr, _Arg>(0))'
| |     `-DecltypeType 0xa164d0 'decltype(_S_test<_MemPtr, _Arg>(0))' dependent
| |       `-CallExpr 0xa164a8 <col:24, col:48> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xa163e8 <col:24, col:45> '<dependent type>' lvalue (no ADL) = '_S_test' 0xa15bf0 0xa15e28
| |         `-IntegerLiteral 0xa16488 <col:47> 'int' 0
| |-CXXRecordDecl 0xa16578 <line:2478:3, line:2487:3> line:2478:10 referenced struct __result_of_memobj_deref_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xa16698 <col:3, col:10> col:10 implicit struct __result_of_memobj_deref_impl
| | |-FunctionTemplateDecl 0xa16d90 <line:2480:5, line:2483:44> col:33 _S_test
| | | |-TemplateTypeParmDecl 0xa16728 <line:2480:14, col:23> col:23 referenced typename depth 0 index 0 _Fp
| | | |-TemplateTypeParmDecl 0xa167a8 <col:28, col:37> col:37 referenced typename depth 0 index 1 _Tp1
| | | `-CXXMethodDecl 0xa16cf0 <line:2481:7, line:2483:44> col:33 _S_test '__result_of_success<decltype((*std::declval<_Tp1>()) .* std::declval<_Fp>()), std::__invoke_memobj_deref> (int)' static
| | |   `-ParmVarDecl 0xa16bb8 <col:41> col:44 'int'
| | `-FunctionTemplateDecl 0xa16fc8 <line:2485:5, line:2486:40> col:29 _S_test
| |   |-TemplateTypeParmDecl 0xa16df0 <line:2485:14> col:22 typename depth 0 index 0
| |   |-TemplateTypeParmDecl 0xa16e68 <col:24> col:32 typename depth 0 index 1
| |   `-CXXMethodDecl 0xa16f28 <line:2486:7, col:40> col:29 _S_test 'std::__failure_type (...)' static
| |-ClassTemplateDecl 0xa171f8 <line:2489:3, line:2494:5> line:2490:12 __result_of_memobj_deref
| | |-TemplateTypeParmDecl 0xa17048 <line:2489:12, col:21> col:21 referenced typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xa170c8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Arg
| | `-CXXRecordDecl 0xa17168 <line:2490:5, line:2494:5> line:2490:12 struct __result_of_memobj_deref definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-private 'std::__result_of_memobj_deref_impl'
| |   |-CXXRecordDecl 0xa17e30 <col:5, col:12> col:12 implicit struct __result_of_memobj_deref
| |   `-TypedefDecl 0xa18018 <line:2493:7, col:51> col:51 type 'decltype(_S_test<_MemPtr, _Arg>(0))'
| |     `-DecltypeType 0xa17fe0 'decltype(_S_test<_MemPtr, _Arg>(0))' dependent
| |       `-CallExpr 0xa17fb8 <col:24, col:48> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xa17ef8 <col:24, col:45> '<dependent type>' lvalue (no ADL) = '_S_test' 0xa16d90 0xa16fc8
| |         `-IntegerLiteral 0xa17f98 <col:47> 'int' 0
| |-ClassTemplateDecl 0xa18238 <line:2496:3, line:2497:12> col:12 __result_of_memobj
| | |-TemplateTypeParmDecl 0xa18088 <line:2496:12, col:21> col:21 typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xa18108 <col:30, col:39> col:39 typename depth 0 index 1 _Arg
| | `-CXXRecordDecl 0xa181a8 <line:2497:5, col:12> col:12 struct __result_of_memobj
| |-ClassTemplatePartialSpecializationDecl 0xa187a8 <line:2499:3, line:2509:5> line:2500:12 struct __result_of_memobj definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| | | `-MemberPointerType 0x936100 'type-parameter-0-0 type-parameter-0-1::*' dependent
| | |   |-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-2'
| | | `-TemplateTypeParmType 0x918b80 'type-parameter-0-2' dependent depth 0 index 2
| | |-TemplateTypeParmDecl 0xa18458 <line:2499:12, col:21> col:21 referenced typename depth 0 index 0 _Res
| | |-TemplateTypeParmDecl 0xa184d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Class
| | |-TemplateTypeParmDecl 0xa18558 <col:44, col:53> col:53 referenced typename depth 0 index 2 _Arg
| | |-CXXRecordDecl 0xa18a18 <line:2500:5, col:12> col:12 implicit struct __result_of_memobj
| | |-TypedefDecl 0xa18ef8 <line:2502:7, col:38> col:38 referenced _Argval '__remove_cvref_t<_Arg>':'typename remove_cv<typename remove_reference<type-parameter-0-2>::type>::type'
| | | `-TemplateSpecializationType 0xa18e70 '__remove_cvref_t<_Arg>' sugar dependent alias __remove_cvref_t
| | |   |-TemplateArgument type '_Arg'
| | |   | `-TemplateTypeParmType 0xa185b0 '_Arg' dependent depth 0 index 2
| | |   |   `-TemplateTypeParm 0xa18558 '_Arg'
| | |   `-DependentNameType 0xa18e20 'typename remove_cv<typename remove_reference<type-parameter-0-2>::type>::type' dependent
| | |-TypedefDecl 0xa18f98 <line:2503:7, col:30> col:30 referenced _MemPtr '_Res _Class::*'
| | | `-MemberPointerType 0xa18620 '_Res _Class::*' dependent
| | |   |-TemplateTypeParmType 0xa18530 '_Class' dependent depth 0 index 1
| | |   | `-TemplateTypeParm 0xa184d8 '_Class'
| | |   `-TemplateTypeParmType 0xa184b0 '_Res' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0xa18458 '_Res'
| | `-TypedefDecl 0xa19b90 <line:2504:7, line:2508:15> col:15 type 'typename __conditional_t<__or_<is_same<_Argval, _Class>, is_base_of<_Class, _Argval>>::value, __result_of_memobj_ref<_MemPtr, _Arg>, __result_of_memobj_deref<_MemPtr, _Arg>>::type'
| |   `-DependentNameType 0xa19b20 'typename __conditional_t<__or_<is_same<_Argval, _Class>, is_base_of<_Class, _Argval>>::value, __result_of_memobj_ref<_MemPtr, _Arg>, __result_of_memobj_deref<_MemPtr, _Arg>>::type' dependent
| |-ClassTemplateDecl 0xa1a890 <line:2511:3, line:2512:12> col:12 __result_of_memfun
| | |-TemplateTypeParmDecl 0xa19c00 <line:2511:12, col:21> col:21 typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xa19c78 <col:30, col:39> col:39 typename depth 0 index 1 _Arg
| | |-TemplateTypeParmDecl 0xa19cf8 <col:45, col:57> col:57 typename depth 0 index 2 ... _Args
| | `-CXXRecordDecl 0xa19da0 <line:2512:5, col:12> col:12 struct __result_of_memfun
| |-ClassTemplatePartialSpecializationDecl 0xa1afd0 <line:2514:3, line:2523:5> line:2515:12 struct __result_of_memfun definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0 type-parameter-0-1::*'
| | | `-MemberPointerType 0x936100 'type-parameter-0-0 type-parameter-0-1::*' dependent
| | |   |-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-2'
| | | `-TemplateTypeParmType 0x918b80 'type-parameter-0-2' dependent depth 0 index 2
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-3...'
| | |   `-PackExpansionType 0x91c7f0 'type-parameter-0-3...' dependent
| | |     `-TemplateTypeParmType 0x91c720 'type-parameter-0-3' dependent contains_unexpanded_pack depth 0 index 3 pack
| | |-TemplateTypeParmDecl 0xa1ab28 <line:2514:12, col:21> col:21 referenced typename depth 0 index 0 _Res
| | |-TemplateTypeParmDecl 0xa1aba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 _Class
| | |-TemplateTypeParmDecl 0xa1ac28 <col:44, col:53> col:53 referenced typename depth 0 index 2 _Arg
| | |-TemplateTypeParmDecl 0xa1aca8 <col:59, col:71> col:71 referenced typename depth 0 index 3 ... _Args
| | |-CXXRecordDecl 0xa1b2b8 <line:2515:5, col:12> col:12 implicit struct __result_of_memfun
| | |-TypedefDecl 0xa1b450 <line:2517:7, col:53> col:53 referenced _Argval 'typename remove_reference<_Arg>::type'
| | | `-DependentNameType 0xa1b3e0 'typename remove_reference<_Arg>::type' dependent
| | |-TypedefDecl 0xa1b4f0 <line:2518:7, col:30> col:30 referenced _MemPtr '_Res _Class::*'
| | | `-MemberPointerType 0xa1ad80 '_Res _Class::*' dependent
| | |   |-TemplateTypeParmType 0xa1ac00 '_Class' dependent depth 0 index 1
| | |   | `-TemplateTypeParm 0xa1aba8 '_Class'
| | |   `-TemplateTypeParmType 0xa1ab80 '_Res' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0xa1ab28 '_Res'
| | `-TypedefDecl 0xa1bf80 <line:2519:7, line:2522:15> col:15 type 'typename __conditional_t<is_base_of<_Class, _Argval>::value, __result_of_memfun_ref<_MemPtr, _Arg, _Args...>, __result_of_memfun_deref<_MemPtr, _Arg, _Args...>>::type'
| |   `-DependentNameType 0xa1bf10 'typename __conditional_t<is_base_of<_Class, _Argval>::value, __result_of_memfun_ref<_MemPtr, _Arg, _Args...>, __result_of_memfun_deref<_MemPtr, _Arg, _Args...>>::type' dependent
| |-ClassTemplateDecl 0xa1c4e8 <line:2530:3, line:2534:5> line:2531:12 __inv_unwrap
| | |-TemplateTypeParmDecl 0xa1bff0 <line:2530:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xa1c3b8 <col:26, <scratch space>:84:1> /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/type_traits:2530:35 typename depth 0 index 1 _Up
| | | `-TemplateArgument type '__remove_cvref_t<_Tp>':'typename remove_cv<typename remove_reference<type-parameter-0-0>::type>::type'
| | |   `-TemplateSpecializationType 0xa1c330 '__remove_cvref_t<_Tp>' sugar dependent alias __remove_cvref_t
| | |     |-TemplateArgument type '_Tp'
| | |     | `-TemplateTypeParmType 0xa1c040 '_Tp' dependent depth 0 index 0
| | |     |   `-TemplateTypeParm 0xa1bff0 '_Tp'
| | |     `-DependentNameType 0xa1c2e0 'typename remove_cv<typename remove_reference<type-parameter-0-0>::type>::type' dependent
| | `-CXXRecordDecl 0xa1c458 <line:2531:5, line:2534:5> line:2531:12 struct __inv_unwrap definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xa1c770 <col:5, col:12> col:12 implicit struct __inv_unwrap
| |   `-TypeAliasDecl 0xa1c810 <line:2533:7, col:20> col:13 type '_Tp'
| |     `-TemplateTypeParmType 0xa1c040 '_Tp' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xa1bff0 '_Tp'
| |-ClassTemplatePartialSpecializationDecl 0xa1e9b8 <line:2536:3, line:2540:5> line:2537:12 struct __inv_unwrap definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'reference_wrapper<type-parameter-0-1>'
| | | `-TemplateSpecializationType 0xa1e7f0 'reference_wrapper<type-parameter-0-1>' dependent reference_wrapper
| | |   `-TemplateArgument type 'type-parameter-0-1'
| | |     `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0xa1e6b0 <line:2536:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xa1e728 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | |-CXXRecordDecl 0xa1ec38 <line:2537:5, col:12> col:12 implicit struct __inv_unwrap
| | `-TypeAliasDecl 0xa1ed38 <line:2539:7, col:23> col:13 type '_Up &'
| |   `-LValueReferenceType 0xa1ed00 '_Up &' dependent
| |     `-TemplateTypeParmType 0xa1e780 '_Up' dependent depth 0 index 1
| |       `-TemplateTypeParm 0xa1e728 '_Up'
| |-ClassTemplateDecl 0xa1f048 <line:2542:3, line:2546:5> line:2543:12 __result_of_impl
| | |-NonTypeTemplateParmDecl 0xa1edc0 <line:2542:12> col:16 'bool' depth 0 index 0
| | |-NonTypeTemplateParmDecl 0xa1ee30 <col:18> col:22 'bool' depth 0 index 1
| | |-TemplateTypeParmDecl 0xa1ee90 <col:24, col:33> col:33 typename depth 0 index 2 _Functor
| | |-TemplateTypeParmDecl 0xa1ef08 <col:43, col:55> col:55 typename depth 0 index 3 ... _ArgTypes
| | `-CXXRecordDecl 0xa1efb8 <line:2543:5, line:2546:5> line:2543:12 struct __result_of_impl definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xa1f3d0 <col:5, col:12> col:12 implicit struct __result_of_impl
| |   `-TypedefDecl 0xa1f470 <line:2545:7, col:30> col:30 type 'std::__failure_type'
| |     `-RecordType 0x9262b0 'std::__failure_type'
| |       `-CXXRecord 0x926220 '__failure_type'
| |-ClassTemplatePartialSpecializationDecl 0xa1f858 <line:2548:3, line:2552:7> line:2549:12 struct __result_of_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__result_of_memobj<__decay_t<_MemPtr>, typename __inv_unwrap<_Arg>::type>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-1'
| | |   `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateTypeParmDecl 0xa1f4e0 <line:2548:12, col:21> col:21 referenced typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xa1f558 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Arg
| | `-CXXRecordDecl 0xa204d0 <line:2549:5, col:12> col:12 implicit struct __result_of_impl
| |-ClassTemplatePartialSpecializationDecl 0xa20f98 <line:2554:3, line:2558:7> line:2555:12 struct __result_of_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__result_of_memfun<__decay_t<_MemPtr>, typename __inv_unwrap<_Arg>::type, _Args...>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'type-parameter-0-1'
| | | | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | | `-TemplateArgument type 'type-parameter-0-2...'
| | |   `-PackExpansionType 0x9bc590 'type-parameter-0-2...' dependent
| | |     `-TemplateTypeParmType 0x9bc4d0 'type-parameter-0-2' dependent contains_unexpanded_pack depth 0 index 2 pack
| | |-TemplateTypeParmDecl 0xa20578 <line:2554:12, col:21> col:21 referenced typename depth 0 index 0 _MemPtr
| | |-TemplateTypeParmDecl 0xa205f8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Arg
| | |-TemplateTypeParmDecl 0xa20c00 <col:45, col:57> col:57 referenced typename depth 0 index 2 ... _Args
| | `-CXXRecordDecl 0xa21ae0 <line:2555:5, col:12> col:12 implicit struct __result_of_impl
| |-CXXRecordDecl 0xa21b88 <line:2561:3, line:2570:3> line:2561:10 referenced struct __result_of_other_impl definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xa21ca8 <col:3, col:10> col:10 implicit struct __result_of_other_impl
| | |-FunctionTemplateDecl 0xa22390 <line:2563:5, line:2566:37> col:26 _S_test
| | | |-TemplateTypeParmDecl 0xa21d38 <line:2563:14, col:23> col:23 referenced typename depth 0 index 0 _Fn
| | | |-TemplateTypeParmDecl 0xa21db8 <col:28, col:40> col:40 referenced typename depth 0 index 1 ... _Args
| | | `-CXXMethodDecl 0xa222f0 <line:2564:7, line:2566:37> col:26 _S_test '__result_of_success<decltype(std::declval<_Fn>()(std::declval<_Args>()...)), std::__invoke_other> (int)' static
| | |   `-ParmVarDecl 0xa221b8 <col:34> col:37 'int'
| | `-FunctionTemplateDecl 0xa22540 <line:2568:5, line:2569:40> col:29 _S_test
| |   |-TemplateTypeParmDecl 0xa223f0 <line:2568:14> col:25 typename depth 0 index 0 ...
| |   `-CXXMethodDecl 0xa224a0 <line:2569:7, col:40> col:29 _S_test 'std::__failure_type (...)' static
| |-ClassTemplatePartialSpecializationDecl 0xa22978 <line:2572:3, line:2577:5> line:2573:12 struct __result_of_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-private 'std::__result_of_other_impl'
| | |-TemplateArgument integral 0
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-1...'
| | |   `-PackExpansionType 0x96a370 'type-parameter-0-1...' dependent
| | |     `-TemplateTypeParmType 0x9486e0 'type-parameter-0-1' dependent contains_unexpanded_pack depth 0 index 1 pack
| | |-TemplateTypeParmDecl 0xa225c0 <line:2572:12, col:21> col:21 referenced typename depth 0 index 0 _Functor
| | |-TemplateTypeParmDecl 0xa22638 <col:31, col:43> col:43 referenced typename depth 0 index 1 ... _ArgTypes
| | |-CXXRecordDecl 0xa22e48 <line:2573:5, col:12> col:12 implicit struct __result_of_impl
| | `-TypedefDecl 0xa23088 <line:2576:7, col:60> col:60 type 'decltype(_S_test<_Functor, _ArgTypes...>(0))'
| |   `-DecltypeType 0xa23050 'decltype(_S_test<_Functor, _ArgTypes...>(0))' dependent
| |     `-CallExpr 0xa22fe0 <col:24, col:57> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xa22f20 <col:24, col:54> '<dependent type>' lvalue (no ADL) = '_S_test' 0xa22390 0xa22540
| |       `-IntegerLiteral 0xa22fc0 <col:56> 'int' 0
| |-ClassTemplateDecl 0xa232a8 <line:2580:3, line:2591:7> line:2581:12 __invoke_result
| | |-TemplateTypeParmDecl 0xa230f8 <line:2580:12, col:21> col:21 referenced typename depth 0 index 0 _Functor
| | |-TemplateTypeParmDecl 0xa23178 <col:31, col:43> col:43 referenced typename depth 0 index 1 ... _ArgTypes
| | `-CXXRecordDecl 0xa23218 <line:2581:5, line:2591:7> line:2581:12 struct __invoke_result definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__result_of_impl<is_member_object_pointer<typename remove_reference<_Functor>::type>::value, is_member_function_pointer<typename remove_reference<_Functor>::type>::value, _Functor, _ArgTypes...>::type'
| |   `-CXXRecordDecl 0xa23d10 <col:5, col:12> col:12 implicit struct __invoke_result
| |-ClassTemplatePartialSpecializationDecl 0xa240c0 <line:2594:3, line:2597:7> line:2595:12 struct result_of definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__invoke_result<_Functor, _ArgTypes...>'
| | |-TemplateArgument type 'type-parameter-0-0 (type-parameter-0-1...)'
| | | `-FunctionProtoType 0xa23f80 'type-parameter-0-0 (type-parameter-0-1...)' dependent cdecl
| | |   |-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |   `-PackExpansionType 0x96a370 'type-parameter-0-1...' dependent
| | |     `-TemplateTypeParmType 0x9486e0 'type-parameter-0-1' dependent contains_unexpanded_pack depth 0 index 1 pack
| | |-TemplateTypeParmDecl 0xa23db8 <line:2594:12, col:21> col:21 referenced typename depth 0 index 0 _Functor
| | |-TemplateTypeParmDecl 0xa23e38 <col:31, col:43> col:43 referenced typename depth 0 index 1 ... _ArgTypes
| | `-CXXRecordDecl 0xa24400 <line:2595:5, col:12> col:12 implicit struct result_of
| |-TypeAliasTemplateDecl 0xa248e0 <line:2601:3, line:2603:71> col:5 aligned_storage_t
| | |-NonTypeTemplateParmDecl 0xa244b8 <line:2601:12, col:19> col:19 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Len
| | |-NonTypeTemplateParmDecl 0xa24660 <col:25, line:2602:62> line:2601:32 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Align
| | | `-TemplateArgument expr
| | |   `-UnaryExprOrTypeTraitExpr 0xa24630 <line:2602:6, col:62> 'unsigned long' __alignof 'typename __aligned_storage_msa<_Len>::__type'
| | `-TypeAliasDecl 0xa24880 <line:2603:5, col:71> col:11 aligned_storage_t 'typename aligned_storage<_Len, _Align>::type'
| |   `-DependentNameType 0xa24810 'typename aligned_storage<_Len, _Align>::type' dependent
| |-TypeAliasTemplateDecl 0xa25220 <line:2605:3, line:2606:70> col:5 aligned_union_t
| | |-NonTypeTemplateParmDecl 0xa24948 <line:2605:13, col:20> col:20 referenced 'std::size_t':'unsigned long' depth 0 index 0 _Len
| | |-TemplateTypeParmDecl 0xa249a8 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Types
| | `-TypeAliasDecl 0xa24c50 <line:2606:5, col:70> col:11 aligned_union_t 'typename aligned_union<_Len, _Types...>::type'
| |   `-DependentNameType 0xa24be0 'typename aligned_union<_Len, _Types...>::type' dependent
| |-TypeAliasTemplateDecl 0xa25470 <line:2609:3, line:2610:42> col:5 decay_t
| | |-TemplateTypeParmDecl 0xa25278 <line:2609:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xa25410 <line:2610:5, col:42> col:11 decay_t 'typename decay<_Tp>::type'
| |   `-DependentNameType 0xa253a0 'typename decay<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xa25790 <line:2613:3, line:2614:57> col:5 enable_if_t
| | |-NonTypeTemplateParmDecl 0xa254d8 <line:2613:12, col:17> col:17 referenced 'bool' depth 0 index 0 _Cond
| | |-TemplateTypeParmDecl 0xa25548 <col:24, col:39> col:33 referenced typename depth 0 index 1 _Tp
| | | `-TemplateArgument type 'void'
| | |   `-BuiltinType 0x826200 'void'
| | `-TypeAliasDecl 0xa25730 <line:2614:5, col:57> col:11 enable_if_t 'typename enable_if<_Cond, _Tp>::type'
| |   `-DependentNameType 0xa256c0 'typename enable_if<_Cond, _Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xa25ba0 <line:2617:3, line:2618:75> col:5 conditional_t
| | |-NonTypeTemplateParmDecl 0xa257f8 <line:2617:12, col:17> col:17 referenced 'bool' depth 0 index 0 _Cond
| | |-TemplateTypeParmDecl 0xa25858 <col:24, col:33> col:33 referenced typename depth 0 index 1 _Iftrue
| | |-TemplateTypeParmDecl 0xa258d8 <col:42, col:51> col:51 referenced typename depth 0 index 2 _Iffalse
| | `-TypeAliasDecl 0xa25b40 <line:2618:5, col:75> col:11 conditional_t 'typename conditional<_Cond, _Iftrue, _Iffalse>::type'
| |   `-DependentNameType 0xa25ad0 'typename conditional<_Cond, _Iftrue, _Iffalse>::type' dependent
| |-TypeAliasTemplateDecl 0xa25eb0 <line:2621:3, line:2622:57> col:5 common_type_t
| | |-TemplateTypeParmDecl 0xa25bf8 <line:2621:12, col:24> col:24 referenced typename depth 0 index 0 ... _Tp
| | `-TypeAliasDecl 0xa25e50 <line:2622:5, col:57> col:11 common_type_t 'typename common_type<_Tp...>::type'
| |   `-DependentNameType 0xa25de0 'typename common_type<_Tp...>::type' dependent
| |-TypeAliasTemplateDecl 0xa26150 <line:2625:3, line:2626:62> col:5 underlying_type_t
| | |-TemplateTypeParmDecl 0xa25f08 <line:2625:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xa260f0 <line:2626:5, col:62> col:11 underlying_type_t 'typename underlying_type<_Tp>::type'
| |   `-DependentNameType 0xa26080 'typename underlying_type<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xa263f0 <line:2629:3, line:2630:50> col:5 result_of_t
| | |-TemplateTypeParmDecl 0xa261a8 <line:2629:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xa26390 <line:2630:5, col:50> col:11 result_of_t 'typename result_of<_Tp>::type'
| |   `-DependentNameType 0xa26320 'typename result_of<_Tp>::type' dependent
| |-TypeAliasTemplateDecl 0xa26550 <line:2636:3, col:40> col:25 void_t
| | |-TemplateTypeParmDecl 0xa26448 <col:12> col:23 typename depth 0 index 0 ...
| | `-TypeAliasDecl 0xa264f0 <col:25, col:40> col:31 void_t 'void'
| |   `-BuiltinType 0x826200 'void'
| |-ClassTemplateDecl 0xa26908 <line:2642:3, line:2648:5> line:2644:12 __detector
| | |-TemplateTypeParmDecl 0xa265a8 <line:2642:12, col:21> col:21 referenced typename depth 0 index 0 _Default
| | |-TemplateTypeParmDecl 0xa26628 <col:31, col:40> col:40 typename depth 0 index 1 _AlwaysVoid
| | |-TemplateTemplateParmDecl 0xa26770 <line:2643:5, col:33> col:33 depth 0 index 2 _Op
| | | `-TemplateTypeParmDecl 0xa266a8 <col:14> col:25 typename depth 1 index 0 ...
| | |-TemplateTypeParmDecl 0xa267c8 <col:38, col:50> col:50 typename depth 0 index 3 ... _Args
| | `-CXXRecordDecl 0xa26878 <line:2644:5, line:2648:5> line:2644:12 struct __detector definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xa26d40 <col:5, col:12> col:12 implicit struct __detector
| |   |-TypeAliasDecl 0xa26de0 <line:2646:7, col:23> col:13 value_t 'std::false_type':'std::integral_constant<bool, false>'
| |   | `-TypedefType 0x919c20 'std::false_type' sugar
| |   |   |-TypeAlias 0x90edd8 'false_type'
| |   |   `-TemplateSpecializationType 0x90ed30 'integral_constant<bool, false>' sugar integral_constant
| |   |     |-TemplateArgument type 'bool'
| |   |     | `-BuiltinType 0x826220 'bool'
| |   |     |-TemplateArgument expr
| |   |     | `-ConstantExpr 0x90ebf8 <line:85:46> 'bool'
| |   |     |   |-value: Int 0
| |   |     |   `-CXXBoolLiteralExpr 0x90ebc8 <col:46> 'bool' false
| |   |     `-RecordType 0x90ed10 'std::integral_constant<bool, false>'
| |   |       `-ClassTemplateSpecialization 0x90ec18 'integral_constant'
| |   `-TypeAliasDecl 0xa26e50 <line:2647:7, col:20> col:13 type '_Default'
| |     `-TemplateTypeParmType 0xa26600 '_Default' dependent depth 0 index 0
| |       `-TemplateTypeParm 0xa265a8 '_Default'
| |-ClassTemplatePartialSpecializationDecl 0xa27f48 <line:2651:3, line:2657:5> line:2653:12 struct __detector definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0x826200 'void'
| | |-TemplateArgument template _Op
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'type-parameter-0-2...'
| | |   `-PackExpansionType 0x9bc590 'type-parameter-0-2...' dependent
| | |     `-TemplateTypeParmType 0x9bc4d0 'type-parameter-0-2' dependent contains_unexpanded_pack depth 0 index 2 pack
| | |-TemplateTypeParmDecl 0xa26ec8 <line:2651:12, col:21> col:21 referenced typename depth 0 index 0 _Default
| | |-TemplateTemplateParmDecl 0xa26fe0 <col:31, col:59> col:59 depth 0 index 1 _Op
| | | `-TemplateTypeParmDecl 0xa26f48 <col:40> col:51 typename depth 1 index 0 ...
| | |-TemplateTypeParmDecl 0xa27038 <line:2652:6, col:18> col:18 referenced typename depth 0 index 2 ... _Args
| | |-CXXRecordDecl 0xa28308 <line:2653:5, col:12> col:12 implicit struct __detector
| | |-TypeAliasDecl 0xa283a8 <line:2655:7, col:23> col:13 value_t 'std::true_type':'std::integral_constant<bool, true>'
| | | `-TypedefType 0x91dc50 'std::true_type' sugar
| | |   |-TypeAlias 0x90eb58 'true_type'
| | |   `-TemplateSpecializationType 0x90eab0 'integral_constant<bool, true>' sugar integral_constant
| | |     |-TemplateArgument type 'bool'
| | |     | `-BuiltinType 0x826220 'bool'
| | |     |-TemplateArgument expr
| | |     | `-ConstantExpr 0x90e978 <line:82:46> 'bool'
| | |     |   |-value: Int 1
| | |     |   `-CXXBoolLiteralExpr 0x90e918 <col:46> 'bool' true
| | |     `-RecordType 0x90ea90 'std::integral_constant<bool, true>'
| | |       `-ClassTemplateSpecialization 0x90e998 'integral_constant'
| | `-TypeAliasDecl 0xa284e0 <line:2656:7, col:32> col:13 type '_Op<_Args...>'
| |   `-TemplateSpecializationType 0xa28460 '_Op<_Args...>' dependent _Op
| |     `-TemplateArgument type '_Args...'
| |       `-PackExpansionType 0xa27100 '_Args...' dependent
| |         `-TemplateTypeParmType 0xa27090 '_Args' dependent contains_unexpanded_pack depth 0 index 2 pack
| |           `-TemplateTypeParm 0xa27038 '_Args'
| |-TypeAliasTemplateDecl 0xa28a08 <line:2660:3, line:2662:67> col:5 __detected_or
| | |-TemplateTypeParmDecl 0xa28558 <line:2660:12, col:21> col:21 referenced typename depth 0 index 0 _Default
| | |-TemplateTemplateParmDecl 0xa28670 <col:31, col:59> col:59 depth 0 index 1 _Op
| | | `-TemplateTypeParmDecl 0xa285d8 <col:40> col:51 typename depth 1 index 0 ...
| | |-TemplateTypeParmDecl 0xa286c8 <line:2661:5, col:17> col:17 referenced typename depth 0 index 2 ... _Args
| | `-TypeAliasDecl 0xa289a8 <line:2662:5, col:67> col:11 __detected_or '__detector<_Default, void, _Op, _Args...>'
| |   `-TemplateSpecializationType 0xa288b0 '__detector<_Default, void, _Op, _Args...>' dependent __detector
| |     |-TemplateArgument type '_Default'
| |     | `-TemplateTypeParmType 0xa285b0 '_Default' dependent depth 0 index 0
| |     |   `-TemplateTypeParm 0xa28558 '_Default'
| |     |-TemplateArgument type 'void'
| |     | `-BuiltinType 0x826200 'void'
| |     |-TemplateArgument template _Op
| |     `-TemplateArgument type '_Args...'
| |       `-PackExpansionType 0xa287a0 '_Args...' dependent
| |         `-TemplateTypeParmType 0xa28720 '_Args' dependent contains_unexpanded_pack depth 0 index 2 pack
| |           `-TemplateTypeParm 0xa286c8 '_Args'
| |-TypeAliasTemplateDecl 0xa29270 <line:2665:3, line:2668:58> line:2667:5 __detected_or_t
| | |-TemplateTypeParmDecl 0xa28a60 <line:2665:12, col:21> col:21 referenced typename depth 0 index 0 _Default
| | |-TemplateTemplateParmDecl 0xa28b70 <col:31, col:59> col:59 depth 0 index 1 _Op
| | | `-TemplateTypeParmDecl 0xa28ad8 <col:40> col:51 typename depth 1 index 0 ...
| | |-TemplateTypeParmDecl 0xa28bc8 <line:2666:5, col:17> col:17 referenced typename depth 0 index 2 ... _Args
| | `-TypeAliasDecl 0xa29210 <line:2667:5, line:2668:58> line:2667:11 __detected_or_t 'typename __detected_or<_Default, _Op, _Args...>::type'
| |   `-DependentNameType 0xa291a0 'typename __detected_or<_Default, _Op, _Args...>::type' dependent
| |-ClassTemplateDecl 0xa293f0 <line:2684:3, line:2685:12> col:12 __is_swappable
| | |-TemplateTypeParmDecl 0xa292c8 <line:2684:13, col:22> col:22 typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xa29360 <line:2685:5, col:12> col:12 struct __is_swappable
| |-ClassTemplateDecl 0xa296f0 <line:2687:3, line:2688:12> col:12 __is_nothrow_swappable
| | |-TemplateTypeParmDecl 0xa295c8 <line:2687:13, col:22> col:22 typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xa29660 <line:2688:5, col:12> col:12 struct __is_nothrow_swappable
| |-ClassTemplateDecl 0xa299f0 <line:2690:3, line:2692:7> line:2691:12 __is_tuple_like_impl
| | |-TemplateTypeParmDecl 0xa298c8 <line:2690:12> col:20 typename depth 0 index 0
| | `-CXXRecordDecl 0xa29960 <line:2691:5, line:2692:7> line:2691:12 struct __is_tuple_like_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0xa2c070 <col:5, col:12> col:12 implicit struct __is_tuple_like_impl
| |-ClassTemplateDecl 0xa2c240 <line:2695:3, line:2698:7> line:2696:12 __is_tuple_like
| | |-TemplateTypeParmDecl 0xa2c118 <line:2695:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xa2c1b0 <line:2696:5, line:2698:7> line:2696:12 struct __is_tuple_like definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_tuple_like_impl<__remove_cvref_t<_Tp>>::type'
| |   `-CXXRecordDecl 0xa2c950 <col:5, col:12> col:12 implicit struct __is_tuple_like
| |-FunctionTemplateDecl 0xa2d908 <line:2701:3, line:2709:53> line:2707:5 swap
| | |-TemplateTypeParmDecl 0xa2c9f8 <line:2701:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xa2d868 <line:2703:5, line:2709:53> line:2707:5 swap '_Require<__not_<__is_tuple_like<_Tp>>, is_move_constructible<_Tp>, is_move_assignable<_Tp>> (_Tp &, _Tp &) noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value)' inline
| |   |-ParmVarDecl 0xa2d3d8 <col:10, col:13> col:14 '_Tp &'
| |   `-ParmVarDecl 0xa2d450 <col:16, col:19> col:20 '_Tp &'
| |-FunctionTemplateDecl 0xa2ff68 <line:2711:3, line:2716:48> line:2715:5 swap
| | |-TemplateTypeParmDecl 0xa2d9e8 <line:2711:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-NonTypeTemplateParmDecl 0xa2da78 <col:26, col:33> col:33 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Nm
| | `-FunctionDecl 0xa2fec8 <line:2713:5, line:2716:48> line:2715:5 swap '__enable_if_t<__is_swappable<_Tp>::value> (_Tp (&)[_Nm], _Tp (&)[_Nm]) noexcept(__is_nothrow_swappable<_Tp>::value)' inline
| |   |-ParmVarDecl 0xa2fb48 <col:10, col:24> col:16 __a '_Tp (&)[_Nm]'
| |   `-ParmVarDecl 0xa2fc98 <col:27, col:41> col:33 __b '_Tp (&)[_Nm]'
| |-NamespaceDecl 0xa30058 <line:2719:3, line:2743:3> line:2719:13 __swappable_details
| | |-UsingDecl 0xa300d0 <line:2720:5, col:16> col:16 std::swap
| | |-UsingShadowDecl 0xa30128 <col:16> col:16 implicit FunctionTemplate 0xa2d908 'swap'
| | |-UsingShadowDecl 0xa30178 <col:16> col:16 implicit FunctionTemplate 0xa2ff68 'swap'
| | |-CXXRecordDecl 0xa301e8 <line:2722:5, line:2730:5> line:2722:12 referenced struct __do_is_swappable_impl definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0xa30308 <col:5, col:12> col:12 implicit struct __do_is_swappable_impl
| | | |-FunctionTemplateDecl 0xa308f0 <line:2724:7, line:2726:36> col:26 __test
| | | | |-TemplateTypeParmDecl 0xa30398 <line:2724:16, col:25> col:25 referenced typename depth 0 index 0 _Tp
| | | | |-TemplateTypeParmDecl 0xa306d8 <col:30, line:2725:75> col:16 typename depth 0 index 1
| | | | | `-TemplateArgument type 'decltype(swap(std::declval<_Tp &>(), std::declval<_Tp &>()))'
| | | | |   `-DecltypeType 0xa306a0 'decltype(swap(std::declval<_Tp &>(), std::declval<_Tp &>()))' dependent
| | | | |     `-CallExpr 0xa30628 <col:27, col:74> '<dependent type>'
| | | | |       |-UnresolvedLookupExpr 0xa30418 <col:27> '<overloaded function type>' lvalue (ADL) = 'swap' 0xa30178 0xa30128
| | | | |       |-CallExpr 0xa30540 <col:32, col:51> '<dependent type>'
| | | | |       | `-UnresolvedLookupExpr 0xa304c8 <col:32, col:49> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| | | | |       `-CallExpr 0xa30608 <col:54, col:73> '<dependent type>'
| | | | |         `-UnresolvedLookupExpr 0xa30590 <col:54, col:71> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| | | | `-CXXMethodDecl 0xa30850 <line:2726:9, col:36> col:26 __test 'std::true_type (int)' static
| | | |   `-ParmVarDecl 0xa30790 <col:33> col:36 'int'
| | | `-FunctionTemplateDecl 0xa30aa0 <line:2728:7, line:2729:37> col:27 __test
| | |   |-TemplateTypeParmDecl 0xa30950 <line:2728:16> col:24 typename depth 0 index 0
| | |   `-CXXMethodDecl 0xa30a00 <line:2729:9, col:37> col:27 __test 'std::false_type (...)' static
| | `-CXXRecordDecl 0xa30b20 <line:2732:5, line:2741:5> line:2732:12 referenced struct __do_is_nothrow_swappable_impl definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xa30c38 <col:5, col:12> col:12 implicit struct __do_is_nothrow_swappable_impl
| |   |-FunctionTemplateDecl 0xa31368 <line:2734:7, line:2737:21> col:11 __test
| |   | |-TemplateTypeParmDecl 0xa30cc8 <line:2734:16, col:25> col:25 referenced typename depth 0 index 0 _Tp
| |   | `-CXXMethodDecl 0xa312c8 <line:2735:9, line:2737:21> col:11 __test '__bool_constant<noexcept(swap(std::declval<_Tp &>(), std::declval<_Tp &>()))> (int)' static
| |   |   `-ParmVarDecl 0xa31190 <col:18> col:21 'int'
| |   `-FunctionTemplateDecl 0xa31520 <line:2739:7, line:2740:37> col:27 __test
| |     |-TemplateTypeParmDecl 0xa313c8 <line:2739:16> col:24 typename depth 0 index 0
| |     `-CXXMethodDecl 0xa31480 <line:2740:9, col:37> col:27 __test 'std::false_type (...)' static
| |-ClassTemplateDecl 0xa316c0 <line:2745:3, line:2750:5> line:2746:12 __is_swappable_impl
| | |-TemplateTypeParmDecl 0xa315a0 <line:2745:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xa31630 <line:2746:5, line:2750:5> line:2746:12 struct __is_swappable_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__swappable_details::__do_is_swappable_impl':'std::__swappable_details::__do_is_swappable_impl'
| |   |-CXXRecordDecl 0xa32840 <col:5, col:12> col:12 implicit struct __is_swappable_impl
| |   `-TypedefDecl 0xa329f8 <line:2749:7, col:40> col:40 type 'decltype(__test<_Tp>(0))'
| |     `-DecltypeType 0xa329c0 'decltype(__test<_Tp>(0))' dependent
| |       `-CallExpr 0xa32998 <col:24, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xa328f8 <col:24, col:34> '<dependent type>' lvalue (no ADL) = '__test' 0xa308f0 0xa30aa0
| |         `-IntegerLiteral 0xa32978 <col:36> 'int' 0
| |-ClassTemplateDecl 0xa32b90 <line:2752:3, line:2757:5> line:2753:12 __is_nothrow_swappable_impl
| | |-TemplateTypeParmDecl 0xa32a68 <line:2752:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xa32b00 <line:2753:5, line:2757:5> line:2753:12 struct __is_nothrow_swappable_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__swappable_details::__do_is_nothrow_swappable_impl':'std::__swappable_details::__do_is_nothrow_swappable_impl'
| |   |-CXXRecordDecl 0xa32e78 <col:5, col:12> col:12 implicit struct __is_nothrow_swappable_impl
| |   `-TypedefDecl 0xa33038 <line:2756:7, col:40> col:40 type 'decltype(__test<_Tp>(0))'
| |     `-DecltypeType 0xa33000 'decltype(__test<_Tp>(0))' dependent
| |       `-CallExpr 0xa32fd0 <col:24, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xa32f30 <col:24, col:34> '<dependent type>' lvalue (no ADL) = '__test' 0xa31368 0xa31520
| |         `-IntegerLiteral 0xa32fb0 <col:36> 'int' 0
| |-ClassTemplateDecl 0xa331d0 prev 0xa293f0 <line:2759:3, line:2762:7> line:2760:12 __is_swappable
| | |-TemplateTypeParmDecl 0xa330a8 <line:2759:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xa33140 prev 0xa29360 <line:2760:5, line:2762:7> line:2760:12 struct __is_swappable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_swappable_impl<_Tp>::type'
| |   `-CXXRecordDecl 0xa33410 <col:5, col:12> col:12 implicit struct __is_swappable
| |-ClassTemplateDecl 0xa335e0 prev 0xa296f0 <line:2764:3, line:2767:7> line:2765:12 __is_nothrow_swappable
| | |-TemplateTypeParmDecl 0xa334b8 <line:2764:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xa33550 prev 0xa29660 <line:2765:5, line:2767:7> line:2765:12 struct __is_nothrow_swappable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_swappable_impl<_Tp>::type'
| |   `-CXXRecordDecl 0xa33820 <col:5, col:12> col:12 implicit struct __is_nothrow_swappable
| |-ClassTemplateDecl 0xa339f0 <line:2775:3, line:2781:5> line:2776:12 is_swappable
| | |-TemplateTypeParmDecl 0xa338c8 <line:2775:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xa33960 <line:2776:5, line:2781:5> line:2776:12 struct is_swappable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_swappable_impl<_Tp>::type'
| |   |-CXXRecordDecl 0xa33d60 <col:5, col:12> col:12 implicit struct is_swappable
| |   `-StaticAssertDecl 0xa33fd8 <line:2779:7, line:2780:68> line:2779:7
| |     |-CallExpr 0xa33f58 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xa33e10 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0xa33f30 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xa33ef0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xa33f80 <line:2780:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xa34150 <line:2784:3, line:2790:5> line:2785:12 is_nothrow_swappable
| | |-TemplateTypeParmDecl 0xa34030 <line:2784:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xa340c0 <line:2785:5, line:2790:5> line:2785:12 struct is_nothrow_swappable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_swappable_impl<_Tp>::type'
| |   |-CXXRecordDecl 0xa344c0 <col:5, col:12> col:12 implicit struct is_nothrow_swappable
| |   `-StaticAssertDecl 0xa34738 <line:2788:7, line:2789:68> line:2788:7
| |     |-CallExpr 0xa346b8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xa34570 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0xa34690 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |     |   `-InitListExpr 0xa34650 <col:73, col:74> 'void'
| |     `-StringLiteral 0xa346e0 <line:2789:2> 'const char[65]' lvalue "template argument must be a complete class or an unbounded array"
| |-VarTemplateDecl 0xa35ca8 <line:2794:3, line:2796:26> line:2795:38 is_swappable_v
| | |-TemplateTypeParmDecl 0xa35ba0 <line:2794:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-VarDecl 0xa35c40 <line:2795:23, line:2796:26> line:2795:38 is_swappable_v 'const bool' constexpr cinit
| |   `-DependentScopeDeclRefExpr 0xa35db0 <line:2796:7, col:26> '<dependent type>' lvalue
| |-VarTemplateDecl 0xa35ef8 <line:2799:3, line:2801:34> line:2800:38 is_nothrow_swappable_v
| | |-TemplateTypeParmDecl 0xa35de8 <line:2799:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-VarDecl 0xa35e90 <line:2800:23, line:2801:34> line:2800:38 is_nothrow_swappable_v 'const bool' constexpr cinit
| |   `-DependentScopeDeclRefExpr 0xa36000 <line:2801:7, col:34> '<dependent type>' lvalue
| |-NamespaceDecl 0xa36038 <line:2805:3, line:2833:3> line:2805:13 __swappable_with_details
| | |-UsingDecl 0xa360b0 <line:2806:5, col:16> col:16 std::swap
| | |-UsingShadowDecl 0xa36108 <col:16> col:16 implicit FunctionTemplate 0xa2d908 'swap'
| | |-UsingShadowDecl 0xa36158 <col:16> col:16 implicit FunctionTemplate 0xa2ff68 'swap'
| | |-CXXRecordDecl 0xa361c8 <line:2808:5, line:2818:5> line:2808:12 referenced struct __do_is_swappable_with_impl definition
| | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0xa362e8 <col:5, col:12> col:12 implicit struct __do_is_swappable_with_impl
| | | |-FunctionTemplateDecl 0xa36c40 <line:2810:7, line:2814:36> col:26 __test
| | | | |-TemplateTypeParmDecl 0xa36378 <line:2810:16, col:25> col:25 referenced typename depth 0 index 0 _Tp
| | | | |-TemplateTypeParmDecl 0xa363f8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Up
| | | | |-TemplateTypeParmDecl 0xa36708 <col:44, line:2811:73> col:16 typename depth 0 index 2
| | | | | `-TemplateArgument type 'decltype(swap(std::declval<_Tp>(), std::declval<_Up>()))'
| | | | |   `-DecltypeType 0xa366d0 'decltype(swap(std::declval<_Tp>(), std::declval<_Up>()))' dependent
| | | | |     `-CallExpr 0xa36658 <col:27, col:72> '<dependent type>'
| | | | |       |-UnresolvedLookupExpr 0xa36478 <col:27> '<overloaded function type>' lvalue (ADL) = 'swap' 0xa36158 0xa36108
| | | | |       |-CallExpr 0xa36570 <col:32, col:50> '<dependent type>'
| | | | |       | `-UnresolvedLookupExpr 0xa364f8 <col:32, col:48> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| | | | |       `-CallExpr 0xa36638 <col:53, col:71> '<dependent type>'
| | | | |         `-UnresolvedLookupExpr 0xa365c0 <col:53, col:69> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| | | | |-TemplateTypeParmDecl 0xa36a18 <line:2812:16, line:2813:73> col:16 typename depth 0 index 3
| | | | | `-TemplateArgument type 'decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))'
| | | | |   `-DecltypeType 0xa369e0 'decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))' dependent
| | | | |     `-CallExpr 0xa36968 <col:27, col:72> '<dependent type>'
| | | | |       |-UnresolvedLookupExpr 0xa36788 <col:27> '<overloaded function type>' lvalue (ADL) = 'swap' 0xa36158 0xa36108
| | | | |       |-CallExpr 0xa36880 <col:32, col:50> '<dependent type>'
| | | | |       | `-UnresolvedLookupExpr 0xa36808 <col:32, col:48> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| | | | |       `-CallExpr 0xa36948 <col:53, col:71> '<dependent type>'
| | | | |         `-UnresolvedLookupExpr 0xa368d0 <col:53, col:69> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| | | | `-CXXMethodDecl 0xa36ba0 <line:2814:9, col:36> col:26 __test 'std::true_type (int)' static
| | | |   `-ParmVarDecl 0xa36ae0 <col:33> col:36 'int'
| | | `-FunctionTemplateDecl 0xa36e78 <line:2816:7, line:2817:37> col:27 __test
| | |   |-TemplateTypeParmDecl 0xa36ca0 <line:2816:16> col:24 typename depth 0 index 0
| | |   |-TemplateTypeParmDecl 0xa36d18 <col:26> col:34 typename depth 0 index 1
| | |   `-CXXMethodDecl 0xa36dd8 <line:2817:9, col:37> col:27 __test 'std::false_type (...)' static
| | `-CXXRecordDecl 0xa36ef8 <line:2820:5, line:2831:5> line:2820:12 referenced struct __do_is_nothrow_swappable_with_impl definition
| |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-CXXRecordDecl 0xa37018 <col:5, col:12> col:12 implicit struct __do_is_nothrow_swappable_with_impl
| |   |-FunctionTemplateDecl 0xa379f8 <line:2822:7, line:2827:21> col:11 __test
| |   | |-TemplateTypeParmDecl 0xa370a8 <line:2822:16, col:25> col:25 referenced typename depth 0 index 0 _Tp
| |   | |-TemplateTypeParmDecl 0xa37128 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Up
| |   | `-CXXMethodDecl 0xa37958 <line:2823:9, line:2827:21> col:11 __test '__bool_constant<noexcept(swap(std::declval<_Tp>(), std::declval<_Up>())) && noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))> (int)' static
| |   |   `-ParmVarDecl 0xa37820 <col:18> col:21 'int'
| |   `-FunctionTemplateDecl 0xa383a0 <line:2829:7, line:2830:37> col:27 __test
| |     |-TemplateTypeParmDecl 0xa37a58 <line:2829:16> col:24 typename depth 0 index 0
| |     |-TemplateTypeParmDecl 0xa37ad8 <col:26> col:34 typename depth 0 index 1
| |     `-CXXMethodDecl 0xa38300 <line:2830:9, col:37> col:27 __test 'std::false_type (...)' static
| |-ClassTemplateDecl 0xa385c8 <line:2835:3, line:2840:5> line:2836:12 __is_swappable_with_impl
| | |-TemplateTypeParmDecl 0xa38420 <line:2835:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xa38498 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0xa38538 <line:2836:5, line:2840:5> line:2836:12 struct __is_swappable_with_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__swappable_with_details::__do_is_swappable_with_impl':'std::__swappable_with_details::__do_is_swappable_with_impl'
| |   |-CXXRecordDecl 0xa38918 <col:5, col:12> col:12 implicit struct __is_swappable_with_impl
| |   `-TypedefDecl 0xa38b08 <line:2839:7, col:45> col:45 type 'decltype(__test<_Tp, _Up>(0))'
| |     `-DecltypeType 0xa38ad0 'decltype(__test<_Tp, _Up>(0))' dependent
| |       `-CallExpr 0xa38aa0 <col:24, col:42> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xa389e0 <col:24, col:39> '<dependent type>' lvalue (no ADL) = '__test' 0xa36c40 0xa36e78
| |         `-IntegerLiteral 0xa38a80 <col:41> 'int' 0
| |-ClassTemplatePartialSpecializationDecl 0xa38d68 <line:2843:3, line:2848:5> line:2844:12 struct __is_swappable_with_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__swappable_details::__do_is_swappable_impl':'std::__swappable_details::__do_is_swappable_impl'
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0x8fb470 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0x8fb470 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xa38b78 <line:2843:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xa39040 <line:2844:5, col:12> col:12 implicit struct __is_swappable_with_impl
| | `-TypedefDecl 0xa39238 <line:2847:7, col:41> col:41 type 'decltype(__test<_Tp &>(0))'
| |   `-DecltypeType 0xa39200 'decltype(__test<_Tp &>(0))' dependent
| |     `-CallExpr 0xa39198 <col:24, col:38> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xa390f8 <col:24, col:35> '<dependent type>' lvalue (no ADL) = '__test' 0xa308f0 0xa30aa0
| |       `-IntegerLiteral 0xa39178 <col:37> 'int' 0
| |-ClassTemplateDecl 0xa39458 <line:2850:3, line:2855:5> line:2851:12 __is_nothrow_swappable_with_impl
| | |-TemplateTypeParmDecl 0xa392a8 <line:2850:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xa39328 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0xa393c8 <line:2851:5, line:2855:5> line:2851:12 struct __is_nothrow_swappable_with_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__swappable_with_details::__do_is_nothrow_swappable_with_impl':'std::__swappable_with_details::__do_is_nothrow_swappable_with_impl'
| |   |-CXXRecordDecl 0xa39788 <col:5, col:12> col:12 implicit struct __is_nothrow_swappable_with_impl
| |   `-TypedefDecl 0xa39978 <line:2854:7, col:45> col:45 type 'decltype(__test<_Tp, _Up>(0))'
| |     `-DecltypeType 0xa39940 'decltype(__test<_Tp, _Up>(0))' dependent
| |       `-CallExpr 0xa39910 <col:24, col:42> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xa39850 <col:24, col:39> '<dependent type>' lvalue (no ADL) = '__test' 0xa379f8 0xa383a0
| |         `-IntegerLiteral 0xa398f0 <col:41> 'int' 0
| |-ClassTemplatePartialSpecializationDecl 0xa39bd8 <line:2858:3, line:2863:5> line:2859:12 struct __is_nothrow_swappable_with_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '__swappable_details::__do_is_nothrow_swappable_impl':'std::__swappable_details::__do_is_nothrow_swappable_impl'
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0x8fb470 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-0 &'
| | | `-LValueReferenceType 0x8fb470 'type-parameter-0-0 &' dependent
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xa399e8 <line:2858:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xa39eb0 <line:2859:5, col:12> col:12 implicit struct __is_nothrow_swappable_with_impl
| | `-TypedefDecl 0xa3a068 <line:2862:7, col:41> col:41 type 'decltype(__test<_Tp &>(0))'
| |   `-DecltypeType 0xa3a030 'decltype(__test<_Tp &>(0))' dependent
| |     `-CallExpr 0xa3a008 <col:24, col:38> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xa39f68 <col:24, col:35> '<dependent type>' lvalue (no ADL) = '__test' 0xa31368 0xa31520
| |       `-IntegerLiteral 0xa39fe8 <col:37> 'int' 0
| |-ClassTemplateDecl 0xa3a288 <line:2867:3, line:2875:5> line:2868:12 is_swappable_with
| | |-TemplateTypeParmDecl 0xa3a0d8 <line:2867:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xa3a158 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0xa3a1f8 <line:2868:5, line:2875:5> line:2868:12 struct is_swappable_with definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_swappable_with_impl<_Tp, _Up>::type'
| |   |-CXXRecordDecl 0xa3b910 <col:5, col:12> col:12 implicit struct is_swappable_with
| |   |-StaticAssertDecl 0xa3bc08 <line:2871:7, line:2872:74> line:2871:7
| |   | |-CallExpr 0xa3bb08 <col:21, col:75> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0xa3b9c0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |   | | `-CXXUnresolvedConstructExpr 0xa3bae0 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |   | |   `-InitListExpr 0xa3baa0 <col:73, col:74> 'void'
| |   | `-StringLiteral 0xa3bba8 <line:2872:2> 'const char[71]' lvalue "first template argument must be a complete class or an unbounded array"
| |   `-StaticAssertDecl 0xa3bef8 <line:2873:7, line:2874:75> line:2873:7
| |     |-CallExpr 0xa3bdf8 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xa3bc68 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0xa3bdd0 <col:53, col:74> '__type_identity<_Up>' '__type_identity<_Up>' list
| |     |   `-InitListExpr 0xa3bd90 <col:73, col:74> 'void'
| |     `-StringLiteral 0xa3be98 <line:2874:2> 'const char[72]' lvalue "second template argument must be a complete class or an unbounded array"
| |-ClassTemplateDecl 0xa3c0f8 <line:2878:3, line:2886:5> line:2879:12 is_nothrow_swappable_with
| | |-TemplateTypeParmDecl 0xa3bf50 <line:2878:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xa3bfc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-CXXRecordDecl 0xa3c068 <line:2879:5, line:2886:5> line:2879:12 struct is_nothrow_swappable_with definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_nothrow_swappable_with_impl<_Tp, _Up>::type'
| |   |-CXXRecordDecl 0xa3c530 <col:5, col:12> col:12 implicit struct is_nothrow_swappable_with
| |   |-StaticAssertDecl 0xa3c7b0 <line:2882:7, line:2883:74> line:2882:7
| |   | |-CallExpr 0xa3c728 <col:21, col:75> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0xa3c5e0 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |   | | `-CXXUnresolvedConstructExpr 0xa3c700 <col:53, col:74> '__type_identity<_Tp>' '__type_identity<_Tp>' list
| |   | |   `-InitListExpr 0xa3c6c0 <col:73, col:74> 'void'
| |   | `-StringLiteral 0xa3c750 <line:2883:2> 'const char[71]' lvalue "first template argument must be a complete class or an unbounded array"
| |   `-StaticAssertDecl 0xa3c9e0 <line:2884:7, line:2885:75> line:2884:7
| |     |-CallExpr 0xa3c958 <col:21, col:75> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0xa3c810 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '__is_complete_or_unbounded' 0x9242d8 0x925c58
| |     | `-CXXUnresolvedConstructExpr 0xa3c930 <col:53, col:74> '__type_identity<_Up>' '__type_identity<_Up>' list
| |     |   `-InitListExpr 0xa3c8f0 <col:73, col:74> 'void'
| |     `-StringLiteral 0xa3c980 <line:2885:2> 'const char[72]' lvalue "second template argument must be a complete class or an unbounded array"
| |-VarTemplateDecl 0xa3cbd0 <line:2890:3, line:2892:36> line:2891:38 is_swappable_with_v
| | |-TemplateTypeParmDecl 0xa3ca38 <line:2890:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xa3cab8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-VarDecl 0xa3cb68 <line:2891:23, line:2892:36> line:2891:38 is_swappable_with_v 'const bool' constexpr cinit
| |   `-DependentScopeDeclRefExpr 0xa3cd10 <line:2892:7, col:36> '<dependent type>' lvalue
| |-VarTemplateDecl 0xa3cee0 <line:2895:3, line:2897:44> line:2896:38 is_nothrow_swappable_with_v
| | |-TemplateTypeParmDecl 0xa3cd48 <line:2895:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xa3cdc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Up
| | `-VarDecl 0xa3ce78 <line:2896:23, line:2897:44> line:2896:38 is_nothrow_swappable_with_v 'const bool' constexpr cinit
| |   `-DependentScopeDeclRefExpr 0xa3d020 <line:2897:7, col:44> '<dependent type>' lvalue
| |-ClassTemplateDecl 0xa3d418 <line:2907:3, line:2909:47> col:12 __is_invocable_impl
| | |-TemplateTypeParmDecl 0xa3d058 <line:2907:12, col:21> col:21 typename depth 0 index 0 _Result
| | |-TemplateTypeParmDecl 0xa3d0d8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Ret
| | |-NonTypeTemplateParmDecl 0xa3d258 <line:2908:5, col:27> col:10 'bool' depth 0 index 2
| | | `-TemplateArgument expr
| | |   `-ImplicitCastExpr 0xa3d2b8 <col:12, col:27> 'bool' <Dependent>
| | |     `-DependentScopeDeclRefExpr 0xa3d210 <col:12, col:27> '<dependent type>' lvalue
| | |-TemplateTypeParmDecl 0xa3d2e0 <col:34, col:45> col:43 typename depth 0 index 3
| | | `-TemplateArgument type 'void'
| | |   `-BuiltinType 0x826200 'void'
| | `-CXXRecordDecl 0xa3d388 <line:2909:5, col:47> col:12 struct __is_invocable_impl definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public 'std::false_type':'std::integral_constant<bool, false>'
| |   `-CXXRecordDecl 0xa3e0d0 <col:5, col:12> col:12 implicit struct __is_invocable_impl
| |-ClassTemplatePartialSpecializationDecl 0xa3e5e8 <line:2912:3, line:2917:7> line:2913:12 struct __is_invocable_impl definition
| | |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'std::true_type':'std::integral_constant<bool, true>'
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0x826200 'void'
| | |-TemplateTypeParmDecl 0xa3e178 <line:2912:12, col:21> col:21 referenced typename depth 0 index 0 _Result
| | |-TemplateTypeParmDecl 0xa3e1f8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Ret
| | `-CXXRecordDecl 0xa3e938 <line:2913:5, col:12> col:12 implicit struct __is_invocable_impl
| |-ClassTemplatePartialSpecializationDecl 0xa3ee48 <line:2922:3, line:2946:5> line:2923:12 struct __is_invocable_impl definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'type-parameter-0-0'
| | | `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateArgument type 'type-parameter-0-1'
| | | `-TemplateTypeParmType 0x9188e0 'type-parameter-0-1' dependent depth 0 index 1
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'void'
| | | `-BuiltinType 0x826200 'void'
| | |-TemplateTypeParmDecl 0xa3e9e0 <line:2922:12, col:21> col:21 referenced typename depth 0 index 0 _Result
| | |-TemplateTypeParmDecl 0xa3ea58 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Ret
| | |-CXXRecordDecl 0xa3f158 <line:2923:5, col:12> col:12 implicit struct __is_invocable_impl
| | |-AccessSpecDecl 0xa3f1e8 <line:2927:5, col:12> col:5 private
| | |-CXXMethodDecl 0xa3f308 <line:2930:7, col:44> col:37 referenced _S_get 'typename _Result::type ()' static
| | |-FunctionTemplateDecl 0xa3f5b8 <line:2932:7, line:2933:25> col:14 _S_conv
| | | |-TemplateTypeParmDecl 0xa3f3a8 <line:2932:16, col:25> col:25 referenced typename depth 1 index 0 _Tp
| | | `-CXXMethodDecl 0xa3f518 <line:2933:2, col:25> col:14 _S_conv 'void (_Tp)' static
| | |   `-ParmVarDecl 0xa3f450 <col:22> col:25 '_Tp'
| | |-FunctionTemplateDecl 0xa3f9f0 <line:2936:7, line:2938:13> col:2 _S_test
| | | |-TemplateTypeParmDecl 0xa3f618 <line:2936:16, col:25> col:25 referenced typename depth 1 index 0 _Tp
| | | |-TemplateTypeParmDecl 0xa3f808 <col:30, col:72> col:39 typename depth 1 index 1
| | | | `-TemplateArgument type 'decltype(_S_conv<_Tp>(_S_get()))'
| | | |   `-DecltypeType 0xa3f7d0 'decltype(_S_conv<_Tp>(_S_get()))' dependent
| | | |     `-CallExpr 0xa3f760 <col:50, col:71> '<dependent type>'
| | | |       |-UnresolvedLookupExpr 0xa3f6a8 <col:50, col:61> '<dependent type>' lvalue (no ADL) = '_S_conv' 0xa3f5b8
| | | |       `-CallExpr 0xa3f740 <col:63, col:70> '<dependent type>'
| | | |         `-DeclRefExpr 0xa3f720 <col:63> 'typename _Result::type ()' lvalue CXXMethod 0xa3f308 '_S_get' 'typename _Result::type ()' non_odr_use_unevaluated
| | | `-CXXMethodDecl 0xa3f950 <line:2937:2, line:2938:13> col:2 _S_test 'std::true_type (int)' static
| | |   `-ParmVarDecl 0xa3f8c0 <col:10> col:13 'int'
| | |-FunctionTemplateDecl 0xa3fba0 <line:2940:7, line:2942:13> col:2 _S_test
| | | |-TemplateTypeParmDecl 0xa3fa50 <line:2940:16, col:25> col:25 typename depth 1 index 0 _Tp
| | | `-CXXMethodDecl 0xa3fb00 <line:2941:2, line:2942:13> col:2 _S_test 'std::false_type (...)' static
| | |-AccessSpecDecl 0xa3fc08 <line:2944:5, col:11> col:5 public
| | `-TypeAliasDecl 0xa41750 <line:2945:7, col:45> col:13 type 'decltype(_S_test<_Ret>(1))'
| |   `-DecltypeType 0xa3fd60 'decltype(_S_test<_Ret>(1))' dependent
| |     `-CallExpr 0xa3fcf8 <col:29, col:44> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xa3fc58 <col:29, col:41> '<dependent type>' lvalue (no ADL) = '_S_test' 0xa3fba0 0xa3f9f0
| |       `-IntegerLiteral 0xa3fcd8 <col:43> 'int' 1
| |-ClassTemplateDecl 0xa41978 <line:2949:3, line:2952:7> line:2950:12 __is_invocable
| | |-TemplateTypeParmDecl 0xa417c8 <line:2949:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xa41848 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _ArgTypes
| | `-CXXRecordDecl 0xa418e8 <line:2950:5, line:2952:7> line:2950:12 struct __is_invocable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type'
| |   `-CXXRecordDecl 0xa429c0 <col:5, col:12> col:12 implicit struct __is_invocable
| |-FunctionTemplateDecl 0xa42d88 <line:2954:3, line:2960:5> line:2955:20 __call_is_nt
| | |-TemplateTypeParmDecl 0xa42a68 <line:2954:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xa42ae8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Tp
| | |-TemplateTypeParmDecl 0xa42b68 <col:40, col:52> col:52 referenced typename depth 0 index 2 ... _Args
| | `-FunctionDecl 0xa42ce8 <line:2955:5, line:2960:5> line:2955:20 constexpr __call_is_nt 'bool (std::__invoke_memfun_ref)'
| |   |-ParmVarDecl 0xa42c20 <col:33> col:52 'std::__invoke_memfun_ref'
| |   `-CompoundStmt 0xa43620 <line:2956:5, line:2960:5>
| |     |-DeclStmt 0xa432c0 <line:2957:7, col:51>
| |     | `-TypeAliasDecl 0xa43260 <col:7, col:47> col:13 referenced _Up 'typename __inv_unwrap<_Tp>::type'
| |     |   `-DependentNameType 0xa431f0 'typename __inv_unwrap<_Tp>::type' dependent
| |     `-ReturnStmt 0xa43610 <line:2958:7, line:2959:31>
| |       `-CXXNoexceptExpr 0xa435f0 <line:2958:14, line:2959:31> 'bool'
| |         `-CallExpr 0xa435c8 <line:2958:23, line:2959:30> '<dependent type>'
| |           |-ParenExpr 0xa434c0 <line:2958:23, col:64> '<dependent type>'
| |           | `-BinaryOperator 0xa434a0 <col:24, col:63> '<dependent type>' '.*'
| |           |   |-CallExpr 0xa433b8 <col:24, col:42> '<dependent type>'
| |           |   | `-UnresolvedLookupExpr 0xa43340 <col:24, col:40> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| |           |   `-CallExpr 0xa43480 <col:45, col:63> '<dependent type>'
| |           |     `-UnresolvedLookupExpr 0xa43408 <col:45, col:61> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| |           `-PackExpansionExpr 0xa435a8 <line:2959:6, col:27> '<dependent type>'
| |             `-CallExpr 0xa43588 <col:6, col:26> '<dependent type>'
| |               `-UnresolvedLookupExpr 0xa43510 <col:6, col:24> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| |-FunctionTemplateDecl 0xa440c8 <line:2962:3, line:2967:5> line:2963:20 __call_is_nt
| | |-TemplateTypeParmDecl 0xa43640 <line:2962:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xa436b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Tp
| | |-TemplateTypeParmDecl 0xa43eb0 <col:40, col:52> col:52 referenced typename depth 0 index 2 ... _Args
| | `-FunctionDecl 0xa44028 <line:2963:5, line:2967:5> line:2963:20 constexpr __call_is_nt 'bool (std::__invoke_memfun_deref)'
| |   |-ParmVarDecl 0xa43f60 <col:33> col:54 'std::__invoke_memfun_deref'
| |   `-CompoundStmt 0xa444f8 <line:2964:5, line:2967:5>
| |     `-ReturnStmt 0xa444e8 <line:2965:7, line:2966:31>
| |       `-CXXNoexceptExpr 0xa444c8 <line:2965:14, line:2966:31> 'bool'
| |         `-CallExpr 0xa444a0 <line:2965:23, line:2966:30> '<dependent type>'
| |           |-ParenExpr 0xa44398 <line:2965:23, col:67> '<dependent type>'
| |           | `-BinaryOperator 0xa44378 <col:24, col:66> '<dependent type>' '.*'
| |           |   |-ParenExpr 0xa44290 <col:24, col:45> '<dependent type>'
| |           |   | `-UnaryOperator 0xa44278 <col:25, col:44> '<dependent type>' prefix '*' cannot overflow
| |           |   |   `-CallExpr 0xa44258 <col:26, col:44> '<dependent type>'
| |           |   |     `-UnresolvedLookupExpr 0xa441e0 <col:26, col:42> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| |           |   `-CallExpr 0xa44358 <col:48, col:66> '<dependent type>'
| |           |     `-UnresolvedLookupExpr 0xa442e0 <col:48, col:64> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| |           `-PackExpansionExpr 0xa44480 <line:2966:6, col:27> '<dependent type>'
| |             `-CallExpr 0xa44460 <col:6, col:26> '<dependent type>'
| |               `-UnresolvedLookupExpr 0xa443e8 <col:6, col:24> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| |-FunctionTemplateDecl 0xa44798 <line:2969:3, line:2974:5> line:2970:20 __call_is_nt
| | |-TemplateTypeParmDecl 0xa44510 <line:2969:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xa44588 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Tp
| | `-FunctionDecl 0xa446f8 <line:2970:5, line:2974:5> line:2970:20 constexpr __call_is_nt 'bool (std::__invoke_memobj_ref)'
| |   |-ParmVarDecl 0xa44638 <col:33> col:52 'std::__invoke_memobj_ref'
| |   `-CompoundStmt 0xa44f00 <line:2971:5, line:2974:5>
| |     |-DeclStmt 0xa44ce0 <line:2972:7, col:51>
| |     | `-TypeAliasDecl 0xa44c80 <col:7, col:47> col:13 referenced _Up 'typename __inv_unwrap<_Tp>::type'
| |     |   `-DependentNameType 0xa44c10 'typename __inv_unwrap<_Tp>::type' dependent
| |     `-ReturnStmt 0xa44ef0 <line:2973:7, col:63>
| |       `-CXXNoexceptExpr 0xa44ed0 <col:14, col:63> 'bool'
| |         `-BinaryOperator 0xa44eb0 <col:23, col:62> '<dependent type>' '.*'
| |           |-CallExpr 0xa44dc8 <col:23, col:41> '<dependent type>'
| |           | `-UnresolvedLookupExpr 0xa44d50 <col:23, col:39> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| |           `-CallExpr 0xa44e90 <col:44, col:62> '<dependent type>'
| |             `-UnresolvedLookupExpr 0xa44e18 <col:44, col:60> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| |-FunctionTemplateDecl 0xa451a8 <line:2976:3, line:2980:5> line:2977:20 __call_is_nt
| | |-TemplateTypeParmDecl 0xa44f20 <line:2976:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xa44f98 <col:26, col:35> col:35 referenced typename depth 0 index 1 _Tp
| | `-FunctionDecl 0xa45108 <line:2977:5, line:2980:5> line:2977:20 constexpr __call_is_nt 'bool (std::__invoke_memobj_deref)'
| |   |-ParmVarDecl 0xa45048 <col:33> col:54 'std::__invoke_memobj_deref'
| |   `-CompoundStmt 0xa454a8 <line:2978:5, line:2980:5>
| |     `-ReturnStmt 0xa45498 <line:2979:7, col:66>
| |       `-CXXNoexceptExpr 0xa45478 <col:14, col:66> 'bool'
| |         `-BinaryOperator 0xa45458 <col:23, col:65> '<dependent type>' '.*'
| |           |-ParenExpr 0xa45370 <col:23, col:44> '<dependent type>'
| |           | `-UnaryOperator 0xa45358 <col:24, col:43> '<dependent type>' prefix '*' cannot overflow
| |           |   `-CallExpr 0xa45338 <col:25, col:43> '<dependent type>'
| |           |     `-UnresolvedLookupExpr 0xa452c0 <col:25, col:41> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| |           `-CallExpr 0xa45438 <col:47, col:65> '<dependent type>'
| |             `-UnresolvedLookupExpr 0xa453c0 <col:47, col:63> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| |-FunctionTemplateDecl 0xa45748 <line:2982:3, line:2986:5> line:2983:20 __call_is_nt
| | |-TemplateTypeParmDecl 0xa454c0 <line:2982:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xa45538 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-FunctionDecl 0xa456a8 <line:2983:5, line:2986:5> line:2983:20 constexpr __call_is_nt 'bool (std::__invoke_other)'
| |   |-ParmVarDecl 0xa455e8 <col:33> col:47 'std::__invoke_other'
| |   `-CompoundStmt 0xa45a38 <line:2984:5, line:2986:5>
| |     `-ReturnStmt 0xa45a28 <line:2985:7, col:68>
| |       `-CXXNoexceptExpr 0xa45a08 <col:14, col:68> 'bool'
| |         `-CallExpr 0xa459e0 <col:23, col:67> '<dependent type>'
| |           |-CallExpr 0xa458d8 <col:23, col:41> '<dependent type>'
| |           | `-UnresolvedLookupExpr 0xa45860 <col:23, col:39> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| |           `-PackExpansionExpr 0xa459c0 <col:43, col:64> '<dependent type>'
| |             `-CallExpr 0xa459a0 <col:43, col:63> '<dependent type>'
| |               `-UnresolvedLookupExpr 0xa45928 <col:43, col:61> '<dependent type>' lvalue (no ADL) = 'declval' 0xa10220
| |-ClassTemplateDecl 0xa45c80 <line:2988:3, line:2993:7> line:2989:12 __call_is_nothrow
| | |-TemplateTypeParmDecl 0xa45a50 <line:2988:12, col:21> col:21 typename depth 0 index 0 _Result
| | |-TemplateTypeParmDecl 0xa45ac8 <col:30, col:39> col:39 referenced typename depth 0 index 1 _Fn
| | |-TemplateTypeParmDecl 0xa45b48 <col:44, col:56> col:56 referenced typename depth 0 index 2 ... _Args
| | `-CXXRecordDecl 0xa45bf0 <line:2989:5, line:2993:7> line:2989:12 struct __call_is_nothrow definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__bool_constant<std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type({}))>':'integral_constant<bool, std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type({}))>'
| |   `-CXXRecordDecl 0xa470d8 <col:5, col:12> col:12 implicit struct __call_is_nothrow
| |-TypeAliasTemplateDecl 0xa475e0 <line:2995:3, line:2997:72> line:2996:5 __call_is_nothrow_
| | |-TemplateTypeParmDecl 0xa47180 <line:2995:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xa471f8 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-TypeAliasDecl 0xa47580 <line:2996:5, line:2997:72> line:2996:11 __call_is_nothrow_ '__call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>'
| |   `-TemplateSpecializationType 0xa474b0 '__call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>' dependent __call_is_nothrow
| |     |-TemplateArgument type '__invoke_result<_Fn, _Args...>'
| |     | `-TemplateSpecializationType 0xa47330 '__invoke_result<_Fn, _Args...>' dependent __invoke_result
| |     |   |-TemplateArgument type '_Fn'
| |     |   | `-TemplateTypeParmType 0xa471d0 '_Fn' dependent depth 0 index 0
| |     |   |   `-TemplateTypeParm 0xa47180 '_Fn'
| |     |   `-TemplateArgument type '_Args...'
| |     |     `-PackExpansionType 0xa472c0 '_Args...' dependent
| |     |       `-TemplateTypeParmType 0xa47250 '_Args' dependent contains_unexpanded_pack depth 0 index 1 pack
| |     |         `-TemplateTypeParm 0xa471f8 '_Args'
| |     |-TemplateArgument type '_Fn'
| |     | `-TemplateTypeParmType 0xa471d0 '_Fn' dependent depth 0 index 0
| |     |   `-TemplateTypeParm 0xa47180 '_Fn'
| |     `-TemplateArgument type '_Args...'
| |       `-PackExpansionType 0xa472c0 '_Args...' dependent
| |         `-TemplateTypeParmType 0xa47250 '_Args' dependent contains_unexpanded_pack depth 0 index 1 pack
| |           `-TemplateTypeParm 0xa471f8 '_Args'
| |-ClassTemplateDecl 0xa477e8 <line:3000:3, line:3004:7> line:3001:12 __is_nothrow_invocable
| | |-TemplateTypeParmDecl 0xa47638 <line:3000:12, col:21> col:21 referenced typename depth 0 index 0 _Fn
| | |-TemplateTypeParmDecl 0xa476b8 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... _Args
| | `-CXXRecordDecl 0xa47758 <line:3001:5, line:3004:7> line:3001:12 struct __is_nothrow_invocable definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__and_<__is_invocable<_Fn, _Args...>, __call_is_nothrow_<_Fn, _Args...>>::type'
| |   `-CXXRecordDecl 0xa48230 <col:5, col:12> col:12 implicit struct __is_nothrow_invocable
| |-CXXRecordDecl 0xa482d8 <line:3008:3, col:26> col:10 referenced struct __nonesuchbase definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment simple trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple trivial
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0xa483f8 <col:3, col:10> col:10 implicit struct __nonesuchbase
| | |-CXXConstructorDecl 0xa49508 <col:10> col:10 implicit constexpr __nonesuchbase 'void (const std::__nonesuchbase &)' inline default trivial noexcept-unevaluated 0xa49508
| | | `-ParmVarDecl 0xa49618 <col:10> col:10 'const std::__nonesuchbase &'
| | |-CXXConstructorDecl 0xa496b8 <col:10> col:10 implicit constexpr __nonesuchbase 'void (std::__nonesuchbase &&)' inline default trivial noexcept-unevaluated 0xa496b8
| | | `-ParmVarDecl 0xa497c8 <col:10> col:10 'std::__nonesuchbase &&'
| | |-CXXMethodDecl 0xa49878 <col:10> col:10 implicit constexpr operator= 'std::__nonesuchbase &(const std::__nonesuchbase &)' inline default trivial noexcept-unevaluated 0xa49878
| | | `-ParmVarDecl 0xa49988 <col:10> col:10 'const std::__nonesuchbase &'
| | `-CXXMethodDecl 0xa499f8 <col:10> col:10 implicit constexpr operator= 'std::__nonesuchbase &(std::__nonesuchbase &&)' inline default trivial noexcept-unevaluated 0xa499f8
| |   `-ParmVarDecl 0xa49b08 <col:10> col:10 'std::__nonesuchbase &&'
| `-CXXRecordDecl 0xa484a0 <line:3009:3, line:3013:3> line:3009:10 struct __nonesuch definition
|   |-DefinitionData empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor defaulted_is_constexpr
|   | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
|   | |-MoveConstructor
|   | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
|   | |-MoveAssignment
|   | `-Destructor trivial user_declared
|   |-private 'std::__nonesuchbase'
|   |-CXXRecordDecl 0xa485f8 <col:3, col:10> col:10 implicit referenced struct __nonesuch
|   |-CXXDestructorDecl 0xa48700 <line:3010:5, col:26> col:5 ~__nonesuch 'void ()' delete trivial noexcept-unevaluated 0xa48700
|   |-CXXConstructorDecl 0xa488f8 <line:3011:5, col:42> col:5 __nonesuch 'void (const std::__nonesuch &)' delete trivial
|   | `-ParmVarDecl 0xa48818 <col:16, col:32> col:33 'const std::__nonesuch &'
|   `-CXXMethodDecl 0xa48a48 <line:3012:5, col:46> col:10 operator= 'void (const std::__nonesuch &)' delete trivial
|     `-ParmVarDecl 0xa489b8 <col:20, col:36> col:37 'const std::__nonesuch &'
|-NamespaceDecl 0xa49ba8 prev 0x90b2c8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/move.h:59:1, line:229:1> line:59:11 std
| |-original Namespace 0x86b810 'std'
| |-VisibilityAttr 0xa49c18 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:70:49, col:67> Default
| |-FunctionTemplateDecl 0xa4a070 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/move.h:74:3, line:78:39> line:77:5 forward
| | |-TemplateTypeParmDecl 0xa49c70 <line:74:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xa49fd0 <line:76:5, line:78:39> line:77:5 constexpr forward '_Tp &&(typename std::remove_reference<_Tp>::type &) noexcept'
| |   |-ParmVarDecl 0xa49ea0 <col:13, col:56> col:56 referenced __t 'typename std::remove_reference<_Tp>::type &'
| |   `-CompoundStmt 0xa4a1b8 <line:78:5, col:39>
| |     `-ReturnStmt 0xa4a1a8 <col:7, col:36>
| |       `-CXXStaticCastExpr 0xa4a178 <col:14, col:36> '_Tp' xvalue static_cast<_Tp &&> <Dependent>
| |         `-DeclRefExpr 0xa4a148 <col:33> 'typename std::remove_reference<_Tp>::type' lvalue ParmVar 0xa49ea0 '__t' 'typename std::remove_reference<_Tp>::type &'
| |-FunctionTemplateDecl 0xa4a5a0 <line:86:3, line:94:5> line:89:5 forward
| | |-TemplateTypeParmDecl 0xa4a1d0 <line:86:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xa4a500 <line:88:5, line:94:5> line:89:5 constexpr forward '_Tp &&(typename std::remove_reference<_Tp>::type &&) noexcept'
| |   |-ParmVarDecl 0xa4a3d0 <col:13, col:57> col:57 referenced __t 'typename std::remove_reference<_Tp>::type &&'
| |   `-CompoundStmt 0xa4a948 <line:90:5, line:94:5>
| |     |-DeclStmt 0xa4a8c0 <line:91:7, line:92:70>
| |     | `-StaticAssertDecl 0xa4a880 <line:91:7, line:92:69> line:91:7
| |     |   |-UnaryOperator 0xa4a798 <col:21, col:53> '<dependent type>' prefix '!' cannot overflow
| |     |   | `-DependentScopeDeclRefExpr 0xa4a760 <col:22, col:53> '<dependent type>' lvalue
| |     |   `-StringLiteral 0xa4a828 <line:92:4> 'const char[64]' lvalue "std::forward must not be used to convert an rvalue to an lvalue"
| |     `-ReturnStmt 0xa4a938 <line:93:7, col:36>
| |       `-CXXStaticCastExpr 0xa4a908 <col:14, col:36> '_Tp' xvalue static_cast<_Tp &&> <Dependent>
| |         `-DeclRefExpr 0xa4a8d8 <col:33> 'typename std::remove_reference<_Tp>::type' lvalue ParmVar 0xa4a3d0 '__t' 'typename std::remove_reference<_Tp>::type &&'
| |-FunctionTemplateDecl 0xa4ad08 <line:101:3, line:105:77> line:104:5 move
| | |-TemplateTypeParmDecl 0xa4a968 <line:101:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xa4ac68 <line:103:5, line:105:77> line:104:5 constexpr move 'typename std::remove_reference<_Tp>::type &&(_Tp &&) noexcept'
| |   |-ParmVarDecl 0xa4ab28 <col:10, col:16> col:16 referenced __t '_Tp &&'
| |   `-CompoundStmt 0xa4af80 <line:105:5, col:77>
| |     `-ReturnStmt 0xa4af70 <col:7, col:74>
| |       `-CXXStaticCastExpr 0xa4af40 <col:14, col:74> 'typename std::remove_reference<_Tp>::type' xvalue static_cast<typename std::remove_reference<_Tp>::type &&> <Dependent>
| |         `-DeclRefExpr 0xa4aed0 <col:71> '_Tp' lvalue ParmVar 0xa4ab28 '__t' '_Tp &&'
| |-ClassTemplateDecl 0xa4b0c0 <line:108:3, line:111:57> line:109:12 __move_if_noexcept_cond
| | |-TemplateTypeParmDecl 0xa4af98 <line:108:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-CXXRecordDecl 0xa4b030 <line:109:5, line:111:57> line:109:12 struct __move_if_noexcept_cond definition
| |   |-DefinitionData empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   |-public '__and_<__not_<is_nothrow_move_constructible<_Tp>>, is_copy_constructible<_Tp>>::type'
| |   `-CXXRecordDecl 0xa4c580 <col:5, col:12> col:12 implicit struct __move_if_noexcept_cond
| |-FunctionTemplateDecl 0xa4ce50 <line:121:3, line:126:30> line:125:5 move_if_noexcept
| | |-TemplateTypeParmDecl 0xa4c628 <line:121:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xa4cdb0 <line:123:5, line:126:30> line:125:5 constexpr move_if_noexcept '__conditional_t<__move_if_noexcept_cond<_Tp>::value, const _Tp &, _Tp &&> (_Tp &) noexcept'
| |   |-ParmVarDecl 0xa4cc98 <col:22, col:27> col:27 referenced __x '_Tp &'
| |   `-CompoundStmt 0xa4cfe8 <line:126:5, col:30>
| |     `-ReturnStmt 0xa4cfd8 <col:7, col:27>
| |       `-CallExpr 0xa4cfb0 <col:14, col:27> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xa4cf48 <col:14, col:19> '<overloaded function type>' lvalue (no ADL) = 'move' 0xa4ad08
| |         `-DeclRefExpr 0xa4cf90 <col:24> '_Tp' lvalue ParmVar 0xa4cc98 '__x' '_Tp &'
| |-FunctionTemplateDecl 0xa4d260 <line:142:3, line:146:37> line:145:5 addressof
| | |-TemplateTypeParmDecl 0xa4d000 <line:142:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xa4d1c0 <line:144:5, line:146:37> line:145:5 addressof '_Tp *(_Tp &) noexcept' inline
| |   |-ParmVarDecl 0xa4d0c8 <col:15, col:20> col:20 referenced __r '_Tp &'
| |   `-CompoundStmt 0xa4d3f8 <line:146:5, col:37>
| |     `-ReturnStmt 0xa4d3e8 <col:7, col:34>
| |       `-CallExpr 0xa4d3c0 <col:14, col:34> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xa4d358 <col:14, col:19> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| |         `-DeclRefExpr 0xa4d3a0 <col:31> '_Tp' lvalue ParmVar 0xa4d0c8 '__r' '_Tp &'
| |-FunctionTemplateDecl 0xa4d6f8 <line:150:3, line:151:37> col:16 addressof
| | |-TemplateTypeParmDecl 0xa4d410 <line:150:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xa4d658 <line:151:5, col:37> col:16 addressof 'const _Tp *(const _Tp &&)' delete
| |   `-ParmVarDecl 0xa4d508 <col:26, col:35> col:37 'const _Tp &&'
| |-FunctionTemplateDecl 0xa4dbc8 <line:154:3, line:162:5> line:157:5 __exchange
| | |-TemplateTypeParmDecl 0xa4d7e0 <line:154:13, col:22> col:22 referenced typename depth 0 index 0 _Tp
| | |-TemplateTypeParmDecl 0xa4d868 <col:27, col:42> col:36 referenced typename depth 0 index 1 _Up
| | | `-TemplateArgument type '_Tp'
| | |   `-TemplateTypeParmType 0xa4d830 '_Tp' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0xa4d7e0 '_Tp'
| | `-FunctionDecl 0xa4db28 <line:156:5, line:162:5> line:157:5 __exchange '_Tp (_Tp &, _Up &&)' inline
| |   |-ParmVarDecl 0xa4d948 <col:16, col:21> col:21 referenced __obj '_Tp &'
| |   |-ParmVarDecl 0xa4da18 <col:28, col:34> col:34 referenced __new_val '_Up &&'
| |   `-CompoundStmt 0xa4df70 <line:158:5, line:162:5>
| |     |-DeclStmt 0xa4ddd0 <line:159:7, col:39>
| |     | `-VarDecl 0xa4dcb8 <col:7, col:38> col:11 referenced __old_val '_Tp' nrvo cinit
| |     |   `-CallExpr 0xa4dda8 <col:23, col:38> '<dependent type>'
| |     |     |-UnresolvedLookupExpr 0xa4dd40 <col:23, col:28> '<overloaded function type>' lvalue (no ADL) = 'move' 0xa4ad08
| |     |     `-DeclRefExpr 0xa4dd88 <col:33> '_Tp' lvalue ParmVar 0xa4d948 '__obj' '_Tp &'
| |     |-BinaryOperator 0xa4df18 <line:160:7, col:42> '<dependent type>' '='
| |     | |-DeclRefExpr 0xa4dde8 <col:7> '_Tp' lvalue ParmVar 0xa4d948 '__obj' '_Tp &'
| |     | `-CallExpr 0xa4def0 <col:15, col:42> '<dependent type>'
| |     |   |-UnresolvedLookupExpr 0xa4de50 <col:15, col:31> '<dependent type>' lvalue (no ADL) = 'forward' 0xa4a070 0xa4a5a0
| |     |   `-DeclRefExpr 0xa4ded0 <col:33> '_Up' lvalue ParmVar 0xa4da18 '__new_val' '_Up &&'
| |     `-ReturnStmt 0xa4df58 <line:161:7, col:14>
| |       `-DeclRefExpr 0xa4df38 <col:14> '_Tp' lvalue Var 0xa4dcb8 '__old_val' '_Tp'
| |-FunctionTemplateDecl 0xa502f8 prev 0xa2d908 <line:186:3, line:207:5> line:196:5 swap
| | |-TemplateTypeParmDecl 0xa4df98 <line:186:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xa50258 prev 0xa2d868 <line:188:5, line:207:5> line:196:5 swap 'typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>, is_move_constructible<_Tp>, is_move_assignable<_Tp>>::value>::type (_Tp &, _Tp &) noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value)' inline
| |   |-ParmVarDecl 0xa4fe68 <col:10, col:15> col:15 referenced __a '_Tp &'
| |   |-ParmVarDecl 0xa4fee0 <col:20, col:25> col:25 referenced __b '_Tp &'
| |   `-CompoundStmt 0xa50680 <line:199:5, line:207:5>
| |     |-DeclStmt 0xa50488 <line:204:7, col:37>
| |     | `-VarDecl 0xa50370 <col:7, line:167:45> line:204:11 referenced __tmp '_Tp' cinit
| |     |   `-CallExpr 0xa50460 <line:167:30, col:45> '<dependent type>'
| |     |     |-UnresolvedLookupExpr 0xa503f8 <col:30, col:35> '<overloaded function type>' lvalue (no ADL) = 'move' 0xa4ad08
| |     |     `-DeclRefExpr 0xa50440 <line:204:33> '_Tp' lvalue ParmVar 0xa4fe68 '__a' '_Tp &'
| |     |-BinaryOperator 0xa50570 <line:205:7, line:167:45> '<dependent type>' '='
| |     | |-DeclRefExpr 0xa504a0 <line:205:7> '_Tp' lvalue ParmVar 0xa4fe68 '__a' '_Tp &'
| |     | `-CallExpr 0xa50548 <line:167:30, col:45> '<dependent type>'
| |     |   |-UnresolvedLookupExpr 0xa504e0 <col:30, col:35> '<overloaded function type>' lvalue (no ADL) = 'move' 0xa4ad08
| |     |   `-DeclRefExpr 0xa50528 <line:205:27> '_Tp' lvalue ParmVar 0xa4fee0 '__b' '_Tp &'
| |     `-BinaryOperator 0xa50660 <line:206:7, line:167:45> '<dependent type>' '='
| |       |-DeclRefExpr 0xa50590 <line:206:7> '_Tp' lvalue ParmVar 0xa4fee0 '__b' '_Tp &'
| |       `-CallExpr 0xa50638 <line:167:30, col:45> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xa505d0 <col:30, col:35> '<overloaded function type>' lvalue (no ADL) = 'move' 0xa4ad08
| |         `-DeclRefExpr 0xa50618 <line:206:27> '_Tp' lvalue Var 0xa50370 '__tmp' '_Tp'
| `-FunctionTemplateDecl 0xa50e68 prev 0xa2ff68 <line:212:3, line:225:5> line:220:5 swap
|   |-TemplateTypeParmDecl 0xa506a8 <line:212:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
|   |-NonTypeTemplateParmDecl 0xa50738 <col:26, col:33> col:33 referenced 'std::size_t':'unsigned long' depth 0 index 1 _Nm
|   `-FunctionDecl 0xa50dc8 prev 0xa2fec8 <line:214:5, line:225:5> line:220:5 swap 'typename enable_if<__is_swappable<_Tp>::value>::type (_Tp (&)[_Nm], _Tp (&)[_Nm]) noexcept(__is_nothrow_swappable<_Tp>::value)' inline
|     |-ParmVarDecl 0xa50a98 <col:10, col:24> col:16 referenced __a '_Tp (&)[_Nm]'
|     |-ParmVarDecl 0xa50be8 <col:27, col:41> col:33 referenced __b '_Tp (&)[_Nm]'
|     `-CompoundStmt 0xa511c0 <line:222:5, line:225:5>
|       `-ForStmt 0xa51188 <line:223:7, line:224:25>
|         |-DeclStmt 0xa50f80 <line:223:12, col:26>
|         | `-VarDecl 0xa50ee0 <col:12, col:25> col:19 referenced __n 'std::size_t':'unsigned long' cinit
|         |   `-ImplicitCastExpr 0xa50f68 <col:25> 'std::size_t':'unsigned long' <IntegralCast>
|         |     `-IntegerLiteral 0xa50f48 <col:25> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0xa50ff0 <col:28, col:34> 'bool' '<'
|         | |-ImplicitCastExpr 0xa50fd8 <col:28> 'std::size_t':'unsigned long' <LValueToRValue>
|         | | `-DeclRefExpr 0xa50f98 <col:28> 'std::size_t':'unsigned long' lvalue Var 0xa50ee0 '__n' 'std::size_t':'unsigned long'
|         | `-DeclRefExpr 0xa50fb8 <col:34> 'std::size_t':'unsigned long' NonTypeTemplateParm 0xa50738 '_Nm' 'std::size_t':'unsigned long'
|         |-UnaryOperator 0xa51030 <col:39, col:41> 'std::size_t':'unsigned long' lvalue prefix '++'
|         | `-DeclRefExpr 0xa51010 <col:41> 'std::size_t':'unsigned long' lvalue Var 0xa50ee0 '__n' 'std::size_t':'unsigned long'
|         `-CallExpr 0xa51158 <line:224:2, col:25> '<dependent type>'
|           |-UnresolvedLookupExpr 0xa51048 <col:2> '<overloaded function type>' lvalue (ADL) = 'swap' 0xa50e68 0xa502f8
|           |-ArraySubscriptExpr 0xa510d8 <col:7, col:14> '_Tp' lvalue
|           | |-DeclRefExpr 0xa51098 <col:7> '_Tp[_Nm]':'_Tp[_Nm]' lvalue ParmVar 0xa50a98 '__a' '_Tp (&)[_Nm]'
|           | `-DeclRefExpr 0xa510b8 <col:11> 'std::size_t':'unsigned long' lvalue Var 0xa50ee0 '__n' 'std::size_t':'unsigned long'
|           `-ArraySubscriptExpr 0xa51138 <col:17, col:24> '_Tp' lvalue
|             |-DeclRefExpr 0xa510f8 <col:17> '_Tp[_Nm]':'_Tp[_Nm]' lvalue ParmVar 0xa50be8 '__b' '_Tp (&)[_Nm]'
|             `-DeclRefExpr 0xa51118 <col:21> 'std::size_t':'unsigned long' lvalue Var 0xa50ee0 '__n' 'std::size_t':'unsigned long'
|-NamespaceDecl 0xa511f8 prev 0xa49ba8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:48:1, line:1944:1> line:48:11 std
| |-original Namespace 0x86b810 'std'
| |-VisibilityAttr 0xa51268 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:70:49, col:67> Default
| |-EnumDecl 0xa512c0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:78:11, line:86:5> line:78:16 memory_order
| | |-EnumConstantDecl 0xa51380 <line:80:7> col:7 referenced memory_order_relaxed 'std::memory_order'
| | |-EnumConstantDecl 0xa513d0 <line:81:7> col:7 referenced memory_order_consume 'std::memory_order'
| | |-EnumConstantDecl 0xa51420 <line:82:7> col:7 referenced memory_order_acquire 'std::memory_order'
| | |-EnumConstantDecl 0xa51470 <line:83:7> col:7 referenced memory_order_release 'std::memory_order'
| | |-EnumConstantDecl 0xa514c0 <line:84:7> col:7 referenced memory_order_acq_rel 'std::memory_order'
| | `-EnumConstantDecl 0xa51510 <line:85:7> col:7 referenced memory_order_seq_cst 'std::memory_order'
| |-TypedefDecl 0xa515b8 <line:78:3, line:86:7> col:7 referenced memory_order 'enum memory_order':'std::memory_order'
| | `-ElaboratedType 0xa51560 'enum memory_order' sugar
| |   `-EnumType 0xa51360 'std::memory_order'
| |     `-Enum 0xa512c0 'memory_order'
| |-EnumDecl 0xa51638 <line:89:3, line:95:5> line:89:8 referenced __memory_order_modifier
| | |-EnumConstantDecl 0xa51740 <line:91:7, col:38> col:7 referenced __memory_order_mask 'std::__memory_order_modifier'
| | | `-ImplicitCastExpr 0xa51940 <col:38> 'unsigned int' <IntegralCast>
| | |   `-ConstantExpr 0xa51720 <col:38> 'int'
| | |     |-value: Int 65535
| | |     `-IntegerLiteral 0xa51700 <col:38> 'int' 65535
| | |-EnumConstantDecl 0xa517d0 <line:92:7, col:38> col:7 referenced __memory_order_modifier_mask 'std::__memory_order_modifier'
| | | `-ConstantExpr 0xa517b0 <col:38> 'unsigned int'
| | |   |-value: Int 4294901760
| | |   `-IntegerLiteral 0xa51790 <col:38> 'unsigned int' 4294901760
| | |-EnumConstantDecl 0xa51860 <line:93:7, col:38> col:7 __memory_order_hle_acquire 'std::__memory_order_modifier'
| | | `-ImplicitCastExpr 0xa51958 <col:38> 'unsigned int' <IntegralCast>
| | |   `-ConstantExpr 0xa51840 <col:38> 'int'
| | |     |-value: Int 65536
| | |     `-IntegerLiteral 0xa51820 <col:38> 'int' 65536
| | `-EnumConstantDecl 0xa518f0 <line:94:7, col:38> col:7 __memory_order_hle_release 'std::__memory_order_modifier'
| |   `-ImplicitCastExpr 0xa51970 <col:38> 'unsigned int' <IntegralCast>
| |     `-ConstantExpr 0xa518d0 <col:38> 'int'
| |       |-value: Int 131072
| |       `-IntegerLiteral 0xa518b0 <col:38> 'int' 131072
| |-FunctionDecl 0xa51b48 <line:97:3, line:101:3> line:98:3 used constexpr operator| 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | |-ParmVarDecl 0xa519c0 <col:13, col:26> col:26 used __m 'std::memory_order':'std::memory_order'
| | |-ParmVarDecl 0xa51a38 <col:31, col:55> col:55 used __mod 'std::__memory_order_modifier'
| | `-CompoundStmt 0xa51fa8 <line:99:3, line:101:3>
| |   `-ReturnStmt 0xa51f98 <line:100:5, col:46>
| |     `-CXXFunctionalCastExpr 0xa51f70 <col:12, col:46> 'std::memory_order':'std::memory_order' functional cast to std::memory_order <IntegralCast>
| |       `-BinaryOperator 0xa51f50 <col:25, col:45> 'int' '|'
| |         |-CXXFunctionalCastExpr 0xa51e98 <col:25, col:32> 'int' functional cast to int <NoOp>
| |         | `-ImplicitCastExpr 0xa51e80 <col:29> 'int' <IntegralCast> part_of_explicit_cast
| |         |   `-ImplicitCastExpr 0xa51e68 <col:29> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| |         |     `-DeclRefExpr 0xa51e48 <col:29> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa519c0 '__m' 'std::memory_order':'std::memory_order'
| |         `-CXXFunctionalCastExpr 0xa51f28 <col:36, col:45> 'int' functional cast to int <NoOp>
| |           `-ImplicitCastExpr 0xa51f10 <col:40> 'int' <IntegralCast> part_of_explicit_cast
| |             `-ImplicitCastExpr 0xa51ef8 <col:40> 'std::__memory_order_modifier' <LValueToRValue> part_of_explicit_cast
| |               `-DeclRefExpr 0xa51ed8 <col:40> 'std::__memory_order_modifier' lvalue ParmVar 0xa51a38 '__mod' 'std::__memory_order_modifier'
| |-FunctionDecl 0xa520e0 <line:103:3, line:107:3> line:104:3 used constexpr operator& 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | |-ParmVarDecl 0xa51fd0 <col:13, col:26> col:26 used __m 'std::memory_order':'std::memory_order'
| | |-ParmVarDecl 0xa52048 <col:31, col:55> col:55 used __mod 'std::__memory_order_modifier'
| | `-CompoundStmt 0xa52318 <line:105:3, line:107:3>
| |   `-ReturnStmt 0xa52308 <line:106:5, col:46>
| |     `-CXXFunctionalCastExpr 0xa522e0 <col:12, col:46> 'std::memory_order':'std::memory_order' functional cast to std::memory_order <IntegralCast>
| |       `-BinaryOperator 0xa522c0 <col:25, col:45> 'int' '&'
| |         |-CXXFunctionalCastExpr 0xa52208 <col:25, col:32> 'int' functional cast to int <NoOp>
| |         | `-ImplicitCastExpr 0xa521f0 <col:29> 'int' <IntegralCast> part_of_explicit_cast
| |         |   `-ImplicitCastExpr 0xa521d8 <col:29> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| |         |     `-DeclRefExpr 0xa521b8 <col:29> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa51fd0 '__m' 'std::memory_order':'std::memory_order'
| |         `-CXXFunctionalCastExpr 0xa52298 <col:36, col:45> 'int' functional cast to int <NoOp>
| |           `-ImplicitCastExpr 0xa52280 <col:40> 'int' <IntegralCast> part_of_explicit_cast
| |             `-ImplicitCastExpr 0xa52268 <col:40> 'std::__memory_order_modifier' <LValueToRValue> part_of_explicit_cast
| |               `-DeclRefExpr 0xa52248 <col:40> 'std::__memory_order_modifier' lvalue ParmVar 0xa52048 '__mod' 'std::__memory_order_modifier'
| |-FunctionDecl 0xa52440 <line:110:3, line:115:3> line:111:3 used constexpr __cmpexch_failure_order2 'std::memory_order (std::memory_order) noexcept'
| | |-ParmVarDecl 0xa52340 <col:28, col:41> col:41 used __m 'std::memory_order':'std::memory_order'
| | `-CompoundStmt 0xa52720 <line:112:3, line:115:3>
| |   `-ReturnStmt 0xa52710 <line:113:5, line:114:62>
| |     `-ConditionalOperator 0xa526e0 <line:113:12, line:114:62> 'std::memory_order'
| |       |-BinaryOperator 0xa52570 <line:113:12, col:19> 'bool' '=='
| |       | |-ImplicitCastExpr 0xa52540 <col:12> 'int' <IntegralCast>
| |       | | `-ImplicitCastExpr 0xa52528 <col:12> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |       | |   `-DeclRefExpr 0xa524e8 <col:12> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa52340 '__m' 'std::memory_order':'std::memory_order'
| |       | `-ImplicitCastExpr 0xa52558 <col:19> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0xa52508 <col:19> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
| |       |-DeclRefExpr 0xa52590 <col:42> 'std::memory_order' EnumConstant 0xa51420 'memory_order_acquire' 'std::memory_order'
| |       `-ConditionalOperator 0xa526b0 <line:114:9, col:62> 'std::memory_order'
| |         |-BinaryOperator 0xa52638 <col:9, col:16> 'bool' '=='
| |         | |-ImplicitCastExpr 0xa52608 <col:9> 'int' <IntegralCast>
| |         | | `-ImplicitCastExpr 0xa525f0 <col:9> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |         | |   `-DeclRefExpr 0xa525b0 <col:9> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa52340 '__m' 'std::memory_order':'std::memory_order'
| |         | `-ImplicitCastExpr 0xa52620 <col:16> 'int' <IntegralCast>
| |         |   `-DeclRefExpr 0xa525d0 <col:16> 'std::memory_order' EnumConstant 0xa51470 'memory_order_release' 'std::memory_order'
| |         |-DeclRefExpr 0xa52658 <col:39> 'std::memory_order' EnumConstant 0xa51380 'memory_order_relaxed' 'std::memory_order'
| |         `-ImplicitCastExpr 0xa52698 <col:62> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |           `-DeclRefExpr 0xa52678 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa52340 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionDecl 0xa527e0 <line:117:3, line:122:3> line:118:3 used constexpr __cmpexch_failure_order 'std::memory_order (std::memory_order) noexcept'
| | |-ParmVarDecl 0xa52748 <col:27, col:40> col:40 used __m 'std::memory_order':'std::memory_order'
| | `-CompoundStmt 0xa52c70 <line:119:3, line:122:3>
| |   `-ReturnStmt 0xa52c60 <line:120:5, line:121:68>
| |     `-CXXFunctionalCastExpr 0xa52c38 <line:120:12, line:121:68> 'std::memory_order':'std::memory_order' functional cast to std::memory_order <NoOp>
| |       `-CXXOperatorCallExpr 0xa52c00 <line:120:25, line:121:67> 'std::memory_order':'std::memory_order' '|'
| |         |-ImplicitCastExpr 0xa52be8 <col:7> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0xa52bc8 <col:7> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa51b48 'operator|' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| |         |-CallExpr 0xa52aa0 <line:120:25, col:75> 'std::memory_order':'std::memory_order'
| |         | |-ImplicitCastExpr 0xa52a88 <col:25> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| |         | | `-DeclRefExpr 0xa52a08 <col:25> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa52440 '__cmpexch_failure_order2' 'std::memory_order (std::memory_order) noexcept'
| |         | `-CXXOperatorCallExpr 0xa529d0 <col:50, col:56> 'std::memory_order':'std::memory_order' '&'
| |         |   |-ImplicitCastExpr 0xa529b8 <col:54> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| |         |   | `-DeclRefExpr 0xa52938 <col:54> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| |         |   |-ImplicitCastExpr 0xa52920 <col:50> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |         |   | `-DeclRefExpr 0xa528e0 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa52748 '__m' 'std::memory_order':'std::memory_order'
| |         |   `-DeclRefExpr 0xa52900 <col:56> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
| |         `-CXXFunctionalCastExpr 0xa52ba0 <line:121:9, col:67> 'std::__memory_order_modifier' functional cast to enum std::__memory_order_modifier <IntegralCast>
| |           `-CXXOperatorCallExpr 0xa52b68 <col:33, col:39> 'std::memory_order':'std::memory_order' '&'
| |             |-ImplicitCastExpr 0xa52b50 <col:37> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| |             | `-DeclRefExpr 0xa52b30 <col:37> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| |             |-ImplicitCastExpr 0xa52b18 <col:33> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |             | `-DeclRefExpr 0xa52ad8 <col:33> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa52748 '__m' 'std::memory_order':'std::memory_order'
| |             `-DeclRefExpr 0xa52af8 <col:39> 'std::__memory_order_modifier' EnumConstant 0xa517d0 '__memory_order_modifier_mask' 'std::__memory_order_modifier'
| |-FunctionDecl 0xa52d90 <line:124:3, line:129:3> line:125:3 used constexpr __is_valid_cmpexch_failure_order 'bool (std::memory_order) noexcept'
| | |-ParmVarDecl 0xa52c98 <col:36, col:49> col:49 used __m 'std::memory_order':'std::memory_order'
| | `-CompoundStmt 0xa53118 <line:126:3, line:129:3>
| |   `-ReturnStmt 0xa53108 <line:127:5, line:128:36>
| |     `-BinaryOperator 0xa530e8 <line:127:12, line:128:36> 'bool' '&&'
| |       |-BinaryOperator 0xa52f70 <line:127:12, col:43> 'bool' '!='
| |       | |-ImplicitCastExpr 0xa52f40 <col:12, col:38> 'int' <IntegralCast>
| |       | | `-ParenExpr 0xa52f00 <col:12, col:38> 'std::memory_order':'std::memory_order'
| |       | |   `-CXXOperatorCallExpr 0xa52ec8 <col:13, col:19> 'std::memory_order':'std::memory_order' '&'
| |       | |     |-ImplicitCastExpr 0xa52eb0 <col:17> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| |       | |     | `-DeclRefExpr 0xa52e90 <col:17> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| |       | |     |-ImplicitCastExpr 0xa52e78 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |       | |     | `-DeclRefExpr 0xa52e38 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa52c98 '__m' 'std::memory_order':'std::memory_order'
| |       | |     `-DeclRefExpr 0xa52e58 <col:19> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
| |       | `-ImplicitCastExpr 0xa52f58 <col:43> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0xa52f20 <col:43> 'std::memory_order' EnumConstant 0xa51470 'memory_order_release' 'std::memory_order'
| |       `-BinaryOperator 0xa530c8 <line:128:5, col:36> 'bool' '!='
| |         |-ImplicitCastExpr 0xa53098 <col:5, col:31> 'int' <IntegralCast>
| |         | `-ParenExpr 0xa53058 <col:5, col:31> 'std::memory_order':'std::memory_order'
| |         |   `-CXXOperatorCallExpr 0xa53020 <col:6, col:12> 'std::memory_order':'std::memory_order' '&'
| |         |     |-ImplicitCastExpr 0xa53008 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| |         |     | `-DeclRefExpr 0xa52fe8 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| |         |     |-ImplicitCastExpr 0xa52fd0 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |         |     | `-DeclRefExpr 0xa52f90 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa52c98 '__m' 'std::memory_order':'std::memory_order'
| |         |     `-DeclRefExpr 0xa52fb0 <col:12> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
| |         `-ImplicitCastExpr 0xa530b0 <col:36> 'int' <IntegralCast>
| |           `-DeclRefExpr 0xa53078 <col:36> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
| |-FunctionDecl 0xa53240 <line:45:32, line:133:38> line:132:3 atomic_thread_fence 'void (std::memory_order) noexcept' inline
| | |-ParmVarDecl 0xa53140 <col:23, col:36> col:36 used __m 'std::memory_order':'std::memory_order'
| | |-CompoundStmt 0xa536c8 <line:133:3, col:38>
| | | `-CallExpr 0xa536a0 <col:5, col:35> 'void'
| | |   |-ImplicitCastExpr 0xa53688 <col:5> 'void (*)(int) noexcept' <BuiltinFnToFnPtr>
| | |   | `-DeclRefExpr 0xa53580 <col:5> '<builtin fn type>' Function 0xa533f0 '__atomic_thread_fence' 'void (int) noexcept'
| | |   `-CXXFunctionalCastExpr 0xa53608 <col:27, col:34> 'int' functional cast to int <NoOp>
| | |     `-ImplicitCastExpr 0xa535f0 <col:31> 'int' <IntegralCast> part_of_explicit_cast
| | |       `-ImplicitCastExpr 0xa535d8 <col:31> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | |         `-DeclRefExpr 0xa535b8 <col:31> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa53140 '__m' 'std::memory_order':'std::memory_order'
| | `-AlwaysInlineAttr 0xa532e8 <line:45:54> always_inline
| |-FunctionDecl 0xa53788 <col:32, line:137:38> line:136:3 atomic_signal_fence 'void (std::memory_order) noexcept' inline
| | |-ParmVarDecl 0xa536f0 <col:23, col:36> col:36 used __m 'std::memory_order':'std::memory_order'
| | |-CompoundStmt 0xa53b58 <line:137:3, col:38>
| | | `-CallExpr 0xa53b30 <col:5, col:35> 'void'
| | |   |-ImplicitCastExpr 0xa53b18 <col:5> 'void (*)(int) noexcept' <BuiltinFnToFnPtr>
| | |   | `-DeclRefExpr 0xa53a68 <col:5> '<builtin fn type>' Function 0xa538d8 '__atomic_signal_fence' 'void (int) noexcept'
| | |   `-CXXFunctionalCastExpr 0xa53af0 <col:27, col:34> 'int' functional cast to int <NoOp>
| | |     `-ImplicitCastExpr 0xa53ad8 <col:31> 'int' <IntegralCast> part_of_explicit_cast
| | |       `-ImplicitCastExpr 0xa53ac0 <col:31> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | |         `-DeclRefExpr 0xa53aa0 <col:31> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa536f0 '__m' 'std::memory_order':'std::memory_order'
| | `-AlwaysInlineAttr 0xa53830 <line:45:54> always_inline
| |-FunctionTemplateDecl 0xa53db0 <line:140:3, line:146:5> line:142:5 kill_dependency
| | |-TemplateTypeParmDecl 0xa53b70 <line:140:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-FunctionDecl 0xa53d10 <line:141:5, line:146:5> line:142:5 kill_dependency '_Tp (_Tp) noexcept' inline
| |   |-ParmVarDecl 0xa53c10 <col:21, col:25> col:25 referenced __y '_Tp'
| |   `-CompoundStmt 0xa543f0 <line:143:5, line:146:5>
| |     |-DeclStmt 0xa543a0 <line:144:7, col:21>
| |     | `-VarDecl 0xa542d8 <col:7, col:20> col:11 referenced __ret '_Tp' nrvo callinit
| |     |   `-ParenListExpr 0xa54380 <col:16, col:20> 'NULL TYPE'
| |     |     `-DeclRefExpr 0xa54340 <col:17> '_Tp' lvalue ParmVar 0xa53c10 '__y' '_Tp'
| |     `-ReturnStmt 0xa543d8 <line:145:7, col:14>
| |       `-DeclRefExpr 0xa543b8 <col:14> '_Tp' lvalue Var 0xa542d8 '__ret' '_Tp'
| |-ClassTemplateDecl 0xa54530 <line:149:3, line:150:12> col:12 __atomic_base
| | |-TemplateTypeParmDecl 0xa54410 <line:149:12, col:21> col:21 typename depth 0 index 0 _IntTp
| | |-CXXRecordDecl 0xa544a0 <line:150:5, col:12> col:12 struct __atomic_base
| | |-ClassTemplateSpecializationDecl 0xa916b0 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'bool'
| | | | `-BuiltinType 0x826220 'bool'
| | | |-CXXRecordDecl 0xa918c8 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xa91998 <line:326:7, col:26> col:13 value_type 'bool':'bool'
| | | | `-SubstTemplateTypeParmType 0xa91960 'bool' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826220 'bool'
| | | |-TypeAliasDecl 0xa91a30 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<bool>::value_type':'bool'
| | | | `-TypedefType 0xa91a00 'std::__atomic_base<bool>::value_type' sugar
| | | |   |-TypeAlias 0xa91998 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xa91960 'bool' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x826220 'bool'
| | | |-AccessSpecDecl 0xa91a90 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xa91ac8 <line:330:7, col:21> col:21 __int_type 'bool':'bool'
| | | | `-SubstTemplateTypeParmType 0xa91960 'bool' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826220 'bool'
| | | |-VarDecl 0xa91b20 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 1
| | | | `-ImplicitCastExpr 0xa91ca8 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xa91c78 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xa91bf8 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xa91ba8 <col:2, col:13> 'unsigned long' sizeof 'bool':'bool'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xa91bd8 <col:17, col:29> 'unsigned long' alignof 'bool':'bool'
| | | |     |-UnaryExprOrTypeTraitExpr 0xa91c28 <col:33, col:44> 'unsigned long' sizeof 'bool':'bool'
| | | |     `-UnaryExprOrTypeTraitExpr 0xa91c58 <col:48, col:60> 'unsigned long' alignof 'bool':'bool'
| | | |-FieldDecl 0xa91d50 <line:335:29, col:40> col:40 referenced _M_i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-AlignedAttr 0xa91e18 <col:7> alignas
| | | |   `-ConstantExpr 0xa91df8 <col:15> 'int'
| | | |     |-value: Int 1
| | | |     `-ImplicitCastExpr 0xa91de0 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xa91dc0 <col:15> 'const int' lvalue Var 0xa91b20 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xa91e78 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xa91ed8 <line:338:7, col:40> col:7 used __atomic_base 'void () noexcept' default trivial
| | | | `-CompoundStmt 0xb5cd78 <col:40>
| | | |-CXXDestructorDecl 0xa91fb8 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xa92198 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<bool> &)' delete trivial
| | | | `-ParmVarDecl 0xa920b8 <col:21, col:40> col:41 'const std::__atomic_base<bool> &'
| | | |-CXXMethodDecl 0xa92368 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<bool> &(const std::__atomic_base<bool> &)' delete trivial
| | | | `-ParmVarDecl 0xa922a8 <col:32, col:51> col:52 'const std::__atomic_base<bool> &'
| | | |-CXXMethodDecl 0xa924f8 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<bool> &(const std::__atomic_base<bool> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xa92430 <col:32, col:51> col:52 'const std::__atomic_base<bool> &'
| | | |-CXXConstructorDecl 0xa926c0 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<bool>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xa925d0 <col:31, col:42> col:42 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-CXXCtorInitializer Field 0xa91d50 '_M_i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | | `-ImplicitCastExpr 0xa9bd00 <col:64> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xa9bcc0 <col:64> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa925d0 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xa927f0 <line:347:7, line:348:24> line:347:7 operator bool 'std::__atomic_base<bool>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xa92910 <line:350:7, line:351:24> line:350:7 operator bool 'std::__atomic_base<bool>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xa92af0 <line:353:7, line:358:7> line:354:7 used operator= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xa92a20 <col:17, col:28> col:28 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-CompoundStmt 0xb5d350 <line:355:7, line:358:7>
| | | |   |-CXXMemberCallExpr 0xb5d2a0 <line:356:2, col:11> 'void'
| | | |   | |-MemberExpr 0xb5d270 <col:2> '<bound member function type>' ->store 0xa948e0
| | | |   | | `-CXXThisExpr 0xb5d260 <col:2> 'std::__atomic_base<bool> *' implicit this
| | | |   | |-ImplicitCastExpr 0xb5d2d0 <col:8> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0xb5d240 <col:8> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa92a20 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | |   | `-CXXDefaultArgExpr 0xb5d2e8 <<invalid sloc>> 'std::memory_order'
| | | |   `-ReturnStmt 0xb5d340 <line:357:2, col:9>
| | | |     `-ImplicitCastExpr 0xb5d328 <col:9> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | |       `-DeclRefExpr 0xb5d308 <col:9> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa92a20 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xa92cc0 <line:360:7, line:365:7> line:361:7 used operator= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xa92bc8 <col:17, col:28> col:28 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-CompoundStmt 0xb5d500 <line:362:7, line:365:7>
| | | |   |-CXXMemberCallExpr 0xb5d450 <line:363:2, col:11> 'void'
| | | |   | |-MemberExpr 0xb5d420 <col:2> '<bound member function type>' ->store 0xa94bc0
| | | |   | | `-CXXThisExpr 0xb5d410 <col:2> 'volatile std::__atomic_base<bool> *' implicit this
| | | |   | |-ImplicitCastExpr 0xb5d480 <col:8> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0xb5d3f0 <col:8> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa92bc8 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | |   | `-CXXDefaultArgExpr 0xb5d498 <<invalid sloc>> 'std::memory_order'
| | | |   `-ReturnStmt 0xb5d4f0 <line:364:2, col:9>
| | | |     `-ImplicitCastExpr 0xb5d4d8 <col:9> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | |       `-DeclRefExpr 0xb5d4b8 <col:9> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa92bc8 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xa92e80 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<bool>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xa92d88 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xa93030 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<bool>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xa92f38 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xa93190 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<bool>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xa930f8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xa932e0 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<bool>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xa93248 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xa93400 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<bool>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xa93540 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<bool>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xa93628 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<bool>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xa93710 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<bool>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xa93878 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xa937e0 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xa939d8 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xa93940 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xa93b48 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xa93ab0 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xa93ca8 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xa93c10 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xa93e18 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xa93d80 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xa93f78 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xa93ee0 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xa940e8 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xa94050 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xa94248 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xa941b0 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xa943b8 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xa94320 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xa94518 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xa94480 <col:18, col:29> col:29 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | |-CXXMethodDecl 0xa945e0 <line:439:7, line:445:7> line:440:7 used is_lock_free 'bool () const noexcept'
| | | | `-CompoundStmt 0xb5e548 <line:441:7, line:445:7>
| | | |   `-ReturnStmt 0xb5e538 <line:443:2, line:444:45>
| | | |     `-CallExpr 0xb5e4f0 <line:443:9, line:444:45> 'bool'
| | | |       |-ImplicitCastExpr 0xb5e4d8 <line:443:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
| | | |       | `-DeclRefExpr 0xa7a638 <col:9> '<builtin fn type>' Function 0xa7a438 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
| | | |       |-UnaryExprOrTypeTraitExpr 0xb5e418 <col:31, col:42> 'unsigned long' sizeof
| | | |       | `-ParenExpr 0xb5e3f8 <col:37, col:42> 'const std::__atomic_base<bool>::__int_type':'const bool' lvalue
| | | |       |   `-MemberExpr 0xb5e3c8 <col:38> 'const std::__atomic_base<bool>::__int_type':'const bool' lvalue ->_M_i 0xa91d50 non_odr_use_unevaluated
| | | |       |     `-CXXThisExpr 0xb5e3b8 <col:38> 'const std::__atomic_base<bool> *' implicit this
| | | |       `-ImplicitCastExpr 0xb5e520 <line:444:6, col:44> 'const volatile void *' <NoOp>
| | | |         `-CXXReinterpretCastExpr 0xb5e4a8 <col:6, col:44> 'void *' reinterpret_cast<void *> <IntegralToPointer>
| | | |           `-UnaryOperator 0xb5e490 <col:31, col:32> 'int' prefix '-'
| | | |             `-ImplicitCastExpr 0xb5e478 <col:32> 'int' <LValueToRValue>
| | | |               `-DeclRefExpr 0xb5e458 <col:32> 'const int' lvalue Var 0xa91b20 '_S_alignment' 'const int' non_odr_use_constant
| | | |-CXXMethodDecl 0xa94690 <line:447:7, line:453:7> line:448:7 used is_lock_free 'bool () const volatile noexcept'
| | | | `-CompoundStmt 0xb5e6f0 <line:449:7, line:453:7>
| | | |   `-ReturnStmt 0xb5e6e0 <line:451:2, line:452:45>
| | | |     `-CallExpr 0xb5e698 <line:451:9, line:452:45> 'bool'
| | | |       |-ImplicitCastExpr 0xb5e680 <line:451:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
| | | |       | `-DeclRefExpr 0xa7a8a0 <col:9> '<builtin fn type>' Function 0xa7a438 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
| | | |       |-UnaryExprOrTypeTraitExpr 0xb5e5c0 <col:31, col:42> 'unsigned long' sizeof
| | | |       | `-ParenExpr 0xb5e5a0 <col:37, col:42> 'const volatile std::__atomic_base<bool>::__int_type':'const volatile bool' lvalue
| | | |       |   `-MemberExpr 0xb5e570 <col:38> 'const volatile std::__atomic_base<bool>::__int_type':'const volatile bool' lvalue ->_M_i 0xa91d50 non_odr_use_unevaluated
| | | |       |     `-CXXThisExpr 0xb5e560 <col:38> 'const volatile std::__atomic_base<bool> *' implicit this
| | | |       `-ImplicitCastExpr 0xb5e6c8 <line:452:6, col:44> 'const volatile void *' <NoOp>
| | | |         `-CXXReinterpretCastExpr 0xb5e650 <col:6, col:44> 'void *' reinterpret_cast<void *> <IntegralToPointer>
| | | |           `-UnaryOperator 0xb5e638 <col:31, col:32> 'int' prefix '-'
| | | |             `-ImplicitCastExpr 0xb5e620 <col:32> 'int' <LValueToRValue>
| | | |               `-DeclRefExpr 0xb5e600 <col:32> 'const int' lvalue Var 0xa91b20 '_S_alignment' 'const int' non_odr_use_constant
| | | |-CXXMethodDecl 0xa948e0 <line:45:32, line:465:7> line:456:7 used store 'void (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa94760 <col:13, col:24> col:24 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa947c8 <col:29, col:48> col:42 used __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75410 <col:48> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xb5efb8 <line:457:7, line:465:7>
| | | | | |-DeclStmt 0xb5e870 <line:458:2, line:459:31>
| | | | | | `-VarDecl 0xb5e708 <line:458:2, line:459:12> line:458:15 used __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xb5e838 <line:459:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xb5e820 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xb5e800 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xb5e7e8 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xb5e7c8 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa947c8 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xa7ab98 <col:12> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xb5e770 <line:458:35> unused
| | | | | |-DoStmt 0xb5ea18 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xb5ea00 <col:6, col:42>
| | | | | | | `-IfStmt 0xb5e9e0 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb5e988 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb5e8a0 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb5e888 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7aca8 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb5e970 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb5e948 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xb5e928 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:460:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xb5e8f8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xb5e8e0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xb5e8c0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xb5e708 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xb5e910 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7ad40 <col:26> 'std::memory_order' EnumConstant 0xa51420 'memory_order_acquire' 'std::memory_order'
| | | | | | |   `-CallExpr 0xb5e9c0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb5e9a8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7ae28 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7aeb8 <line:591:51> 'bool' false
| | | | | |-DoStmt 0xb5ebc8 <col:3, col:56>
| | | | | | |-CompoundStmt 0xb5ebb0 <col:6, col:42>
| | | | | | | `-IfStmt 0xb5eb90 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb5eb38 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb5ea50 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb5ea38 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7af38 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb5eb20 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb5eaf8 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xb5ead8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:461:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xb5eaa8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xb5ea90 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xb5ea70 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xb5e708 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xb5eac0 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7afd0 <col:26> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xb5eb70 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb5eb58 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7b0b8 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7b148 <line:591:51> 'bool' false
| | | | | |-DoStmt 0xb5ed78 <col:3, col:56>
| | | | | | |-CompoundStmt 0xb5ed60 <col:6, col:42>
| | | | | | | `-IfStmt 0xb5ed40 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb5ece8 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb5ec00 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb5ebe8 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7b1c8 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb5ecd0 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb5eca8 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xb5ec88 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:462:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xb5ec58 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xb5ec40 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xb5ec20 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xb5e708 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xb5ec70 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7b260 <col:26> 'std::memory_order' EnumConstant 0xa513d0 'memory_order_consume' 'std::memory_order'
| | | | | | |   `-CallExpr 0xb5ed20 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb5ed08 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7b348 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7b3d8 <line:591:51> 'bool' false
| | | | | `-AtomicExpr 0xb5ef60 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:464:2, col:39> 'void'
| | | | |   |-UnaryOperator 0xb5ee48 <col:19, col:20> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |   | `-MemberExpr 0xb5edf0 <col:20> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ->_M_i 0xa91d50
| | | | |   |   `-CXXThisExpr 0xb5ede0 <col:20> 'std::__atomic_base<bool> *' implicit this
| | | | |   |-CXXFunctionalCastExpr 0xb5eed0 <col:31, col:38> 'int' functional cast to int <NoOp>
| | | | |   | `-ImplicitCastExpr 0xb5eeb8 <col:35> 'int' <IntegralCast> part_of_explicit_cast
| | | | |   |   `-ImplicitCastExpr 0xb5eea0 <col:35> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |   |     `-DeclRefExpr 0xb5ee80 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa947c8 '__m' 'std::memory_order':'std::memory_order'
| | | | |   `-ImplicitCastExpr 0xb5ef48 <col:26> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     `-DeclRefExpr 0xb5ee60 <col:26> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa94760 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-AlwaysInlineAttr 0xa949c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa94bc0 <col:32, line:478:7> line:468:7 used store 'void (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa94a40 <col:13, col:24> col:24 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa94aa8 <line:469:6, col:25> col:19 used __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75430 <col:25> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xb5f8a8 <line:470:7, line:478:7>
| | | | | |-DeclStmt 0xb5f158 <line:471:2, line:472:31>
| | | | | | `-VarDecl 0xb5eff0 <line:471:2, line:472:12> line:471:15 used __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xb5f120 <line:472:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xb5f108 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xb5f0e8 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xb5f0d0 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xb5f0b0 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa94aa8 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xa7ba70 <col:12> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xb5f058 <line:471:35> unused
| | | | | |-DoStmt 0xb5f300 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xb5f2e8 <col:6, col:42>
| | | | | | | `-IfStmt 0xb5f2c8 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb5f270 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb5f188 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb5f170 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7bb80 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb5f258 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb5f230 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xb5f210 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:473:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xb5f1e0 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xb5f1c8 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xb5f1a8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xb5eff0 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xb5f1f8 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7bc18 <col:26> 'std::memory_order' EnumConstant 0xa51420 'memory_order_acquire' 'std::memory_order'
| | | | | | |   `-CallExpr 0xb5f2a8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb5f290 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7bd00 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7bd90 <line:591:51> 'bool' false
| | | | | |-DoStmt 0xb5f4b0 <col:3, col:56>
| | | | | | |-CompoundStmt 0xb5f498 <col:6, col:42>
| | | | | | | `-IfStmt 0xb5f478 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb5f420 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb5f338 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb5f320 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7be10 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb5f408 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb5f3e0 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xb5f3c0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:474:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xb5f390 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xb5f378 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xb5f358 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xb5eff0 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xb5f3a8 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7bea8 <col:26> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xb5f458 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb5f440 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7bf90 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7c020 <line:591:51> 'bool' false
| | | | | |-DoStmt 0xb5f660 <col:3, col:56>
| | | | | | |-CompoundStmt 0xb5f648 <col:6, col:42>
| | | | | | | `-IfStmt 0xb5f628 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb5f5d0 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb5f4e8 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb5f4d0 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7c0a0 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb5f5b8 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb5f590 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xb5f570 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:475:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xb5f540 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xb5f528 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xb5f508 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xb5eff0 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xb5f558 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7c138 <col:26> 'std::memory_order' EnumConstant 0xa513d0 'memory_order_consume' 'std::memory_order'
| | | | | | |   `-CallExpr 0xb5f608 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb5f5f0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7c220 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7c2b0 <line:591:51> 'bool' false
| | | | | `-AtomicExpr 0xb5f850 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:477:2, col:39> 'void'
| | | | |   |-UnaryOperator 0xb5f738 <col:19, col:20> 'volatile std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |   | `-MemberExpr 0xb5f6d8 <col:20> 'volatile std::__atomic_base<bool>::__int_type':'volatile bool' lvalue ->_M_i 0xa91d50
| | | | |   |   `-CXXThisExpr 0xb5f6c8 <col:20> 'volatile std::__atomic_base<bool> *' implicit this
| | | | |   |-CXXFunctionalCastExpr 0xb5f7c0 <col:31, col:38> 'int' functional cast to int <NoOp>
| | | | |   | `-ImplicitCastExpr 0xb5f7a8 <col:35> 'int' <IntegralCast> part_of_explicit_cast
| | | | |   |   `-ImplicitCastExpr 0xb5f790 <col:35> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |   |     `-DeclRefExpr 0xb5f770 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa94aa8 '__m' 'std::memory_order':'std::memory_order'
| | | | |   `-ImplicitCastExpr 0xb5f838 <col:26> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     `-DeclRefExpr 0xb5f750 <col:26> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa94a40 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-AlwaysInlineAttr 0xa94c80 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa94de0 <col:32, line:489:7> line:481:7 used load 'std::__atomic_base<bool>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xa94ce8 <col:12, col:31> col:25 used __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75450 <col:31> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xb5dc58 <line:482:7, line:489:7>
| | | | | |-DeclStmt 0xb5d688 <line:483:2, line:484:31>
| | | | | | `-VarDecl 0xb5d520 <line:483:2, line:484:12> line:483:15 used __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xb5d650 <line:484:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xb5d638 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xb5d618 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xb5d600 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xb5d5e0 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa94ce8 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xa7c5c8 <col:12> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xb5d588 <line:483:35> unused
| | | | | |-DoStmt 0xb5d830 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xb5d818 <col:6, col:42>
| | | | | | | `-IfStmt 0xb5d7f8 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb5d7a0 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb5d6b8 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb5d6a0 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7c6d8 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb5d788 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb5d760 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xb5d740 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:485:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xb5d710 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xb5d6f8 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xb5d6d8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xb5d520 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xb5d728 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7c770 <col:26> 'std::memory_order' EnumConstant 0xa51470 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xb5d7d8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb5d7c0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7c858 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7c8e8 <line:591:51> 'bool' false
| | | | | |-DoStmt 0xb5d9e0 <col:3, col:56>
| | | | | | |-CompoundStmt 0xb5d9c8 <col:6, col:42>
| | | | | | | `-IfStmt 0xb5d9a8 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb5d950 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb5d868 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb5d850 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7c968 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb5d938 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb5d910 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xb5d8f0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:486:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xb5d8c0 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xb5d8a8 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xb5d888 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xb5d520 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xb5d8d8 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7ca00 <col:26> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xb5d988 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb5d970 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7cae8 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7cb78 <line:591:51> 'bool' false
| | | | | `-ReturnStmt 0xb5dc48 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:488:2, col:40>
| | | | |   `-AtomicExpr 0xb5dbf0 <col:9, col:40> 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-UnaryOperator 0xb5dae8 <col:25, col:26> 'const std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xb5da58 <col:26> 'const std::__atomic_base<bool>::__int_type':'const bool' lvalue ->_M_i 0xa91d50
| | | | |     |   `-CXXThisExpr 0xb5da48 <col:26> 'const std::__atomic_base<bool> *' implicit this
| | | | |     `-CXXFunctionalCastExpr 0xb5db50 <col:32, col:39> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xb5db38 <col:36> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xb5db20 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xb5db00 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa94ce8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa94e98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa94ff0 <col:32, line:500:7> line:492:7 used load 'std::__atomic_base<bool>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xa94ef0 <col:12, col:31> col:25 used __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75470 <col:31> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xb5e388 <line:493:7, line:500:7>
| | | | | |-DeclStmt 0xb5ddf0 <line:494:2, line:495:31>
| | | | | | `-VarDecl 0xb5dc88 <line:494:2, line:495:12> line:494:15 used __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xb5ddb8 <line:495:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xb5dda0 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xb5dd80 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xb5dd68 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xb5dd48 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa94ef0 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xa7cfb8 <col:12> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xb5dcf0 <line:494:35> unused
| | | | | |-DoStmt 0xb5df98 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xb5df80 <col:6, col:42>
| | | | | | | `-IfStmt 0xb5df60 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb5df08 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb5de20 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb5de08 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7d0c8 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb5def0 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb5dec8 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xb5dea8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:496:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xb5de78 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xb5de60 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xb5de40 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xb5dc88 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xb5de90 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7d160 <col:26> 'std::memory_order' EnumConstant 0xa51470 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xb5df40 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb5df28 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7d248 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7d2d8 <line:591:51> 'bool' false
| | | | | |-DoStmt 0xb5e148 <col:3, col:56>
| | | | | | |-CompoundStmt 0xb5e130 <col:6, col:42>
| | | | | | | `-IfStmt 0xb5e110 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb5e0b8 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb5dfd0 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb5dfb8 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7d358 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb5e0a0 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb5e078 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xb5e058 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:497:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xb5e028 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xb5e010 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xb5dff0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xb5dc88 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xb5e040 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7d3f0 <col:26> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xb5e0f0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb5e0d8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7d4d8 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7d568 <line:591:51> 'bool' false
| | | | | `-ReturnStmt 0xb5e378 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:499:2, col:40>
| | | | |   `-AtomicExpr 0xb5e320 <col:9, col:40> 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-UnaryOperator 0xb5e248 <col:25, col:26> 'const volatile std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xb5e1c0 <col:26> 'const volatile std::__atomic_base<bool>::__int_type':'const volatile bool' lvalue ->_M_i 0xa91d50
| | | | |     |   `-CXXThisExpr 0xb5e1b0 <col:26> 'const volatile std::__atomic_base<bool> *' implicit this
| | | | |     `-CXXFunctionalCastExpr 0xb5e2b0 <col:32, col:39> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xb5e298 <col:36> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xb5e280 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xb5e260 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa94ef0 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa950a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa952a0 <col:32, line:507:7> line:503:7 used exchange 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa95120 <col:16, col:27> col:27 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa95188 <line:504:9, col:28> col:22 used __m 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xb605f8 <line:505:7, line:507:7>
| | | | | `-ReturnStmt 0xb605e8 <line:506:2, col:49>
| | | | |   `-AtomicExpr 0xb60590 <col:9, col:49> 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-UnaryOperator 0xb60478 <col:29, col:30> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xb60448 <col:30> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ->_M_i 0xa91d50
| | | | |     |   `-CXXThisExpr 0xb60438 <col:30> 'std::__atomic_base<bool> *' implicit this
| | | | |     |-CXXFunctionalCastExpr 0xb60500 <col:41, col:48> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xb604e8 <col:45> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xb604d0 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xb604b0 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa95188 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-ImplicitCastExpr 0xb60578 <col:36> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |       `-DeclRefExpr 0xb60490 <col:36> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa95120 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-AlwaysInlineAttr 0xa95360 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa95550 <col:32, line:515:7> line:511:7 used exchange 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa953c8 <col:16, col:27> col:27 used __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa95430 <line:512:9, col:28> col:22 used __m 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xb60818 <line:513:7, line:515:7>
| | | | | `-ReturnStmt 0xb60808 <line:514:2, col:49>
| | | | |   `-AtomicExpr 0xb607b0 <col:9, col:49> 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-UnaryOperator 0xb60698 <col:29, col:30> 'volatile std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xb60668 <col:30> 'volatile std::__atomic_base<bool>::__int_type':'volatile bool' lvalue ->_M_i 0xa91d50
| | | | |     |   `-CXXThisExpr 0xb60658 <col:30> 'volatile std::__atomic_base<bool> *' implicit this
| | | | |     |-CXXFunctionalCastExpr 0xb60720 <col:41, col:48> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xb60708 <col:45> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xb606f0 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xb606d0 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa95430 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-ImplicitCastExpr 0xb60798 <col:36> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |       `-DeclRefExpr 0xb606b0 <col:36> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa953c8 '__i' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | `-AlwaysInlineAttr 0xa95610 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa95980 <col:32, line:525:7> line:518:7 used compare_exchange_weak 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa956e8 <col:29, col:41> col:41 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xa95760 <col:47, col:58> col:58 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa957c8 <line:519:8, col:21> col:21 used __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xa95830 <col:27, col:40> col:40 used __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xb60d00 <line:520:7, line:525:7>
| | | | | |-DoStmt 0xb609b0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xb60998 <col:6, col:42>
| | | | | | | `-IfStmt 0xb60978 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb60920 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb60848 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb60830 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7e0f0 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb60908 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb608e0 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-CallExpr 0xb608a0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:521:19, col:56> 'bool'
| | | | | | |   |       |-ImplicitCastExpr 0xb60888 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | | | |   |       | `-DeclRefExpr 0xa7e1d0 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
| | | | | | |   |       `-ImplicitCastExpr 0xb608c8 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |         `-DeclRefExpr 0xb60868 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa95830 '__m2' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xb60958 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb60940 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7e300 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7e390 <line:591:51> 'bool' false
| | | | | `-ReturnStmt 0xb60cf0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:523:2, line:524:29>
| | | | |   `-AtomicExpr 0xb60c98 <line:523:9, line:524:29> 'bool'
| | | | |     |-UnaryOperator 0xb60a58 <line:523:37, col:38> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xb60a28 <col:38> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ->_M_i 0xa91d50
| | | | |     |   `-CXXThisExpr 0xb60a18 <col:38> 'std::__atomic_base<bool> *' implicit this
| | | | |     |-CXXFunctionalCastExpr 0xb60b60 <line:524:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xb60b48 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xb60b30 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xb60b10 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa957c8 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     |-UnaryOperator 0xb60ad8 <line:523:44, col:45> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-DeclRefExpr 0xb60ab8 <col:45> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa956e8 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-CXXFunctionalCastExpr 0xb60bd8 <line:524:20, col:28> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xb60bc0 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xb60ba8 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xb60b88 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa95830 '__m2' 'std::memory_order':'std::memory_order'
| | | | |     |-ImplicitCastExpr 0xb60c68 <line:523:51> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xb60af0 <col:51> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa95760 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     `-ImplicitCastExpr 0xb60c80 <col:57> 'bool' <IntegralToBoolean>
| | | | |       `-IntegerLiteral 0xa7e698 <col:57> 'int' 1
| | | | `-AlwaysInlineAttr 0xa95a50 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa95d50 <col:32, line:536:7> line:528:7 used compare_exchange_weak 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa95ab8 <col:29, col:41> col:41 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xa95b30 <col:47, col:58> col:58 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa95b98 <line:529:8, col:21> col:21 used __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xa95c00 <line:530:8, col:21> col:21 used __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xb611f0 <line:531:7, line:536:7>
| | | | | |-DoStmt 0xb60ea0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xb60e88 <col:6, col:42>
| | | | | | | `-IfStmt 0xb60e68 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb60e10 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb60d38 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb60d20 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7e8a8 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb60df8 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb60dd0 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-CallExpr 0xb60d90 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:532:19, col:56> 'bool'
| | | | | | |   |       |-ImplicitCastExpr 0xb60d78 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | | | |   |       | `-DeclRefExpr 0xa7e988 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
| | | | | | |   |       `-ImplicitCastExpr 0xb60db8 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |         `-DeclRefExpr 0xb60d58 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa95c00 '__m2' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xb60e48 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb60e30 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7ea60 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7eaf0 <line:591:51> 'bool' false
| | | | | `-ReturnStmt 0xb611e0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:534:2, line:535:29>
| | | | |   `-AtomicExpr 0xb61188 <line:534:9, line:535:29> 'bool'
| | | | |     |-UnaryOperator 0xb60f48 <line:534:37, col:38> 'volatile std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xb60f18 <col:38> 'volatile std::__atomic_base<bool>::__int_type':'volatile bool' lvalue ->_M_i 0xa91d50
| | | | |     |   `-CXXThisExpr 0xb60f08 <col:38> 'volatile std::__atomic_base<bool> *' implicit this
| | | | |     |-CXXFunctionalCastExpr 0xb61050 <line:535:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xb61038 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xb61020 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xb61000 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa95b98 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     |-UnaryOperator 0xb60fc8 <line:534:44, col:45> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-DeclRefExpr 0xb60fa8 <col:45> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa95ab8 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-CXXFunctionalCastExpr 0xb610c8 <line:535:20, col:28> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xb610b0 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xb61098 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xb61078 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa95c00 '__m2' 'std::memory_order':'std::memory_order'
| | | | |     |-ImplicitCastExpr 0xb61158 <line:534:51> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xb60fe0 <col:51> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa95b30 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     `-ImplicitCastExpr 0xb61170 <col:57> 'bool' <IntegralToBoolean>
| | | | |       `-IntegerLiteral 0xa7ecb0 <col:57> 'int' 1
| | | | `-AlwaysInlineAttr 0xa95e20 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa960a0 <col:32, line:544:7> line:539:7 used compare_exchange_weak 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa95e98 <col:29, col:41> col:41 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xa95f10 <col:47, col:58> col:58 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa95f78 <line:540:8, col:27> col:21 used __m 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xb61438 <line:541:7, line:544:7>
| | | | | `-ReturnStmt 0xb61428 <line:542:2, line:543:38>
| | | | |   `-CXXMemberCallExpr 0xb613b8 <line:542:9, line:543:38> 'bool'
| | | | |     |-MemberExpr 0xb61388 <line:542:9> '<bound member function type>' ->compare_exchange_weak 0xa95980
| | | | |     | `-CXXThisExpr 0xb61378 <col:9> 'std::__atomic_base<bool> *' implicit this
| | | | |     |-DeclRefExpr 0xb612a0 <col:31> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa95e98 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-ImplicitCastExpr 0xb613f8 <col:37> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xb612c0 <col:37> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa95f10 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-ImplicitCastExpr 0xb61410 <col:43> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xb612e0 <col:43> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa95f78 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xb61338 <line:543:10, col:37> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xb61320 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xa7efb8 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xb61360 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xb61300 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa95f78 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa96168 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa963f0 <col:32, line:552:7> line:547:7 used compare_exchange_weak 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa961e0 <col:29, col:41> col:41 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xa96258 <col:47, col:58> col:58 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa962c0 <line:548:6, col:25> col:19 used __m 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xb61678 <line:549:7, line:552:7>
| | | | | `-ReturnStmt 0xb61668 <line:550:2, line:551:38>
| | | | |   `-CXXMemberCallExpr 0xb615f8 <line:550:9, line:551:38> 'bool'
| | | | |     |-MemberExpr 0xb615c8 <line:550:9> '<bound member function type>' ->compare_exchange_weak 0xa95d50
| | | | |     | `-CXXThisExpr 0xb615b8 <col:9> 'volatile std::__atomic_base<bool> *' implicit this
| | | | |     |-DeclRefExpr 0xb614e0 <col:31> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa961e0 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-ImplicitCastExpr 0xb61638 <col:37> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xb61500 <col:37> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa96258 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-ImplicitCastExpr 0xb61650 <col:43> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xb61520 <col:43> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa962c0 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xb61578 <line:551:10, col:37> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xb61560 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xa7f1e0 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xb615a0 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xb61540 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa962c0 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa964b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa96728 <col:32, line:562:7> line:555:7 used compare_exchange_strong 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa96530 <col:31, col:43> col:43 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xa965a8 <col:49, col:60> col:60 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa96610 <line:556:10, col:23> col:23 used __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xa96678 <col:29, col:42> col:42 used __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xb61b60 <line:557:7, line:562:7>
| | | | | |-DoStmt 0xb61810 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xb617f8 <col:6, col:42>
| | | | | | | `-IfStmt 0xb617d8 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb61780 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb616a8 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb61690 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7f310 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb61768 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb61740 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-CallExpr 0xb61700 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:558:19, col:56> 'bool'
| | | | | | |   |       |-ImplicitCastExpr 0xb616e8 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | | | |   |       | `-DeclRefExpr 0xa7f3f0 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
| | | | | | |   |       `-ImplicitCastExpr 0xb61728 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |         `-DeclRefExpr 0xb616c8 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa96678 '__m2' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xb617b8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb617a0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7f4c8 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7f558 <line:591:51> 'bool' false
| | | | | `-ReturnStmt 0xb61b50 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:560:2, line:561:29>
| | | | |   `-AtomicExpr 0xb61af8 <line:560:9, line:561:29> 'bool'
| | | | |     |-UnaryOperator 0xb618b8 <line:560:37, col:38> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xb61888 <col:38> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ->_M_i 0xa91d50
| | | | |     |   `-CXXThisExpr 0xb61878 <col:38> 'std::__atomic_base<bool> *' implicit this
| | | | |     |-CXXFunctionalCastExpr 0xb619c0 <line:561:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xb619a8 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xb61990 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xb61970 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa96610 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     |-UnaryOperator 0xb61938 <line:560:44, col:45> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-DeclRefExpr 0xb61918 <col:45> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa96530 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-CXXFunctionalCastExpr 0xb61a38 <line:561:20, col:28> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xb61a20 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xb61a08 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xb619e8 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa96678 '__m2' 'std::memory_order':'std::memory_order'
| | | | |     |-ImplicitCastExpr 0xb61ac8 <line:560:51> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xb61950 <col:51> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa965a8 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     `-ImplicitCastExpr 0xb61ae0 <col:57> 'bool' <IntegralToBoolean>
| | | | |       `-IntegerLiteral 0xa7f718 <col:57> 'int' 0
| | | | `-AlwaysInlineAttr 0xa967f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa96a88 <col:32, line:573:7> line:565:7 used compare_exchange_strong 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa96860 <col:31, col:43> col:43 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xa968d8 <col:49, col:60> col:60 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa96940 <line:566:10, col:23> col:23 used __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xa969a8 <line:567:10, col:23> col:23 used __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xb62050 <line:568:7, line:573:7>
| | | | | |-DoStmt 0xb61d00 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xb61ce8 <col:6, col:42>
| | | | | | | `-IfStmt 0xb61cc8 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xb61c70 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xb61b98 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xb61b80 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7f928 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xb61c58 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xb61c30 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-CallExpr 0xb61bf0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:569:19, col:56> 'bool'
| | | | | | |   |       |-ImplicitCastExpr 0xb61bd8 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | | | |   |       | `-DeclRefExpr 0xa7fa08 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
| | | | | | |   |       `-ImplicitCastExpr 0xb61c18 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |         `-DeclRefExpr 0xb61bb8 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa969a8 '__m2' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xb61ca8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xb61c90 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa800c0 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa80150 <line:591:51> 'bool' false
| | | | | `-ReturnStmt 0xb62040 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:571:2, line:572:29>
| | | | |   `-AtomicExpr 0xb61fe8 <line:571:9, line:572:29> 'bool'
| | | | |     |-UnaryOperator 0xb61da8 <line:571:37, col:38> 'volatile std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-MemberExpr 0xb61d78 <col:38> 'volatile std::__atomic_base<bool>::__int_type':'volatile bool' lvalue ->_M_i 0xa91d50
| | | | |     |   `-CXXThisExpr 0xb61d68 <col:38> 'volatile std::__atomic_base<bool> *' implicit this
| | | | |     |-CXXFunctionalCastExpr 0xb61eb0 <line:572:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xb61e98 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xb61e80 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xb61e60 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa96940 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     |-UnaryOperator 0xb61e28 <line:571:44, col:45> 'std::__atomic_base<bool>::__int_type *' prefix '&' cannot overflow
| | | | |     | `-DeclRefExpr 0xb61e08 <col:45> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa96860 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-CXXFunctionalCastExpr 0xb61f28 <line:572:20, col:28> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xb61f10 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xb61ef8 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xb61ed8 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa969a8 '__m2' 'std::memory_order':'std::memory_order'
| | | | |     |-ImplicitCastExpr 0xb61fb8 <line:571:51> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xb61e40 <col:51> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa968d8 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     `-ImplicitCastExpr 0xb61fd0 <col:57> 'bool' <IntegralToBoolean>
| | | | |       `-IntegerLiteral 0xa80310 <col:57> 'int' 0
| | | | `-AlwaysInlineAttr 0xa96b58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa96d58 <col:32, line:581:7> line:576:7 used compare_exchange_strong 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa96bd0 <col:31, col:43> col:43 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xa96c48 <col:49, col:60> col:60 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa96cb0 <line:577:10, col:29> col:23 used __m 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xb62298 <line:578:7, line:581:7>
| | | | | `-ReturnStmt 0xb62288 <line:579:2, line:580:40>
| | | | |   `-CXXMemberCallExpr 0xb62218 <line:579:9, line:580:40> 'bool'
| | | | |     |-MemberExpr 0xb621e8 <line:579:9> '<bound member function type>' ->compare_exchange_strong 0xa96728
| | | | |     | `-CXXThisExpr 0xb621d8 <col:9> 'std::__atomic_base<bool> *' implicit this
| | | | |     |-DeclRefExpr 0xb62100 <col:33> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa96bd0 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-ImplicitCastExpr 0xb62258 <col:39> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xb62120 <col:39> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa96c48 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-ImplicitCastExpr 0xb62270 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xb62140 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa96cb0 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xb62198 <line:580:12, col:39> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xb62180 <col:12> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xa80618 <col:12> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xb621c0 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xb62160 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa96cb0 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa96e20 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa97020 <col:32, line:589:7> line:584:7 used compare_exchange_strong 'bool (std::__atomic_base<bool>::__int_type &, std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa96e98 <col:31, col:43> col:43 used __i1 'std::__atomic_base<bool>::__int_type &'
| | | | |-ParmVarDecl 0xa96f10 <col:49, col:60> col:60 used __i2 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa96f78 <line:585:4, col:23> col:17 used __m 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xb624d8 <line:586:7, line:589:7>
| | | | | `-ReturnStmt 0xb624c8 <line:587:2, line:588:40>
| | | | |   `-CXXMemberCallExpr 0xb62458 <line:587:9, line:588:40> 'bool'
| | | | |     |-MemberExpr 0xb62428 <line:587:9> '<bound member function type>' ->compare_exchange_strong 0xa96a88
| | | | |     | `-CXXThisExpr 0xb62418 <col:9> 'volatile std::__atomic_base<bool> *' implicit this
| | | | |     |-DeclRefExpr 0xb62340 <col:33> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa96e98 '__i1' 'std::__atomic_base<bool>::__int_type &'
| | | | |     |-ImplicitCastExpr 0xb62498 <col:39> 'std::__atomic_base<bool>::__int_type':'bool' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xb62360 <col:39> 'std::__atomic_base<bool>::__int_type':'bool' lvalue ParmVar 0xa96f10 '__i2' 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |     |-ImplicitCastExpr 0xb624b0 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0xb62380 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa96f78 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xb623d8 <line:588:12, col:39> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xb623c0 <col:12> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xa80840 <col:12> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xb62400 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xb623a0 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa96f78 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa970e8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa97268 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa97160 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa971c8 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa97328 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa97498 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa97390 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa973f8 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa97558 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa976d8 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa975d0 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa97638 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa97798 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa97908 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa97800 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa97868 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa979c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa97b48 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa97a40 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa97aa8 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa97c08 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa97d78 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa97c70 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa97cd8 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa97e38 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa97fb8 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa97eb0 <col:16, col:27> col:27 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa97f18 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa98078 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa981e8 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa980e0 <col:16, col:27> col:27 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa98148 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa982a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa98428 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa98320 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | | | |-ParmVarDecl 0xa98388 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa984e8 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xa98658 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<bool>::__int_type (std::__atomic_base<bool>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xa98550 <col:17, col:28> col:28 __i 'std::__atomic_base<bool>::__int_type':'bool'
| | |   |-ParmVarDecl 0xa985b8 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xa98718 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xaae978 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'char'
| | | | `-BuiltinType 0x826240 'char'
| | | |-CXXRecordDecl 0xaaeb98 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xaaec68 <line:326:7, col:26> col:13 value_type 'char':'char'
| | | | `-SubstTemplateTypeParmType 0xaaec30 'char' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826240 'char'
| | | |-TypeAliasDecl 0xaaed00 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<char>::value_type':'char'
| | | | `-TypedefType 0xaaecd0 'std::__atomic_base<char>::value_type' sugar
| | | |   |-TypeAlias 0xaaec68 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xaaec30 'char' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x826240 'char'
| | | |-AccessSpecDecl 0xaaed60 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xaaed98 <line:330:7, col:21> col:21 __int_type 'char':'char'
| | | | `-SubstTemplateTypeParmType 0xaaec30 'char' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826240 'char'
| | | |-VarDecl 0xaaedf0 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 1
| | | | `-ImplicitCastExpr 0xaaef78 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xaaef48 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xaaeec8 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xaaee78 <col:2, col:13> 'unsigned long' sizeof 'char':'char'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xaaeea8 <col:17, col:29> 'unsigned long' alignof 'char':'char'
| | | |     |-UnaryExprOrTypeTraitExpr 0xaaeef8 <col:33, col:44> 'unsigned long' sizeof 'char':'char'
| | | |     `-UnaryExprOrTypeTraitExpr 0xaaef28 <col:48, col:60> 'unsigned long' alignof 'char':'char'
| | | |-FieldDecl 0xaaf020 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<char>::__int_type':'char'
| | | | `-AlignedAttr 0xaaf0e8 <col:7> alignas
| | | |   `-ConstantExpr 0xaaf0c8 <col:15> 'int'
| | | |     |-value: Int 1
| | | |     `-ImplicitCastExpr 0xaaf0b0 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xaaf090 <col:15> 'const int' lvalue Var 0xaaedf0 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xaaf148 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xaaf1a8 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xaaf288 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xaaf468 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<char> &)' delete trivial
| | | | `-ParmVarDecl 0xaaf388 <col:21, col:40> col:41 'const std::__atomic_base<char> &'
| | | |-CXXMethodDecl 0xaaf638 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<char> &(const std::__atomic_base<char> &)' delete trivial
| | | | `-ParmVarDecl 0xaaf578 <col:32, col:51> col:52 'const std::__atomic_base<char> &'
| | | |-CXXMethodDecl 0xaaf7c8 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<char> &(const std::__atomic_base<char> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xaaf700 <col:32, col:51> col:52 'const std::__atomic_base<char> &'
| | | |-CXXConstructorDecl 0xaaf9c0 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<char>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xaaf8a0 <col:31, col:42> col:42 used __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-CXXCtorInitializer Field 0xaaf020 '_M_i' 'std::__atomic_base<char>::__int_type':'char'
| | | | | `-ImplicitCastExpr 0xac0c18 <col:64> 'std::__atomic_base<char>::__int_type':'char' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xac0bd8 <col:64> 'std::__atomic_base<char>::__int_type':'char' lvalue ParmVar 0xaaf8a0 '__i' 'std::__atomic_base<char>::__int_type':'char'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xaafb38 <line:347:7, line:348:24> line:347:7 operator char 'std::__atomic_base<char>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xaafc90 <line:350:7, line:351:24> line:350:7 operator char 'std::__atomic_base<char>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xaafe70 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xaafd78 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xab0040 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xaaff48 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0xab0200 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<char>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xab0108 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xab03b0 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<char>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xab02b8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xab0510 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<char>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xab0478 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xab0660 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<char>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xab05c8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xab07b0 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<char>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xab08f0 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<char>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xab09d8 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<char>::__int_type () noexcept'
| | | |-CXXMethodDecl 0x9c06a0 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<char>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0x9c0808 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0x9c0770 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0x9c0968 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0x9c08d0 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0x9c0ad8 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0x9c0a40 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0x9c0c38 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0x9c0ba0 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0x9c0da8 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0x9c0d10 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0x9c0f08 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0x9c0e70 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0x9c1078 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0x9c0fe0 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0x9c11d8 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0x9c1140 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0x9c1348 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0x9c12b0 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0x9c14a8 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0x9c1410 <col:18, col:29> col:29 __i 'std::__atomic_base<char>::__int_type':'char'
| | | |-CXXMethodDecl 0x9c1570 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0x9c1620 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0x9c1870 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0x9c16f0 <col:13, col:24> col:24 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c1758 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c1958 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c1b40 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0x9c19c0 <col:13, col:24> col:24 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c1a28 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c1c00 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c1d60 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<char>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0x9c1c68 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c1e18 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c1f70 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<char>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0x9c1e70 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c2028 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c2220 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0x9c20a0 <col:16, col:27> col:27 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c2108 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c22e0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c24d0 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0x9c2348 <col:16, col:27> col:27 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c23b0 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c2590 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c2940 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0x9c26b0 <col:29, col:41> col:41 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0x9c2728 <col:47, col:58> col:58 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c2790 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0x9c27f8 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c2a10 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c2d10 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0x9c2a78 <col:29, col:41> col:41 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0x9c2af0 <col:47, col:58> col:58 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c2b58 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0x9c2bc0 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c2de0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c3060 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0x9c2e58 <col:29, col:41> col:41 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0x9c2ed0 <col:47, col:58> col:58 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c2f38 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c3128 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c33b0 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0x9c31a0 <col:29, col:41> col:41 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0x9c3218 <col:47, col:58> col:58 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c3280 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c3478 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c36e8 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0x9c34f0 <col:31, col:43> col:43 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0x9c3568 <col:49, col:60> col:60 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c35d0 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0x9c3638 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c37b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c3a18 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0x9c3820 <col:31, col:43> col:43 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0x9c3898 <col:49, col:60> col:60 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c3900 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0x9c3968 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c3ae8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c3ce8 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0x9c3b60 <col:31, col:43> col:43 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0x9c3bd8 <col:49, col:60> col:60 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c3c40 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c3db0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c3fb0 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<char>::__int_type &, std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0x9c3e28 <col:31, col:43> col:43 __i1 'std::__atomic_base<char>::__int_type &'
| | | | |-ParmVarDecl 0x9c3ea0 <col:49, col:60> col:60 __i2 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c3f08 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c4078 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c41f8 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0x9c40f0 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c4158 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c42b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c4428 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0x9c4320 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c4388 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c44e8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c46c0 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0x9c4560 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c45c8 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c4780 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c48f0 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0x9c47e8 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c4850 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c49b0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c4b30 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0x9c4a28 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c4a90 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c4bf0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c4d60 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0x9c4c58 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c4cc0 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c4e20 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c4fa0 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0x9c4e98 <col:16, col:27> col:27 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c4f00 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c5060 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c51d0 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0x9c50c8 <col:16, col:27> col:27 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c5130 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c5290 <line:45:54> always_inline
| | | |-CXXMethodDecl 0x9c5410 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0x9c5308 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | | | |-ParmVarDecl 0x9c5370 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0x9c54d0 <line:45:54> always_inline
| | | `-CXXMethodDecl 0x9c5640 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0x9c5538 <col:17, col:28> col:28 __i 'std::__atomic_base<char>::__int_type':'char'
| | |   |-ParmVarDecl 0x9c55a0 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0x9c5700 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xac0fd0 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'signed char'
| | | | `-BuiltinType 0x826260 'signed char'
| | | |-CXXRecordDecl 0xac11c8 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xac1298 <line:326:7, col:26> col:13 value_type 'signed char':'signed char'
| | | | `-SubstTemplateTypeParmType 0xac1260 'signed char' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826260 'signed char'
| | | |-TypeAliasDecl 0xac1330 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<signed char>::value_type':'signed char'
| | | | `-TypedefType 0xac1300 'std::__atomic_base<signed char>::value_type' sugar
| | | |   |-TypeAlias 0xac1298 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xac1260 'signed char' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x826260 'signed char'
| | | |-AccessSpecDecl 0xac1390 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xac13c8 <line:330:7, col:21> col:21 __int_type 'signed char':'signed char'
| | | | `-SubstTemplateTypeParmType 0xac1260 'signed char' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826260 'signed char'
| | | |-VarDecl 0xac1420 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 1
| | | | `-ImplicitCastExpr 0xac15a8 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xac1578 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xac14f8 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xac14a8 <col:2, col:13> 'unsigned long' sizeof 'signed char':'signed char'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xac14d8 <col:17, col:29> 'unsigned long' alignof 'signed char':'signed char'
| | | |     |-UnaryExprOrTypeTraitExpr 0xac1528 <col:33, col:44> 'unsigned long' sizeof 'signed char':'signed char'
| | | |     `-UnaryExprOrTypeTraitExpr 0xac1558 <col:48, col:60> 'unsigned long' alignof 'signed char':'signed char'
| | | |-FieldDecl 0xac1650 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | `-AlignedAttr 0xac1718 <col:7> alignas
| | | |   `-ConstantExpr 0xac16f8 <col:15> 'int'
| | | |     |-value: Int 1
| | | |     `-ImplicitCastExpr 0xac16e0 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xac16c0 <col:15> 'const int' lvalue Var 0xac1420 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xac1778 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xac17d8 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xac18b8 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xac1a98 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<signed char> &)' delete trivial
| | | | `-ParmVarDecl 0xac19b8 <col:21, col:40> col:41 'const std::__atomic_base<signed char> &'
| | | |-CXXMethodDecl 0xac1c68 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<signed char> &(const std::__atomic_base<signed char> &)' delete trivial
| | | | `-ParmVarDecl 0xac1ba8 <col:32, col:51> col:52 'const std::__atomic_base<signed char> &'
| | | |-CXXMethodDecl 0xac1df8 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<signed char> &(const std::__atomic_base<signed char> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xac1d30 <col:32, col:51> col:52 'const std::__atomic_base<signed char> &'
| | | |-CXXConstructorDecl 0xac1ff0 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xac1ed0 <col:31, col:42> col:42 used __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-CXXCtorInitializer Field 0xac1650 '_M_i' 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | | `-ImplicitCastExpr 0xac9220 <col:64> 'std::__atomic_base<signed char>::__int_type':'signed char' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xac91e0 <col:64> 'std::__atomic_base<signed char>::__int_type':'signed char' lvalue ParmVar 0xac1ed0 '__i' 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xac2168 <line:347:7, line:348:24> line:347:7 operator signed char 'std::__atomic_base<signed char>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xac22c0 <line:350:7, line:351:24> line:350:7 operator signed char 'std::__atomic_base<signed char>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xac24a0 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xac23a8 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xac2670 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xac2578 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xac2830 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<signed char>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xac2738 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xac29e0 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<signed char>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xac28e8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xac2b50 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<signed char>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xac2aa8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xac2ca0 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<signed char>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xac2c08 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xac2df0 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<signed char>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xac2f30 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<signed char>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xac3018 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<signed char>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xac3100 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<signed char>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xac3268 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xac31d0 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xac33c8 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xac3330 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xac3538 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xac34a0 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xac3698 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xac3600 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xac3808 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xac3770 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xac3968 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xac38d0 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xac3ad8 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xac3a40 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xac3c38 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xac3ba0 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xac3da8 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xac3d10 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xac3f08 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xac3e70 <col:18, col:29> col:29 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | |-CXXMethodDecl 0xac3fd0 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xac4080 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xac42d0 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xac4150 <col:13, col:24> col:24 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac41b8 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac43b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac45a0 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xac4420 <col:13, col:24> col:24 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac4488 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac4660 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac47c0 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<signed char>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xac46c8 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac4878 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac49d0 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<signed char>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xac48d0 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac4a88 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac4cb0 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xac4b30 <col:16, col:27> col:27 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac4b98 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac4d70 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac4f60 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xac4dd8 <col:16, col:27> col:27 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac4e40 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac5020 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac5390 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xac50f8 <col:29, col:41> col:41 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xac5170 <col:47, col:58> col:58 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac51d8 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xac5240 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac5460 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac5760 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xac54c8 <col:29, col:41> col:41 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xac5540 <col:47, col:58> col:58 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac55a8 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xac5610 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac5830 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac5ab0 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xac58a8 <col:29, col:41> col:41 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xac5920 <col:47, col:58> col:58 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac5988 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac5b78 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac5e00 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xac5bf0 <col:29, col:41> col:41 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xac5c68 <col:47, col:58> col:58 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac5cd0 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac5ec8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac6138 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xac5f40 <col:31, col:43> col:43 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xac5fb8 <col:49, col:60> col:60 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac6020 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xac6088 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac6208 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac6468 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xac6270 <col:31, col:43> col:43 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xac62e8 <col:49, col:60> col:60 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac6350 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xac63b8 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac6538 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac6738 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xac65b0 <col:31, col:43> col:43 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xac6628 <col:49, col:60> col:60 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac6690 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac6800 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac6a00 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<signed char>::__int_type &, std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xac6878 <col:31, col:43> col:43 __i1 'std::__atomic_base<signed char>::__int_type &'
| | | | |-ParmVarDecl 0xac68f0 <col:49, col:60> col:60 __i2 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac6958 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac6ac8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac6c58 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xac6b50 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac6bb8 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac6d18 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac6e88 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xac6d80 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac6de8 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac6f48 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac70c8 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xac6fc0 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac7028 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac7188 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac72f8 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xac71f0 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac7258 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac73b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac7538 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xac7430 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac7498 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac75f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac7768 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xac7660 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac76c8 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac7828 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac79a8 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xac78a0 <col:16, col:27> col:27 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac7908 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac7a68 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac7bd8 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xac7ad0 <col:16, col:27> col:27 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac7b38 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac7c98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xac7e18 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xac7d10 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | | | |-ParmVarDecl 0xac7d78 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xac7ed8 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xac8048 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xac7f40 <col:17, col:28> col:28 __i 'std::__atomic_base<signed char>::__int_type':'signed char'
| | |   |-ParmVarDecl 0xac7fa8 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xac8108 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xac95d0 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'unsigned char'
| | | | `-BuiltinType 0x826300 'unsigned char'
| | | |-CXXRecordDecl 0xac97c8 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xac9898 <line:326:7, col:26> col:13 value_type 'unsigned char':'unsigned char'
| | | | `-SubstTemplateTypeParmType 0xac9860 'unsigned char' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826300 'unsigned char'
| | | |-TypeAliasDecl 0xac9930 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<unsigned char>::value_type':'unsigned char'
| | | | `-TypedefType 0xac9900 'std::__atomic_base<unsigned char>::value_type' sugar
| | | |   |-TypeAlias 0xac9898 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xac9860 'unsigned char' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x826300 'unsigned char'
| | | |-AccessSpecDecl 0xac9990 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xac99c8 <line:330:7, col:21> col:21 __int_type 'unsigned char':'unsigned char'
| | | | `-SubstTemplateTypeParmType 0xac9860 'unsigned char' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826300 'unsigned char'
| | | |-VarDecl 0xac9a20 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 1
| | | | `-ImplicitCastExpr 0xac9ba8 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xac9b78 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xac9af8 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xac9aa8 <col:2, col:13> 'unsigned long' sizeof 'unsigned char':'unsigned char'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xac9ad8 <col:17, col:29> 'unsigned long' alignof 'unsigned char':'unsigned char'
| | | |     |-UnaryExprOrTypeTraitExpr 0xac9b28 <col:33, col:44> 'unsigned long' sizeof 'unsigned char':'unsigned char'
| | | |     `-UnaryExprOrTypeTraitExpr 0xac9b58 <col:48, col:60> 'unsigned long' alignof 'unsigned char':'unsigned char'
| | | |-FieldDecl 0xac9c50 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | `-AlignedAttr 0xac9d18 <col:7> alignas
| | | |   `-ConstantExpr 0xac9cf8 <col:15> 'int'
| | | |     |-value: Int 1
| | | |     `-ImplicitCastExpr 0xac9ce0 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xac9cc0 <col:15> 'const int' lvalue Var 0xac9a20 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xac9d78 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xac9dd8 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xac9eb8 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xaca098 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<unsigned char> &)' delete trivial
| | | | `-ParmVarDecl 0xac9fb8 <col:21, col:40> col:41 'const std::__atomic_base<unsigned char> &'
| | | |-CXXMethodDecl 0xaca268 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<unsigned char> &(const std::__atomic_base<unsigned char> &)' delete trivial
| | | | `-ParmVarDecl 0xaca1a8 <col:32, col:51> col:52 'const std::__atomic_base<unsigned char> &'
| | | |-CXXMethodDecl 0xaca3f8 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<unsigned char> &(const std::__atomic_base<unsigned char> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xaca330 <col:32, col:51> col:52 'const std::__atomic_base<unsigned char> &'
| | | |-CXXConstructorDecl 0xaca5f0 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xaca4d0 <col:31, col:42> col:42 used __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-CXXCtorInitializer Field 0xac9c50 '_M_i' 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | | `-ImplicitCastExpr 0xad3870 <col:64> 'std::__atomic_base<unsigned char>::__int_type':'unsigned char' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xad3830 <col:64> 'std::__atomic_base<unsigned char>::__int_type':'unsigned char' lvalue ParmVar 0xaca4d0 '__i' 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xaca768 <line:347:7, line:348:24> line:347:7 operator unsigned char 'std::__atomic_base<unsigned char>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xaca8c0 <line:350:7, line:351:24> line:350:7 operator unsigned char 'std::__atomic_base<unsigned char>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xacaaa0 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xaca9a8 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xacac80 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xacab88 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xacae40 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<unsigned char>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xacad48 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xacaff0 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<unsigned char>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xacaef8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xacb150 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<unsigned char>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xacb0b8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xacb2a0 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<unsigned char>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xacb208 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xacb3f0 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<unsigned char>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xacb530 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<unsigned char>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xacb618 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<unsigned char>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xacb700 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<unsigned char>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xacb868 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xacb7d0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xacb9c8 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xacb930 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xacbb38 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xacbaa0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xacbc98 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xacbc00 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xacbe08 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xacbd70 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xacbf68 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xacbed0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xacc0d8 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xacc040 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xacc238 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xacc1a0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xacc3a8 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xacc310 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xacc508 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xacc470 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | |-CXXMethodDecl 0xacc5d0 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xacc680 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xacc8d0 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xacc750 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacc7b8 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacc9b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaccbe0 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xacca20 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacca88 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaccca0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacce00 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<unsigned char>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xaccd08 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacceb8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacd010 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<unsigned char>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xaccf10 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacd0c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacd2c0 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xacd140 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacd1a8 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacd380 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacd570 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xacd3e8 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacd450 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacd630 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacd9a0 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xacd708 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xacd780 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacd7e8 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xacd850 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacda70 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacdd70 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xacdad8 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xacdb50 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacdbb8 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xacdc20 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacde40 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xace0c0 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xacdeb8 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xacdf30 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacdf98 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xace188 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xace410 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xace200 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xace278 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xace2e0 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xace4d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xace748 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xace550 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xace5c8 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xace630 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xace698 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xace818 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacea78 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xace880 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xace8f8 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xace960 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xace9c8 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaceb48 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaced58 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xacebd0 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xacec48 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacecb0 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacee20 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacf020 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned char>::__int_type &, std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xacee98 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned char>::__int_type &'
| | | | |-ParmVarDecl 0xacef10 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacef78 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacf0e8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacf268 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xacf160 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacf1c8 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacf328 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacf498 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xacf390 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacf3f8 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacf558 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacf6d8 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xacf5d0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacf638 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacf798 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacf908 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xacf800 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacf868 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacf9c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacfb48 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xacfa40 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacfaa8 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacfc08 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacfd78 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xacfc70 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacfcd8 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xacfe38 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xacffb8 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xacfeb0 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xacff18 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad0078 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad01e8 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad00e0 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xad0148 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad02a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad0428 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad0320 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | | | |-ParmVarDecl 0xad0388 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad04e8 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xad0658 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xad0550 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned char>::__int_type':'unsigned char'
| | |   |-ParmVarDecl 0xad05b8 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xad0718 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xad3c20 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'short'
| | | | `-BuiltinType 0x826280 'short'
| | | |-CXXRecordDecl 0xad3e18 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xad3ee8 <line:326:7, col:26> col:13 value_type 'short':'short'
| | | | `-SubstTemplateTypeParmType 0xad3eb0 'short' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826280 'short'
| | | |-TypeAliasDecl 0xad3f80 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<short>::value_type':'short'
| | | | `-TypedefType 0xad3f50 'std::__atomic_base<short>::value_type' sugar
| | | |   |-TypeAlias 0xad3ee8 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xad3eb0 'short' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x826280 'short'
| | | |-AccessSpecDecl 0xad3fe0 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xad4018 <line:330:7, col:21> col:21 __int_type 'short':'short'
| | | | `-SubstTemplateTypeParmType 0xad3eb0 'short' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826280 'short'
| | | |-VarDecl 0xad4070 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 2
| | | | `-ImplicitCastExpr 0xad41f8 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xad41c8 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xad4148 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xad40f8 <col:2, col:13> 'unsigned long' sizeof 'short':'short'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xad4128 <col:17, col:29> 'unsigned long' alignof 'short':'short'
| | | |     |-UnaryExprOrTypeTraitExpr 0xad4178 <col:33, col:44> 'unsigned long' sizeof 'short':'short'
| | | |     `-UnaryExprOrTypeTraitExpr 0xad41a8 <col:48, col:60> 'unsigned long' alignof 'short':'short'
| | | |-FieldDecl 0xad42a0 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<short>::__int_type':'short'
| | | | `-AlignedAttr 0xad4368 <col:7> alignas
| | | |   `-ConstantExpr 0xad4348 <col:15> 'int'
| | | |     |-value: Int 2
| | | |     `-ImplicitCastExpr 0xad4330 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xad4310 <col:15> 'const int' lvalue Var 0xad4070 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xad43c8 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xad4428 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xad4508 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xad46e8 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<short> &)' delete trivial
| | | | `-ParmVarDecl 0xad4608 <col:21, col:40> col:41 'const std::__atomic_base<short> &'
| | | |-CXXMethodDecl 0xad48b8 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<short> &(const std::__atomic_base<short> &)' delete trivial
| | | | `-ParmVarDecl 0xad47f8 <col:32, col:51> col:52 'const std::__atomic_base<short> &'
| | | |-CXXMethodDecl 0xad4a48 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<short> &(const std::__atomic_base<short> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xad4980 <col:32, col:51> col:52 'const std::__atomic_base<short> &'
| | | |-CXXConstructorDecl 0xad4c60 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<short>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xad4b20 <col:31, col:42> col:42 used __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-CXXCtorInitializer Field 0xad42a0 '_M_i' 'std::__atomic_base<short>::__int_type':'short'
| | | | | `-ImplicitCastExpr 0xadbe70 <col:64> 'std::__atomic_base<short>::__int_type':'short' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xadbe30 <col:64> 'std::__atomic_base<short>::__int_type':'short' lvalue ParmVar 0xad4b20 '__i' 'std::__atomic_base<short>::__int_type':'short'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xad4dd8 <line:347:7, line:348:24> line:347:7 operator short 'std::__atomic_base<short>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xad4f30 <line:350:7, line:351:24> line:350:7 operator short 'std::__atomic_base<short>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xad5110 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xad5018 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xad52e0 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xad51e8 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xad54a0 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<short>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xad53a8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xad5650 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<short>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xad5558 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xad57b0 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<short>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xad5718 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xad5900 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<short>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xad5868 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xad5a50 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<short>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xad5b90 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<short>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xad5c78 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<short>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xad5d60 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<short>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xad5ec8 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xad5e30 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xad6028 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xad5f90 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xad6198 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xad6100 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xad62f8 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xad6260 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xad6468 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xad63d0 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xad65c8 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xad6530 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xad6738 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xad66a0 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xad6898 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xad6800 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xad6a08 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xad6970 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xad6bc0 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xad6ad0 <col:18, col:29> col:29 __i 'std::__atomic_base<short>::__int_type':'short'
| | | |-CXXMethodDecl 0xad6c88 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xad6d38 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xad6f90 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad6e08 <col:13, col:24> col:24 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad6e70 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad7078 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad7260 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad70e0 <col:13, col:24> col:24 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad7148 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad7320 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad7480 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<short>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xad7388 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad7538 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad7690 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<short>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xad7590 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad7748 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad7940 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad77c0 <col:16, col:27> col:27 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad7828 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad7a00 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad7bf0 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad7a68 <col:16, col:27> col:27 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad7ad0 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad7cb0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad8020 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad7d88 <col:29, col:41> col:41 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xad7e00 <col:47, col:58> col:58 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad7e68 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xad7ed0 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad80f0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad83f0 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad8158 <col:29, col:41> col:41 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xad81d0 <col:47, col:58> col:58 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad8238 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xad82a0 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad84c0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad8740 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad8538 <col:29, col:41> col:41 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xad85b0 <col:47, col:58> col:58 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad8618 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad8808 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad8a90 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad8880 <col:29, col:41> col:41 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xad88f8 <col:47, col:58> col:58 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad8960 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad8b58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad8dd8 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad8be0 <col:31, col:43> col:43 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xad8c58 <col:49, col:60> col:60 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad8cc0 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xad8d28 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad8ea8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad9108 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad8f10 <col:31, col:43> col:43 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xad8f88 <col:49, col:60> col:60 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad8ff0 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xad9058 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad91d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad93d8 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad9250 <col:31, col:43> col:43 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xad92c8 <col:49, col:60> col:60 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad9330 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad94a0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad96a0 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<short>::__int_type &, std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad9518 <col:31, col:43> col:43 __i1 'std::__atomic_base<short>::__int_type &'
| | | | |-ParmVarDecl 0xad9590 <col:49, col:60> col:60 __i2 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad95f8 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad9768 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad98e8 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad97e0 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad9848 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad99a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad9b18 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad9a10 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad9a78 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad9bd8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad9d58 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad9c50 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad9cb8 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad9e18 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad9f88 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad9e80 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xad9ee8 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xada048 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xada1c8 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xada0c0 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xada128 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xada288 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xada3f8 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xada2f0 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xada358 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xada4b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xada638 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xada530 <col:16, col:27> col:27 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xada598 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xada6f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xada868 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xada760 <col:16, col:27> col:27 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xada7c8 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xada928 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xadaaa8 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xada9a0 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | | | |-ParmVarDecl 0xadaa08 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xadab68 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xadace8 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xadabe0 <col:17, col:28> col:28 __i 'std::__atomic_base<short>::__int_type':'short'
| | |   |-ParmVarDecl 0xadac48 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xadada8 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xadc220 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'unsigned short'
| | | | `-BuiltinType 0x826320 'unsigned short'
| | | |-CXXRecordDecl 0xadc418 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xadc4e8 <line:326:7, col:26> col:13 value_type 'unsigned short':'unsigned short'
| | | | `-SubstTemplateTypeParmType 0xadc4b0 'unsigned short' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826320 'unsigned short'
| | | |-TypeAliasDecl 0xadc580 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<unsigned short>::value_type':'unsigned short'
| | | | `-TypedefType 0xadc550 'std::__atomic_base<unsigned short>::value_type' sugar
| | | |   |-TypeAlias 0xadc4e8 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xadc4b0 'unsigned short' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x826320 'unsigned short'
| | | |-AccessSpecDecl 0xadc5e0 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xadc618 <line:330:7, col:21> col:21 __int_type 'unsigned short':'unsigned short'
| | | | `-SubstTemplateTypeParmType 0xadc4b0 'unsigned short' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826320 'unsigned short'
| | | |-VarDecl 0xadc670 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 2
| | | | `-ImplicitCastExpr 0xadc7f8 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xadc7c8 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xadc748 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xadc6f8 <col:2, col:13> 'unsigned long' sizeof 'unsigned short':'unsigned short'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xadc728 <col:17, col:29> 'unsigned long' alignof 'unsigned short':'unsigned short'
| | | |     |-UnaryExprOrTypeTraitExpr 0xadc778 <col:33, col:44> 'unsigned long' sizeof 'unsigned short':'unsigned short'
| | | |     `-UnaryExprOrTypeTraitExpr 0xadc7a8 <col:48, col:60> 'unsigned long' alignof 'unsigned short':'unsigned short'
| | | |-FieldDecl 0xadc8a0 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | `-AlignedAttr 0xadc968 <col:7> alignas
| | | |   `-ConstantExpr 0xadc948 <col:15> 'int'
| | | |     |-value: Int 2
| | | |     `-ImplicitCastExpr 0xadc930 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xadc910 <col:15> 'const int' lvalue Var 0xadc670 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xadc9c8 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xadca28 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xadcb08 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xadcd08 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<unsigned short> &)' delete trivial
| | | | `-ParmVarDecl 0xadcc28 <col:21, col:40> col:41 'const std::__atomic_base<unsigned short> &'
| | | |-CXXMethodDecl 0xadced8 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<unsigned short> &(const std::__atomic_base<unsigned short> &)' delete trivial
| | | | `-ParmVarDecl 0xadce18 <col:32, col:51> col:52 'const std::__atomic_base<unsigned short> &'
| | | |-CXXMethodDecl 0xadd068 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<unsigned short> &(const std::__atomic_base<unsigned short> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xadcfa0 <col:32, col:51> col:52 'const std::__atomic_base<unsigned short> &'
| | | |-CXXConstructorDecl 0xadd260 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xadd140 <col:31, col:42> col:42 used __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-CXXCtorInitializer Field 0xadc8a0 '_M_i' 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | | `-ImplicitCastExpr 0xae4480 <col:64> 'std::__atomic_base<unsigned short>::__int_type':'unsigned short' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xae4440 <col:64> 'std::__atomic_base<unsigned short>::__int_type':'unsigned short' lvalue ParmVar 0xadd140 '__i' 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xadd3d8 <line:347:7, line:348:24> line:347:7 operator unsigned short 'std::__atomic_base<unsigned short>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xadd530 <line:350:7, line:351:24> line:350:7 operator unsigned short 'std::__atomic_base<unsigned short>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xadd710 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xadd618 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xadd8e0 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xadd7e8 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xaddaa0 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<unsigned short>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xadd9a8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xaddc50 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<unsigned short>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xaddb58 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xadddb0 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<unsigned short>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xaddd18 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xaddf00 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<unsigned short>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xadde68 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xade050 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<unsigned short>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xade190 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<unsigned short>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xade278 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<unsigned short>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xade360 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<unsigned short>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xade4c8 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xade430 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xade628 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xade590 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xade798 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xade700 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xade8f8 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xade860 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xadea68 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xade9d0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xadec00 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xadeb30 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xaded70 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xadecd8 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xadeed0 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xadee38 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xadf040 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xadefa8 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xadf1a0 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xadf108 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | |-CXXMethodDecl 0xadf268 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xadf318 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xadf570 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xadf3e8 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xadf450 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xadf658 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xadf840 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xadf6c0 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xadf728 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xadf900 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xadfa60 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<unsigned short>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xadf968 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xadfb18 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xadfc70 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<unsigned short>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xadfb70 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xadfd28 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xadff20 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xadfda0 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xadfe08 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xadffe0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae01d0 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae0048 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae00b0 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae0290 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae0600 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae0368 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xae03e0 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae0448 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xae04b0 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae06d0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae09d0 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae0738 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xae07b0 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae0818 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xae0880 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae0aa0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae0d40 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae0b18 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xae0b90 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae0c10 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae0e08 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae1090 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae0e80 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xae0ef8 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae0f60 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae1158 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae13c8 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae11d0 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xae1248 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae12b0 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xae1318 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae1498 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae16f8 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae1500 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xae1578 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae15e0 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xae1648 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae17c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae19c8 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae1840 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xae18b8 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae1920 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae1a90 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae1c90 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned short>::__int_type &, std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae1b08 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned short>::__int_type &'
| | | | |-ParmVarDecl 0xae1b80 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae1be8 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae1d58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae1ed8 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae1dd0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae1e38 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae1f98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae2108 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae2000 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae2068 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae21c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae2348 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae2240 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae22a8 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae2408 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae2578 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae2470 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae24d8 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae2638 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae27b8 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae26b0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae2718 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae2878 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae29e8 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae28e0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae2948 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae2aa8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae2c58 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae2b20 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae2b88 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae2d18 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae2e88 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae2d80 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae2de8 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae2f48 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae30c8 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae2fc0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | | | |-ParmVarDecl 0xae3028 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae3188 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xae32f8 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xae31f0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned short>::__int_type':'unsigned short'
| | |   |-ParmVarDecl 0xae3258 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xae33b8 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xae4830 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'int'
| | | | `-BuiltinType 0x8262a0 'int'
| | | |-CXXRecordDecl 0xae4a28 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xae4af8 <line:326:7, col:26> col:13 value_type 'int':'int'
| | | | `-SubstTemplateTypeParmType 0xae4ac0 'int' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x8262a0 'int'
| | | |-TypeAliasDecl 0xae4b90 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<int>::value_type':'int'
| | | | `-TypedefType 0xae4b60 'std::__atomic_base<int>::value_type' sugar
| | | |   |-TypeAlias 0xae4af8 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xae4ac0 'int' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x8262a0 'int'
| | | |-AccessSpecDecl 0xae4bf0 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xae5050 <line:330:7, col:21> col:21 __int_type 'int':'int'
| | | | `-SubstTemplateTypeParmType 0xae4ac0 'int' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x8262a0 'int'
| | | |-VarDecl 0xae50a8 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 4
| | | | `-ImplicitCastExpr 0xae5230 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xae5200 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xae5180 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xae5130 <col:2, col:13> 'unsigned long' sizeof 'int':'int'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xae5160 <col:17, col:29> 'unsigned long' alignof 'int':'int'
| | | |     |-UnaryExprOrTypeTraitExpr 0xae51b0 <col:33, col:44> 'unsigned long' sizeof 'int':'int'
| | | |     `-UnaryExprOrTypeTraitExpr 0xae51e0 <col:48, col:60> 'unsigned long' alignof 'int':'int'
| | | |-FieldDecl 0xae52d0 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<int>::__int_type':'int'
| | | | `-AlignedAttr 0xae5398 <col:7> alignas
| | | |   `-ConstantExpr 0xae5378 <col:15> 'int'
| | | |     |-value: Int 4
| | | |     `-ImplicitCastExpr 0xae5360 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xae5340 <col:15> 'const int' lvalue Var 0xae50a8 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xae53f8 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xae5458 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xae5538 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xae5718 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<int> &)' delete trivial
| | | | `-ParmVarDecl 0xae5638 <col:21, col:40> col:41 'const std::__atomic_base<int> &'
| | | |-CXXMethodDecl 0xae58e8 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<int> &(const std::__atomic_base<int> &)' delete trivial
| | | | `-ParmVarDecl 0xae5828 <col:32, col:51> col:52 'const std::__atomic_base<int> &'
| | | |-CXXMethodDecl 0xae5a78 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<int> &(const std::__atomic_base<int> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xae59b0 <col:32, col:51> col:52 'const std::__atomic_base<int> &'
| | | |-CXXConstructorDecl 0xae5c40 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<int>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xae5b50 <col:31, col:42> col:42 used __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-CXXCtorInitializer Field 0xae52d0 '_M_i' 'std::__atomic_base<int>::__int_type':'int'
| | | | | `-ImplicitCastExpr 0xaecea0 <col:64> 'std::__atomic_base<int>::__int_type':'int' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xaece60 <col:64> 'std::__atomic_base<int>::__int_type':'int' lvalue ParmVar 0xae5b50 '__i' 'std::__atomic_base<int>::__int_type':'int'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xae5db8 <line:347:7, line:348:24> line:347:7 operator int 'std::__atomic_base<int>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xae5f10 <line:350:7, line:351:24> line:350:7 operator int 'std::__atomic_base<int>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xae60f0 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xae5ff8 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xae62c0 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xae61c8 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xae6450 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<int>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xae6388 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xae65d0 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<int>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xae6508 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xae6730 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<int>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xae6698 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xae6880 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<int>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xae67e8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xae69d0 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<int>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xae6b10 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<int>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xae6bf8 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<int>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xae6ce0 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<int>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xae6e48 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xae6db0 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xae7050 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xae6f10 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xae71c0 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xae7128 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xae7320 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xae7288 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xae7490 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xae73f8 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xae75f0 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xae7558 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xae7760 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xae76c8 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xae78c0 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xae7828 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xae7a30 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xae7998 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xae7b90 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xae7af8 <col:18, col:29> col:29 __i 'std::__atomic_base<int>::__int_type':'int'
| | | |-CXXMethodDecl 0xae7c58 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xae7d08 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xae7f60 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae7dd8 <col:13, col:24> col:24 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xae7e40 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae8048 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae8230 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae80b0 <col:13, col:24> col:24 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xae8118 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae82f0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae8450 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<int>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xae8358 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae8508 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae8660 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<int>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xae8560 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae8718 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae8910 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae8790 <col:16, col:27> col:27 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xae87f8 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae89d0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae8bc0 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae8a38 <col:16, col:27> col:27 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xae8aa0 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae8c80 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae9060 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae8d58 <col:29, col:41> col:41 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xae8dd0 <col:47, col:58> col:58 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xae8e38 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xae8ea0 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae9130 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae9430 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae9198 <col:29, col:41> col:41 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xae9210 <col:47, col:58> col:58 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xae9278 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xae92e0 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae9500 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae9780 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae9578 <col:29, col:41> col:41 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xae95f0 <col:47, col:58> col:58 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xae9658 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae9848 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae9ad0 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae98c0 <col:29, col:41> col:41 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xae9938 <col:47, col:58> col:58 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xae99a0 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae9b98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xae9e08 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xae9c10 <col:31, col:43> col:43 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xae9c88 <col:49, col:60> col:60 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xae9cf0 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xae9d58 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xae9ed8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaea138 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xae9f40 <col:31, col:43> col:43 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xae9fb8 <col:49, col:60> col:60 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xaea020 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xaea088 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaea208 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaea408 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaea280 <col:31, col:43> col:43 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xaea2f8 <col:49, col:60> col:60 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xaea360 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaea4d0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaea6d0 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<int>::__int_type &, std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaea548 <col:31, col:43> col:43 __i1 'std::__atomic_base<int>::__int_type &'
| | | | |-ParmVarDecl 0xaea5c0 <col:49, col:60> col:60 __i2 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xaea628 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaea798 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaea918 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaea810 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xaea878 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaea9d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaeab48 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaeaa40 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xaeaaa8 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaeac08 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaead88 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaeac80 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xaeace8 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaeae48 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaeafb8 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaeaeb0 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xaeaf18 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaeb090 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaeb210 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaeb108 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xaeb170 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaeb2d0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaeb440 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaeb338 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xaeb3a0 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaeb500 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaeb680 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaeb578 <col:16, col:27> col:27 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xaeb5e0 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaeb740 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaeb8b0 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaeb7a8 <col:16, col:27> col:27 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xaeb810 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaeb970 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaebaf0 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaeb9e8 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | | | |-ParmVarDecl 0xaeba50 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaebbb0 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xaebd20 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xaebc18 <col:17, col:28> col:28 __i 'std::__atomic_base<int>::__int_type':'int'
| | |   |-ParmVarDecl 0xaebc80 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xaebde0 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xaed2a0 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'unsigned int'
| | | | `-BuiltinType 0x826340 'unsigned int'
| | | |-CXXRecordDecl 0xaed498 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xaed568 <line:326:7, col:26> col:13 value_type 'unsigned int':'unsigned int'
| | | | `-SubstTemplateTypeParmType 0xaed530 'unsigned int' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826340 'unsigned int'
| | | |-TypeAliasDecl 0xaed600 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<unsigned int>::value_type':'unsigned int'
| | | | `-TypedefType 0xaed5d0 'std::__atomic_base<unsigned int>::value_type' sugar
| | | |   |-TypeAlias 0xaed568 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xaed530 'unsigned int' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x826340 'unsigned int'
| | | |-AccessSpecDecl 0xaed660 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xaed698 <line:330:7, col:21> col:21 __int_type 'unsigned int':'unsigned int'
| | | | `-SubstTemplateTypeParmType 0xaed530 'unsigned int' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826340 'unsigned int'
| | | |-VarDecl 0xaed6f0 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 4
| | | | `-ImplicitCastExpr 0xaed878 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xaed848 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xaed7c8 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xaed778 <col:2, col:13> 'unsigned long' sizeof 'unsigned int':'unsigned int'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xaed7a8 <col:17, col:29> 'unsigned long' alignof 'unsigned int':'unsigned int'
| | | |     |-UnaryExprOrTypeTraitExpr 0xaed7f8 <col:33, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
| | | |     `-UnaryExprOrTypeTraitExpr 0xaed828 <col:48, col:60> 'unsigned long' alignof 'unsigned int':'unsigned int'
| | | |-FieldDecl 0xaed920 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | `-AlignedAttr 0xaed9e8 <col:7> alignas
| | | |   `-ConstantExpr 0xaed9c8 <col:15> 'int'
| | | |     |-value: Int 4
| | | |     `-ImplicitCastExpr 0xaed9b0 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xaed990 <col:15> 'const int' lvalue Var 0xaed6f0 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xaeda48 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xaedaa8 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xaedb88 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xaedd68 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<unsigned int> &)' delete trivial
| | | | `-ParmVarDecl 0xaedc88 <col:21, col:40> col:41 'const std::__atomic_base<unsigned int> &'
| | | |-CXXMethodDecl 0xaedf38 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<unsigned int> &(const std::__atomic_base<unsigned int> &)' delete trivial
| | | | `-ParmVarDecl 0xaede78 <col:32, col:51> col:52 'const std::__atomic_base<unsigned int> &'
| | | |-CXXMethodDecl 0xaee0c8 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<unsigned int> &(const std::__atomic_base<unsigned int> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xaee000 <col:32, col:51> col:52 'const std::__atomic_base<unsigned int> &'
| | | |-CXXConstructorDecl 0xaee2c0 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xaee1a0 <col:31, col:42> col:42 used __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-CXXCtorInitializer Field 0xaed920 '_M_i' 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | | `-ImplicitCastExpr 0xaf5530 <col:64> 'std::__atomic_base<unsigned int>::__int_type':'unsigned int' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xaf54f0 <col:64> 'std::__atomic_base<unsigned int>::__int_type':'unsigned int' lvalue ParmVar 0xaee1a0 '__i' 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xaee438 <line:347:7, line:348:24> line:347:7 operator unsigned int 'std::__atomic_base<unsigned int>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xaee590 <line:350:7, line:351:24> line:350:7 operator unsigned int 'std::__atomic_base<unsigned int>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xaee770 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xaee678 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xaee940 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xaee848 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xaeeb00 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<unsigned int>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xaeea08 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xaeecb0 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<unsigned int>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xaeebb8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xaeee10 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<unsigned int>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xaeed78 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xaeef60 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<unsigned int>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xaeeec8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xaef0e0 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<unsigned int>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xaef220 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<unsigned int>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xaef308 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<unsigned int>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xaef3f0 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<unsigned int>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xaef558 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xaef4c0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xaef6b8 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xaef620 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xaef828 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xaef790 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xaef988 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xaef8f0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xaefaf8 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xaefa60 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xaefc58 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xaefbc0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xaefdc8 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xaefd30 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xaeff28 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xaefe90 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xaf0098 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xaf0000 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xaf01f8 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xaf0160 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | |-CXXMethodDecl 0xaf02c0 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xaf0370 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xaf05c0 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaf0440 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf04a8 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf06a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf0890 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaf0710 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf0778 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf0950 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf0ab0 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<unsigned int>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xaf09b8 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf0b68 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf0cc0 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<unsigned int>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xaf0bc0 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf0d78 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf0f70 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaf0df0 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf0e58 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf1030 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf1230 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaf10b0 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf1118 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf12f0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf1660 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaf13c8 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xaf1440 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf14a8 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xaf1510 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf1730 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf1a30 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaf1798 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xaf1810 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf1878 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xaf18e0 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf1b00 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf1d80 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaf1b78 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xaf1bf0 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf1c58 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf1e48 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf20d0 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaf1ec0 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xaf1f38 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf1fa0 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf2198 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf2408 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaf2210 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xaf2288 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf22f0 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xaf2358 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf24d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf2738 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaf2540 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xaf25b8 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf2620 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xaf2688 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf2808 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf2a08 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaf2880 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xaf28f8 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf2960 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf2ad0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf2cd0 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned int>::__int_type &, std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaf2b48 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned int>::__int_type &'
| | | | |-ParmVarDecl 0xaf2bc0 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf2c28 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf2d98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf2f18 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaf2e10 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf2e78 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf2fd8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf31b8 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaf30b0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf3118 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf3278 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf33f8 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaf32f0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf3358 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf34b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf3628 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaf3520 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf3588 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf36e8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf3868 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaf3760 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf37c8 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf3928 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf3a98 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaf3990 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf39f8 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf3b58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf3cd8 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaf3bd0 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf3c38 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf3d98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf3f08 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaf3e00 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf3e68 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf3fc8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaf4148 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaf4040 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | | | |-ParmVarDecl 0xaf40a8 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaf4208 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xaf4378 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xaf4270 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned int>::__int_type':'unsigned int'
| | |   |-ParmVarDecl 0xaf42d8 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xaf4438 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xaf58e0 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'long'
| | | | `-BuiltinType 0x8262c0 'long'
| | | |-CXXRecordDecl 0xaf5ad8 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xaf5ba8 <line:326:7, col:26> col:13 value_type 'long':'long'
| | | | `-SubstTemplateTypeParmType 0xaf5b70 'long' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x8262c0 'long'
| | | |-TypeAliasDecl 0xaf5c40 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<long>::value_type':'long'
| | | | `-TypedefType 0xaf5c10 'std::__atomic_base<long>::value_type' sugar
| | | |   |-TypeAlias 0xaf5ba8 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xaf5b70 'long' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x8262c0 'long'
| | | |-AccessSpecDecl 0xaf5ca0 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xaf5cd8 <line:330:7, col:21> col:21 __int_type 'long':'long'
| | | | `-SubstTemplateTypeParmType 0xaf5b70 'long' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x8262c0 'long'
| | | |-VarDecl 0xaf5d30 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 8
| | | | `-ImplicitCastExpr 0xaf5eb8 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xaf5e88 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xaf5e08 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xaf5db8 <col:2, col:13> 'unsigned long' sizeof 'long':'long'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xaf5de8 <col:17, col:29> 'unsigned long' alignof 'long':'long'
| | | |     |-UnaryExprOrTypeTraitExpr 0xaf5e38 <col:33, col:44> 'unsigned long' sizeof 'long':'long'
| | | |     `-UnaryExprOrTypeTraitExpr 0xaf5e68 <col:48, col:60> 'unsigned long' alignof 'long':'long'
| | | |-FieldDecl 0xaf5f60 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<long>::__int_type':'long'
| | | | `-AlignedAttr 0xaf6028 <col:7> alignas
| | | |   `-ConstantExpr 0xaf6008 <col:15> 'int'
| | | |     |-value: Int 8
| | | |     `-ImplicitCastExpr 0xaf5ff0 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xaf5fd0 <col:15> 'const int' lvalue Var 0xaf5d30 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xaf6088 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xaf60e8 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xaf61c8 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xaf63a8 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<long> &)' delete trivial
| | | | `-ParmVarDecl 0xaf62c8 <col:21, col:40> col:41 'const std::__atomic_base<long> &'
| | | |-CXXMethodDecl 0xaf6578 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<long> &(const std::__atomic_base<long> &)' delete trivial
| | | | `-ParmVarDecl 0xaf64b8 <col:32, col:51> col:52 'const std::__atomic_base<long> &'
| | | |-CXXMethodDecl 0xaf6708 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<long> &(const std::__atomic_base<long> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xaf6640 <col:32, col:51> col:52 'const std::__atomic_base<long> &'
| | | |-CXXConstructorDecl 0xaf6900 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<long>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xaf67e0 <col:31, col:42> col:42 used __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-CXXCtorInitializer Field 0xaf5f60 '_M_i' 'std::__atomic_base<long>::__int_type':'long'
| | | | | `-ImplicitCastExpr 0xb009c0 <col:64> 'std::__atomic_base<long>::__int_type':'long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xb00980 <col:64> 'std::__atomic_base<long>::__int_type':'long' lvalue ParmVar 0xaf67e0 '__i' 'std::__atomic_base<long>::__int_type':'long'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xaf6a78 <line:347:7, line:348:24> line:347:7 operator long 'std::__atomic_base<long>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xaf6bd0 <line:350:7, line:351:24> line:350:7 operator long 'std::__atomic_base<long>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xaf6db0 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xaf6cb8 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xaf6f80 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xaf6e88 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xaf9fa0 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xaf7048 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xafa150 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xafa058 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xafa2b0 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xafa218 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xafa400 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xafa368 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xafa550 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xafa690 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xafa778 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xafa860 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xafa9c8 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xafa930 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xafab28 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xafaa90 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xafac98 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xafac00 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xafadf8 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xafad60 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xafaf68 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xafaed0 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xafb0c8 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xafb030 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xafb238 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xafb1a0 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xafb398 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xafb300 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xafb508 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xafb470 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xafb668 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xafb5d0 <col:18, col:29> col:29 __i 'std::__atomic_base<long>::__int_type':'long'
| | | |-CXXMethodDecl 0xafb730 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xafb7e0 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xafba30 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xafb8b0 <col:13, col:24> col:24 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafb918 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafbb18 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafbd00 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xafbb80 <col:13, col:24> col:24 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafbbe8 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafbdc0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafbf50 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<long>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xafbe28 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafc008 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafc160 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<long>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xafc060 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafc218 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafc410 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xafc290 <col:16, col:27> col:27 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafc2f8 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafc4d0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafc6c0 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xafc538 <col:16, col:27> col:27 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafc5a0 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafc780 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafcaf0 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xafc858 <col:29, col:41> col:41 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xafc8d0 <col:47, col:58> col:58 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafc938 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xafc9a0 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafcbc0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafcec0 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xafcc28 <col:29, col:41> col:41 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xafcca0 <col:47, col:58> col:58 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafcd08 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xafcd70 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafcf90 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafd210 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xafd008 <col:29, col:41> col:41 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xafd080 <col:47, col:58> col:58 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafd0e8 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafd2d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafd560 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xafd350 <col:29, col:41> col:41 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xafd3c8 <col:47, col:58> col:58 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafd430 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafd628 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafd898 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xafd6a0 <col:31, col:43> col:43 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xafd718 <col:49, col:60> col:60 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafd780 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xafd7e8 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafd968 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafdbc8 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xafd9d0 <col:31, col:43> col:43 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xafda48 <col:49, col:60> col:60 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafdab0 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xafdb18 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafdc98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafdf30 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xafdd10 <col:31, col:43> col:43 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xafdd88 <col:49, col:60> col:60 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafddf0 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafdff8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafe1f8 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<long>::__int_type &, std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xafe070 <col:31, col:43> col:43 __i1 'std::__atomic_base<long>::__int_type &'
| | | | |-ParmVarDecl 0xafe0e8 <col:49, col:60> col:60 __i2 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafe150 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafe2c0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafe440 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xafe338 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafe3a0 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafe500 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafe670 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xafe568 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafe5d0 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafe730 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafe8b0 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xafe7a8 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafe810 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafe970 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafeae0 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xafe9d8 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafea40 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafeba0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafed20 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xafec18 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafec80 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xafede0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xafef50 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xafee48 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xafeeb0 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaff010 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaff190 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaff088 <col:16, col:27> col:27 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xaff0f0 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaff250 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaff3c0 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xaff2b8 <col:16, col:27> col:27 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xaff320 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaff480 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xaff600 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xaff4f8 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | | | |-ParmVarDecl 0xaff560 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xaff6c0 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xaff830 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xaff728 <col:17, col:28> col:28 __i 'std::__atomic_base<long>::__int_type':'long'
| | |   |-ParmVarDecl 0xaff790 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xaff8f0 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xb00d70 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'unsigned long'
| | | | `-BuiltinType 0x826360 'unsigned long'
| | | |-CXXRecordDecl 0xb00f68 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xb01038 <line:326:7, col:26> col:13 value_type 'unsigned long':'unsigned long'
| | | | `-SubstTemplateTypeParmType 0xb01000 'unsigned long' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826360 'unsigned long'
| | | |-TypeAliasDecl 0xb010d0 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<unsigned long>::value_type':'unsigned long'
| | | | `-TypedefType 0xb010a0 'std::__atomic_base<unsigned long>::value_type' sugar
| | | |   |-TypeAlias 0xb01038 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xb01000 'unsigned long' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x826360 'unsigned long'
| | | |-AccessSpecDecl 0xb01130 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xb01168 <line:330:7, col:21> col:21 __int_type 'unsigned long':'unsigned long'
| | | | `-SubstTemplateTypeParmType 0xb01000 'unsigned long' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826360 'unsigned long'
| | | |-VarDecl 0xb011c0 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 8
| | | | `-ImplicitCastExpr 0xb01348 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xb01318 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xb01298 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xb01248 <col:2, col:13> 'unsigned long' sizeof 'unsigned long':'unsigned long'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xb01278 <col:17, col:29> 'unsigned long' alignof 'unsigned long':'unsigned long'
| | | |     |-UnaryExprOrTypeTraitExpr 0xb012c8 <col:33, col:44> 'unsigned long' sizeof 'unsigned long':'unsigned long'
| | | |     `-UnaryExprOrTypeTraitExpr 0xb012f8 <col:48, col:60> 'unsigned long' alignof 'unsigned long':'unsigned long'
| | | |-FieldDecl 0xb013f0 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | `-AlignedAttr 0xb014b8 <col:7> alignas
| | | |   `-ConstantExpr 0xb01498 <col:15> 'int'
| | | |     |-value: Int 8
| | | |     `-ImplicitCastExpr 0xb01480 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xb01460 <col:15> 'const int' lvalue Var 0xb011c0 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xb01518 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xb01578 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xb01658 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xb01838 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<unsigned long> &)' delete trivial
| | | | `-ParmVarDecl 0xb01758 <col:21, col:40> col:41 'const std::__atomic_base<unsigned long> &'
| | | |-CXXMethodDecl 0xb01a08 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<unsigned long> &(const std::__atomic_base<unsigned long> &)' delete trivial
| | | | `-ParmVarDecl 0xb01948 <col:32, col:51> col:52 'const std::__atomic_base<unsigned long> &'
| | | |-CXXMethodDecl 0xb01b98 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<unsigned long> &(const std::__atomic_base<unsigned long> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xb01ad0 <col:32, col:51> col:52 'const std::__atomic_base<unsigned long> &'
| | | |-CXXConstructorDecl 0xb01d90 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xb01c70 <col:31, col:42> col:42 used __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-CXXCtorInitializer Field 0xb013f0 '_M_i' 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | | `-ImplicitCastExpr 0xb09020 <col:64> 'std::__atomic_base<unsigned long>::__int_type':'unsigned long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xb08fe0 <col:64> 'std::__atomic_base<unsigned long>::__int_type':'unsigned long' lvalue ParmVar 0xb01c70 '__i' 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xb01f50 <line:347:7, line:348:24> line:347:7 operator unsigned long 'std::__atomic_base<unsigned long>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xb020a0 <line:350:7, line:351:24> line:350:7 operator unsigned long 'std::__atomic_base<unsigned long>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xb02280 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb02188 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xb02450 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb02358 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xb02610 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<unsigned long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xb02518 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb027c0 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<unsigned long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xb026c8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb02920 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<unsigned long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xb02888 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb02a70 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<unsigned long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xb029d8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb02bc0 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<unsigned long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xb02d00 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<unsigned long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xb02de8 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<unsigned long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xb02ed0 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<unsigned long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xb03038 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb02fa0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xb03198 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb03100 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xb03308 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb03270 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xb03468 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb033d0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xb035d8 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb03540 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xb03738 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb036a0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xb038a8 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb03810 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xb03a08 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb03970 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xb03b78 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb03ae0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xb03cd8 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb03c40 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | |-CXXMethodDecl 0xb03da0 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xb03e50 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xb040e0 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb03f60 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb03fc8 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb041c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb043b0 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb04230 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb04298 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb04470 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb045d0 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<unsigned long>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xb044d8 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb04688 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb047e0 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<unsigned long>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xb046e0 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb04898 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb04a90 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb04910 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb04978 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb04b50 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb04d40 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb04bb8 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb04c20 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb04e00 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb05170 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb04ed8 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xb04f50 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb04fb8 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb05020 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb05240 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb05540 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb052a8 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xb05320 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb05388 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb053f0 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb05610 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb05890 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb05688 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xb05700 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb05768 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb05958 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb05be0 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb059d0 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xb05a48 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb05ab0 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb05ca8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb05f70 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb05d20 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xb05d98 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb05e00 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb05e68 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb06040 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb062a0 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb060a8 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xb06120 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb06188 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb061f0 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb06370 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb06570 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb063e8 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xb06460 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb064c8 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb06638 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb06838 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long>::__int_type &, std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb066b0 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long>::__int_type &'
| | | | |-ParmVarDecl 0xb06728 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb06790 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb06900 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb06a80 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb06978 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb069e0 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb06b40 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb06cb0 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb06ba8 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb06c10 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb06d70 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb06ef0 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb06de8 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb06e50 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb06fb0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb07120 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb07018 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb07080 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb071e0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb07360 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb07258 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb072c0 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb07420 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb07590 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb07488 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb074f0 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb07650 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb077d0 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb076c8 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb07730 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb07890 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb07a00 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb078f8 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb07960 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb07ac0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb07c40 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb07b38 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | | | |-ParmVarDecl 0xb07ba0 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb07d00 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xb07e70 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xb07d68 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long>::__int_type':'unsigned long'
| | |   |-ParmVarDecl 0xb07dd0 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xb07f30 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xb093d0 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'long long'
| | | | `-BuiltinType 0x8262e0 'long long'
| | | |-CXXRecordDecl 0xb095c8 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xb09698 <line:326:7, col:26> col:13 value_type 'long long':'long long'
| | | | `-SubstTemplateTypeParmType 0xb09660 'long long' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x8262e0 'long long'
| | | |-TypeAliasDecl 0xb09730 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<long long>::value_type':'long long'
| | | | `-TypedefType 0xb09700 'std::__atomic_base<long long>::value_type' sugar
| | | |   |-TypeAlias 0xb09698 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xb09660 'long long' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x8262e0 'long long'
| | | |-AccessSpecDecl 0xb09790 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xb097c8 <line:330:7, col:21> col:21 __int_type 'long long':'long long'
| | | | `-SubstTemplateTypeParmType 0xb09660 'long long' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x8262e0 'long long'
| | | |-VarDecl 0xb09820 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 8
| | | | `-ImplicitCastExpr 0xb099a8 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xb09978 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xb098f8 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xb098a8 <col:2, col:13> 'unsigned long' sizeof 'long long':'long long'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xb098d8 <col:17, col:29> 'unsigned long' alignof 'long long':'long long'
| | | |     |-UnaryExprOrTypeTraitExpr 0xb09928 <col:33, col:44> 'unsigned long' sizeof 'long long':'long long'
| | | |     `-UnaryExprOrTypeTraitExpr 0xb09958 <col:48, col:60> 'unsigned long' alignof 'long long':'long long'
| | | |-FieldDecl 0xb09a50 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | `-AlignedAttr 0xb09b18 <col:7> alignas
| | | |   `-ConstantExpr 0xb09af8 <col:15> 'int'
| | | |     |-value: Int 8
| | | |     `-ImplicitCastExpr 0xb09ae0 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xb09ac0 <col:15> 'const int' lvalue Var 0xb09820 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xb09b78 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xb09bd8 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xb09cb8 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xb09e98 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<long long> &)' delete trivial
| | | | `-ParmVarDecl 0xb09db8 <col:21, col:40> col:41 'const std::__atomic_base<long long> &'
| | | |-CXXMethodDecl 0xb0beb8 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<long long> &(const std::__atomic_base<long long> &)' delete trivial
| | | | `-ParmVarDecl 0xb0bdf8 <col:32, col:51> col:52 'const std::__atomic_base<long long> &'
| | | |-CXXMethodDecl 0xb0c048 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<long long> &(const std::__atomic_base<long long> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xb0bf80 <col:32, col:51> col:52 'const std::__atomic_base<long long> &'
| | | |-CXXConstructorDecl 0xb0c240 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<long long>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xb0c120 <col:31, col:42> col:42 used __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-CXXCtorInitializer Field 0xb09a50 '_M_i' 'std::__atomic_base<long long>::__int_type':'long long'
| | | | | `-ImplicitCastExpr 0xb13420 <col:64> 'std::__atomic_base<long long>::__int_type':'long long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xb133e0 <col:64> 'std::__atomic_base<long long>::__int_type':'long long' lvalue ParmVar 0xb0c120 '__i' 'std::__atomic_base<long long>::__int_type':'long long'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xb0c3b8 <line:347:7, line:348:24> line:347:7 operator long long 'std::__atomic_base<long long>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xb0c510 <line:350:7, line:351:24> line:350:7 operator long long 'std::__atomic_base<long long>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xb0c6f0 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb0c5f8 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xb0c8c0 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb0c7c8 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xb0ca80 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<long long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xb0c988 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb0cc30 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<long long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xb0cb38 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb0cd90 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<long long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xb0ccf8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb0cee0 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<long long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xb0ce48 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb0d030 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<long long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xb0d170 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<long long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xb0d258 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<long long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xb0d340 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<long long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xb0d4a8 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb0d410 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xb0d608 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb0d570 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xb0d778 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb0d6e0 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xb0d8d8 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb0d840 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xb0da48 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb0d9b0 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xb0dba8 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb0db10 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xb0dd18 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb0dc80 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xb0de90 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb0ddf8 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xb0e000 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb0df68 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xb0e160 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb0e0c8 <col:18, col:29> col:29 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | |-CXXMethodDecl 0xb0e228 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xb0e2d8 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xb0e530 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb0e3a8 <col:13, col:24> col:24 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb0e410 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb0e618 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb0e800 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb0e680 <col:13, col:24> col:24 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb0e6e8 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb0e8c0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb0ea20 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<long long>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xb0e928 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb0ead8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb0ec30 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<long long>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xb0eb30 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb0ece8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb0eee0 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb0ed60 <col:16, col:27> col:27 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb0edc8 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb0efa0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb0f190 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb0f008 <col:16, col:27> col:27 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb0f070 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb0f250 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb0f5c0 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb0f328 <col:29, col:41> col:41 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xb0f3a0 <col:47, col:58> col:58 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb0f408 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb0f470 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb0f690 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb0f990 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb0f6f8 <col:29, col:41> col:41 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xb0f770 <col:47, col:58> col:58 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb0f7d8 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb0f840 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb0fa60 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb0fce0 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb0fad8 <col:29, col:41> col:41 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xb0fb50 <col:47, col:58> col:58 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb0fbb8 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb0fda8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb10040 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb0fe30 <col:29, col:41> col:41 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xb0fea8 <col:47, col:58> col:58 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb0ff10 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb10108 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb10378 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb10180 <col:31, col:43> col:43 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xb101f8 <col:49, col:60> col:60 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb10260 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb102c8 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb10448 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb106a8 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb104b0 <col:31, col:43> col:43 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xb10528 <col:49, col:60> col:60 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb10590 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb105f8 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb10778 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb10978 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb107f0 <col:31, col:43> col:43 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xb10868 <col:49, col:60> col:60 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb108d0 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb10a40 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb10c40 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<long long>::__int_type &, std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb10ab8 <col:31, col:43> col:43 __i1 'std::__atomic_base<long long>::__int_type &'
| | | | |-ParmVarDecl 0xb10b30 <col:49, col:60> col:60 __i2 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb10b98 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb10d08 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb10e88 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb10d80 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb10de8 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb10f48 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb110b8 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb10fb0 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb11018 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb11178 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb112f8 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb111f0 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb11258 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb113b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb11528 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb11420 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb11488 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb115e8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb11768 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb11660 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb116c8 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb11828 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb11998 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb11890 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb118f8 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb11a58 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb11bd8 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb11ad0 <col:16, col:27> col:27 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb11b38 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb11c98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb11e28 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb11d00 <col:16, col:27> col:27 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb11d68 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb11ee8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb12068 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb11f60 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | | | |-ParmVarDecl 0xb11fc8 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb12128 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xb12298 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xb12190 <col:17, col:28> col:28 __i 'std::__atomic_base<long long>::__int_type':'long long'
| | |   |-ParmVarDecl 0xb121f8 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xb12358 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xb137d0 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'unsigned long long'
| | | | `-BuiltinType 0x826380 'unsigned long long'
| | | |-CXXRecordDecl 0xb139c8 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xb13a98 <line:326:7, col:26> col:13 value_type 'unsigned long long':'unsigned long long'
| | | | `-SubstTemplateTypeParmType 0xb13a60 'unsigned long long' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826380 'unsigned long long'
| | | |-TypeAliasDecl 0xb13b30 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<unsigned long long>::value_type':'unsigned long long'
| | | | `-TypedefType 0xb13b00 'std::__atomic_base<unsigned long long>::value_type' sugar
| | | |   |-TypeAlias 0xb13a98 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xb13a60 'unsigned long long' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x826380 'unsigned long long'
| | | |-AccessSpecDecl 0xb13b90 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xb13bc8 <line:330:7, col:21> col:21 __int_type 'unsigned long long':'unsigned long long'
| | | | `-SubstTemplateTypeParmType 0xb13a60 'unsigned long long' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x826380 'unsigned long long'
| | | |-VarDecl 0xb13c20 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 8
| | | | `-ImplicitCastExpr 0xb13da8 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xb13d78 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xb13cf8 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xb13ca8 <col:2, col:13> 'unsigned long' sizeof 'unsigned long long':'unsigned long long'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xb13cd8 <col:17, col:29> 'unsigned long' alignof 'unsigned long long':'unsigned long long'
| | | |     |-UnaryExprOrTypeTraitExpr 0xb13d28 <col:33, col:44> 'unsigned long' sizeof 'unsigned long long':'unsigned long long'
| | | |     `-UnaryExprOrTypeTraitExpr 0xb13d58 <col:48, col:60> 'unsigned long' alignof 'unsigned long long':'unsigned long long'
| | | |-FieldDecl 0xb152b0 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | `-AlignedAttr 0xb15378 <col:7> alignas
| | | |   `-ConstantExpr 0xb15358 <col:15> 'int'
| | | |     |-value: Int 8
| | | |     `-ImplicitCastExpr 0xb15340 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xb15320 <col:15> 'const int' lvalue Var 0xb13c20 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xb153d8 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xb15438 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xb15518 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xb156f8 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<unsigned long long> &)' delete trivial
| | | | `-ParmVarDecl 0xb15618 <col:21, col:40> col:41 'const std::__atomic_base<unsigned long long> &'
| | | |-CXXMethodDecl 0xb158c8 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<unsigned long long> &(const std::__atomic_base<unsigned long long> &)' delete trivial
| | | | `-ParmVarDecl 0xb15808 <col:32, col:51> col:52 'const std::__atomic_base<unsigned long long> &'
| | | |-CXXMethodDecl 0xb15a58 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<unsigned long long> &(const std::__atomic_base<unsigned long long> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xb15990 <col:32, col:51> col:52 'const std::__atomic_base<unsigned long long> &'
| | | |-CXXConstructorDecl 0xb15c50 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xb15b30 <col:31, col:42> col:42 used __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-CXXCtorInitializer Field 0xb152b0 '_M_i' 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | | `-ImplicitCastExpr 0xb1eee0 <col:64> 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xb1eea0 <col:64> 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long' lvalue ParmVar 0xb15b30 '__i' 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xb15dc8 <line:347:7, line:348:24> line:347:7 operator unsigned long long 'std::__atomic_base<unsigned long long>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xb15f20 <line:350:7, line:351:24> line:350:7 operator unsigned long long 'std::__atomic_base<unsigned long long>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xb16100 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb16008 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xb162d0 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb161d8 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xb16490 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<unsigned long long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xb16398 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb16640 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<unsigned long long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xb16548 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb167a0 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<unsigned long long>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xb16708 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb168f0 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<unsigned long long>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xb16858 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb16a40 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<unsigned long long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xb16b80 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<unsigned long long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xb16c68 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<unsigned long long>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xb16d50 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<unsigned long long>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xb16eb8 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb16e20 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xb17018 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb16f80 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xb17230 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb170f0 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xb17390 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb172f8 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xb17500 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb17468 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xb17660 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb175c8 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xb177d0 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb17738 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xb17930 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb17898 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xb17aa0 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb17a08 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xb17c00 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb17b68 <col:18, col:29> col:29 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | |-CXXMethodDecl 0xb17cc8 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xb17d78 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xb17fd0 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb17e48 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xb17eb0 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb180b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb182a0 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb18120 <col:13, col:24> col:24 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xb18188 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb18360 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb184c0 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<unsigned long long>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xb183c8 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb18578 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb186d0 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<unsigned long long>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xb185d0 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb18788 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb18980 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb18800 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xb18868 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb18a40 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb18c30 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb18aa8 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xb18b10 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb18cf0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb19060 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb18dc8 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xb18e40 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xb18ea8 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb18f10 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb19130 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad0db0 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb19198 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xad0b90 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xad0bf8 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xad0c60 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad0e80 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad1100 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad0ef8 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xad0f70 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xad0fd8 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad11c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad1450 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad1240 <col:29, col:41> col:41 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xad12b8 <col:47, col:58> col:58 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xad1320 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad1518 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad1788 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad1590 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xad1608 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xad1670 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xad16d8 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad1858 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad1ab8 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad18c0 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xad1938 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xad19a0 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xad1a08 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad1b88 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad1d88 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad1c00 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xad1c78 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xad1ce0 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad1e50 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad2050 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<unsigned long long>::__int_type &, std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad1ec8 <col:31, col:43> col:43 __i1 'std::__atomic_base<unsigned long long>::__int_type &'
| | | | |-ParmVarDecl 0xad1f40 <col:49, col:60> col:60 __i2 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xad1fa8 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad2118 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad2298 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad2190 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xad21f8 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad2358 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad24c8 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad23c0 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xad2428 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad2588 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad2708 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad2600 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xad2668 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad27c8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xad2938 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xad2830 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xad2898 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xad29f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb1d250 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xad2a70 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xad2ad8 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb1d310 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb1d480 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb1d378 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xb1d3e0 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb1d540 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb1d6c0 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb1d5b8 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xb1d620 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb1d780 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb1d8f0 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb1d7e8 <col:16, col:27> col:27 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xb1d850 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb1d9b0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb1db30 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb1da28 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | | | |-ParmVarDecl 0xb1da90 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb1dbf0 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xb1dd60 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xb1dc58 <col:17, col:28> col:28 __i 'std::__atomic_base<unsigned long long>::__int_type':'unsigned long long'
| | |   |-ParmVarDecl 0xb1dcc0 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xb1de20 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xb1f2d8 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'wchar_t'
| | | | `-BuiltinType 0x8267a0 'wchar_t'
| | | |-CXXRecordDecl 0xb1f4d8 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xb1f5a8 <line:326:7, col:26> col:13 value_type 'wchar_t':'wchar_t'
| | | | `-SubstTemplateTypeParmType 0xb1f570 'wchar_t' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x8267a0 'wchar_t'
| | | |-TypeAliasDecl 0xb1f640 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<wchar_t>::value_type':'wchar_t'
| | | | `-TypedefType 0xb1f610 'std::__atomic_base<wchar_t>::value_type' sugar
| | | |   |-TypeAlias 0xb1f5a8 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xb1f570 'wchar_t' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x8267a0 'wchar_t'
| | | |-AccessSpecDecl 0xb1f6a0 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xb1f6d8 <line:330:7, col:21> col:21 __int_type 'wchar_t':'wchar_t'
| | | | `-SubstTemplateTypeParmType 0xb1f570 'wchar_t' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x8267a0 'wchar_t'
| | | |-VarDecl 0xb1f730 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 4
| | | | `-ImplicitCastExpr 0xb1f8b8 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xb1f888 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xb1f808 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xb1f7b8 <col:2, col:13> 'unsigned long' sizeof 'wchar_t':'wchar_t'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xb1f7e8 <col:17, col:29> 'unsigned long' alignof 'wchar_t':'wchar_t'
| | | |     |-UnaryExprOrTypeTraitExpr 0xb1f838 <col:33, col:44> 'unsigned long' sizeof 'wchar_t':'wchar_t'
| | | |     `-UnaryExprOrTypeTraitExpr 0xb1f868 <col:48, col:60> 'unsigned long' alignof 'wchar_t':'wchar_t'
| | | |-FieldDecl 0xb1f960 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | `-AlignedAttr 0xb1fa28 <col:7> alignas
| | | |   `-ConstantExpr 0xb1fa08 <col:15> 'int'
| | | |     |-value: Int 4
| | | |     `-ImplicitCastExpr 0xb1f9f0 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xb1f9d0 <col:15> 'const int' lvalue Var 0xb1f730 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xb1fa88 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xb1fae8 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xb1fbc8 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xb1fda8 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<wchar_t> &)' delete trivial
| | | | `-ParmVarDecl 0xb1fcc8 <col:21, col:40> col:41 'const std::__atomic_base<wchar_t> &'
| | | |-CXXMethodDecl 0xb1ff78 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<wchar_t> &(const std::__atomic_base<wchar_t> &)' delete trivial
| | | | `-ParmVarDecl 0xb1feb8 <col:32, col:51> col:52 'const std::__atomic_base<wchar_t> &'
| | | |-CXXMethodDecl 0xb20108 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<wchar_t> &(const std::__atomic_base<wchar_t> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xb20040 <col:32, col:51> col:52 'const std::__atomic_base<wchar_t> &'
| | | |-CXXConstructorDecl 0xb20300 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xb201e0 <col:31, col:42> col:42 used __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-CXXCtorInitializer Field 0xb1f960 '_M_i' 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | | `-ImplicitCastExpr 0xb27500 <col:64> 'std::__atomic_base<wchar_t>::__int_type':'wchar_t' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xb274c0 <col:64> 'std::__atomic_base<wchar_t>::__int_type':'wchar_t' lvalue ParmVar 0xb201e0 '__i' 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xb20478 <line:347:7, line:348:24> line:347:7 operator wchar_t 'std::__atomic_base<wchar_t>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xb205d0 <line:350:7, line:351:24> line:350:7 operator wchar_t 'std::__atomic_base<wchar_t>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xb207b0 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb206b8 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xb20980 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb20888 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xb20b40 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<wchar_t>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xb20a48 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb20cf0 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<wchar_t>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xb20bf8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb20e50 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<wchar_t>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xb20db8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb20fa0 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<wchar_t>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xb20f08 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb210f0 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<wchar_t>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xb21270 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<wchar_t>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xb21358 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<wchar_t>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xb21440 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<wchar_t>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xb215a8 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb21510 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xb21708 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb21670 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xb21878 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb217e0 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xb219d8 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb21940 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xb21b48 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb21ab0 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xb21ca8 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb21c10 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xb21e18 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb21d80 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xb21f78 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb21ee0 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xb220e8 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb22050 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xb22248 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb221b0 <col:18, col:29> col:29 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | |-CXXMethodDecl 0xb22310 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xb223c0 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xb22610 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb22490 <col:13, col:24> col:24 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb224f8 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb226f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb228e0 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb22760 <col:13, col:24> col:24 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb227c8 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb229a0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb22b00 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<wchar_t>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xb22a08 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb22bb8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb22d10 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<wchar_t>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xb22c10 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb22dc8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb22fc0 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb22e40 <col:16, col:27> col:27 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb22ea8 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb23080 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb23280 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb230e8 <col:16, col:27> col:27 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb23150 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb23340 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb236b0 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb23418 <col:29, col:41> col:41 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xb23490 <col:47, col:58> col:58 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb234f8 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb23560 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb23780 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb23a80 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb237e8 <col:29, col:41> col:41 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xb23860 <col:47, col:58> col:58 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb238c8 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb23930 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb23b50 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb23dd0 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb23bc8 <col:29, col:41> col:41 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xb23c40 <col:47, col:58> col:58 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb23ca8 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb23e98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb24120 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb23f10 <col:29, col:41> col:41 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xb23f88 <col:47, col:58> col:58 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb23ff0 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb241e8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb24458 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb24260 <col:31, col:43> col:43 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xb242d8 <col:49, col:60> col:60 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb24340 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb243a8 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb24528 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb24788 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb24590 <col:31, col:43> col:43 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xb24608 <col:49, col:60> col:60 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb24670 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb246d8 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb24858 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb24a58 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb248d0 <col:31, col:43> col:43 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xb24948 <col:49, col:60> col:60 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb249b0 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb24b20 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb24d20 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<wchar_t>::__int_type &, std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb24b98 <col:31, col:43> col:43 __i1 'std::__atomic_base<wchar_t>::__int_type &'
| | | | |-ParmVarDecl 0xb24c10 <col:49, col:60> col:60 __i2 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb24c78 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb24de8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb24f68 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb24e60 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb24ec8 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb25028 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb25198 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb25090 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb250f8 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb25258 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb253e8 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb252e0 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb25348 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb254a8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb25618 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb25510 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb25578 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb256d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb25858 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb25750 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb257b8 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb25918 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb25a88 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb25980 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb259e8 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb25b48 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb25cc8 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb25bc0 <col:16, col:27> col:27 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb25c28 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb25d88 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb25ef8 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb25df0 <col:16, col:27> col:27 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb25e58 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb25fb8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb26138 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb26030 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | | | |-ParmVarDecl 0xb26098 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb261f8 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xb26368 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xb26260 <col:17, col:28> col:28 __i 'std::__atomic_base<wchar_t>::__int_type':'wchar_t'
| | |   |-ParmVarDecl 0xb262c8 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xb26428 <line:45:54> always_inline
| | |-ClassTemplateSpecializationDecl 0xb278a8 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists trivial
| | | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant trivial user_declared
| | | |-TemplateArgument type 'char16_t'
| | | | `-BuiltinType 0x8267e0 'char16_t'
| | | |-CXXRecordDecl 0xb27aa8 <col:5, col:12> col:12 implicit struct __atomic_base
| | | |-TypeAliasDecl 0xb27b78 <line:326:7, col:26> col:13 value_type 'char16_t':'char16_t'
| | | | `-SubstTemplateTypeParmType 0xb27b40 'char16_t' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x8267e0 'char16_t'
| | | |-TypeAliasDecl 0xb27c10 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<char16_t>::value_type':'char16_t'
| | | | `-TypedefType 0xb27be0 'std::__atomic_base<char16_t>::value_type' sugar
| | | |   |-TypeAlias 0xb27b78 'value_type'
| | | |   `-SubstTemplateTypeParmType 0xb27b40 'char16_t' sugar
| | | |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |     `-BuiltinType 0x8267e0 'char16_t'
| | | |-AccessSpecDecl 0xb27c70 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xb27ca8 <line:330:7, col:21> col:21 __int_type 'char16_t':'char16_t'
| | | | `-SubstTemplateTypeParmType 0xb27b40 'char16_t' sugar
| | | |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   | `-TemplateTypeParm 0xa64378 '_ITp'
| | | |   `-BuiltinType 0x8267e0 'char16_t'
| | | |-VarDecl 0xb27d00 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | |-value: Int 2
| | | | `-ImplicitCastExpr 0xb27e88 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xb27e58 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xb27dd8 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xb27d88 <col:2, col:13> 'unsigned long' sizeof 'char16_t':'char16_t'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xb27db8 <col:17, col:29> 'unsigned long' alignof 'char16_t':'char16_t'
| | | |     |-UnaryExprOrTypeTraitExpr 0xb27e08 <col:33, col:44> 'unsigned long' sizeof 'char16_t':'char16_t'
| | | |     `-UnaryExprOrTypeTraitExpr 0xb27e38 <col:48, col:60> 'unsigned long' alignof 'char16_t':'char16_t'
| | | |-FieldDecl 0xb27f30 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | `-AlignedAttr 0xb27ff8 <col:7> alignas
| | | |   `-ConstantExpr 0xb27fd8 <col:15> 'int'
| | | |     |-value: Int 2
| | | |     `-ImplicitCastExpr 0xb27fc0 <col:15> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0xb27fa0 <col:15> 'const int' lvalue Var 0xb27d00 '_S_alignment' 'const int' non_odr_use_constant
| | | |-AccessSpecDecl 0xb28058 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xb280b8 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| | | |-CXXDestructorDecl 0xb28198 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| | | |-CXXConstructorDecl 0xb28378 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<char16_t> &)' delete trivial
| | | | `-ParmVarDecl 0xb28298 <col:21, col:40> col:41 'const std::__atomic_base<char16_t> &'
| | | |-CXXMethodDecl 0xb28548 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<char16_t> &(const std::__atomic_base<char16_t> &)' delete trivial
| | | | `-ParmVarDecl 0xb28488 <col:32, col:51> col:52 'const std::__atomic_base<char16_t> &'
| | | |-CXXMethodDecl 0xb286d8 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<char16_t> &(const std::__atomic_base<char16_t> &) volatile' delete trivial
| | | | `-ParmVarDecl 0xb28610 <col:32, col:51> col:52 'const std::__atomic_base<char16_t> &'
| | | |-CXXConstructorDecl 0xb288d0 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | |-ParmVarDecl 0xb287b0 <col:31, col:42> col:42 used __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-CXXCtorInitializer Field 0xb27f30 '_M_i' 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | | `-ImplicitCastExpr 0xb32110 <col:64> 'std::__atomic_base<char16_t>::__int_type':'char16_t' <LValueToRValue>
| | | | |   `-DeclRefExpr 0xb320d0 <col:64> 'std::__atomic_base<char16_t>::__int_type':'char16_t' lvalue ParmVar 0xb287b0 '__i' 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xb28a48 <line:347:7, line:348:24> line:347:7 operator char16_t 'std::__atomic_base<char16_t>::__int_type () const noexcept'
| | | |-CXXConversionDecl 0xb28ba0 <line:350:7, line:351:24> line:350:7 operator char16_t 'std::__atomic_base<char16_t>::__int_type () const volatile noexcept'
| | | |-CXXMethodDecl 0xb28d80 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb28c88 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xb28f50 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb28e58 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xb29110 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<char16_t>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xb29018 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb2b930 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<char16_t>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xb291c8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb2ba90 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<char16_t>::__int_type (int) noexcept'
| | | | `-ParmVarDecl 0xb2b9f8 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb2bbe0 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<char16_t>::__int_type (int) volatile noexcept'
| | | | `-ParmVarDecl 0xb2bb48 <col:18> col:21 'int'
| | | |-CXXMethodDecl 0xb2bd30 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<char16_t>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xb2be70 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<char16_t>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xb2bf58 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<char16_t>::__int_type () noexcept'
| | | |-CXXMethodDecl 0xb2c040 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<char16_t>::__int_type () volatile noexcept'
| | | |-CXXMethodDecl 0xb2c1a8 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb2c110 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xb2c308 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb2c270 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xb2c478 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb2c3e0 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xb2c5d8 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb2c540 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xb2c748 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb2c6b0 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xb2c8a8 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb2c810 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xb2ca18 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb2c980 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xb2cb78 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb2cae0 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xb2cce8 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | | `-ParmVarDecl 0xb2cc50 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xb2ce48 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| | | | `-ParmVarDecl 0xb2cdb0 <col:18, col:29> col:29 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | |-CXXMethodDecl 0xb2cf10 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | |-CXXMethodDecl 0xb2cfc0 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | |-CXXMethodDecl 0xb2d210 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb2d090 <col:13, col:24> col:24 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2d0f8 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2d2f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2d4e0 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb2d360 <col:13, col:24> col:24 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2d3c8 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2d5a0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2d700 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<char16_t>::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xb2d608 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2d7b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2d940 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<char16_t>::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xb2d810 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2d9f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2dbf0 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb2da70 <col:16, col:27> col:27 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2dad8 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2dcb0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2dea0 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb2dd18 <col:16, col:27> col:27 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2dd80 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2df60 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2e2d0 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb2e038 <col:29, col:41> col:41 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xb2e0b0 <col:47, col:58> col:58 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2e118 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb2e180 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2e3a0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2e6a0 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb2e408 <col:29, col:41> col:41 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xb2e480 <col:47, col:58> col:58 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2e4e8 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb2e550 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2e770 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2e9f0 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb2e7e8 <col:29, col:41> col:41 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xb2e860 <col:47, col:58> col:58 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2e8c8 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2eab8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2ed40 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb2eb30 <col:29, col:41> col:41 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xb2eba8 <col:47, col:58> col:58 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2ec10 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2ee08 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2f078 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb2ee80 <col:31, col:43> col:43 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xb2eef8 <col:49, col:60> col:60 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2ef60 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb2efc8 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2f148 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2f3a8 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb2f1b0 <col:31, col:43> col:43 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xb2f228 <col:49, col:60> col:60 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2f290 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xb2f2f8 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2f478 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2f678 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb2f4f0 <col:31, col:43> col:43 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xb2f568 <col:49, col:60> col:60 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2f5d0 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2f740 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2f960 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<char16_t>::__int_type &, std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb2f7b8 <col:31, col:43> col:43 __i1 'std::__atomic_base<char16_t>::__int_type &'
| | | | |-ParmVarDecl 0xb2f830 <col:49, col:60> col:60 __i2 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2f898 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2fa28 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2fba8 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb2faa0 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2fb08 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2fc68 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb2fdd8 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb2fcd0 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2fd38 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb2fe98 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb30018 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb2ff10 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb2ff78 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb300d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb30248 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb30140 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb301a8 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb30308 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb30488 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb30380 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb303e8 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb30548 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb306b8 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb305b0 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb30618 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb30778 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb308f8 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb307f0 <col:16, col:27> col:27 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb30858 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb309b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb30b28 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xb30a20 <col:16, col:27> col:27 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb30a88 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb30be8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xb30d68 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xb30c60 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | | | |-ParmVarDecl 0xb30cc8 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xb30e28 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xb30f98 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xb30e90 <col:17, col:28> col:28 __i 'std::__atomic_base<char16_t>::__int_type':'char16_t'
| | |   |-ParmVarDecl 0xb30ef8 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xb31058 <line:45:54> always_inline
| | `-ClassTemplateSpecializationDecl 0xb324b8 <line:323:3, line:664:5> line:324:12 struct __atomic_base definition
| |   |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| |   | |-DefaultConstructor exists trivial
| |   | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| |   | |-MoveConstructor
| |   | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| |   | |-MoveAssignment
| |   | `-Destructor irrelevant trivial user_declared
| |   |-TemplateArgument type 'char32_t'
| |   | `-BuiltinType 0x826800 'char32_t'
| |   |-CXXRecordDecl 0xb326b8 <col:5, col:12> col:12 implicit struct __atomic_base
| |   |-TypeAliasDecl 0xb32788 <line:326:7, col:26> col:13 value_type 'char32_t':'char32_t'
| |   | `-SubstTemplateTypeParmType 0xb32750 'char32_t' sugar
| |   |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| |   |   | `-TemplateTypeParm 0xa64378 '_ITp'
| |   |   `-BuiltinType 0x826800 'char32_t'
| |   |-TypeAliasDecl 0xb32820 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base<char32_t>::value_type':'char32_t'
| |   | `-TypedefType 0xb327f0 'std::__atomic_base<char32_t>::value_type' sugar
| |   |   |-TypeAlias 0xb32788 'value_type'
| |   |   `-SubstTemplateTypeParmType 0xb32750 'char32_t' sugar
| |   |     |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| |   |     | `-TemplateTypeParm 0xa64378 '_ITp'
| |   |     `-BuiltinType 0x826800 'char32_t'
| |   |-AccessSpecDecl 0xb32880 <line:329:5, col:12> col:5 private
| |   |-TypedefDecl 0xb328b8 <line:330:7, col:21> col:21 __int_type 'char32_t':'char32_t'
| |   | `-SubstTemplateTypeParmType 0xb32750 'char32_t' sugar
| |   |   |-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| |   |   | `-TemplateTypeParm 0xa64378 '_ITp'
| |   |   `-BuiltinType 0x826800 'char32_t'
| |   |-VarDecl 0xb32910 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| |   | |-value: Int 4
| |   | `-ImplicitCastExpr 0xb32a98 <line:333:2, col:60> 'const int' <IntegralCast>
| |   |   `-ConditionalOperator 0xb32a68 <col:2, col:60> 'unsigned long'
| |   |     |-BinaryOperator 0xb329e8 <col:2, col:29> 'bool' '>'
| |   |     | |-UnaryExprOrTypeTraitExpr 0xb32998 <col:2, col:13> 'unsigned long' sizeof 'char32_t':'char32_t'
| |   |     | `-UnaryExprOrTypeTraitExpr 0xb329c8 <col:17, col:29> 'unsigned long' alignof 'char32_t':'char32_t'
| |   |     |-UnaryExprOrTypeTraitExpr 0xb32a18 <col:33, col:44> 'unsigned long' sizeof 'char32_t':'char32_t'
| |   |     `-UnaryExprOrTypeTraitExpr 0xb32a48 <col:48, col:60> 'unsigned long' alignof 'char32_t':'char32_t'
| |   |-FieldDecl 0xb32b40 <line:335:29, col:40> col:40 _M_i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | `-AlignedAttr 0xb32c08 <col:7> alignas
| |   |   `-ConstantExpr 0xb32be8 <col:15> 'int'
| |   |     |-value: Int 4
| |   |     `-ImplicitCastExpr 0xb32bd0 <col:15> 'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0xb32bb0 <col:15> 'const int' lvalue Var 0xb32910 '_S_alignment' 'const int' non_odr_use_constant
| |   |-AccessSpecDecl 0xb32c68 <line:337:5, col:11> col:5 public
| |   |-CXXConstructorDecl 0xb32cc8 <line:338:7, col:40> col:7 __atomic_base 'void () noexcept' default trivial
| |   |-CXXDestructorDecl 0xb32da8 <line:339:7, col:41> col:7 ~__atomic_base 'void () noexcept' default trivial
| |   |-CXXConstructorDecl 0xb32f88 <line:340:7, col:50> col:7 __atomic_base 'void (const std::__atomic_base<char32_t> &)' delete trivial
| |   | `-ParmVarDecl 0xb32ea8 <col:21, col:40> col:41 'const std::__atomic_base<char32_t> &'
| |   |-CXXMethodDecl 0xb33158 <line:341:7, col:61> col:22 operator= 'std::__atomic_base<char32_t> &(const std::__atomic_base<char32_t> &)' delete trivial
| |   | `-ParmVarDecl 0xb33098 <col:32, col:51> col:52 'const std::__atomic_base<char32_t> &'
| |   |-CXXMethodDecl 0xb332e8 <line:342:7, col:70> col:22 operator= 'std::__atomic_base<char32_t> &(const std::__atomic_base<char32_t> &) volatile' delete trivial
| |   | `-ParmVarDecl 0xb33220 <col:32, col:51> col:52 'const std::__atomic_base<char32_t> &'
| |   |-CXXConstructorDecl 0xb334e0 <line:345:7, col:71> col:17 used constexpr __atomic_base 'void (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | |-ParmVarDecl 0xb333c0 <col:31, col:42> col:42 used __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-CXXCtorInitializer Field 0xb32b40 '_M_i' 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | | `-ImplicitCastExpr 0xb3a6d0 <col:64> 'std::__atomic_base<char32_t>::__int_type':'char32_t' <LValueToRValue>
| |   | |   `-DeclRefExpr 0xb3a690 <col:64> 'std::__atomic_base<char32_t>::__int_type':'char32_t' lvalue ParmVar 0xb333c0 '__i' 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | `-CompoundStmt 0xa756f8 <col:69, col:71>
| |   |-CXXConversionDecl 0xb33658 <line:347:7, line:348:24> line:347:7 operator char32_t 'std::__atomic_base<char32_t>::__int_type () const noexcept'
| |   |-CXXConversionDecl 0xb337b0 <line:350:7, line:351:24> line:350:7 operator char32_t 'std::__atomic_base<char32_t>::__int_type () const volatile noexcept'
| |   |-CXXMethodDecl 0xb339c0 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | `-ParmVarDecl 0xb33898 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xb33b90 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |   | `-ParmVarDecl 0xb33a98 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xb33d50 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base<char32_t>::__int_type (int) noexcept'
| |   | `-ParmVarDecl 0xb33c58 <col:18> col:21 'int'
| |   |-CXXMethodDecl 0xb33f00 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base<char32_t>::__int_type (int) volatile noexcept'
| |   | `-ParmVarDecl 0xb33e08 <col:18> col:21 'int'
| |   |-CXXMethodDecl 0xb34060 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base<char32_t>::__int_type (int) noexcept'
| |   | `-ParmVarDecl 0xb33fc8 <col:18> col:21 'int'
| |   |-CXXMethodDecl 0xb341b0 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base<char32_t>::__int_type (int) volatile noexcept'
| |   | `-ParmVarDecl 0xb34118 <col:18> col:21 'int'
| |   |-CXXMethodDecl 0xb34300 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base<char32_t>::__int_type () noexcept'
| |   |-CXXMethodDecl 0xb34440 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base<char32_t>::__int_type () volatile noexcept'
| |   |-CXXMethodDecl 0xb34528 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base<char32_t>::__int_type () noexcept'
| |   |-CXXMethodDecl 0xb34610 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base<char32_t>::__int_type () volatile noexcept'
| |   |-CXXMethodDecl 0xb34778 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | `-ParmVarDecl 0xb346e0 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xb348d8 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |   | `-ParmVarDecl 0xb34840 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xb34a48 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | `-ParmVarDecl 0xb349b0 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xb34ba8 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |   | `-ParmVarDecl 0xb34b10 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xb34d18 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | `-ParmVarDecl 0xb34c80 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xb34e78 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |   | `-ParmVarDecl 0xb34de0 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xb34fe8 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | `-ParmVarDecl 0xb34f50 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xb35148 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |   | `-ParmVarDecl 0xb350b0 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xb352b8 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| |   | `-ParmVarDecl 0xb35220 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xb35418 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |   | `-ParmVarDecl 0xb35380 <col:18, col:29> col:29 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   |-CXXMethodDecl 0xb354e0 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| |   |-CXXMethodDecl 0xb35590 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| |   |-CXXMethodDecl 0xb357e0 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xb35660 <col:13, col:24> col:24 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb356c8 <col:29, col:48> col:42 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb358c8 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb35ab0 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xb35930 <col:13, col:24> col:24 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb35998 <line:469:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb35b70 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb35cd0 <col:32, line:489:7> line:481:7 load 'std::__atomic_base<char32_t>::__int_type (std::memory_order) const noexcept' inline
| |   | |-ParmVarDecl 0xb35bd8 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb35d88 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb35ee0 <col:32, line:500:7> line:492:7 load 'std::__atomic_base<char32_t>::__int_type (std::memory_order) const volatile noexcept' inline
| |   | |-ParmVarDecl 0xb35de0 <col:12, col:31> col:25 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb35f98 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb36190 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xb36010 <col:16, col:27> col:27 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb36078 <line:504:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb36250 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb36440 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xb362b8 <col:16, col:27> col:27 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb36320 <line:512:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb36500 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb36870 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xb365d8 <col:29, col:41> col:41 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xb36650 <col:47, col:58> col:58 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb366b8 <line:519:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| |   | |-ParmVarDecl 0xb36720 <col:27, col:40> col:40 __m2 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb36940 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb36c40 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xb369a8 <col:29, col:41> col:41 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xb36a20 <col:47, col:58> col:58 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb36a88 <line:529:8, col:21> col:21 __m1 'std::memory_order':'std::memory_order'
| |   | |-ParmVarDecl 0xb36af0 <line:530:8, col:21> col:21 __m2 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb36d10 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb36f90 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xb36d88 <col:29, col:41> col:41 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xb36e00 <col:47, col:58> col:58 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb36e68 <line:540:8, col:27> col:21 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb37058 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb372e0 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xb370d0 <col:29, col:41> col:41 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xb37148 <col:47, col:58> col:58 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb371b0 <line:548:6, col:25> col:19 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb373a8 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb37618 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xb37420 <col:31, col:43> col:43 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xb37498 <col:49, col:60> col:60 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb37500 <line:556:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| |   | |-ParmVarDecl 0xb37568 <col:29, col:42> col:42 __m2 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb376e8 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb37988 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xb37750 <col:31, col:43> col:43 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xb377c8 <col:49, col:60> col:60 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb37830 <line:566:10, col:23> col:23 __m1 'std::memory_order':'std::memory_order'
| |   | |-ParmVarDecl 0xb37898 <line:567:10, col:23> col:23 __m2 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb37a58 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb37c58 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xb37ad0 <col:31, col:43> col:43 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xb37b48 <col:49, col:60> col:60 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb37bb0 <line:577:10, col:29> col:23 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb37d20 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb37f20 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base<char32_t>::__int_type &, std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xb37d98 <col:31, col:43> col:43 __i1 'std::__atomic_base<char32_t>::__int_type &'
| |   | |-ParmVarDecl 0xb37e10 <col:49, col:60> col:60 __i2 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb37e78 <line:585:4, col:23> col:17 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb37fe8 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb38168 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xb38060 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb380c8 <line:617:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb38228 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb38398 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xb38290 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb382f8 <line:622:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb38458 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb385d8 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xb384d0 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb38538 <line:627:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb38698 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb38808 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xb38700 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb38768 <line:632:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb388c8 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb38a48 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xb38940 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb389a8 <line:637:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb38b08 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb38c78 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xb38b70 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb38bd8 <line:642:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb38d38 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb38eb8 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xb38db0 <col:16, col:27> col:27 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb38e18 <line:647:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb38f78 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb390e8 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |   | |-ParmVarDecl 0xb38fe0 <col:16, col:27> col:27 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb39048 <line:652:9, col:28> col:22 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb391a8 <line:45:54> always_inline
| |   |-CXXMethodDecl 0xb39328 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) noexcept' inline
| |   | |-ParmVarDecl 0xb39220 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |   | |-ParmVarDecl 0xb39288 <line:657:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |   | `-AlwaysInlineAttr 0xb393e8 <line:45:54> always_inline
| |   `-CXXMethodDecl 0xb39558 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type, std::memory_order) volatile noexcept' inline
| |     |-ParmVarDecl 0xb39450 <col:17, col:28> col:28 __i 'std::__atomic_base<char32_t>::__int_type':'char32_t'
| |     |-ParmVarDecl 0xb394b8 <line:662:3, col:22> col:16 __m 'std::memory_order':'std::memory_order'
| |     `-AlwaysInlineAttr 0xb39618 <line:45:54> always_inline
| |-ClassTemplateDecl 0xa54830 <line:161:3, line:162:12> col:12 atomic
| | |-TemplateTypeParmDecl 0xa54708 <line:161:12, col:21> col:21 typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xa547a0 <line:162:5, col:12> col:12 struct atomic
| | |-ClassTemplateSpecialization 0xa91368 'atomic'
| | |-ClassTemplateSpecialization 0xaae758 'atomic'
| | |-ClassTemplateSpecialization 0xac0da8 'atomic'
| | |-ClassTemplateSpecialization 0xac93b0 'atomic'
| | |-ClassTemplateSpecialization 0xad3a00 'atomic'
| | |-ClassTemplateSpecialization 0xadc000 'atomic'
| | |-ClassTemplateSpecialization 0xae4610 'atomic'
| | |-ClassTemplateSpecialization 0xaed080 'atomic'
| | |-ClassTemplateSpecialization 0xaf56c0 'atomic'
| | |-ClassTemplateSpecialization 0xb00b50 'atomic'
| | |-ClassTemplateSpecialization 0xb091b0 'atomic'
| | |-ClassTemplateSpecialization 0xb135b0 'atomic'
| | |-ClassTemplateSpecialization 0xb1f068 'atomic'
| | |-ClassTemplateSpecialization 0xb27688 'atomic'
| | `-ClassTemplateSpecialization 0xb32298 'atomic'
| |-ClassTemplatePartialSpecializationDecl 0xa54b90 <line:164:3, line:165:23> col:12 struct atomic
| | |-TemplateArgument type 'type-parameter-0-0 *'
| | | `-PointerType 0x8fb540 'type-parameter-0-0 *' dependent
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | `-TemplateTypeParmDecl 0xa54a08 <line:164:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| |-TypedefDecl 0xa54d50 <line:169:5, col:18> col:18 referenced __atomic_flag_data_type 'bool'
| | `-BuiltinType 0x826220 'bool'
| |-LinkageSpecDecl 0xa54e48 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:632:34, line:633:32> line:632:41 C
| | `-CXXRecordDecl 0xa54e98 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:186:3, line:189:3> line:186:10 referenced struct __atomic_flag_base definition
| |   |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |   | |-DefaultConstructor exists trivial
| |   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial
| |   | |-CopyAssignment simple trivial has_const_param implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial
| |   | `-Destructor simple irrelevant trivial
| |   |-CXXRecordDecl 0xa54fb8 <col:3, col:10> col:10 implicit referenced struct __atomic_flag_base
| |   |-FieldDecl 0xa55080 <line:188:5, col:29> col:29 referenced _M_i 'std::__atomic_flag_data_type':'bool'
| |   |-CXXDestructorDecl 0xa5a7c0 <line:186:10> col:10 implicit ~__atomic_flag_base 'void ()' inline default trivial noexcept-unevaluated 0xa5a7c0
| |   |-CXXConstructorDecl 0xa5a8b8 <col:10> col:10 implicit __atomic_flag_base 'void ()' inline default trivial noexcept-unevaluated 0xa5a8b8
| |   |-CXXConstructorDecl 0xa5a9b8 <col:10> col:10 implicit constexpr __atomic_flag_base 'void (const std::__atomic_flag_base &)' inline default trivial noexcept-unevaluated 0xa5a9b8
| |   | `-ParmVarDecl 0xa5aac8 <col:10> col:10 'const std::__atomic_flag_base &'
| |   |-CXXConstructorDecl 0xa5ab78 <col:10> col:10 implicit constexpr __atomic_flag_base 'void (std::__atomic_flag_base &&)' inline default trivial noexcept-unevaluated 0xa5ab78
| |   | `-ParmVarDecl 0xa5ac88 <col:10> col:10 'std::__atomic_flag_base &&'
| |   |-CXXMethodDecl 0xa5ad38 <col:10> col:10 implicit constexpr operator= 'std::__atomic_flag_base &(const std::__atomic_flag_base &)' inline default trivial noexcept-unevaluated 0xa5ad38
| |   | `-ParmVarDecl 0xa5ae48 <col:10> col:10 'const std::__atomic_flag_base &'
| |   `-CXXMethodDecl 0xa5aeb8 <col:10> col:10 implicit constexpr operator= 'std::__atomic_flag_base &(std::__atomic_flag_base &&)' inline default trivial noexcept-unevaluated 0xa5aeb8
| |     `-ParmVarDecl 0xa5afc8 <col:10> col:10 'std::__atomic_flag_base &&'
| |-CXXRecordDecl 0xa550e8 <line:196:3, line:296:3> line:196:10 referenced struct atomic_flag definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | | |-MoveConstructor
| | | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | | |-MoveAssignment
| | | `-Destructor irrelevant trivial user_declared
| | |-public 'std::__atomic_flag_base'
| | |-CXXRecordDecl 0xa55248 <col:3, col:10> col:10 implicit referenced struct atomic_flag
| | |-CXXConstructorDecl 0xa55348 <line:198:5, col:36> col:5 atomic_flag 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xa55440 <line:199:5, col:37> col:5 ~atomic_flag 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xa555e8 <line:200:5, col:44> col:5 atomic_flag 'void (const std::atomic_flag &)' delete trivial
| | | `-ParmVarDecl 0xa55528 <col:17, col:34> col:35 'const std::atomic_flag &'
| | |-CXXMethodDecl 0xa557a8 <line:201:5, col:55> col:18 operator= 'std::atomic_flag &(const std::atomic_flag &)' delete trivial
| | | `-ParmVarDecl 0xa556b8 <col:28, col:45> col:46 'const std::atomic_flag &'
| | |-CXXMethodDecl 0xa55958 <line:202:5, col:64> col:18 operator= 'std::atomic_flag &(const std::atomic_flag &) volatile' delete trivial
| | | `-ParmVarDecl 0xa55860 <col:28, col:45> col:46 'const std::atomic_flag &'
| | |-CXXConstructorDecl 0xa55b20 <line:205:5, line:207:7> line:205:15 constexpr atomic_flag 'void (bool) noexcept'
| | | |-ParmVarDecl 0xa55a20 <col:27, col:32> col:32 used __i 'bool'
| | | |-CXXCtorInitializer 'std::__atomic_flag_base'
| | | | `-InitListExpr 0xa5b218 <line:206:27, col:42> 'std::__atomic_flag_base'
| | | |   `-CallExpr 0xa5b180 <col:29, col:40> 'std::__atomic_flag_data_type':'bool'
| | | |     |-ImplicitCastExpr 0xa5b168 <col:29> 'std::__atomic_flag_data_type (*)(bool)' <FunctionToPointerDecay>
| | | |     | `-DeclRefExpr 0xa5b0c8 <col:29> 'std::__atomic_flag_data_type (bool)' lvalue CXXMethod 0xa5a718 '_S_init' 'std::__atomic_flag_data_type (bool)'
| | | |     `-ImplicitCastExpr 0xa5b1a8 <col:37> 'bool' <LValueToRValue>
| | | |       `-DeclRefExpr 0xa5b0e8 <col:37> 'bool' lvalue ParmVar 0xa55a20 '__i' 'bool'
| | | `-CompoundStmt 0xa5b288 <line:207:5, col:7>
| | |-CXXMethodDecl 0xa55c88 <line:45:32, line:213:5> line:210:5 used test_and_set 'bool (std::memory_order) noexcept' inline
| | | |-ParmVarDecl 0xa55bf0 <col:18, col:37> col:31 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xa5b048 <col:37> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CompoundStmt 0xa5b998 <line:211:5, line:213:5>
| | | | `-ReturnStmt 0xa5b988 <line:212:7, col:52>
| | | |   `-CallExpr 0xa5b940 <col:14, col:52> 'bool'
| | | |     |-ImplicitCastExpr 0xa5b928 <col:14> 'bool (*)(volatile void *, int) noexcept' <BuiltinFnToFnPtr>
| | | |     | `-DeclRefExpr 0xa5b718 <col:14> '<builtin fn type>' Function 0xa5b518 '__atomic_test_and_set' 'bool (volatile void *, int) noexcept'
| | | |     |-ImplicitCastExpr 0xa5b970 <col:37, col:38> 'volatile void *' <BitCast>
| | | |     | `-UnaryOperator 0xa5b828 <col:37, col:38> 'std::__atomic_flag_data_type *' prefix '&' cannot overflow
| | | |     |   `-MemberExpr 0xa5b798 <col:38> 'std::__atomic_flag_data_type':'bool' lvalue ->_M_i 0xa55080
| | | |     |     `-ImplicitCastExpr 0xa5b778 <col:38> 'std::__atomic_flag_base *' <UncheckedDerivedToBase (__atomic_flag_base)>
| | | |     |       `-CXXThisExpr 0xa5b738 <col:38> 'std::atomic_flag *' implicit this
| | | |     `-CXXFunctionalCastExpr 0xa5b8a8 <col:44, col:51> 'int' functional cast to int <NoOp>
| | | |       `-ImplicitCastExpr 0xa5b890 <col:48> 'int' <IntegralCast> part_of_explicit_cast
| | | |         `-ImplicitCastExpr 0xa5b878 <col:48> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa5b858 <col:48> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa55bf0 '__m' 'std::memory_order':'std::memory_order'
| | | `-AlwaysInlineAttr 0xa55d30 <line:45:54> always_inline
| | |-CXXMethodDecl 0xa55e90 <col:32, line:219:5> line:216:5 used test_and_set 'bool (std::memory_order) volatile noexcept' inline
| | | |-ParmVarDecl 0xa55d98 <col:18, col:37> col:31 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xa5b068 <col:37> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CompoundStmt 0xa5bba0 <line:217:5, line:219:5>
| | | | `-ReturnStmt 0xa5bb90 <line:218:7, col:52>
| | | |   `-CallExpr 0xa5bb48 <col:14, col:52> 'bool'
| | | |     |-ImplicitCastExpr 0xa5bb30 <col:14> 'bool (*)(volatile void *, int) noexcept' <BuiltinFnToFnPtr>
| | | |     | `-DeclRefExpr 0xa5b9b0 <col:14> '<builtin fn type>' Function 0xa5b518 '__atomic_test_and_set' 'bool (volatile void *, int) noexcept'
| | | |     |-ImplicitCastExpr 0xa5bb78 <col:37, col:38> 'volatile void *' <BitCast>
| | | |     | `-UnaryOperator 0xa5ba88 <col:37, col:38> 'volatile std::__atomic_flag_data_type *' prefix '&' cannot overflow
| | | |     |   `-MemberExpr 0xa5ba00 <col:38> 'volatile std::__atomic_flag_data_type':'volatile bool' lvalue ->_M_i 0xa55080
| | | |     |     `-ImplicitCastExpr 0xa5b9e0 <col:38> 'std::__atomic_flag_base *' <UncheckedDerivedToBase (__atomic_flag_base)>
| | | |     |       `-CXXThisExpr 0xa5b9d0 <col:38> 'volatile std::atomic_flag *' implicit this
| | | |     `-CXXFunctionalCastExpr 0xa5bb08 <col:44, col:51> 'int' functional cast to int <NoOp>
| | | |       `-ImplicitCastExpr 0xa5baf0 <col:48> 'int' <IntegralCast> part_of_explicit_cast
| | | |         `-ImplicitCastExpr 0xa5bad8 <col:48> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa5bab8 <col:48> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa55d98 '__m' 'std::memory_order':'std::memory_order'
| | | `-AlwaysInlineAttr 0xa55f38 <line:45:54> always_inline
| | |-CXXMethodDecl 0xa56048 <col:32, line:278:5> line:269:5 used clear 'void (std::memory_order) noexcept' inline
| | | |-ParmVarDecl 0xa55fb0 <col:11, col:30> col:24 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xa5b088 <col:30> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CompoundStmt 0xa63738 <line:270:5, line:278:5>
| | | | |-DeclStmt 0xa5bd50 <line:271:7, line:272:29>
| | | | | `-VarDecl 0xa5bbc8 <line:271:7, line:272:10> line:271:20 used __b 'std::memory_order':'std::memory_order' cinit
| | | | |   |-CXXOperatorCallExpr 0xa5bd18 <line:272:4, col:10> 'std::memory_order':'std::memory_order' '&'
| | | | |   | |-ImplicitCastExpr 0xa5bd00 <col:8> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | |   | | `-DeclRefExpr 0xa5bce0 <col:8> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | |   | |-ImplicitCastExpr 0xa5bcc8 <col:4> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |   | | `-DeclRefExpr 0xa5bc88 <col:4> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa55fb0 '__m' 'std::memory_order':'std::memory_order'
| | | | |   | `-DeclRefExpr 0xa5bca8 <col:10> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | |   `-UnusedAttr 0xa5bc30 <line:271:40> unused
| | | | |-DoStmt 0xa5c160 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | |-CompoundStmt 0xa5c138 <col:6, col:42>
| | | | | | `-IfStmt 0xa5c118 <line:545:3, line:546:27>
| | | | | |   |-BinaryOperator 0xa5bf30 <line:545:7, col:51> 'bool' '&&'
| | | | | |   | |-CallExpr 0xa5be18 <col:7, col:36> 'bool'
| | | | | |   | | `-ImplicitCastExpr 0xa5be00 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | |   | |   `-DeclRefExpr 0xa5bdd0 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | |   | `-UnaryOperator 0xa5bf18 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | |   |   `-CXXFunctionalCastExpr 0xa5bef0 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | |   |     `-BinaryOperator 0xa5bed0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:273:24, col:31> 'bool' '!='
| | | | | |   |       |-ImplicitCastExpr 0xa5bea0 <col:24> 'int' <IntegralCast>
| | | | | |   |       | `-ImplicitCastExpr 0xa5be88 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   |       |   `-DeclRefExpr 0xa5be48 <col:24> 'std::memory_order':'std::memory_order' lvalue Var 0xa5bbc8 '__b' 'std::memory_order':'std::memory_order'
| | | | | |   |       `-ImplicitCastExpr 0xa5beb8 <col:31> 'int' <IntegralCast>
| | | | | |   |         `-DeclRefExpr 0xa5be68 <col:31> 'std::memory_order' EnumConstant 0xa513d0 'memory_order_consume' 'std::memory_order'
| | | | | |   `-CallExpr 0xa5c0f8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | |     `-ImplicitCastExpr 0xa5c0e0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | |       `-DeclRefExpr 0xa5c0c0 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | `-CXXBoolLiteralExpr 0xa5c150 <line:591:51> 'bool' false
| | | | |-DoStmt 0xa5c3f0 <col:3, col:56>
| | | | | |-CompoundStmt 0xa5c3c8 <col:6, col:42>
| | | | | | `-IfStmt 0xa5c3a8 <line:545:3, line:546:27>
| | | | | |   |-BinaryOperator 0xa5c330 <line:545:7, col:51> 'bool' '&&'
| | | | | |   | |-CallExpr 0xa5c218 <col:7, col:36> 'bool'
| | | | | |   | | `-ImplicitCastExpr 0xa5c200 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | |   | |   `-DeclRefExpr 0xa5c1d0 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | |   | `-UnaryOperator 0xa5c318 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | |   |   `-CXXFunctionalCastExpr 0xa5c2f0 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | |   |     `-BinaryOperator 0xa5c2d0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:274:24, col:31> 'bool' '!='
| | | | | |   |       |-ImplicitCastExpr 0xa5c2a0 <col:24> 'int' <IntegralCast>
| | | | | |   |       | `-ImplicitCastExpr 0xa5c288 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   |       |   `-DeclRefExpr 0xa5c248 <col:24> 'std::memory_order':'std::memory_order' lvalue Var 0xa5bbc8 '__b' 'std::memory_order':'std::memory_order'
| | | | | |   |       `-ImplicitCastExpr 0xa5c2b8 <col:31> 'int' <IntegralCast>
| | | | | |   |         `-DeclRefExpr 0xa5c268 <col:31> 'std::memory_order' EnumConstant 0xa51420 'memory_order_acquire' 'std::memory_order'
| | | | | |   `-CallExpr 0xa5c388 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | |     `-ImplicitCastExpr 0xa5c370 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | |       `-DeclRefExpr 0xa5c350 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | `-CXXBoolLiteralExpr 0xa5c3e0 <line:591:51> 'bool' false
| | | | |-DoStmt 0xa63268 <col:3, col:56>
| | | | | |-CompoundStmt 0xa63240 <col:6, col:42>
| | | | | | `-IfStmt 0xa63220 <line:545:3, line:546:27>
| | | | | |   |-BinaryOperator 0xa631a8 <line:545:7, col:51> 'bool' '&&'
| | | | | |   | |-CallExpr 0xa5c4a8 <col:7, col:36> 'bool'
| | | | | |   | | `-ImplicitCastExpr 0xa5c490 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | |   | |   `-DeclRefExpr 0xa5c460 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | |   | `-UnaryOperator 0xa63190 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | |   |   `-CXXFunctionalCastExpr 0xa63168 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | |   |     `-BinaryOperator 0xa63148 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:275:24, col:31> 'bool' '!='
| | | | | |   |       |-ImplicitCastExpr 0xa63118 <col:24> 'int' <IntegralCast>
| | | | | |   |       | `-ImplicitCastExpr 0xa63100 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   |       |   `-DeclRefExpr 0xa630c0 <col:24> 'std::memory_order':'std::memory_order' lvalue Var 0xa5bbc8 '__b' 'std::memory_order':'std::memory_order'
| | | | | |   |       `-ImplicitCastExpr 0xa63130 <col:31> 'int' <IntegralCast>
| | | | | |   |         `-DeclRefExpr 0xa630e0 <col:31> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
| | | | | |   `-CallExpr 0xa63200 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | |     `-ImplicitCastExpr 0xa631e8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | |       `-DeclRefExpr 0xa631c8 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | `-CXXBoolLiteralExpr 0xa63258 <line:591:51> 'bool' false
| | | | `-CallExpr 0xa636f0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:277:7, col:38> 'void'
| | | |   |-ImplicitCastExpr 0xa636d8 <col:7> 'void (*)(volatile void *, int) noexcept' <BuiltinFnToFnPtr>
| | | |   | `-DeclRefExpr 0xa63558 <col:7> '<builtin fn type>' Function 0xa63358 '__atomic_clear' 'void (volatile void *, int) noexcept'
| | | |   |-ImplicitCastExpr 0xa63720 <col:23, col:24> 'volatile void *' <BitCast>
| | | |   | `-UnaryOperator 0xa635d8 <col:23, col:24> 'std::__atomic_flag_data_type *' prefix '&' cannot overflow
| | | |   |   `-MemberExpr 0xa635a8 <col:24> 'std::__atomic_flag_data_type':'bool' lvalue ->_M_i 0xa55080
| | | |   |     `-ImplicitCastExpr 0xa63588 <col:24> 'std::__atomic_flag_base *' <UncheckedDerivedToBase (__atomic_flag_base)>
| | | |   |       `-CXXThisExpr 0xa63578 <col:24> 'std::atomic_flag *' implicit this
| | | |   `-CXXFunctionalCastExpr 0xa63658 <col:30, col:37> 'int' functional cast to int <NoOp>
| | | |     `-ImplicitCastExpr 0xa63640 <col:34> 'int' <IntegralCast> part_of_explicit_cast
| | | |       `-ImplicitCastExpr 0xa63628 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |         `-DeclRefExpr 0xa63608 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa55fb0 '__m' 'std::memory_order':'std::memory_order'
| | | `-AlwaysInlineAttr 0xa560f0 <line:45:54> always_inline
| | |-CXXMethodDecl 0xa5a4e0 <col:32, line:290:5> line:281:5 used clear 'void (std::memory_order) volatile noexcept' inline
| | | |-ParmVarDecl 0xa56158 <col:11, col:30> col:24 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xa5b0a8 <col:30> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CompoundStmt 0xa64258 <line:282:5, line:290:5>
| | | | |-DeclStmt 0xa63908 <line:283:7, line:284:29>
| | | | | `-VarDecl 0xa63780 <line:283:7, line:284:10> line:283:20 used __b 'std::memory_order':'std::memory_order' cinit
| | | | |   |-CXXOperatorCallExpr 0xa638d0 <line:284:4, col:10> 'std::memory_order':'std::memory_order' '&'
| | | | |   | |-ImplicitCastExpr 0xa638b8 <col:8> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | |   | | `-DeclRefExpr 0xa63898 <col:8> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | |   | |-ImplicitCastExpr 0xa63880 <col:4> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |   | | `-DeclRefExpr 0xa63840 <col:4> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa56158 '__m' 'std::memory_order':'std::memory_order'
| | | | |   | `-DeclRefExpr 0xa63860 <col:10> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | |   `-UnusedAttr 0xa637e8 <line:283:40> unused
| | | | |-DoStmt 0xa63b90 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | |-CompoundStmt 0xa63b68 <col:6, col:42>
| | | | | | `-IfStmt 0xa63b48 <line:545:3, line:546:27>
| | | | | |   |-BinaryOperator 0xa63ad0 <line:545:7, col:51> 'bool' '&&'
| | | | | |   | |-CallExpr 0xa639b8 <col:7, col:36> 'bool'
| | | | | |   | | `-ImplicitCastExpr 0xa639a0 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | |   | |   `-DeclRefExpr 0xa63970 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | |   | `-UnaryOperator 0xa63ab8 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | |   |   `-CXXFunctionalCastExpr 0xa63a90 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | |   |     `-BinaryOperator 0xa63a70 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:285:24, col:31> 'bool' '!='
| | | | | |   |       |-ImplicitCastExpr 0xa63a40 <col:24> 'int' <IntegralCast>
| | | | | |   |       | `-ImplicitCastExpr 0xa63a28 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   |       |   `-DeclRefExpr 0xa639e8 <col:24> 'std::memory_order':'std::memory_order' lvalue Var 0xa63780 '__b' 'std::memory_order':'std::memory_order'
| | | | | |   |       `-ImplicitCastExpr 0xa63a58 <col:31> 'int' <IntegralCast>
| | | | | |   |         `-DeclRefExpr 0xa63a08 <col:31> 'std::memory_order' EnumConstant 0xa513d0 'memory_order_consume' 'std::memory_order'
| | | | | |   `-CallExpr 0xa63b28 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | |     `-ImplicitCastExpr 0xa63b10 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | |       `-DeclRefExpr 0xa63af0 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | `-CXXBoolLiteralExpr 0xa63b80 <line:591:51> 'bool' false
| | | | |-DoStmt 0xa63e20 <col:3, col:56>
| | | | | |-CompoundStmt 0xa63df8 <col:6, col:42>
| | | | | | `-IfStmt 0xa63dd8 <line:545:3, line:546:27>
| | | | | |   |-BinaryOperator 0xa63d60 <line:545:7, col:51> 'bool' '&&'
| | | | | |   | |-CallExpr 0xa63c48 <col:7, col:36> 'bool'
| | | | | |   | | `-ImplicitCastExpr 0xa63c30 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | |   | |   `-DeclRefExpr 0xa63c00 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | |   | `-UnaryOperator 0xa63d48 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | |   |   `-CXXFunctionalCastExpr 0xa63d20 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | |   |     `-BinaryOperator 0xa63d00 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:286:24, col:31> 'bool' '!='
| | | | | |   |       |-ImplicitCastExpr 0xa63cd0 <col:24> 'int' <IntegralCast>
| | | | | |   |       | `-ImplicitCastExpr 0xa63cb8 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   |       |   `-DeclRefExpr 0xa63c78 <col:24> 'std::memory_order':'std::memory_order' lvalue Var 0xa63780 '__b' 'std::memory_order':'std::memory_order'
| | | | | |   |       `-ImplicitCastExpr 0xa63ce8 <col:31> 'int' <IntegralCast>
| | | | | |   |         `-DeclRefExpr 0xa63c98 <col:31> 'std::memory_order' EnumConstant 0xa51420 'memory_order_acquire' 'std::memory_order'
| | | | | |   `-CallExpr 0xa63db8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | |     `-ImplicitCastExpr 0xa63da0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | |       `-DeclRefExpr 0xa63d80 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | `-CXXBoolLiteralExpr 0xa63e10 <line:591:51> 'bool' false
| | | | |-DoStmt 0xa640b0 <col:3, col:56>
| | | | | |-CompoundStmt 0xa64088 <col:6, col:42>
| | | | | | `-IfStmt 0xa64068 <line:545:3, line:546:27>
| | | | | |   |-BinaryOperator 0xa63ff0 <line:545:7, col:51> 'bool' '&&'
| | | | | |   | |-CallExpr 0xa63ed8 <col:7, col:36> 'bool'
| | | | | |   | | `-ImplicitCastExpr 0xa63ec0 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | |   | |   `-DeclRefExpr 0xa63e90 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | |   | `-UnaryOperator 0xa63fd8 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | |   |   `-CXXFunctionalCastExpr 0xa63fb0 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | |   |     `-BinaryOperator 0xa63f90 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:287:24, col:31> 'bool' '!='
| | | | | |   |       |-ImplicitCastExpr 0xa63f60 <col:24> 'int' <IntegralCast>
| | | | | |   |       | `-ImplicitCastExpr 0xa63f48 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   |       |   `-DeclRefExpr 0xa63f08 <col:24> 'std::memory_order':'std::memory_order' lvalue Var 0xa63780 '__b' 'std::memory_order':'std::memory_order'
| | | | | |   |       `-ImplicitCastExpr 0xa63f78 <col:31> 'int' <IntegralCast>
| | | | | |   |         `-DeclRefExpr 0xa63f28 <col:31> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
| | | | | |   `-CallExpr 0xa64048 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | |     `-ImplicitCastExpr 0xa64030 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | |       `-DeclRefExpr 0xa64010 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | `-CXXBoolLiteralExpr 0xa640a0 <line:591:51> 'bool' false
| | | | `-CallExpr 0xa64210 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:289:7, col:38> 'void'
| | | |   |-ImplicitCastExpr 0xa641f8 <col:7> 'void (*)(volatile void *, int) noexcept' <BuiltinFnToFnPtr>
| | | |   | `-DeclRefExpr 0xa640d0 <col:7> '<builtin fn type>' Function 0xa63358 '__atomic_clear' 'void (volatile void *, int) noexcept'
| | | |   |-ImplicitCastExpr 0xa64240 <col:23, col:24> 'volatile void *' <BitCast>
| | | |   | `-UnaryOperator 0xa64150 <col:23, col:24> 'volatile std::__atomic_flag_data_type *' prefix '&' cannot overflow
| | | |   |   `-MemberExpr 0xa64120 <col:24> 'volatile std::__atomic_flag_data_type':'volatile bool' lvalue ->_M_i 0xa55080
| | | |   |     `-ImplicitCastExpr 0xa64100 <col:24> 'std::__atomic_flag_base *' <UncheckedDerivedToBase (__atomic_flag_base)>
| | | |   |       `-CXXThisExpr 0xa640f0 <col:24> 'volatile std::atomic_flag *' implicit this
| | | |   `-CXXFunctionalCastExpr 0xa641d0 <col:30, col:37> 'int' functional cast to int <NoOp>
| | | |     `-ImplicitCastExpr 0xa641b8 <col:34> 'int' <IntegralCast> part_of_explicit_cast
| | | |       `-ImplicitCastExpr 0xa641a0 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |         `-DeclRefExpr 0xa64180 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa56158 '__m' 'std::memory_order':'std::memory_order'
| | | `-AlwaysInlineAttr 0xa5a588 <line:45:54> always_inline
| | |-AccessSpecDecl 0xa5a5f0 <line:292:3, col:10> col:3 private
| | `-CXXMethodDecl 0xa5a718 <line:293:5, line:295:59> line:294:5 used constexpr _S_init 'std::__atomic_flag_data_type (bool)' static
| |   |-ParmVarDecl 0xa5a628 <col:13, col:18> col:18 used __i 'bool'
| |   `-CompoundStmt 0xa64360 <line:295:5, col:59>
| |     `-ReturnStmt 0xa64350 <col:7, col:56>
| |       `-ImplicitCastExpr 0xa64338 <col:14, col:56> 'bool' <IntegralToBoolean>
| |         `-ConditionalOperator 0xa64308 <col:14, col:56> 'int'
| |           |-ImplicitCastExpr 0xa642f0 <col:14> 'bool' <LValueToRValue>
| |           | `-DeclRefExpr 0xa64290 <col:14> 'bool' lvalue ParmVar 0xa5a628 '__i' 'bool'
| |           |-IntegerLiteral 0xa642b0 <<built-in>:330:43> 'int' 1
| |           `-IntegerLiteral 0xa642d0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:295:56> 'int' 0
| |-ClassTemplateDecl 0xa644a0 prev 0xa54530 <line:323:3, line:664:5> line:324:12 __atomic_base
| | |-TemplateTypeParmDecl 0xa64378 <line:323:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | |-CXXRecordDecl 0xa64410 prev 0xa544a0 <line:324:5, line:664:5> line:324:12 struct __atomic_base definition
| | | |-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists
| | | | |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant non_trivial user_declared
| | | |-CXXRecordDecl 0xa64560 <col:5, col:12> col:12 implicit referenced struct __atomic_base
| | | |-TypeAliasDecl 0xa64600 <line:326:7, col:26> col:13 referenced value_type '_ITp'
| | | | `-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   `-TemplateTypeParm 0xa64378 '_ITp'
| | | |-TypeAliasDecl 0xa64690 <line:327:7, col:31> col:13 difference_type 'std::__atomic_base::value_type':'_ITp'
| | | | `-TypedefType 0xa64660 'std::__atomic_base::value_type' sugar dependent
| | | |   |-TypeAlias 0xa64600 'value_type'
| | | |   `-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0xa64378 '_ITp'
| | | |-AccessSpecDecl 0xa646f0 <line:329:5, col:12> col:5 private
| | | |-TypedefDecl 0xa64728 <line:330:7, col:21> col:21 referenced __int_type '_ITp'
| | | | `-TemplateTypeParmType 0xa643d0 '_ITp' dependent depth 0 index 0
| | | |   `-TemplateTypeParm 0xa64378 '_ITp'
| | | |-VarDecl 0xa64798 <line:332:7, line:333:60> line:332:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | `-ImplicitCastExpr 0xa64910 <line:333:2, col:60> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xa648e0 <col:2, col:60> 'unsigned long'
| | | |     |-BinaryOperator 0xa64860 <col:2, col:29> 'bool' '>'
| | | |     | |-UnaryExprOrTypeTraitExpr 0xa64810 <col:2, col:13> 'unsigned long' sizeof '_ITp'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xa64840 <col:17, col:29> 'unsigned long' alignof '_ITp'
| | | |     |-UnaryExprOrTypeTraitExpr 0xa64890 <col:33, col:44> 'unsigned long' sizeof '_ITp'
| | | |     `-UnaryExprOrTypeTraitExpr 0xa648c0 <col:48, col:60> 'unsigned long' alignof '_ITp'
| | | |-FieldDecl 0xa649c0 <line:335:29, col:40> col:40 referenced _M_i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-AlignedAttr 0xa64a10 <col:7> alignas
| | | |   `-DeclRefExpr 0xa64970 <col:15> 'const int' lvalue Var 0xa64798 '_S_alignment' 'const int'
| | | |-AccessSpecDecl 0xa64a70 <line:337:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xa64b08 <line:338:7, col:40> col:7 __atomic_base<_IntTp> 'void () noexcept' default
| | | |-CXXDestructorDecl 0xa64c00 <line:339:7, col:41> col:7 ~__atomic_base<_IntTp> 'void () noexcept' default
| | | |-CXXConstructorDecl 0xa64da8 <line:340:7, col:50> col:7 __atomic_base<_IntTp> 'void (const __atomic_base<_IntTp> &)' delete
| | | | `-ParmVarDecl 0xa64ce8 <col:21, col:40> col:41 'const __atomic_base<_IntTp> &'
| | | |-CXXMethodDecl 0xa64f68 <line:341:7, col:61> col:22 operator= '__atomic_base<_IntTp> &(const __atomic_base<_IntTp> &)' delete
| | | | `-ParmVarDecl 0xa64e78 <col:32, col:51> col:52 'const __atomic_base<_IntTp> &'
| | | |-CXXMethodDecl 0xa66188 <line:342:7, col:70> col:22 operator= '__atomic_base<_IntTp> &(const __atomic_base<_IntTp> &) volatile' delete
| | | | `-ParmVarDecl 0xa65020 <col:32, col:51> col:52 'const __atomic_base<_IntTp> &'
| | | |-CXXConstructorDecl 0xa66350 <line:345:7, col:71> col:17 constexpr __atomic_base<_IntTp> 'void (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xa66250 <col:31, col:42> col:42 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-CXXCtorInitializer Field 0xa649c0 '_M_i' 'std::__atomic_base::__int_type':'_ITp'
| | | | | `-ParenListExpr 0xa756b0 <col:63, col:67> 'NULL TYPE'
| | | | |   `-DeclRefExpr 0xa75690 <col:64> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa66250 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xa756f8 <col:69, col:71>
| | | |-CXXConversionDecl 0xa664a0 <line:347:7, line:348:24> line:347:7 operator type-parameter-0-0 'std::__atomic_base::__int_type () const noexcept'
| | | | `-CompoundStmt 0xa757a8 <line:348:7, col:24>
| | | |   `-ReturnStmt 0xa75798 <col:9, col:21>
| | | |     `-CallExpr 0xa75778 <col:16, col:21> '<dependent type>'
| | | |       `-UnresolvedMemberExpr 0xa75718 <col:16> '<bound member function type>' lvalue
| | | |-CXXConversionDecl 0xa66610 <line:350:7, line:351:24> line:350:7 operator type-parameter-0-0 'std::__atomic_base::__int_type () const volatile noexcept'
| | | | `-CompoundStmt 0xa75860 <line:351:7, col:24>
| | | |   `-ReturnStmt 0xa75850 <col:9, col:21>
| | | |     `-CallExpr 0xa75830 <col:16, col:21> '<dependent type>'
| | | |       `-UnresolvedMemberExpr 0xa757d0 <col:16> '<bound member function type>' lvalue
| | | |-CXXMethodDecl 0xa667b0 <line:353:7, line:358:7> line:354:7 operator= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xa666e8 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xa759b0 <line:355:7, line:358:7>
| | | |   |-CallExpr 0xa75958 <line:356:2, col:11> '<dependent type>'
| | | |   | |-UnresolvedMemberExpr 0xa758d8 <col:2> '<bound member function type>' lvalue
| | | |   | `-DeclRefExpr 0xa75938 <col:8> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa666e8 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |   `-ReturnStmt 0xa759a0 <line:357:2, col:9>
| | | |     `-DeclRefExpr 0xa75980 <col:9> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa666e8 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |-CXXMethodDecl 0xa66970 <line:360:7, line:365:7> line:361:7 operator= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xa66878 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xa75b08 <line:362:7, line:365:7>
| | | |   |-CallExpr 0xa75ab0 <line:363:2, col:11> '<dependent type>'
| | | |   | |-UnresolvedMemberExpr 0xa75a30 <col:2> '<bound member function type>' lvalue
| | | |   | `-DeclRefExpr 0xa75a90 <col:8> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa66878 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |   `-ReturnStmt 0xa75af8 <line:364:2, col:9>
| | | |     `-DeclRefExpr 0xa75ad8 <col:9> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa66878 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |-CXXMethodDecl 0xa66b40 <line:367:7, line:369:30> line:368:7 operator++ 'std::__atomic_base::__int_type (int) noexcept'
| | | | |-ParmVarDecl 0xa66a40 <col:18> col:21 'int'
| | | | `-CompoundStmt 0xa75bf0 <line:369:7, col:30>
| | | |   `-ReturnStmt 0xa75be0 <col:9, col:27>
| | | |     `-CallExpr 0xa75bb8 <col:16, col:27> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xa75b38 <col:16> '<bound member function type>' lvalue
| | | |       `-IntegerLiteral 0xa75b98 <col:26> 'int' 1
| | | |-CXXMethodDecl 0xa66d00 <line:371:7, line:373:30> line:372:7 operator++ 'std::__atomic_base::__int_type (int) volatile noexcept'
| | | | |-ParmVarDecl 0xa66c00 <col:18> col:21 'int'
| | | | `-CompoundStmt 0xa75cd0 <line:373:7, col:30>
| | | |   `-ReturnStmt 0xa75cc0 <col:9, col:27>
| | | |     `-CallExpr 0xa75c98 <col:16, col:27> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xa75c18 <col:16> '<bound member function type>' lvalue
| | | |       `-IntegerLiteral 0xa75c78 <col:26> 'int' 1
| | | |-CXXMethodDecl 0xa66e68 <line:375:7, line:377:30> line:376:7 operator-- 'std::__atomic_base::__int_type (int) noexcept'
| | | | |-ParmVarDecl 0xa66dd0 <col:18> col:21 'int'
| | | | `-CompoundStmt 0xa75db0 <line:377:7, col:30>
| | | |   `-ReturnStmt 0xa75da0 <col:9, col:27>
| | | |     `-CallExpr 0xa75d78 <col:16, col:27> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xa75cf8 <col:16> '<bound member function type>' lvalue
| | | |       `-IntegerLiteral 0xa75d58 <col:26> 'int' 1
| | | |-CXXMethodDecl 0xa66fc0 <line:379:7, line:381:30> line:380:7 operator-- 'std::__atomic_base::__int_type (int) volatile noexcept'
| | | | |-ParmVarDecl 0xa66f28 <col:18> col:21 'int'
| | | | `-CompoundStmt 0xa75e90 <line:381:7, col:30>
| | | |   `-ReturnStmt 0xa75e80 <col:9, col:27>
| | | |     `-CallExpr 0xa75e58 <col:16, col:27> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xa75dd8 <col:16> '<bound member function type>' lvalue
| | | |       `-IntegerLiteral 0xa75e38 <col:26> 'int' 1
| | | |-CXXMethodDecl 0xa67100 <line:383:7, line:385:73> line:384:7 operator++ 'std::__atomic_base::__int_type () noexcept'
| | | | `-CompoundStmt 0xa761e0 <line:385:7, col:73>
| | | |   `-ReturnStmt 0xa761d0 <col:9, col:70>
| | | |     `-CallExpr 0xa76198 <col:16, col:70> '<dependent type>'
| | | |       |-DeclRefExpr 0xa76028 <col:16> '<builtin fn type>' Function 0xa75f30 '__atomic_add_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa760d0 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa76088 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa76058 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa76048 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | |       |-IntegerLiteral 0xa76100 <col:42> 'int' 1
| | | |       `-CXXFunctionalCastExpr 0xa76170 <col:45, col:69> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa76158 <col:49> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa76138 <col:49> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa67230 <line:387:7, line:389:73> line:388:7 operator++ 'std::__atomic_base::__int_type () volatile noexcept'
| | | | `-CompoundStmt 0xa763b0 <line:389:7, col:73>
| | | |   `-ReturnStmt 0xa763a0 <col:9, col:70>
| | | |     `-CallExpr 0xa76368 <col:16, col:70> '<dependent type>'
| | | |       |-DeclRefExpr 0xa761f8 <col:16> '<builtin fn type>' Function 0xa75f30 '__atomic_add_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa762a0 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa76258 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa76228 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa76218 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-IntegerLiteral 0xa762d0 <col:42> 'int' 1
| | | |       `-CXXFunctionalCastExpr 0xa76340 <col:45, col:69> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa76328 <col:49> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa76308 <col:49> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa67308 <line:391:7, line:393:73> line:392:7 operator-- 'std::__atomic_base::__int_type () noexcept'
| | | | `-CompoundStmt 0xa766c8 <line:393:7, col:73>
| | | |   `-ReturnStmt 0xa766b8 <col:9, col:70>
| | | |     `-CallExpr 0xa76680 <col:16, col:70> '<dependent type>'
| | | |       |-DeclRefExpr 0xa76510 <col:16> '<builtin fn type>' Function 0xa76418 '__atomic_sub_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa765b8 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa76570 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa76540 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa76530 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | |       |-IntegerLiteral 0xa765e8 <col:42> 'int' 1
| | | |       `-CXXFunctionalCastExpr 0xa76658 <col:45, col:69> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa76640 <col:49> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa76620 <col:49> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa673e0 <line:395:7, line:397:73> line:396:7 operator-- 'std::__atomic_base::__int_type () volatile noexcept'
| | | | `-CompoundStmt 0xa76898 <line:397:7, col:73>
| | | |   `-ReturnStmt 0xa76888 <col:9, col:70>
| | | |     `-CallExpr 0xa76850 <col:16, col:70> '<dependent type>'
| | | |       |-DeclRefExpr 0xa766e0 <col:16> '<builtin fn type>' Function 0xa76418 '__atomic_sub_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa76788 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa76740 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa76710 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa76700 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-IntegerLiteral 0xa767b8 <col:42> 'int' 1
| | | |       `-CXXFunctionalCastExpr 0xa76828 <col:45, col:69> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa76810 <col:49> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa767f0 <col:49> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa67538 <line:399:7, line:401:75> line:400:7 operator+= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xa674a0 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xa76a68 <line:401:7, col:75>
| | | |   `-ReturnStmt 0xa76a58 <col:9, col:72>
| | | |     `-CallExpr 0xa76a20 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xa768b0 <col:16> '<builtin fn type>' Function 0xa75f30 '__atomic_add_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa76958 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa76910 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa768e0 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa768d0 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xa76988 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa674a0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xa769f8 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa769e0 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa769c0 <col:51> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa67688 <line:403:7, line:405:75> line:404:7 operator+= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xa675f0 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xa76c38 <line:405:7, col:75>
| | | |   `-ReturnStmt 0xa76c28 <col:9, col:72>
| | | |     `-CallExpr 0xa76bf0 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xa76a80 <col:16> '<builtin fn type>' Function 0xa75f30 '__atomic_add_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa76b28 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa76ae0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa76ab0 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa76aa0 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xa76b58 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa675f0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xa76bc8 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa76bb0 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa76b90 <col:51> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa677e8 <line:407:7, line:409:75> line:408:7 operator-= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xa67750 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xa76e08 <line:409:7, col:75>
| | | |   `-ReturnStmt 0xa76df8 <col:9, col:72>
| | | |     `-CallExpr 0xa76dc0 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xa76c50 <col:16> '<builtin fn type>' Function 0xa76418 '__atomic_sub_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa76cf8 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa76cb0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa76c80 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa76c70 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xa76d28 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa67750 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xa76d98 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa76d80 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa76d60 <col:51> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa67938 <line:411:7, line:413:75> line:412:7 operator-= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xa678a0 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xa76fd8 <line:413:7, col:75>
| | | |   `-ReturnStmt 0xa76fc8 <col:9, col:72>
| | | |     `-CallExpr 0xa76f90 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xa76e20 <col:16> '<builtin fn type>' Function 0xa76418 '__atomic_sub_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa76ec8 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa76e80 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa76e50 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa76e40 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xa76ef8 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa678a0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xa76f68 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa76f50 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa76f30 <col:51> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa67a98 <line:415:7, line:417:75> line:416:7 operator&= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xa67a00 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xa79780 <line:417:7, col:75>
| | | |   `-ReturnStmt 0xa79770 <col:9, col:72>
| | | |     `-CallExpr 0xa79738 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xa795c8 <col:16> '<builtin fn type>' Function 0xa794d0 '__atomic_and_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa79670 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa79628 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa795f8 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa795e8 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xa796a0 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa67a00 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xa79710 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa796f8 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa796d8 <col:51> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa67be8 <line:419:7, line:421:75> line:420:7 operator&= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xa67b50 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xa79950 <line:421:7, col:75>
| | | |   `-ReturnStmt 0xa79940 <col:9, col:72>
| | | |     `-CallExpr 0xa79908 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xa79798 <col:16> '<builtin fn type>' Function 0xa794d0 '__atomic_and_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa79840 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa797f8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa797c8 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa797b8 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xa79870 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa67b50 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xa798e0 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa798c8 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa798a8 <col:51> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa67d48 <line:423:7, line:425:74> line:424:7 operator|= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xa67cb0 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xa79c68 <line:425:7, col:74>
| | | |   `-ReturnStmt 0xa79c58 <col:9, col:71>
| | | |     `-CallExpr 0xa79c20 <col:16, col:71> '<dependent type>'
| | | |       |-DeclRefExpr 0xa79ab0 <col:16> '<builtin fn type>' Function 0xa799b8 '__atomic_or_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa79b58 <col:34, col:35> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa79b10 <col:34> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa79ae0 <col:35> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa79ad0 <col:35> '__atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xa79b88 <col:41> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa67cb0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xa79bf8 <col:46, col:70> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa79be0 <col:50> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa79bc0 <col:50> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa67e98 <line:427:7, line:429:74> line:428:7 operator|= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xa67e00 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xa79e38 <line:429:7, col:74>
| | | |   `-ReturnStmt 0xa79e28 <col:9, col:71>
| | | |     `-CallExpr 0xa79df0 <col:16, col:71> '<dependent type>'
| | | |       |-DeclRefExpr 0xa79c80 <col:16> '<builtin fn type>' Function 0xa799b8 '__atomic_or_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa79d28 <col:34, col:35> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa79ce0 <col:34> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa79cb0 <col:35> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa79ca0 <col:35> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xa79d58 <col:41> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa67e00 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xa79dc8 <col:46, col:70> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa79db0 <col:50> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa79d90 <col:50> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa67ff8 <line:431:7, line:433:75> line:432:7 operator^= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) noexcept'
| | | | |-ParmVarDecl 0xa67f60 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xa7a150 <line:433:7, col:75>
| | | |   `-ReturnStmt 0xa7a140 <col:9, col:72>
| | | |     `-CallExpr 0xa7a108 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xa79f98 <col:16> '<builtin fn type>' Function 0xa79ea0 '__atomic_xor_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa7a040 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa79ff8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa79fc8 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa79fb8 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xa7a070 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa67f60 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xa7a0e0 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa7a0c8 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa7a0a8 <col:51> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa68170 <line:435:7, line:437:75> line:436:7 operator^= 'std::__atomic_base::__int_type (std::__atomic_base::__int_type) volatile noexcept'
| | | | |-ParmVarDecl 0xa680b0 <col:18, col:29> col:29 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | `-CompoundStmt 0xa7a320 <line:437:7, col:75>
| | | |   `-ReturnStmt 0xa7a310 <col:9, col:72>
| | | |     `-CallExpr 0xa7a2d8 <col:16, col:72> '<dependent type>'
| | | |       |-DeclRefExpr 0xa7a168 <col:16> '<builtin fn type>' Function 0xa79ea0 '__atomic_xor_fetch' 'void (...)'
| | | |       |-CXXOperatorCallExpr 0xa7a210 <col:35, col:36> '<dependent type>' '&'
| | | |       | |-UnresolvedLookupExpr 0xa7a1c8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | |       | `-MemberExpr 0xa7a198 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | |       |   `-CXXThisExpr 0xa7a188 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | |       |-DeclRefExpr 0xa7a240 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa680b0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | |       `-CXXFunctionalCastExpr 0xa7a2b0 <col:47, col:71> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xa7a298 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xa7a278 <col:51> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | |-CXXMethodDecl 0xa68280 <line:439:7, line:445:7> line:440:7 is_lock_free 'bool () const noexcept'
| | | | `-CompoundStmt 0xa7a888 <line:441:7, line:445:7>
| | | |   `-ReturnStmt 0xa7a878 <line:443:2, line:444:45>
| | | |     `-CallExpr 0xa7a830 <line:443:9, line:444:45> 'bool'
| | | |       |-ImplicitCastExpr 0xa7a818 <line:443:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
| | | |       | `-DeclRefExpr 0xa7a638 <col:9> '<builtin fn type>' Function 0xa7a438 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
| | | |       |-UnaryExprOrTypeTraitExpr 0xa7a700 <col:31, col:42> 'unsigned long' sizeof
| | | |       | `-ParenExpr 0xa7a6e0 <col:37, col:42> 'const std::__atomic_base::__int_type':'const _ITp' lvalue
| | | |       |   `-MemberExpr 0xa7a6b0 <col:38> 'const std::__atomic_base::__int_type':'const _ITp' lvalue ->_M_i 0xa649c0 non_odr_use_unevaluated
| | | |       |     `-CXXThisExpr 0xa7a6a0 <col:38> 'const __atomic_base<_IntTp> *' implicit this
| | | |       `-ImplicitCastExpr 0xa7a860 <line:444:6, col:44> 'const volatile void *' <NoOp>
| | | |         `-CXXReinterpretCastExpr 0xa7a788 <col:6, col:44> 'void *' reinterpret_cast<void *> <IntegralToPointer>
| | | |           `-UnaryOperator 0xa7a758 <col:31, col:32> 'int' prefix '-'
| | | |             `-ImplicitCastExpr 0xa7a740 <col:32> 'int' <LValueToRValue>
| | | |               `-DeclRefExpr 0xa7a720 <col:32> 'const int' lvalue Var 0xa64798 '_S_alignment' 'const int'
| | | |-CXXMethodDecl 0xa683a0 <line:447:7, line:453:7> line:448:7 is_lock_free 'bool () const volatile noexcept'
| | | | `-CompoundStmt 0xa7aa90 <line:449:7, line:453:7>
| | | |   `-ReturnStmt 0xa7aa80 <line:451:2, line:452:45>
| | | |     `-CallExpr 0xa7aa38 <line:451:9, line:452:45> 'bool'
| | | |       |-ImplicitCastExpr 0xa7aa20 <line:451:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
| | | |       | `-DeclRefExpr 0xa7a8a0 <col:9> '<builtin fn type>' Function 0xa7a438 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
| | | |       |-UnaryExprOrTypeTraitExpr 0xa7a968 <col:31, col:42> 'unsigned long' sizeof
| | | |       | `-ParenExpr 0xa7a948 <col:37, col:42> 'const volatile std::__atomic_base::__int_type':'const volatile _ITp' lvalue
| | | |       |   `-MemberExpr 0xa7a918 <col:38> 'const volatile std::__atomic_base::__int_type':'const volatile _ITp' lvalue ->_M_i 0xa649c0 non_odr_use_unevaluated
| | | |       |     `-CXXThisExpr 0xa7a908 <col:38> 'const volatile __atomic_base<_IntTp> *' implicit this
| | | |       `-ImplicitCastExpr 0xa7aa68 <line:452:6, col:44> 'const volatile void *' <NoOp>
| | | |         `-CXXReinterpretCastExpr 0xa7a9f0 <col:6, col:44> 'void *' reinterpret_cast<void *> <IntegralToPointer>
| | | |           `-UnaryOperator 0xa7a9c0 <col:31, col:32> 'int' prefix '-'
| | | |             `-ImplicitCastExpr 0xa7a9a8 <col:32> 'int' <LValueToRValue>
| | | |               `-DeclRefExpr 0xa7a988 <col:32> 'const int' lvalue Var 0xa64798 '_S_alignment' 'const int'
| | | |-CXXMethodDecl 0xa685f0 <line:45:32, line:465:7> line:456:7 store 'void (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa68460 <col:13, col:24> col:24 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa684d8 <col:29, col:48> col:42 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75410 <col:48> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa7b948 <line:457:7, line:465:7>
| | | | | |-DeclStmt 0xa7ac40 <line:458:2, line:459:31>
| | | | | | `-VarDecl 0xa7aab8 <line:458:2, line:459:12> line:458:15 referenced __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xa7ac08 <line:459:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xa7abf0 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xa7abd0 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xa7abb8 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xa7ab78 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa684d8 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xa7ab98 <col:12> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xa7ab20 <line:458:35> unused
| | | | | |-DoStmt 0xa7aec8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xa7aea0 <col:6, col:42>
| | | | | | | `-IfStmt 0xa7ae80 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa7ae08 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7acf0 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7acd8 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7aca8 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa7adf0 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa7adc8 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xa7ada8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:460:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xa7ad78 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xa7ad60 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xa7ad20 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa7aab8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xa7ad90 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7ad40 <col:26> 'std::memory_order' EnumConstant 0xa51420 'memory_order_acquire' 'std::memory_order'
| | | | | | |   `-CallExpr 0xa7ae60 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa7ae48 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7ae28 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7aeb8 <line:591:51> 'bool' false
| | | | | |-DoStmt 0xa7b158 <col:3, col:56>
| | | | | | |-CompoundStmt 0xa7b130 <col:6, col:42>
| | | | | | | `-IfStmt 0xa7b110 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa7b098 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7af80 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7af68 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7af38 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa7b080 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa7b058 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xa7b038 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:461:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xa7b008 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xa7aff0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xa7afb0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa7aab8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xa7b020 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7afd0 <col:26> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xa7b0f0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa7b0d8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7b0b8 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7b148 <line:591:51> 'bool' false
| | | | | |-DoStmt 0xa7b3e8 <col:3, col:56>
| | | | | | |-CompoundStmt 0xa7b3c0 <col:6, col:42>
| | | | | | | `-IfStmt 0xa7b3a0 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa7b328 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7b210 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7b1f8 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7b1c8 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa7b310 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa7b2e8 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xa7b2c8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:462:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xa7b298 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xa7b280 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xa7b240 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa7aab8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xa7b2b0 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7b260 <col:26> 'std::memory_order' EnumConstant 0xa513d0 'memory_order_consume' 'std::memory_order'
| | | | | | |   `-CallExpr 0xa7b380 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa7b368 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7b348 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7b3d8 <line:591:51> 'bool' false
| | | | | `-CallExpr 0xa7b910 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:464:2, col:39> '<dependent type>'
| | | | |   |-DeclRefExpr 0xa7b788 <col:2> '<builtin fn type>' Function 0xa7b690 '__atomic_store_n' 'void (...)'
| | | | |   |-CXXOperatorCallExpr 0xa7b830 <col:19, col:20> '<dependent type>' '&'
| | | | |   | |-UnresolvedLookupExpr 0xa7b7e8 <col:19> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |   | `-MemberExpr 0xa7b7b8 <col:20> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | | |   |   `-CXXThisExpr 0xa7b7a8 <col:20> '__atomic_base<_IntTp> *' implicit this
| | | | |   |-DeclRefExpr 0xa7b860 <col:26> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa68460 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |   `-CXXFunctionalCastExpr 0xa7b8e8 <col:31, col:38> 'int' functional cast to int <NoOp>
| | | | |     `-ImplicitCastExpr 0xa7b8d0 <col:35> 'int' <IntegralCast> part_of_explicit_cast
| | | | |       `-ImplicitCastExpr 0xa7b8b8 <col:35> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |         `-DeclRefExpr 0xa7b898 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa684d8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa686a0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa688a0 <col:32, line:478:7> line:468:7 store 'void (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa68708 <col:13, col:24> col:24 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa68780 <line:469:6, col:25> col:19 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75430 <col:25> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa7c4a0 <line:470:7, line:478:7>
| | | | | |-DeclStmt 0xa7bb18 <line:471:2, line:472:31>
| | | | | | `-VarDecl 0xa7b990 <line:471:2, line:472:12> line:471:15 referenced __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xa7bae0 <line:472:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xa7bac8 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xa7baa8 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xa7ba90 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xa7ba50 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa68780 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xa7ba70 <col:12> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xa7b9f8 <line:471:35> unused
| | | | | |-DoStmt 0xa7bda0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xa7bd78 <col:6, col:42>
| | | | | | | `-IfStmt 0xa7bd58 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa7bce0 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7bbc8 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7bbb0 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7bb80 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa7bcc8 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa7bca0 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xa7bc80 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:473:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xa7bc50 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xa7bc38 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xa7bbf8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa7b990 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xa7bc68 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7bc18 <col:26> 'std::memory_order' EnumConstant 0xa51420 'memory_order_acquire' 'std::memory_order'
| | | | | | |   `-CallExpr 0xa7bd38 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa7bd20 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7bd00 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7bd90 <line:591:51> 'bool' false
| | | | | |-DoStmt 0xa7c030 <col:3, col:56>
| | | | | | |-CompoundStmt 0xa7c008 <col:6, col:42>
| | | | | | | `-IfStmt 0xa7bfe8 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa7bf70 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7be58 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7be40 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7be10 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa7bf58 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa7bf30 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xa7bf10 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:474:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xa7bee0 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xa7bec8 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xa7be88 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa7b990 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xa7bef8 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7bea8 <col:26> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xa7bfc8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa7bfb0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7bf90 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7c020 <line:591:51> 'bool' false
| | | | | |-DoStmt 0xa7c2c0 <col:3, col:56>
| | | | | | |-CompoundStmt 0xa7c298 <col:6, col:42>
| | | | | | | `-IfStmt 0xa7c278 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa7c200 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7c0e8 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7c0d0 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7c0a0 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa7c1e8 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa7c1c0 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xa7c1a0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:475:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xa7c170 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xa7c158 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xa7c118 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa7b990 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xa7c188 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7c138 <col:26> 'std::memory_order' EnumConstant 0xa513d0 'memory_order_consume' 'std::memory_order'
| | | | | | |   `-CallExpr 0xa7c258 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa7c240 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7c220 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7c2b0 <line:591:51> 'bool' false
| | | | | `-CallExpr 0xa7c468 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:477:2, col:39> '<dependent type>'
| | | | |   |-DeclRefExpr 0xa7c2e0 <col:2> '<builtin fn type>' Function 0xa7b690 '__atomic_store_n' 'void (...)'
| | | | |   |-CXXOperatorCallExpr 0xa7c388 <col:19, col:20> '<dependent type>' '&'
| | | | |   | |-UnresolvedLookupExpr 0xa7c340 <col:19> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |   | `-MemberExpr 0xa7c310 <col:20> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | | |   |   `-CXXThisExpr 0xa7c300 <col:20> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |   |-DeclRefExpr 0xa7c3b8 <col:26> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa68708 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |   `-CXXFunctionalCastExpr 0xa7c440 <col:31, col:38> 'int' functional cast to int <NoOp>
| | | | |     `-ImplicitCastExpr 0xa7c428 <col:35> 'int' <IntegralCast> part_of_explicit_cast
| | | | |       `-ImplicitCastExpr 0xa7c410 <col:35> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |         `-DeclRefExpr 0xa7c3f0 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa68780 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa68950 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa68ac0 <col:32, line:489:7> line:481:7 load 'std::__atomic_base::__int_type (std::memory_order) const noexcept' inline
| | | | |-ParmVarDecl 0xa689c8 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75450 <col:31> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa7ce98 <line:482:7, line:489:7>
| | | | | |-DeclStmt 0xa7c670 <line:483:2, line:484:31>
| | | | | | `-VarDecl 0xa7c4e8 <line:483:2, line:484:12> line:483:15 referenced __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xa7c638 <line:484:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xa7c620 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xa7c600 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xa7c5e8 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xa7c5a8 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa689c8 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xa7c5c8 <col:12> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xa7c550 <line:483:35> unused
| | | | | |-DoStmt 0xa7c8f8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xa7c8d0 <col:6, col:42>
| | | | | | | `-IfStmt 0xa7c8b0 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa7c838 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7c720 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7c708 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7c6d8 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa7c820 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa7c7f8 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xa7c7d8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:485:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xa7c7a8 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xa7c790 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xa7c750 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa7c4e8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xa7c7c0 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7c770 <col:26> 'std::memory_order' EnumConstant 0xa51470 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xa7c890 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa7c878 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7c858 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7c8e8 <line:591:51> 'bool' false
| | | | | |-DoStmt 0xa7cb88 <col:3, col:56>
| | | | | | |-CompoundStmt 0xa7cb60 <col:6, col:42>
| | | | | | | `-IfStmt 0xa7cb40 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa7cac8 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7c9b0 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7c998 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7c968 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa7cab0 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa7ca88 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xa7ca68 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:486:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xa7ca38 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xa7ca20 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xa7c9e0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa7c4e8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xa7ca50 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7ca00 <col:26> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xa7cb20 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa7cb08 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7cae8 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7cb78 <line:591:51> 'bool' false
| | | | | `-ReturnStmt 0xa7ce88 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:488:2, col:40>
| | | | |   `-CallExpr 0xa7ce58 <col:9, col:40> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa7ccf0 <col:9> '<builtin fn type>' Function 0xa7cbf8 '__atomic_load_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa7cd98 <col:25, col:26> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa7cd50 <col:25> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa7cd20 <col:26> 'const std::__atomic_base::__int_type':'const _ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa7cd10 <col:26> 'const __atomic_base<_IntTp> *' implicit this
| | | | |     `-CXXFunctionalCastExpr 0xa7ce30 <col:32, col:39> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa7ce18 <col:36> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa7ce00 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa7cde0 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa689c8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa68b68 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa68cd0 <col:32, line:500:7> line:492:7 load 'std::__atomic_base::__int_type (std::memory_order) const volatile noexcept' inline
| | | | |-ParmVarDecl 0xa68bd0 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75470 <col:31> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa7db58 <line:493:7, line:500:7>
| | | | | |-DeclStmt 0xa7d060 <line:494:2, line:495:31>
| | | | | | `-VarDecl 0xa7ced8 <line:494:2, line:495:12> line:494:15 referenced __b 'std::memory_order':'std::memory_order' cinit
| | | | | |   |-CXXOperatorCallExpr 0xa7d028 <line:495:6, col:12> 'std::memory_order':'std::memory_order' '&'
| | | | | |   | |-ImplicitCastExpr 0xa7d010 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
| | | | | |   | | `-DeclRefExpr 0xa7cff0 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
| | | | | |   | |-ImplicitCastExpr 0xa7cfd8 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0xa7cf98 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa68bd0 '__m' 'std::memory_order':'std::memory_order'
| | | | | |   | `-DeclRefExpr 0xa7cfb8 <col:12> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
| | | | | |   `-UnusedAttr 0xa7cf40 <line:494:35> unused
| | | | | |-DoStmt 0xa7d2e8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xa7d2c0 <col:6, col:42>
| | | | | | | `-IfStmt 0xa7d2a0 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa7d228 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7d110 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7d0f8 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7d0c8 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa7d210 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa7d1e8 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xa7d1c8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:496:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xa7d198 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xa7d180 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xa7d140 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa7ced8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xa7d1b0 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7d160 <col:26> 'std::memory_order' EnumConstant 0xa51470 'memory_order_release' 'std::memory_order'
| | | | | | |   `-CallExpr 0xa7d280 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa7d268 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7d248 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7d2d8 <line:591:51> 'bool' false
| | | | | |-DoStmt 0xa7d578 <col:3, col:56>
| | | | | | |-CompoundStmt 0xa7d550 <col:6, col:42>
| | | | | | | `-IfStmt 0xa7d530 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa7d4b8 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7d3a0 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7d388 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7d358 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa7d4a0 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa7d478 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-BinaryOperator 0xa7d458 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:497:19, col:26> 'bool' '!='
| | | | | | |   |       |-ImplicitCastExpr 0xa7d428 <col:19> 'int' <IntegralCast>
| | | | | | |   |       | `-ImplicitCastExpr 0xa7d410 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |       |   `-DeclRefExpr 0xa7d3d0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa7ced8 '__b' 'std::memory_order':'std::memory_order'
| | | | | | |   |       `-ImplicitCastExpr 0xa7d440 <col:26> 'int' <IntegralCast>
| | | | | | |   |         `-DeclRefExpr 0xa7d3f0 <col:26> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
| | | | | | |   `-CallExpr 0xa7d510 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa7d4f8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7d4d8 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7d568 <line:591:51> 'bool' false
| | | | | `-ReturnStmt 0xa7db48 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:499:2, col:40>
| | | | |   `-CallExpr 0xa7db18 <col:9, col:40> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa7d598 <col:9> '<builtin fn type>' Function 0xa7cbf8 '__atomic_load_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa7d640 <col:25, col:26> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa7d5f8 <col:25> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa7d5c8 <col:26> 'const volatile std::__atomic_base::__int_type':'const volatile _ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa7d5b8 <col:26> 'const volatile __atomic_base<_IntTp> *' implicit this
| | | | |     `-CXXFunctionalCastExpr 0xa7daf0 <col:32, col:39> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa7dad8 <col:36> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa7dac0 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa7daa0 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa68bd0 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa68d78 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa68f80 <col:32, line:507:7> line:503:7 exchange 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa68df0 <col:16, col:27> col:27 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa68e68 <line:504:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75490 <col:28> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa7dea0 <line:505:7, line:507:7>
| | | | | `-ReturnStmt 0xa7de90 <line:506:2, col:49>
| | | | |   `-CallExpr 0xa7de58 <col:9, col:49> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa7dcd0 <col:9> '<builtin fn type>' Function 0xa7dbd8 '__atomic_exchange_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa7dd78 <col:29, col:30> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa7dd30 <col:29> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa7dd00 <col:30> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa7dcf0 <col:30> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xa7dda8 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa68df0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xa7de30 <col:41, col:48> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa7de18 <col:45> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa7de00 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa7dde0 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa68e68 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa69030 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa69230 <col:32, line:515:7> line:511:7 exchange 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa69098 <col:16, col:27> col:27 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa69110 <line:512:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa754b0 <col:28> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa7e088 <line:513:7, line:515:7>
| | | | | `-ReturnStmt 0xa7e078 <line:514:2, col:49>
| | | | |   `-CallExpr 0xa7e040 <col:9, col:49> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa7deb8 <col:9> '<builtin fn type>' Function 0xa7dbd8 '__atomic_exchange_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa7df60 <col:29, col:30> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa7df18 <col:29> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa7dee8 <col:30> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa7ded8 <col:30> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xa7df90 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa69098 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xa7e018 <col:41, col:48> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa7e000 <col:45> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa7dfe8 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa7dfc8 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa69110 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa692e0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa69640 <col:32, line:525:7> line:518:7 compare_exchange_weak 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa69388 <col:29, col:41> col:41 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xa69400 <col:47, col:58> col:58 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa69478 <line:519:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xa694f0 <col:27, col:40> col:40 referenced __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xa7e838 <line:520:7, line:525:7>
| | | | | |-DoStmt 0xa7e3a0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xa7e378 <col:6, col:42>
| | | | | | | `-IfStmt 0xa7e358 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa7e2e0 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7e138 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7e120 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7e0f0 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa7e2c8 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa7e2a0 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-CallExpr 0xa7e260 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:521:19, col:56> 'bool'
| | | | | | |   |       |-ImplicitCastExpr 0xa7e248 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | | | |   |       | `-DeclRefExpr 0xa7e1d0 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
| | | | | | |   |       `-ImplicitCastExpr 0xa7e288 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |         `-DeclRefExpr 0xa7e1b0 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa694f0 '__m2' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xa7e338 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa7e320 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7e300 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7e390 <line:591:51> 'bool' false
| | | | | `-ReturnStmt 0xa7e828 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:523:2, line:524:29>
| | | | |   `-CallExpr 0xa7e7d8 <line:523:9, line:524:29> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa7e508 <line:523:9> '<builtin fn type>' Function 0xa7e410 '__atomic_compare_exchange_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa7e5b0 <col:37, col:38> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa7e568 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa7e538 <col:38> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa7e528 <col:38> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-CXXOperatorCallExpr 0xa7e648 <col:44, col:45> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa7e600 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-DeclRefExpr 0xa7e5e0 <col:45> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa69388 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xa7e678 <col:51> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa69400 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-IntegerLiteral 0xa7e698 <col:57> 'int' 1
| | | | |     |-CXXFunctionalCastExpr 0xa7e720 <line:524:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xa7e708 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xa7e6f0 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xa7e6d0 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa69478 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     `-CXXFunctionalCastExpr 0xa7e7b0 <col:20, col:28> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa7e798 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa7e780 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa7e760 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa694f0 '__m2' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa69700 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa69a20 <col:32, line:536:7> line:528:7 compare_exchange_weak 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa69768 <col:29, col:41> col:41 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xa697e0 <col:47, col:58> col:58 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa69858 <line:529:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xa698d0 <line:530:8, col:21> col:21 referenced __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xa7ee50 <line:531:7, line:536:7>
| | | | | |-DoStmt 0xa7eb00 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xa7ead8 <col:6, col:42>
| | | | | | | `-IfStmt 0xa7eab8 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa7ea40 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7e8f0 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7e8d8 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7e8a8 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa7ea28 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa7ea00 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-CallExpr 0xa7e9c0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:532:19, col:56> 'bool'
| | | | | | |   |       |-ImplicitCastExpr 0xa7e9a8 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | | | |   |       | `-DeclRefExpr 0xa7e988 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
| | | | | | |   |       `-ImplicitCastExpr 0xa7e9e8 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |         `-DeclRefExpr 0xa7e968 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa698d0 '__m2' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xa7ea98 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa7ea80 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7ea60 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7eaf0 <line:591:51> 'bool' false
| | | | | `-ReturnStmt 0xa7ee40 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:534:2, line:535:29>
| | | | |   `-CallExpr 0xa7edf0 <line:534:9, line:535:29> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa7eb20 <line:534:9> '<builtin fn type>' Function 0xa7e410 '__atomic_compare_exchange_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa7ebc8 <col:37, col:38> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa7eb80 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa7eb50 <col:38> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa7eb40 <col:38> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-CXXOperatorCallExpr 0xa7ec60 <col:44, col:45> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa7ec18 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-DeclRefExpr 0xa7ebf8 <col:45> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa69768 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xa7ec90 <col:51> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa697e0 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-IntegerLiteral 0xa7ecb0 <col:57> 'int' 1
| | | | |     |-CXXFunctionalCastExpr 0xa7ed38 <line:535:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xa7ed20 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xa7ed08 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xa7ece8 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa69858 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     `-CXXFunctionalCastExpr 0xa7edc8 <col:20, col:28> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa7edb0 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa7ed98 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa7ed78 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa698d0 '__m2' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa69ae0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa69d70 <col:32, line:544:7> line:539:7 compare_exchange_weak 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa69b58 <col:29, col:41> col:41 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xa69bd0 <col:47, col:58> col:58 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa69c48 <line:540:8, col:27> col:21 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa754d0 <col:27> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa7f080 <line:541:7, line:544:7>
| | | | | `-ReturnStmt 0xa7f070 <line:542:2, line:543:38>
| | | | |   `-CallExpr 0xa7f030 <line:542:9, line:543:38> '<dependent type>'
| | | | |     |-UnresolvedMemberExpr 0xa7ee80 <line:542:9> '<bound member function type>' lvalue
| | | | |     |-DeclRefExpr 0xa7eef0 <col:31> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa69b58 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xa7ef10 <col:37> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa69bd0 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-DeclRefExpr 0xa7ef30 <col:43> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa69c48 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xa7eff0 <line:543:10, col:37> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xa7efd8 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xa7efb8 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xa7f018 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xa7ef98 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa69c48 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa69e28 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa6ed90 <col:32, line:552:7> line:547:7 compare_exchange_weak 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa69ea0 <col:29, col:41> col:41 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xa69f18 <col:47, col:58> col:58 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa69f90 <line:548:6, col:25> col:19 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa754f0 <col:25> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa7f2a8 <line:549:7, line:552:7>
| | | | | `-ReturnStmt 0xa7f298 <line:550:2, line:551:38>
| | | | |   `-CallExpr 0xa7f258 <line:550:9, line:551:38> '<dependent type>'
| | | | |     |-UnresolvedMemberExpr 0xa7f0a8 <line:550:9> '<bound member function type>' lvalue
| | | | |     |-DeclRefExpr 0xa7f118 <col:31> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa69ea0 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xa7f138 <col:37> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa69f18 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-DeclRefExpr 0xa7f158 <col:43> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa69f90 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xa7f218 <line:551:10, col:37> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xa7f200 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xa7f1e0 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xa7f240 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xa7f1c0 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa69f90 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa6ee48 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa6f0d8 <col:32, line:562:7> line:555:7 compare_exchange_strong 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa6eec0 <col:31, col:43> col:43 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xa6ef38 <col:49, col:60> col:60 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa6efb0 <line:556:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xa6f028 <col:29, col:42> col:42 referenced __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xa7f8b8 <line:557:7, line:562:7>
| | | | | |-DoStmt 0xa7f568 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xa7f540 <col:6, col:42>
| | | | | | | `-IfStmt 0xa7f520 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa7f4a8 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7f358 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7f340 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7f310 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa7f490 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa7f468 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-CallExpr 0xa7f428 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:558:19, col:56> 'bool'
| | | | | | |   |       |-ImplicitCastExpr 0xa7f410 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | | | |   |       | `-DeclRefExpr 0xa7f3f0 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
| | | | | | |   |       `-ImplicitCastExpr 0xa7f450 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |         `-DeclRefExpr 0xa7f3d0 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6f028 '__m2' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xa7f500 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa7f4e8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa7f4c8 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa7f558 <line:591:51> 'bool' false
| | | | | `-ReturnStmt 0xa7f8a8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:560:2, line:561:29>
| | | | |   `-CallExpr 0xa7f858 <line:560:9, line:561:29> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa7f588 <line:560:9> '<builtin fn type>' Function 0xa7e410 '__atomic_compare_exchange_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa7f630 <col:37, col:38> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa7f5e8 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa7f5b8 <col:38> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa7f5a8 <col:38> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-CXXOperatorCallExpr 0xa7f6c8 <col:44, col:45> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa7f680 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-DeclRefExpr 0xa7f660 <col:45> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa6eec0 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xa7f6f8 <col:51> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa6ef38 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-IntegerLiteral 0xa7f718 <col:57> 'int' 0
| | | | |     |-CXXFunctionalCastExpr 0xa7f7a0 <line:561:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xa7f788 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xa7f770 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xa7f750 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6efb0 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     `-CXXFunctionalCastExpr 0xa7f830 <col:20, col:28> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa7f818 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa7f800 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa7f7e0 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6f028 '__m2' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa6f198 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa6f418 <col:32, line:573:7> line:565:7 compare_exchange_strong 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa6f200 <col:31, col:43> col:43 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xa6f278 <col:49, col:60> col:60 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa6f2f0 <line:566:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xa6f368 <line:567:10, col:23> col:23 referenced __m2 'std::memory_order':'std::memory_order'
| | | | |-CompoundStmt 0xa804b0 <line:568:7, line:573:7>
| | | | | |-DoStmt 0xa80160 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | | | | |-CompoundStmt 0xa80138 <col:6, col:42>
| | | | | | | `-IfStmt 0xa80118 <line:545:3, line:546:27>
| | | | | | |   |-BinaryOperator 0xa800a0 <line:545:7, col:51> 'bool' '&&'
| | | | | | |   | |-CallExpr 0xa7f970 <col:7, col:36> 'bool'
| | | | | | |   | | `-ImplicitCastExpr 0xa7f958 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | | | | |   | |   `-DeclRefExpr 0xa7f928 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | | | | |   | `-UnaryOperator 0xa80088 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | | | | |   |   `-CXXFunctionalCastExpr 0xa80060 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | | | | |   |     `-CallExpr 0xa7fa40 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:569:19, col:56> 'bool'
| | | | | | |   |       |-ImplicitCastExpr 0xa7fa28 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | | | |   |       | `-DeclRefExpr 0xa7fa08 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
| | | | | | |   |       `-ImplicitCastExpr 0xa7fa68 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | | | |   |         `-DeclRefExpr 0xa7f9e8 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6f368 '__m2' 'std::memory_order':'std::memory_order'
| | | | | | |   `-CallExpr 0xa800f8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | | | | |     `-ImplicitCastExpr 0xa800e0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | | | | |       `-DeclRefExpr 0xa800c0 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | | | | `-CXXBoolLiteralExpr 0xa80150 <line:591:51> 'bool' false
| | | | | `-ReturnStmt 0xa804a0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:571:2, line:572:29>
| | | | |   `-CallExpr 0xa80450 <line:571:9, line:572:29> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa80180 <line:571:9> '<builtin fn type>' Function 0xa7e410 '__atomic_compare_exchange_n' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa80228 <col:37, col:38> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa801e0 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa801b0 <col:38> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa801a0 <col:38> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-CXXOperatorCallExpr 0xa802c0 <col:44, col:45> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa80278 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-DeclRefExpr 0xa80258 <col:45> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa6f200 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xa802f0 <col:51> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa6f278 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-IntegerLiteral 0xa80310 <col:57> 'int' 0
| | | | |     |-CXXFunctionalCastExpr 0xa80398 <line:572:9, col:17> 'int' functional cast to int <NoOp>
| | | | |     | `-ImplicitCastExpr 0xa80380 <col:13> 'int' <IntegralCast> part_of_explicit_cast
| | | | |     |   `-ImplicitCastExpr 0xa80368 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |     |     `-DeclRefExpr 0xa80348 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6f2f0 '__m1' 'std::memory_order':'std::memory_order'
| | | | |     `-CXXFunctionalCastExpr 0xa80428 <col:20, col:28> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa80410 <col:24> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa803f8 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa803d8 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6f368 '__m2' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa6f4d8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa6f6e8 <col:32, line:581:7> line:576:7 compare_exchange_strong 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa6f550 <col:31, col:43> col:43 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xa6f5c8 <col:49, col:60> col:60 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa6f640 <line:577:10, col:29> col:23 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75510 <col:29> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa806e0 <line:578:7, line:581:7>
| | | | | `-ReturnStmt 0xa806d0 <line:579:2, line:580:40>
| | | | |   `-CallExpr 0xa80690 <line:579:9, line:580:40> '<dependent type>'
| | | | |     |-UnresolvedMemberExpr 0xa804e0 <line:579:9> '<bound member function type>' lvalue
| | | | |     |-DeclRefExpr 0xa80550 <col:33> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa6f550 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xa80570 <col:39> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa6f5c8 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-DeclRefExpr 0xa80590 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6f640 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xa80650 <line:580:12, col:39> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xa80638 <col:12> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xa80618 <col:12> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xa80678 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xa805f8 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6f640 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa6f7a0 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa6f9b0 <col:32, line:589:7> line:584:7 compare_exchange_strong 'bool (std::__atomic_base::__int_type &, std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa6f818 <col:31, col:43> col:43 referenced __i1 'std::__atomic_base::__int_type &'
| | | | |-ParmVarDecl 0xa6f890 <col:49, col:60> col:60 referenced __i2 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa6f908 <line:585:4, col:23> col:17 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75530 <col:23> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa80908 <line:586:7, line:589:7>
| | | | | `-ReturnStmt 0xa808f8 <line:587:2, line:588:40>
| | | | |   `-CallExpr 0xa808b8 <line:587:9, line:588:40> '<dependent type>'
| | | | |     |-UnresolvedMemberExpr 0xa80708 <line:587:9> '<bound member function type>' lvalue
| | | | |     |-DeclRefExpr 0xa80778 <col:33> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa6f818 '__i1' 'std::__atomic_base::__int_type &'
| | | | |     |-DeclRefExpr 0xa80798 <col:39> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa6f890 '__i2' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     |-DeclRefExpr 0xa807b8 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6f908 '__m' 'std::memory_order':'std::memory_order'
| | | | |     `-CallExpr 0xa80878 <line:588:12, col:39> 'std::memory_order':'std::memory_order'
| | | | |       |-ImplicitCastExpr 0xa80860 <col:12> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | | |       | `-DeclRefExpr 0xa80840 <col:12> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | | |       `-ImplicitCastExpr 0xa808a0 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | | |         `-DeclRefExpr 0xa80820 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6f908 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa6fa68 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa6fbf8 <col:32, line:618:58> line:616:7 fetch_add 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa6fae0 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa6fb58 <line:617:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75550 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa80c38 <line:618:7, col:58>
| | | | | `-ReturnStmt 0xa80c28 <col:9, col:55>
| | | | |   `-CallExpr 0xa80bf0 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa80a68 <col:16> '<builtin fn type>' Function 0xa80970 '__atomic_fetch_add' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa80b10 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa80ac8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa80a98 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa80a88 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xa80b40 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa6fae0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xa80bc8 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa80bb0 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa80b98 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa80b78 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6fb58 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa6fca8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa6fe28 <col:32, line:623:58> line:621:7 fetch_add 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa6fd10 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa6fd88 <line:622:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75570 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa80e20 <line:623:7, col:58>
| | | | | `-ReturnStmt 0xa80e10 <col:9, col:55>
| | | | |   `-CallExpr 0xa80dd8 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa80c50 <col:16> '<builtin fn type>' Function 0xa80970 '__atomic_fetch_add' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa80cf8 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa80cb0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa80c80 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa80c70 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xa80d28 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa6fd10 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xa80db0 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa80d98 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa80d80 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa80d60 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6fd88 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa6fed8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa70068 <col:32, line:628:58> line:626:7 fetch_sub 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa6ff50 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa6ffc8 <line:627:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75590 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa81150 <line:628:7, col:58>
| | | | | `-ReturnStmt 0xa81140 <col:9, col:55>
| | | | |   `-CallExpr 0xa81108 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa80f80 <col:16> '<builtin fn type>' Function 0xa80e88 '__atomic_fetch_sub' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa81028 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa80fe0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa80fb0 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa80fa0 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xa81058 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa6ff50 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xa810e0 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa810c8 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa810b0 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa81090 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6ffc8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa70118 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa70298 <col:32, line:633:58> line:631:7 fetch_sub 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa70180 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa701f8 <line:632:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa755b0 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa81338 <line:633:7, col:58>
| | | | | `-ReturnStmt 0xa81328 <col:9, col:55>
| | | | |   `-CallExpr 0xa812f0 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa81168 <col:16> '<builtin fn type>' Function 0xa80e88 '__atomic_fetch_sub' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa81210 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa811c8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa81198 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa81188 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xa81240 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa70180 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xa812c8 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa812b0 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa81298 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa81278 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa701f8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa70348 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa704d8 <col:32, line:638:58> line:636:7 fetch_and 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa703c0 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa70438 <line:637:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa755d0 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa81668 <line:638:7, col:58>
| | | | | `-ReturnStmt 0xa81658 <col:9, col:55>
| | | | |   `-CallExpr 0xa81620 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa81498 <col:16> '<builtin fn type>' Function 0xa813a0 '__atomic_fetch_and' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa81540 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa814f8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa814c8 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa814b8 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xa81570 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa703c0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xa815f8 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa815e0 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa815c8 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa815a8 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa70438 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa70588 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa70708 <col:32, line:643:58> line:641:7 fetch_and 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa705f0 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa70668 <line:642:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa755f0 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa81850 <line:643:7, col:58>
| | | | | `-ReturnStmt 0xa81840 <col:9, col:55>
| | | | |   `-CallExpr 0xa81808 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa81680 <col:16> '<builtin fn type>' Function 0xa813a0 '__atomic_fetch_and' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa81728 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa816e0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa816b0 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa816a0 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xa81758 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa705f0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xa817e0 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa817c8 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa817b0 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa81790 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa70668 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa707b8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa70948 <col:32, line:648:57> line:646:7 fetch_or 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa70830 <col:16, col:27> col:27 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa708a8 <line:647:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75610 <col:28> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa81b80 <line:648:7, col:57>
| | | | | `-ReturnStmt 0xa81b70 <col:9, col:54>
| | | | |   `-CallExpr 0xa81b38 <col:16, col:54> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa819b0 <col:16> '<builtin fn type>' Function 0xa818b8 '__atomic_fetch_or' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa81a58 <col:34, col:35> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa81a10 <col:34> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa819e0 <col:35> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa819d0 <col:35> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xa81a88 <col:41> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa70830 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xa81b10 <col:46, col:53> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa81af8 <col:50> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa81ae0 <col:50> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa81ac0 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa708a8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa709f8 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa70b78 <col:32, line:653:57> line:651:7 fetch_or 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | | | |-ParmVarDecl 0xa70a60 <col:16, col:27> col:27 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa70ad8 <line:652:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75630 <col:28> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa81d68 <line:653:7, col:57>
| | | | | `-ReturnStmt 0xa81d58 <col:9, col:54>
| | | | |   `-CallExpr 0xa81d20 <col:16, col:54> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa81b98 <col:16> '<builtin fn type>' Function 0xa818b8 '__atomic_fetch_or' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa81c40 <col:34, col:35> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa81bf8 <col:34> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa81bc8 <col:35> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa81bb8 <col:35> 'volatile __atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xa81c70 <col:41> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa70a60 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xa81cf8 <col:46, col:53> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa81ce0 <col:50> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa81cc8 <col:50> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa81ca8 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa70ad8 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa70c28 <line:45:54> always_inline
| | | |-CXXMethodDecl 0xa750c8 <col:32, line:658:58> line:656:7 fetch_xor 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) noexcept' inline
| | | | |-ParmVarDecl 0xa70ca0 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | | | |-ParmVarDecl 0xa70d18 <line:657:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xa75650 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | |-CompoundStmt 0xa838c8 <line:658:7, col:58>
| | | | | `-ReturnStmt 0xa838b8 <col:9, col:55>
| | | | |   `-CallExpr 0xa83880 <col:16, col:55> '<dependent type>'
| | | | |     |-DeclRefExpr 0xa81ec8 <col:16> '<builtin fn type>' Function 0xa81dd0 '__atomic_fetch_xor' 'void (...)'
| | | | |     |-CXXOperatorCallExpr 0xa81f70 <col:35, col:36> '<dependent type>' '&'
| | | | |     | |-UnresolvedLookupExpr 0xa81f28 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | | | |     | `-MemberExpr 0xa81ef8 <col:36> 'std::__atomic_base::__int_type':'_ITp' lvalue ->_M_i 0xa649c0
| | | | |     |   `-CXXThisExpr 0xa81ee8 <col:36> '__atomic_base<_IntTp> *' implicit this
| | | | |     |-DeclRefExpr 0xa81fa0 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa70ca0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | | | |     `-CXXFunctionalCastExpr 0xa82028 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | | |       `-ImplicitCastExpr 0xa82010 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | | |         `-ImplicitCastExpr 0xa81ff8 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | | |           `-DeclRefExpr 0xa81fd8 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa70d18 '__m' 'std::memory_order':'std::memory_order'
| | | | `-AlwaysInlineAttr 0xa75178 <line:45:54> always_inline
| | | `-CXXMethodDecl 0xa752f8 <col:32, line:663:58> line:661:7 fetch_xor 'std::__atomic_base::__int_type (std::__atomic_base::__int_type, std::memory_order) volatile noexcept' inline
| | |   |-ParmVarDecl 0xa751e0 <col:17, col:28> col:28 referenced __i 'std::__atomic_base::__int_type':'_ITp'
| | |   |-ParmVarDecl 0xa75258 <line:662:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | |   | `-DeclRefExpr 0xa75670 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | |   |-CompoundStmt 0xa83ab0 <line:663:7, col:58>
| | |   | `-ReturnStmt 0xa83aa0 <col:9, col:55>
| | |   |   `-CallExpr 0xa83a68 <col:16, col:55> '<dependent type>'
| | |   |     |-DeclRefExpr 0xa838e0 <col:16> '<builtin fn type>' Function 0xa81dd0 '__atomic_fetch_xor' 'void (...)'
| | |   |     |-CXXOperatorCallExpr 0xa83988 <col:35, col:36> '<dependent type>' '&'
| | |   |     | |-UnresolvedLookupExpr 0xa83940 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
| | |   |     | `-MemberExpr 0xa83910 <col:36> 'volatile std::__atomic_base::__int_type':'volatile _ITp' lvalue ->_M_i 0xa649c0
| | |   |     |   `-CXXThisExpr 0xa83900 <col:36> 'volatile __atomic_base<_IntTp> *' implicit this
| | |   |     |-DeclRefExpr 0xa839b8 <col:42> 'std::__atomic_base::__int_type':'_ITp' lvalue ParmVar 0xa751e0 '__i' 'std::__atomic_base::__int_type':'_ITp'
| | |   |     `-CXXFunctionalCastExpr 0xa83a40 <col:47, col:54> 'int' functional cast to int <NoOp>
| | |   |       `-ImplicitCastExpr 0xa83a28 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | |   |         `-ImplicitCastExpr 0xa83a10 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | |   |           `-DeclRefExpr 0xa839f0 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa75258 '__m' 'std::memory_order':'std::memory_order'
| | |   `-AlwaysInlineAttr 0xa753a8 <line:45:54> always_inline
| | |-ClassTemplateSpecialization 0xa916b0 '__atomic_base'
| | |-ClassTemplateSpecialization 0xaae978 '__atomic_base'
| | |-ClassTemplateSpecialization 0xac0fd0 '__atomic_base'
| | |-ClassTemplateSpecialization 0xac95d0 '__atomic_base'
| | |-ClassTemplateSpecialization 0xad3c20 '__atomic_base'
| | |-ClassTemplateSpecialization 0xadc220 '__atomic_base'
| | |-ClassTemplateSpecialization 0xae4830 '__atomic_base'
| | |-ClassTemplateSpecialization 0xaed2a0 '__atomic_base'
| | |-ClassTemplateSpecialization 0xaf58e0 '__atomic_base'
| | |-ClassTemplateSpecialization 0xb00d70 '__atomic_base'
| | |-ClassTemplateSpecialization 0xb093d0 '__atomic_base'
| | |-ClassTemplateSpecialization 0xb137d0 '__atomic_base'
| | |-ClassTemplateSpecialization 0xb1f2d8 '__atomic_base'
| | |-ClassTemplateSpecialization 0xb278a8 '__atomic_base'
| | `-ClassTemplateSpecialization 0xb324b8 '__atomic_base'
| `-ClassTemplatePartialSpecializationDecl 0xa83c50 <line:668:3, line:937:5> line:669:12 struct __atomic_base definition
|   |-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor
|   | |-DefaultConstructor exists
|   | |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
|   | |-MoveConstructor
|   | |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
|   | |-MoveAssignment
|   | `-Destructor irrelevant non_trivial user_declared
|   |-TemplateArgument type 'type-parameter-0-0 *'
|   | `-PointerType 0x8fb540 'type-parameter-0-0 *' dependent
|   |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
|   |-TemplateTypeParmDecl 0xa83ac8 <line:668:12, col:21> col:21 referenced typename depth 0 index 0 _PTp
|   |-CXXRecordDecl 0xa83e68 <line:669:5, col:12> col:12 implicit referenced struct __atomic_base
|   |-AccessSpecDecl 0xa83ef8 <line:671:5, col:12> col:5 private
|   |-TypedefDecl 0xa83f30 <line:672:7, col:22> col:22 referenced __pointer_type '_PTp *'
|   | `-PointerType 0xa83b60 '_PTp *' dependent
|   |   `-TemplateTypeParmType 0xa83b20 '_PTp' dependent depth 0 index 0
|   |     `-TemplateTypeParm 0xa83ac8 '_PTp'
|   |-FieldDecl 0xa83fc0 <line:674:7, col:23> col:23 referenced _M_p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   |-CXXMethodDecl 0xa84168 <line:677:7, line:678:70> col:7 constexpr _M_type_size 'std::ptrdiff_t (std::ptrdiff_t) const'
|   | |-ParmVarDecl 0xa84040 <col:20, col:30> col:30 referenced __d 'std::ptrdiff_t':'long'
|   | `-CompoundStmt 0xa86f70 <col:41, col:70>
|   |   `-ReturnStmt 0xa86f60 <col:43, col:67>
|   |     `-ImplicitCastExpr 0xa86f48 <col:50, col:67> 'std::ptrdiff_t':'long' <IntegralCast>
|   |       `-BinaryOperator 0xa86f28 <col:50, col:67> 'unsigned long' '*'
|   |         |-ImplicitCastExpr 0xa86f10 <col:50> 'unsigned long' <IntegralCast>
|   |         | `-ImplicitCastExpr 0xa86ef8 <col:50> 'std::ptrdiff_t':'long' <LValueToRValue>
|   |         |   `-DeclRefExpr 0xa86ea8 <col:50> 'std::ptrdiff_t':'long' lvalue ParmVar 0xa84040 '__d' 'std::ptrdiff_t':'long'
|   |         `-UnaryExprOrTypeTraitExpr 0xa86ed8 <col:56, col:67> 'unsigned long' sizeof '_PTp'
|   |-CXXMethodDecl 0xa84348 <line:680:7, line:681:79> col:7 constexpr _M_type_size 'std::ptrdiff_t (std::ptrdiff_t) const volatile'
|   | |-ParmVarDecl 0xa84220 <col:20, col:30> col:30 referenced __d 'std::ptrdiff_t':'long'
|   | `-CompoundStmt 0xa87050 <col:50, col:79>
|   |   `-ReturnStmt 0xa87040 <col:52, col:76>
|   |     `-ImplicitCastExpr 0xa87028 <col:59, col:76> 'std::ptrdiff_t':'long' <IntegralCast>
|   |       `-BinaryOperator 0xa87008 <col:59, col:76> 'unsigned long' '*'
|   |         |-ImplicitCastExpr 0xa86ff0 <col:59> 'unsigned long' <IntegralCast>
|   |         | `-ImplicitCastExpr 0xa86fd8 <col:59> 'std::ptrdiff_t':'long' <LValueToRValue>
|   |         |   `-DeclRefExpr 0xa86f88 <col:59> 'std::ptrdiff_t':'long' lvalue ParmVar 0xa84220 '__d' 'std::ptrdiff_t':'long'
|   |         `-UnaryExprOrTypeTraitExpr 0xa86fb8 <col:65, col:76> 'unsigned long' sizeof '_PTp'
|   |-AccessSpecDecl 0xa84400 <line:683:5, col:11> col:5 public
|   |-CXXConstructorDecl 0xa84498 <line:684:7, col:40> col:7 __atomic_base<type-parameter-0-0 *> 'void () noexcept' default
|   |-CXXDestructorDecl 0xa84590 <line:685:7, col:41> col:7 ~__atomic_base<type-parameter-0-0 *> 'void () noexcept' default
|   |-CXXConstructorDecl 0xa84738 <line:686:7, col:50> col:7 __atomic_base<type-parameter-0-0 *> 'void (const __atomic_base<type-parameter-0-0 *> &)' delete
|   | `-ParmVarDecl 0xa84678 <col:21, col:40> col:41 'const __atomic_base<type-parameter-0-0 *> &'
|   |-CXXMethodDecl 0xa848f8 <line:687:7, col:61> col:22 operator= '__atomic_base<type-parameter-0-0 *> &(const __atomic_base<type-parameter-0-0 *> &)' delete
|   | `-ParmVarDecl 0xa84808 <col:32, col:51> col:52 'const __atomic_base<type-parameter-0-0 *> &'
|   |-CXXMethodDecl 0xa84aa8 <line:688:7, col:70> col:22 operator= '__atomic_base<type-parameter-0-0 *> &(const __atomic_base<type-parameter-0-0 *> &) volatile' delete
|   | `-ParmVarDecl 0xa849b0 <col:32, col:51> col:52 'const __atomic_base<type-parameter-0-0 *> &'
|   |-CXXConstructorDecl 0xa84c70 <line:691:7, col:75> col:17 constexpr __atomic_base<type-parameter-0-0 *> 'void (std::__atomic_base<type-parameter-0-0 *>::__pointer_type) noexcept'
|   | |-ParmVarDecl 0xa84b70 <col:31, col:46> col:46 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-CXXCtorInitializer Field 0xa83fc0 '_M_p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | | `-ParenListExpr 0xa87088 <col:67, col:71> 'NULL TYPE'
|   | |   `-DeclRefExpr 0xa87068 <col:68> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa84b70 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | `-CompoundStmt 0xa870d0 <col:73, col:75>
|   |-CXXConversionDecl 0xa84de0 <line:693:7, line:694:24> line:693:7 operator type-parameter-0-0 * 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type () const noexcept'
|   | `-CompoundStmt 0xa87180 <line:694:7, col:24>
|   |   `-ReturnStmt 0xa87170 <col:9, col:21>
|   |     `-CallExpr 0xa87150 <col:16, col:21> '<dependent type>'
|   |       `-UnresolvedMemberExpr 0xa870f0 <col:16> '<bound member function type>' lvalue
|   |-CXXConversionDecl 0xa84f20 <line:696:7, line:697:24> line:696:7 operator type-parameter-0-0 * 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type () const volatile noexcept'
|   | `-CompoundStmt 0xa87238 <line:697:7, col:24>
|   |   `-ReturnStmt 0xa87228 <col:9, col:21>
|   |     `-CallExpr 0xa87208 <col:16, col:21> '<dependent type>'
|   |       `-UnresolvedMemberExpr 0xa871a8 <col:16> '<bound member function type>' lvalue
|   |-CXXMethodDecl 0xa850f0 <line:699:7, line:704:7> line:700:7 operator= 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::__atomic_base<type-parameter-0-0 *>::__pointer_type) noexcept'
|   | |-ParmVarDecl 0xa84ff8 <col:17, col:32> col:32 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | `-CompoundStmt 0xa87388 <line:701:7, line:704:7>
|   |   |-CallExpr 0xa87330 <line:702:2, col:11> '<dependent type>'
|   |   | |-UnresolvedMemberExpr 0xa872b0 <col:2> '<bound member function type>' lvalue
|   |   | `-DeclRefExpr 0xa87310 <col:8> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa84ff8 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   |   `-ReturnStmt 0xa87378 <line:703:2, col:9>
|   |     `-DeclRefExpr 0xa87358 <col:9> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa84ff8 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   |-CXXMethodDecl 0xa852b0 <line:706:7, line:711:7> line:707:7 operator= 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::__atomic_base<type-parameter-0-0 *>::__pointer_type) volatile noexcept'
|   | |-ParmVarDecl 0xa851b8 <col:17, col:32> col:32 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | `-CompoundStmt 0xa874e0 <line:708:7, line:711:7>
|   |   |-CallExpr 0xa87488 <line:709:2, col:11> '<dependent type>'
|   |   | |-UnresolvedMemberExpr 0xa87408 <col:2> '<bound member function type>' lvalue
|   |   | `-DeclRefExpr 0xa87468 <col:8> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa851b8 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   |   `-ReturnStmt 0xa874d0 <line:710:2, col:9>
|   |     `-DeclRefExpr 0xa874b0 <col:9> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa851b8 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   |-CXXMethodDecl 0xa85480 <line:713:7, line:715:30> line:714:7 operator++ 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (int) noexcept'
|   | |-ParmVarDecl 0xa85380 <col:18> col:21 'int'
|   | `-CompoundStmt 0xa875c8 <line:715:7, col:30>
|   |   `-ReturnStmt 0xa875b8 <col:9, col:27>
|   |     `-CallExpr 0xa87590 <col:16, col:27> '<dependent type>'
|   |       |-UnresolvedMemberExpr 0xa87510 <col:16> '<bound member function type>' lvalue
|   |       `-IntegerLiteral 0xa87570 <col:26> 'int' 1
|   |-CXXMethodDecl 0xa85640 <line:717:7, line:719:30> line:718:7 operator++ 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (int) volatile noexcept'
|   | |-ParmVarDecl 0xa85540 <col:18> col:21 'int'
|   | `-CompoundStmt 0xa876a8 <line:719:7, col:30>
|   |   `-ReturnStmt 0xa87698 <col:9, col:27>
|   |     `-CallExpr 0xa87670 <col:16, col:27> '<dependent type>'
|   |       |-UnresolvedMemberExpr 0xa875f0 <col:16> '<bound member function type>' lvalue
|   |       `-IntegerLiteral 0xa87650 <col:26> 'int' 1
|   |-CXXMethodDecl 0xa857a8 <line:721:7, line:723:30> line:722:7 operator-- 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (int) noexcept'
|   | |-ParmVarDecl 0xa85710 <col:18> col:21 'int'
|   | `-CompoundStmt 0xa87788 <line:723:7, col:30>
|   |   `-ReturnStmt 0xa87778 <col:9, col:27>
|   |     `-CallExpr 0xa87750 <col:16, col:27> '<dependent type>'
|   |       |-UnresolvedMemberExpr 0xa876d0 <col:16> '<bound member function type>' lvalue
|   |       `-IntegerLiteral 0xa87730 <col:26> 'int' 1
|   |-CXXMethodDecl 0xa6a1e8 <line:725:7, line:727:30> line:726:7 operator-- 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (int) volatile noexcept'
|   | |-ParmVarDecl 0xa6a150 <col:18> col:21 'int'
|   | `-CompoundStmt 0xa87868 <line:727:7, col:30>
|   |   `-ReturnStmt 0xa87858 <col:9, col:27>
|   |     `-CallExpr 0xa87830 <col:16, col:27> '<dependent type>'
|   |       |-UnresolvedMemberExpr 0xa877b0 <col:16> '<bound member function type>' lvalue
|   |       `-IntegerLiteral 0xa87810 <col:26> 'int' 1
|   |-CXXMethodDecl 0xa6a320 <line:729:7, line:732:35> line:730:7 operator++ 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type () noexcept'
|   | `-CompoundStmt 0xa87af0 <line:731:7, line:732:35>
|   |   `-ReturnStmt 0xa87ae0 <line:731:9, line:732:32>
|   |     `-CallExpr 0xa87aa8 <line:731:16, line:732:32> '<dependent type>'
|   |       |-DeclRefExpr 0xa878a0 <line:731:16> '<builtin fn type>' Function 0xa75f30 '__atomic_add_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xa87948 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xa87900 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   |       | `-MemberExpr 0xa878d0 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xa83fc0
|   |       |   `-CXXThisExpr 0xa878c0 <col:36> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xa87a08 <col:42, col:56> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xa87988 <col:42> '<bound member function type>' lvalue
|   |       | `-IntegerLiteral 0xa879e8 <col:55> 'int' 1
|   |       `-CXXFunctionalCastExpr 0xa87a80 <line:732:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xa87a68 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xa87a48 <col:11> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xa6a450 <line:734:7, line:737:35> line:735:7 operator++ 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type () volatile noexcept'
|   | `-CompoundStmt 0xa87d58 <line:736:7, line:737:35>
|   |   `-ReturnStmt 0xa87d48 <line:736:9, line:737:32>
|   |     `-CallExpr 0xa87d10 <line:736:16, line:737:32> '<dependent type>'
|   |       |-DeclRefExpr 0xa87b08 <line:736:16> '<builtin fn type>' Function 0xa75f30 '__atomic_add_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xa87bb0 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xa87b68 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   |       | `-MemberExpr 0xa87b38 <col:36> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xa83fc0
|   |       |   `-CXXThisExpr 0xa87b28 <col:36> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xa87c70 <col:42, col:56> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xa87bf0 <col:42> '<bound member function type>' lvalue
|   |       | `-IntegerLiteral 0xa87c50 <col:55> 'int' 1
|   |       `-CXXFunctionalCastExpr 0xa87ce8 <line:737:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xa87cd0 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xa87cb0 <col:11> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xa6a528 <line:739:7, line:742:35> line:740:7 operator-- 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type () noexcept'
|   | `-CompoundStmt 0xa87fc0 <line:741:7, line:742:35>
|   |   `-ReturnStmt 0xa87fb0 <line:741:9, line:742:32>
|   |     `-CallExpr 0xa87f78 <line:741:16, line:742:32> '<dependent type>'
|   |       |-DeclRefExpr 0xa87d70 <line:741:16> '<builtin fn type>' Function 0xa76418 '__atomic_sub_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xa87e18 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xa87dd0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   |       | `-MemberExpr 0xa87da0 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xa83fc0
|   |       |   `-CXXThisExpr 0xa87d90 <col:36> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xa87ed8 <col:42, col:56> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xa87e58 <col:42> '<bound member function type>' lvalue
|   |       | `-IntegerLiteral 0xa87eb8 <col:55> 'int' 1
|   |       `-CXXFunctionalCastExpr 0xa87f50 <line:742:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xa87f38 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xa87f18 <col:11> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xa6a600 <line:744:7, line:747:35> line:745:7 operator-- 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type () volatile noexcept'
|   | `-CompoundStmt 0xa88228 <line:746:7, line:747:35>
|   |   `-ReturnStmt 0xa88218 <line:746:9, line:747:32>
|   |     `-CallExpr 0xa881e0 <line:746:16, line:747:32> '<dependent type>'
|   |       |-DeclRefExpr 0xa87fd8 <line:746:16> '<builtin fn type>' Function 0xa76418 '__atomic_sub_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xa88080 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xa88038 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   |       | `-MemberExpr 0xa88008 <col:36> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xa83fc0
|   |       |   `-CXXThisExpr 0xa87ff8 <col:36> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xa88140 <col:42, col:56> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xa880c0 <col:42> '<bound member function type>' lvalue
|   |       | `-IntegerLiteral 0xa88120 <col:55> 'int' 1
|   |       `-CXXFunctionalCastExpr 0xa881b8 <line:747:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xa881a0 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xa88180 <col:11> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xa6a7c0 <line:749:7, line:752:35> line:750:7 operator+= 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) noexcept'
|   | |-ParmVarDecl 0xa6a6c0 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
|   | `-CompoundStmt 0xa88490 <line:751:7, line:752:35>
|   |   `-ReturnStmt 0xa88480 <line:751:9, line:752:32>
|   |     `-CallExpr 0xa88448 <line:751:16, line:752:32> '<dependent type>'
|   |       |-DeclRefExpr 0xa88240 <line:751:16> '<builtin fn type>' Function 0xa75f30 '__atomic_add_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xa882e8 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xa882a0 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   |       | `-MemberExpr 0xa88270 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xa83fc0
|   |       |   `-CXXThisExpr 0xa88260 <col:36> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xa883a8 <col:42, col:58> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xa88328 <col:42> '<bound member function type>' lvalue
|   |       | `-DeclRefExpr 0xa88388 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xa6a6c0 '__d' 'std::ptrdiff_t':'long'
|   |       `-CXXFunctionalCastExpr 0xa88420 <line:752:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xa88408 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xa883e8 <col:11> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xa6a970 <line:754:7, line:757:35> line:755:7 operator+= 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) volatile noexcept'
|   | |-ParmVarDecl 0xa6a878 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
|   | `-CompoundStmt 0xa886f8 <line:756:7, line:757:35>
|   |   `-ReturnStmt 0xa886e8 <line:756:9, line:757:32>
|   |     `-CallExpr 0xa886b0 <line:756:16, line:757:32> '<dependent type>'
|   |       |-DeclRefExpr 0xa884a8 <line:756:16> '<builtin fn type>' Function 0xa75f30 '__atomic_add_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xa88550 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xa88508 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   |       | `-MemberExpr 0xa884d8 <col:36> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xa83fc0
|   |       |   `-CXXThisExpr 0xa884c8 <col:36> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xa88610 <col:42, col:58> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xa88590 <col:42> '<bound member function type>' lvalue
|   |       | `-DeclRefExpr 0xa885f0 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xa6a878 '__d' 'std::ptrdiff_t':'long'
|   |       `-CXXFunctionalCastExpr 0xa88688 <line:757:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xa88670 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xa88650 <col:11> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xa6aad0 <line:759:7, line:762:35> line:760:7 operator-= 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) noexcept'
|   | |-ParmVarDecl 0xa6aa38 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
|   | `-CompoundStmt 0xa88960 <line:761:7, line:762:35>
|   |   `-ReturnStmt 0xa88950 <line:761:9, line:762:32>
|   |     `-CallExpr 0xa88918 <line:761:16, line:762:32> '<dependent type>'
|   |       |-DeclRefExpr 0xa88710 <line:761:16> '<builtin fn type>' Function 0xa76418 '__atomic_sub_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xa887b8 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xa88770 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   |       | `-MemberExpr 0xa88740 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xa83fc0
|   |       |   `-CXXThisExpr 0xa88730 <col:36> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xa88878 <col:42, col:58> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xa887f8 <col:42> '<bound member function type>' lvalue
|   |       | `-DeclRefExpr 0xa88858 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xa6aa38 '__d' 'std::ptrdiff_t':'long'
|   |       `-CXXFunctionalCastExpr 0xa888f0 <line:762:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xa888d8 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xa888b8 <col:11> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xa6ac20 <line:764:7, line:767:35> line:765:7 operator-= 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) volatile noexcept'
|   | |-ParmVarDecl 0xa6ab88 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
|   | `-CompoundStmt 0xa88bc8 <line:766:7, line:767:35>
|   |   `-ReturnStmt 0xa88bb8 <line:766:9, line:767:32>
|   |     `-CallExpr 0xa88b80 <line:766:16, line:767:32> '<dependent type>'
|   |       |-DeclRefExpr 0xa88978 <line:766:16> '<builtin fn type>' Function 0xa76418 '__atomic_sub_fetch' 'void (...)'
|   |       |-CXXOperatorCallExpr 0xa88a20 <col:35, col:36> '<dependent type>' '&'
|   |       | |-UnresolvedLookupExpr 0xa889d8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   |       | `-MemberExpr 0xa889a8 <col:36> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xa83fc0
|   |       |   `-CXXThisExpr 0xa88998 <col:36> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   |       |-CallExpr 0xa88ae0 <col:42, col:58> '<dependent type>'
|   |       | |-UnresolvedMemberExpr 0xa88a60 <col:42> '<bound member function type>' lvalue
|   |       | `-DeclRefExpr 0xa88ac0 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xa6ab88 '__d' 'std::ptrdiff_t':'long'
|   |       `-CXXFunctionalCastExpr 0xa88b58 <line:767:7, col:31> 'int' functional cast to int <NoOp>
|   |         `-ImplicitCastExpr 0xa88b40 <col:11> 'int' <IntegralCast> part_of_explicit_cast
|   |           `-DeclRefExpr 0xa88b20 <col:11> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   |-CXXMethodDecl 0xa6ad00 <line:769:7, line:775:7> line:770:7 is_lock_free 'bool () const noexcept'
|   | `-CompoundStmt 0xa88e60 <line:771:7, line:775:7>
|   |   `-ReturnStmt 0xa88e50 <line:773:2, line:774:48>
|   |     `-CallExpr 0xa88e08 <line:773:9, line:774:48> 'bool'
|   |       |-ImplicitCastExpr 0xa88df0 <line:773:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
|   |       | `-DeclRefExpr 0xa88be0 <col:9> '<builtin fn type>' Function 0xa7a438 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
|   |       |-UnaryExprOrTypeTraitExpr 0xa88ca8 <col:31, col:42> 'unsigned long' sizeof
|   |       | `-ParenExpr 0xa88c88 <col:37, col:42> 'const std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const' lvalue
|   |       |   `-MemberExpr 0xa88c58 <col:38> 'const std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const' lvalue ->_M_p 0xa83fc0 non_odr_use_unevaluated
|   |       |     `-CXXThisExpr 0xa88c48 <col:38> 'const __atomic_base<type-parameter-0-0 *> *' implicit this
|   |       `-ImplicitCastExpr 0xa88e38 <line:774:6, col:47> 'const volatile void *' <NoOp>
|   |         `-CXXReinterpretCastExpr 0xa88dc0 <col:6, col:47> 'void *' reinterpret_cast<void *> <IntegralToPointer>
|   |           `-UnaryOperator 0xa88d90 <col:31, col:46> 'unsigned long' prefix '-'
|   |             `-UnaryExprOrTypeTraitExpr 0xa88d70 <col:32, col:46> 'unsigned long' __alignof
|   |               `-ParenExpr 0xa88d50 <col:41, col:46> 'const std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const' lvalue
|   |                 `-MemberExpr 0xa88d20 <col:42> 'const std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const' lvalue ->_M_p 0xa83fc0 non_odr_use_unevaluated
|   |                   `-CXXThisExpr 0xa88d10 <col:42> 'const __atomic_base<type-parameter-0-0 *> *' implicit this
|   |-CXXMethodDecl 0xa6adc8 <line:777:7, line:783:7> line:778:7 is_lock_free 'bool () const volatile noexcept'
|   | `-CompoundStmt 0xa890f8 <line:779:7, line:783:7>
|   |   `-ReturnStmt 0xa890e8 <line:781:2, line:782:48>
|   |     `-CallExpr 0xa890a0 <line:781:9, line:782:48> 'bool'
|   |       |-ImplicitCastExpr 0xa89088 <line:781:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
|   |       | `-DeclRefExpr 0xa88e78 <col:9> '<builtin fn type>' Function 0xa7a438 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
|   |       |-UnaryExprOrTypeTraitExpr 0xa88f40 <col:31, col:42> 'unsigned long' sizeof
|   |       | `-ParenExpr 0xa88f20 <col:37, col:42> 'const volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const volatile' lvalue
|   |       |   `-MemberExpr 0xa88ef0 <col:38> 'const volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const volatile' lvalue ->_M_p 0xa83fc0 non_odr_use_unevaluated
|   |       |     `-CXXThisExpr 0xa88ee0 <col:38> 'const volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   |       `-ImplicitCastExpr 0xa890d0 <line:782:6, col:47> 'const volatile void *' <NoOp>
|   |         `-CXXReinterpretCastExpr 0xa89058 <col:6, col:47> 'void *' reinterpret_cast<void *> <IntegralToPointer>
|   |           `-UnaryOperator 0xa89028 <col:31, col:46> 'unsigned long' prefix '-'
|   |             `-UnaryExprOrTypeTraitExpr 0xa89008 <col:32, col:46> 'unsigned long' __alignof
|   |               `-ParenExpr 0xa88fe8 <col:41, col:46> 'const volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const volatile' lvalue
|   |                 `-MemberExpr 0xa88fb8 <col:42> 'const volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const volatile' lvalue ->_M_p 0xa83fc0 non_odr_use_unevaluated
|   |                   `-CXXThisExpr 0xa88fa8 <col:42> 'const volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   |-CXXMethodDecl 0xa6b020 <line:45:32, line:797:7> line:786:7 store 'void (std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order) noexcept' inline
|   | |-ParmVarDecl 0xa6ae88 <col:13, col:28> col:28 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xa6af00 <line:787:6, col:25> col:19 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xa86d68 <col:25> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xa8b618 <line:788:7, line:797:7>
|   | | |-DeclStmt 0xa892a8 <line:789:2, line:790:31>
|   | | | `-VarDecl 0xa89120 <line:789:2, line:790:12> line:789:15 referenced __b 'std::memory_order':'std::memory_order' cinit
|   | | |   |-CXXOperatorCallExpr 0xa89270 <line:790:6, col:12> 'std::memory_order':'std::memory_order' '&'
|   | | |   | |-ImplicitCastExpr 0xa89258 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0xa89238 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
|   | | |   | |-ImplicitCastExpr 0xa89220 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0xa891e0 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6af00 '__m' 'std::memory_order':'std::memory_order'
|   | | |   | `-DeclRefExpr 0xa89200 <col:12> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
|   | | |   `-UnusedAttr 0xa89188 <line:789:35> unused
|   | | |-DoStmt 0xa89530 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
|   | | | |-CompoundStmt 0xa89508 <col:6, col:42>
|   | | | | `-IfStmt 0xa894e8 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa89470 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa89358 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa89340 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa89310 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa89458 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa89430 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xa89410 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:792:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xa893e0 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xa893c8 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xa89388 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa89120 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xa893f8 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xa893a8 <col:26> 'std::memory_order' EnumConstant 0xa51420 'memory_order_acquire' 'std::memory_order'
|   | | | |   `-CallExpr 0xa894c8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa894b0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa89490 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa89520 <line:591:51> 'bool' false
|   | | |-DoStmt 0xa897c0 <col:3, col:56>
|   | | | |-CompoundStmt 0xa89798 <col:6, col:42>
|   | | | | `-IfStmt 0xa89778 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa89700 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa895e8 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa895d0 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa895a0 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa896e8 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa896c0 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xa896a0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:793:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xa89670 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xa89658 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xa89618 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa89120 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xa89688 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xa89638 <col:26> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
|   | | | |   `-CallExpr 0xa89758 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa89740 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa89720 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa897b0 <line:591:51> 'bool' false
|   | | |-DoStmt 0xa8b438 <col:3, col:56>
|   | | | |-CompoundStmt 0xa8b410 <col:6, col:42>
|   | | | | `-IfStmt 0xa8b3f0 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa8b378 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa89878 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa89860 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa89830 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa8b360 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa8b338 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xa8b318 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:794:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xa8b2e8 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xa8b2d0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xa8b290 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa89120 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xa8b300 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xa8b2b0 <col:26> 'std::memory_order' EnumConstant 0xa513d0 'memory_order_consume' 'std::memory_order'
|   | | | |   `-CallExpr 0xa8b3d0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa8b3b8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa8b398 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa8b428 <line:591:51> 'bool' false
|   | | `-CallExpr 0xa8b5e0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:796:2, col:39> '<dependent type>'
|   | |   |-DeclRefExpr 0xa8b458 <col:2> '<builtin fn type>' Function 0xa7b690 '__atomic_store_n' 'void (...)'
|   | |   |-CXXOperatorCallExpr 0xa8b500 <col:19, col:20> '<dependent type>' '&'
|   | |   | |-UnresolvedLookupExpr 0xa8b4b8 <col:19> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |   | `-MemberExpr 0xa8b488 <col:20> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xa83fc0
|   | |   |   `-CXXThisExpr 0xa8b478 <col:20> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   | |   |-DeclRefExpr 0xa8b530 <col:26> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa6ae88 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |   `-CXXFunctionalCastExpr 0xa8b5b8 <col:31, col:38> 'int' functional cast to int <NoOp>
|   | |     `-ImplicitCastExpr 0xa8b5a0 <col:35> 'int' <IntegralCast> part_of_explicit_cast
|   | |       `-ImplicitCastExpr 0xa8b588 <col:35> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |         `-DeclRefExpr 0xa8b568 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6af00 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xa6b0d0 <line:45:54> always_inline
|   |-CXXMethodDecl 0xa6b2d0 <col:32, line:810:7> line:800:7 store 'void (std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order) volatile noexcept' inline
|   | |-ParmVarDecl 0xa6b138 <col:13, col:28> col:28 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xa6b1b0 <line:801:6, col:25> col:19 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xa86d88 <col:25> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xa8c170 <line:802:7, line:810:7>
|   | | |-DeclStmt 0xa8b7e8 <line:803:2, line:804:31>
|   | | | `-VarDecl 0xa8b660 <line:803:2, line:804:12> line:803:15 referenced __b 'std::memory_order':'std::memory_order' cinit
|   | | |   |-CXXOperatorCallExpr 0xa8b7b0 <line:804:6, col:12> 'std::memory_order':'std::memory_order' '&'
|   | | |   | |-ImplicitCastExpr 0xa8b798 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0xa8b778 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
|   | | |   | |-ImplicitCastExpr 0xa8b760 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0xa8b720 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6b1b0 '__m' 'std::memory_order':'std::memory_order'
|   | | |   | `-DeclRefExpr 0xa8b740 <col:12> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
|   | | |   `-UnusedAttr 0xa8b6c8 <line:803:35> unused
|   | | |-DoStmt 0xa8ba70 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
|   | | | |-CompoundStmt 0xa8ba48 <col:6, col:42>
|   | | | | `-IfStmt 0xa8ba28 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa8b9b0 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa8b898 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa8b880 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa8b850 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa8b998 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa8b970 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xa8b950 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:805:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xa8b920 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xa8b908 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xa8b8c8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa8b660 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xa8b938 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xa8b8e8 <col:26> 'std::memory_order' EnumConstant 0xa51420 'memory_order_acquire' 'std::memory_order'
|   | | | |   `-CallExpr 0xa8ba08 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa8b9f0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa8b9d0 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa8ba60 <line:591:51> 'bool' false
|   | | |-DoStmt 0xa8bd00 <col:3, col:56>
|   | | | |-CompoundStmt 0xa8bcd8 <col:6, col:42>
|   | | | | `-IfStmt 0xa8bcb8 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa8bc40 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa8bb28 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa8bb10 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa8bae0 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa8bc28 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa8bc00 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xa8bbe0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:806:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xa8bbb0 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xa8bb98 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xa8bb58 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa8b660 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xa8bbc8 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xa8bb78 <col:26> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
|   | | | |   `-CallExpr 0xa8bc98 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa8bc80 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa8bc60 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa8bcf0 <line:591:51> 'bool' false
|   | | |-DoStmt 0xa8bf90 <col:3, col:56>
|   | | | |-CompoundStmt 0xa8bf68 <col:6, col:42>
|   | | | | `-IfStmt 0xa8bf48 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa8bed0 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa8bdb8 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa8bda0 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa8bd70 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa8beb8 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa8be90 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xa8be70 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:807:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xa8be40 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xa8be28 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xa8bde8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa8b660 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xa8be58 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xa8be08 <col:26> 'std::memory_order' EnumConstant 0xa513d0 'memory_order_consume' 'std::memory_order'
|   | | | |   `-CallExpr 0xa8bf28 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa8bf10 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa8bef0 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa8bf80 <line:591:51> 'bool' false
|   | | `-CallExpr 0xa8c138 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:809:2, col:39> '<dependent type>'
|   | |   |-DeclRefExpr 0xa8bfb0 <col:2> '<builtin fn type>' Function 0xa7b690 '__atomic_store_n' 'void (...)'
|   | |   |-CXXOperatorCallExpr 0xa8c058 <col:19, col:20> '<dependent type>' '&'
|   | |   | |-UnresolvedLookupExpr 0xa8c010 <col:19> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |   | `-MemberExpr 0xa8bfe0 <col:20> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xa83fc0
|   | |   |   `-CXXThisExpr 0xa8bfd0 <col:20> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   | |   |-DeclRefExpr 0xa8c088 <col:26> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa6b138 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |   `-CXXFunctionalCastExpr 0xa8c110 <col:31, col:38> 'int' functional cast to int <NoOp>
|   | |     `-ImplicitCastExpr 0xa8c0f8 <col:35> 'int' <IntegralCast> part_of_explicit_cast
|   | |       `-ImplicitCastExpr 0xa8c0e0 <col:35> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |         `-DeclRefExpr 0xa8c0c0 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6b1b0 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xa6b380 <line:45:54> always_inline
|   |-CXXMethodDecl 0xa6b4f0 <col:32, line:821:7> line:813:7 load 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::memory_order) const noexcept' inline
|   | |-ParmVarDecl 0xa6b3f8 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xa86da8 <col:31> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xa8ca20 <line:814:7, line:821:7>
|   | | |-DeclStmt 0xa8c340 <line:815:2, line:816:31>
|   | | | `-VarDecl 0xa8c1b8 <line:815:2, line:816:12> line:815:15 referenced __b 'std::memory_order':'std::memory_order' cinit
|   | | |   |-CXXOperatorCallExpr 0xa8c308 <line:816:6, col:12> 'std::memory_order':'std::memory_order' '&'
|   | | |   | |-ImplicitCastExpr 0xa8c2f0 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0xa8c2d0 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
|   | | |   | |-ImplicitCastExpr 0xa8c2b8 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0xa8c278 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6b3f8 '__m' 'std::memory_order':'std::memory_order'
|   | | |   | `-DeclRefExpr 0xa8c298 <col:12> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
|   | | |   `-UnusedAttr 0xa8c220 <line:815:35> unused
|   | | |-DoStmt 0xa8c5c8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
|   | | | |-CompoundStmt 0xa8c5a0 <col:6, col:42>
|   | | | | `-IfStmt 0xa8c580 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa8c508 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa8c3f0 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa8c3d8 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa8c3a8 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa8c4f0 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa8c4c8 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xa8c4a8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:817:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xa8c478 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xa8c460 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xa8c420 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa8c1b8 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xa8c490 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xa8c440 <col:26> 'std::memory_order' EnumConstant 0xa51470 'memory_order_release' 'std::memory_order'
|   | | | |   `-CallExpr 0xa8c560 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa8c548 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa8c528 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa8c5b8 <line:591:51> 'bool' false
|   | | |-DoStmt 0xa8c858 <col:3, col:56>
|   | | | |-CompoundStmt 0xa8c830 <col:6, col:42>
|   | | | | `-IfStmt 0xa8c810 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa8c798 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa8c680 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa8c668 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa8c638 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa8c780 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa8c758 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xa8c738 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:818:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xa8c708 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xa8c6f0 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xa8c6b0 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa8c1b8 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xa8c720 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xa8c6d0 <col:26> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
|   | | | |   `-CallExpr 0xa8c7f0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa8c7d8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa8c7b8 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa8c848 <line:591:51> 'bool' false
|   | | `-ReturnStmt 0xa8ca10 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:820:2, col:40>
|   | |   `-CallExpr 0xa8c9e0 <col:9, col:40> '<dependent type>'
|   | |     |-DeclRefExpr 0xa8c878 <col:9> '<builtin fn type>' Function 0xa7cbf8 '__atomic_load_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xa8c920 <col:25, col:26> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8c8d8 <col:25> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-MemberExpr 0xa8c8a8 <col:26> 'const std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const' lvalue ->_M_p 0xa83fc0
|   | |     |   `-CXXThisExpr 0xa8c898 <col:26> 'const __atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     `-CXXFunctionalCastExpr 0xa8c9b8 <col:32, col:39> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xa8c9a0 <col:36> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xa8c988 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xa8c968 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6b3f8 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xa6b598 <line:45:54> always_inline
|   |-CXXMethodDecl 0xa6b700 <col:32, line:832:7> line:824:7 load 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::memory_order) const volatile noexcept' inline
|   | |-ParmVarDecl 0xa6b600 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xa86dc8 <col:31> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xa8d2f8 <line:825:7, line:832:7>
|   | | |-DeclStmt 0xa8cbe8 <line:826:2, line:827:31>
|   | | | `-VarDecl 0xa8ca60 <line:826:2, line:827:12> line:826:15 referenced __b 'std::memory_order':'std::memory_order' cinit
|   | | |   |-CXXOperatorCallExpr 0xa8cbb0 <line:827:6, col:12> 'std::memory_order':'std::memory_order' '&'
|   | | |   | |-ImplicitCastExpr 0xa8cb98 <col:10> 'std::memory_order (*)(std::memory_order, std::__memory_order_modifier)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0xa8cb78 <col:10> 'std::memory_order (std::memory_order, std::__memory_order_modifier)' lvalue Function 0xa520e0 'operator&' 'std::memory_order (std::memory_order, std::__memory_order_modifier)'
|   | | |   | |-ImplicitCastExpr 0xa8cb60 <col:6> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0xa8cb20 <col:6> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6b600 '__m' 'std::memory_order':'std::memory_order'
|   | | |   | `-DeclRefExpr 0xa8cb40 <col:12> 'std::__memory_order_modifier' EnumConstant 0xa51740 '__memory_order_mask' 'std::__memory_order_modifier'
|   | | |   `-UnusedAttr 0xa8cac8 <line:826:35> unused
|   | | |-DoStmt 0xa8ce70 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
|   | | | |-CompoundStmt 0xa8ce48 <col:6, col:42>
|   | | | | `-IfStmt 0xa8ce28 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa8cdb0 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa8cc98 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa8cc80 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa8cc50 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa8cd98 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa8cd70 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xa8cd50 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:828:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xa8cd20 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xa8cd08 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xa8ccc8 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa8ca60 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xa8cd38 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xa8cce8 <col:26> 'std::memory_order' EnumConstant 0xa51470 'memory_order_release' 'std::memory_order'
|   | | | |   `-CallExpr 0xa8ce08 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa8cdf0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa8cdd0 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa8ce60 <line:591:51> 'bool' false
|   | | |-DoStmt 0xa8d100 <col:3, col:56>
|   | | | |-CompoundStmt 0xa8d0d8 <col:6, col:42>
|   | | | | `-IfStmt 0xa8d0b8 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa8d040 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa8cf28 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa8cf10 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa8cee0 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa8d028 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa8d000 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-BinaryOperator 0xa8cfe0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:829:19, col:26> 'bool' '!='
|   | | | |   |       |-ImplicitCastExpr 0xa8cfb0 <col:19> 'int' <IntegralCast>
|   | | | |   |       | `-ImplicitCastExpr 0xa8cf98 <col:19> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |       |   `-DeclRefExpr 0xa8cf58 <col:19> 'std::memory_order':'std::memory_order' lvalue Var 0xa8ca60 '__b' 'std::memory_order':'std::memory_order'
|   | | | |   |       `-ImplicitCastExpr 0xa8cfc8 <col:26> 'int' <IntegralCast>
|   | | | |   |         `-DeclRefExpr 0xa8cf78 <col:26> 'std::memory_order' EnumConstant 0xa514c0 'memory_order_acq_rel' 'std::memory_order'
|   | | | |   `-CallExpr 0xa8d098 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa8d080 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa8d060 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa8d0f0 <line:591:51> 'bool' false
|   | | `-ReturnStmt 0xa8d2e8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:831:2, col:40>
|   | |   `-CallExpr 0xa8d2b8 <col:9, col:40> '<dependent type>'
|   | |     |-DeclRefExpr 0xa8d120 <col:9> '<builtin fn type>' Function 0xa7cbf8 '__atomic_load_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xa8d1c8 <col:25, col:26> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8d180 <col:25> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-MemberExpr 0xa8d150 <col:26> 'const volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *const volatile' lvalue ->_M_p 0xa83fc0
|   | |     |   `-CXXThisExpr 0xa8d140 <col:26> 'const volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     `-CXXFunctionalCastExpr 0xa8d290 <col:32, col:39> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xa8d248 <col:36> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xa8d230 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xa8d210 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6b600 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xa6b7a8 <line:45:54> always_inline
|   |-CXXMethodDecl 0xa6b9b0 <col:32, line:839:7> line:835:7 exchange 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order) noexcept' inline
|   | |-ParmVarDecl 0xa6b820 <col:16, col:31> col:31 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xa6b898 <line:836:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xa86de8 <col:28> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xa8d4f8 <line:837:7, line:839:7>
|   | | `-ReturnStmt 0xa8d4e8 <line:838:2, col:49>
|   | |   `-CallExpr 0xa8d4b0 <col:9, col:49> '<dependent type>'
|   | |     |-DeclRefExpr 0xa8d328 <col:9> '<builtin fn type>' Function 0xa7dbd8 '__atomic_exchange_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xa8d3d0 <col:29, col:30> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8d388 <col:29> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-MemberExpr 0xa8d358 <col:30> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xa83fc0
|   | |     |   `-CXXThisExpr 0xa8d348 <col:30> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-DeclRefExpr 0xa8d400 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa6b820 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |     `-CXXFunctionalCastExpr 0xa8d488 <col:41, col:48> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xa8d470 <col:45> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xa8d458 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xa8d438 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6b898 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xa6ba60 <line:45:54> always_inline
|   |-CXXMethodDecl 0xa6bc60 <col:32, line:847:7> line:843:7 exchange 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order) volatile noexcept' inline
|   | |-ParmVarDecl 0xa6bac8 <col:16, col:31> col:31 referenced __p 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xa6bb40 <line:844:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xa86e08 <col:28> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xa8d6e0 <line:845:7, line:847:7>
|   | | `-ReturnStmt 0xa8d6d0 <line:846:2, col:49>
|   | |   `-CallExpr 0xa8d698 <col:9, col:49> '<dependent type>'
|   | |     |-DeclRefExpr 0xa8d510 <col:9> '<builtin fn type>' Function 0xa7dbd8 '__atomic_exchange_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xa8d5b8 <col:29, col:30> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8d570 <col:29> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-MemberExpr 0xa8d540 <col:30> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xa83fc0
|   | |     |   `-CXXThisExpr 0xa8d530 <col:30> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-DeclRefExpr 0xa8d5e8 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa6bac8 '__p' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |     `-CXXFunctionalCastExpr 0xa8d670 <col:41, col:48> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xa8d658 <col:45> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xa8d640 <col:45> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xa8d620 <col:45> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6bb40 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xa6bd10 <line:45:54> always_inline
|   |-CXXMethodDecl 0xa6c0a0 <col:32, line:858:7> line:850:7 compare_exchange_weak 'bool (std::__atomic_base<type-parameter-0-0 *>::__pointer_type &, std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) noexcept' inline
|   | |-ParmVarDecl 0xa6bde8 <col:29, col:45> col:45 referenced __p1 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type &'
|   | |-ParmVarDecl 0xa6be60 <col:51, col:66> col:66 referenced __p2 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xa6bed8 <line:851:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
|   | |-ParmVarDecl 0xa6bf50 <line:852:8, col:21> col:21 referenced __m2 'std::memory_order':'std::memory_order'
|   | |-CompoundStmt 0xa8dcf0 <line:853:7, line:858:7>
|   | | |-DoStmt 0xa8d9a0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
|   | | | |-CompoundStmt 0xa8d978 <col:6, col:42>
|   | | | | `-IfStmt 0xa8d958 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa8d8e0 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa8d790 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa8d778 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa8d748 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa8d8c8 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa8d8a0 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-CallExpr 0xa8d860 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:854:19, col:56> 'bool'
|   | | | |   |       |-ImplicitCastExpr 0xa8d848 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
|   | | | |   |       | `-DeclRefExpr 0xa8d828 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
|   | | | |   |       `-ImplicitCastExpr 0xa8d888 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |         `-DeclRefExpr 0xa8d808 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6bf50 '__m2' 'std::memory_order':'std::memory_order'
|   | | | |   `-CallExpr 0xa8d938 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa8d920 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa8d900 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa8d990 <line:591:51> 'bool' false
|   | | `-ReturnStmt 0xa8dce0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:856:2, line:857:29>
|   | |   `-CallExpr 0xa8dc90 <line:856:9, line:857:29> '<dependent type>'
|   | |     |-DeclRefExpr 0xa8d9c0 <line:856:9> '<builtin fn type>' Function 0xa7e410 '__atomic_compare_exchange_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xa8da68 <col:37, col:38> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8da20 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-MemberExpr 0xa8d9f0 <col:38> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xa83fc0
|   | |     |   `-CXXThisExpr 0xa8d9e0 <col:38> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-CXXOperatorCallExpr 0xa8db00 <col:44, col:45> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8dab8 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-DeclRefExpr 0xa8da98 <col:45> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa6bde8 '__p1' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type &'
|   | |     |-DeclRefExpr 0xa8db30 <col:51> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa6be60 '__p2' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |     |-IntegerLiteral 0xa8db50 <col:57> 'int' 1
|   | |     |-CXXFunctionalCastExpr 0xa8dbd8 <line:857:9, col:17> 'int' functional cast to int <NoOp>
|   | |     | `-ImplicitCastExpr 0xa8dbc0 <col:13> 'int' <IntegralCast> part_of_explicit_cast
|   | |     |   `-ImplicitCastExpr 0xa8dba8 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |     |     `-DeclRefExpr 0xa8db88 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6bed8 '__m1' 'std::memory_order':'std::memory_order'
|   | |     `-CXXFunctionalCastExpr 0xa8dc68 <col:20, col:28> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xa8dc50 <col:24> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xa8dc38 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xa8dc18 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa6bf50 '__m2' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xa858b0 <line:45:54> always_inline
|   |-CXXMethodDecl 0xa85bd0 <col:32, line:869:7> line:861:7 compare_exchange_weak 'bool (std::__atomic_base<type-parameter-0-0 *>::__pointer_type &, std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) volatile noexcept' inline
|   | |-ParmVarDecl 0xa85918 <col:29, col:45> col:45 referenced __p1 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type &'
|   | |-ParmVarDecl 0xa85990 <col:51, col:66> col:66 referenced __p2 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xa85a08 <line:862:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
|   | |-ParmVarDecl 0xa85a80 <line:863:8, col:21> col:21 referenced __m2 'std::memory_order':'std::memory_order'
|   | |-CompoundStmt 0xa8e308 <line:864:7, line:869:7>
|   | | |-DoStmt 0xa8dfb8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
|   | | | |-CompoundStmt 0xa8df90 <col:6, col:42>
|   | | | | `-IfStmt 0xa8df70 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa8def8 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa8dda8 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa8dd90 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa8dd60 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa8dee0 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa8deb8 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-CallExpr 0xa8de78 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:865:19, col:56> 'bool'
|   | | | |   |       |-ImplicitCastExpr 0xa8de60 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
|   | | | |   |       | `-DeclRefExpr 0xa8de40 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
|   | | | |   |       `-ImplicitCastExpr 0xa8dea0 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |         `-DeclRefExpr 0xa8de20 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa85a80 '__m2' 'std::memory_order':'std::memory_order'
|   | | | |   `-CallExpr 0xa8df50 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa8df38 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa8df18 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa8dfa8 <line:591:51> 'bool' false
|   | | `-ReturnStmt 0xa8e2f8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:867:2, line:868:29>
|   | |   `-CallExpr 0xa8e2a8 <line:867:9, line:868:29> '<dependent type>'
|   | |     |-DeclRefExpr 0xa8dfd8 <line:867:9> '<builtin fn type>' Function 0xa7e410 '__atomic_compare_exchange_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xa8e080 <col:37, col:38> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8e038 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-MemberExpr 0xa8e008 <col:38> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xa83fc0
|   | |     |   `-CXXThisExpr 0xa8dff8 <col:38> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-CXXOperatorCallExpr 0xa8e118 <col:44, col:45> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8e0d0 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-DeclRefExpr 0xa8e0b0 <col:45> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa85918 '__p1' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type &'
|   | |     |-DeclRefExpr 0xa8e148 <col:51> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa85990 '__p2' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |     |-IntegerLiteral 0xa8e168 <col:57> 'int' 1
|   | |     |-CXXFunctionalCastExpr 0xa8e1f0 <line:868:9, col:17> 'int' functional cast to int <NoOp>
|   | |     | `-ImplicitCastExpr 0xa8e1d8 <col:13> 'int' <IntegralCast> part_of_explicit_cast
|   | |     |   `-ImplicitCastExpr 0xa8e1c0 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |     |     `-DeclRefExpr 0xa8e1a0 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa85a08 '__m1' 'std::memory_order':'std::memory_order'
|   | |     `-CXXFunctionalCastExpr 0xa8e280 <col:20, col:28> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xa8e268 <col:24> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xa8e250 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xa8e230 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa85a80 '__m2' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xa85c90 <line:45:54> always_inline
|   |-CXXMethodDecl 0xa85f20 <col:32, line:880:7> line:872:7 compare_exchange_strong 'bool (std::__atomic_base<type-parameter-0-0 *>::__pointer_type &, std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) noexcept' inline
|   | |-ParmVarDecl 0xa85d08 <col:31, col:47> col:47 referenced __p1 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type &'
|   | |-ParmVarDecl 0xa85d80 <col:53, col:68> col:68 referenced __p2 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xa85df8 <line:873:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
|   | |-ParmVarDecl 0xa85e70 <line:874:10, col:23> col:23 referenced __m2 'std::memory_order':'std::memory_order'
|   | |-CompoundStmt 0xa8e920 <line:875:7, line:880:7>
|   | | |-DoStmt 0xa8e5d0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
|   | | | |-CompoundStmt 0xa8e5a8 <col:6, col:42>
|   | | | | `-IfStmt 0xa8e588 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa8e510 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa8e3c0 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa8e3a8 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa8e378 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa8e4f8 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa8e4d0 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-CallExpr 0xa8e490 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:876:19, col:56> 'bool'
|   | | | |   |       |-ImplicitCastExpr 0xa8e478 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
|   | | | |   |       | `-DeclRefExpr 0xa8e458 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
|   | | | |   |       `-ImplicitCastExpr 0xa8e4b8 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |         `-DeclRefExpr 0xa8e438 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa85e70 '__m2' 'std::memory_order':'std::memory_order'
|   | | | |   `-CallExpr 0xa8e568 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa8e550 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa8e530 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa8e5c0 <line:591:51> 'bool' false
|   | | `-ReturnStmt 0xa8e910 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:878:2, line:879:29>
|   | |   `-CallExpr 0xa8e8c0 <line:878:9, line:879:29> '<dependent type>'
|   | |     |-DeclRefExpr 0xa8e5f0 <line:878:9> '<builtin fn type>' Function 0xa7e410 '__atomic_compare_exchange_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xa8e698 <col:37, col:38> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8e650 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-MemberExpr 0xa8e620 <col:38> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xa83fc0
|   | |     |   `-CXXThisExpr 0xa8e610 <col:38> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-CXXOperatorCallExpr 0xa8e730 <col:44, col:45> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8e6e8 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-DeclRefExpr 0xa8e6c8 <col:45> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa85d08 '__p1' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type &'
|   | |     |-DeclRefExpr 0xa8e760 <col:51> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa85d80 '__p2' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |     |-IntegerLiteral 0xa8e780 <col:57> 'int' 0
|   | |     |-CXXFunctionalCastExpr 0xa8e808 <line:879:9, col:17> 'int' functional cast to int <NoOp>
|   | |     | `-ImplicitCastExpr 0xa8e7f0 <col:13> 'int' <IntegralCast> part_of_explicit_cast
|   | |     |   `-ImplicitCastExpr 0xa8e7d8 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |     |     `-DeclRefExpr 0xa8e7b8 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa85df8 '__m1' 'std::memory_order':'std::memory_order'
|   | |     `-CXXFunctionalCastExpr 0xa8e898 <col:20, col:28> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xa8e880 <col:24> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xa8e868 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xa8e848 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa85e70 '__m2' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xa85fe0 <line:45:54> always_inline
|   |-CXXMethodDecl 0xa86260 <col:32, line:891:7> line:883:7 compare_exchange_strong 'bool (std::__atomic_base<type-parameter-0-0 *>::__pointer_type &, std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) volatile noexcept' inline
|   | |-ParmVarDecl 0xa86048 <col:31, col:47> col:47 referenced __p1 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type &'
|   | |-ParmVarDecl 0xa860c0 <col:53, col:68> col:68 referenced __p2 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |-ParmVarDecl 0xa86138 <line:884:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
|   | |-ParmVarDecl 0xa861b0 <line:885:10, col:23> col:23 referenced __m2 'std::memory_order':'std::memory_order'
|   | |-CompoundStmt 0xa8ef38 <line:886:7, line:891:7>
|   | | |-DoStmt 0xa8ebe8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
|   | | | |-CompoundStmt 0xa8ebc0 <col:6, col:42>
|   | | | | `-IfStmt 0xa8eba0 <line:545:3, line:546:27>
|   | | | |   |-BinaryOperator 0xa8eb28 <line:545:7, col:51> 'bool' '&&'
|   | | | |   | |-CallExpr 0xa8e9d8 <col:7, col:36> 'bool'
|   | | | |   | | `-ImplicitCastExpr 0xa8e9c0 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
|   | | | |   | |   `-DeclRefExpr 0xa8e990 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
|   | | | |   | `-UnaryOperator 0xa8eb10 <col:41, col:51> 'bool' prefix '!' cannot overflow
|   | | | |   |   `-CXXFunctionalCastExpr 0xa8eae8 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
|   | | | |   |     `-CallExpr 0xa8eaa8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:887:19, col:56> 'bool'
|   | | | |   |       |-ImplicitCastExpr 0xa8ea90 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
|   | | | |   |       | `-DeclRefExpr 0xa8ea70 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
|   | | | |   |       `-ImplicitCastExpr 0xa8ead0 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
|   | | | |   |         `-DeclRefExpr 0xa8ea50 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa861b0 '__m2' 'std::memory_order':'std::memory_order'
|   | | | |   `-CallExpr 0xa8eb80 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
|   | | | |     `-ImplicitCastExpr 0xa8eb68 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
|   | | | |       `-DeclRefExpr 0xa8eb48 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
|   | | | `-CXXBoolLiteralExpr 0xa8ebd8 <line:591:51> 'bool' false
|   | | `-ReturnStmt 0xa8ef28 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:889:2, line:890:29>
|   | |   `-CallExpr 0xa8eed8 <line:889:9, line:890:29> '<dependent type>'
|   | |     |-DeclRefExpr 0xa8ec08 <line:889:9> '<builtin fn type>' Function 0xa7e410 '__atomic_compare_exchange_n' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xa8ecb0 <col:37, col:38> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8ec68 <col:37> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-MemberExpr 0xa8ec38 <col:38> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xa83fc0
|   | |     |   `-CXXThisExpr 0xa8ec28 <col:38> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-CXXOperatorCallExpr 0xa8ed48 <col:44, col:45> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8ed00 <col:44> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-DeclRefExpr 0xa8ece0 <col:45> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa86048 '__p1' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type &'
|   | |     |-DeclRefExpr 0xa8ed78 <col:51> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ParmVar 0xa860c0 '__p2' 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *'
|   | |     |-IntegerLiteral 0xa8ed98 <col:57> 'int' 0
|   | |     |-CXXFunctionalCastExpr 0xa8ee20 <line:890:9, col:17> 'int' functional cast to int <NoOp>
|   | |     | `-ImplicitCastExpr 0xa8ee08 <col:13> 'int' <IntegralCast> part_of_explicit_cast
|   | |     |   `-ImplicitCastExpr 0xa8edf0 <col:13> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |     |     `-DeclRefExpr 0xa8edd0 <col:13> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa86138 '__m1' 'std::memory_order':'std::memory_order'
|   | |     `-CXXFunctionalCastExpr 0xa8eeb0 <col:20, col:28> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xa8ee98 <col:24> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xa8ee80 <col:24> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xa8ee60 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa861b0 '__m2' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xa86320 <line:45:54> always_inline
|   |-CXXMethodDecl 0xa86530 <col:32, line:921:72> line:919:7 fetch_add 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) noexcept' inline
|   | |-ParmVarDecl 0xa86398 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
|   | |-ParmVarDecl 0xa86410 <line:920:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xa86e28 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xa8f1c0 <line:921:7, col:72>
|   | | `-ReturnStmt 0xa8f1b0 <col:9, col:69>
|   | |   `-CallExpr 0xa8f178 <col:16, col:69> '<dependent type>'
|   | |     |-DeclRefExpr 0xa8ef58 <col:16> '<builtin fn type>' Function 0xa80970 '__atomic_fetch_add' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xa8f000 <col:35, col:36> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8efb8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-MemberExpr 0xa8ef88 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xa83fc0
|   | |     |   `-CXXThisExpr 0xa8ef78 <col:36> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-CallExpr 0xa8f0c0 <col:42, col:58> '<dependent type>'
|   | |     | |-UnresolvedMemberExpr 0xa8f040 <col:42> '<bound member function type>' lvalue
|   | |     | `-DeclRefExpr 0xa8f0a0 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xa86398 '__d' 'std::ptrdiff_t':'long'
|   | |     `-CXXFunctionalCastExpr 0xa8f150 <col:61, col:68> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xa8f138 <col:65> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xa8f120 <col:65> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xa8f100 <col:65> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa86410 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xa865e0 <line:45:54> always_inline
|   |-CXXMethodDecl 0xa867e0 <col:32, line:926:72> line:924:7 fetch_add 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) volatile noexcept' inline
|   | |-ParmVarDecl 0xa86648 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
|   | |-ParmVarDecl 0xa866c0 <line:925:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xa86e48 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xa90bd0 <line:926:7, col:72>
|   | | `-ReturnStmt 0xa90bc0 <col:9, col:69>
|   | |   `-CallExpr 0xa90b88 <col:16, col:69> '<dependent type>'
|   | |     |-DeclRefExpr 0xa8f1d8 <col:16> '<builtin fn type>' Function 0xa80970 '__atomic_fetch_add' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xa90a10 <col:35, col:36> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa8f238 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-MemberExpr 0xa8f208 <col:36> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xa83fc0
|   | |     |   `-CXXThisExpr 0xa8f1f8 <col:36> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-CallExpr 0xa90ad0 <col:42, col:58> '<dependent type>'
|   | |     | |-UnresolvedMemberExpr 0xa90a50 <col:42> '<bound member function type>' lvalue
|   | |     | `-DeclRefExpr 0xa90ab0 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xa86648 '__d' 'std::ptrdiff_t':'long'
|   | |     `-CXXFunctionalCastExpr 0xa90b60 <col:61, col:68> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xa90b48 <col:65> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xa90b30 <col:65> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xa90b10 <col:65> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa866c0 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xa86890 <line:45:54> always_inline
|   |-CXXMethodDecl 0xa86a20 <col:32, line:931:72> line:929:7 fetch_sub 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) noexcept' inline
|   | |-ParmVarDecl 0xa86908 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
|   | |-ParmVarDecl 0xa86980 <line:930:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
|   | | `-DeclRefExpr 0xa86e68 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|   | |-CompoundStmt 0xa90e50 <line:931:7, col:72>
|   | | `-ReturnStmt 0xa90e40 <col:9, col:69>
|   | |   `-CallExpr 0xa90e08 <col:16, col:69> '<dependent type>'
|   | |     |-DeclRefExpr 0xa90be8 <col:16> '<builtin fn type>' Function 0xa80e88 '__atomic_fetch_sub' 'void (...)'
|   | |     |-CXXOperatorCallExpr 0xa90c90 <col:35, col:36> '<dependent type>' '&'
|   | |     | |-UnresolvedLookupExpr 0xa90c48 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|   | |     | `-MemberExpr 0xa90c18 <col:36> 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *' lvalue ->_M_p 0xa83fc0
|   | |     |   `-CXXThisExpr 0xa90c08 <col:36> '__atomic_base<type-parameter-0-0 *> *' implicit this
|   | |     |-CallExpr 0xa90d50 <col:42, col:58> '<dependent type>'
|   | |     | |-UnresolvedMemberExpr 0xa90cd0 <col:42> '<bound member function type>' lvalue
|   | |     | `-DeclRefExpr 0xa90d30 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xa86908 '__d' 'std::ptrdiff_t':'long'
|   | |     `-CXXFunctionalCastExpr 0xa90de0 <col:61, col:68> 'int' functional cast to int <NoOp>
|   | |       `-ImplicitCastExpr 0xa90dc8 <col:65> 'int' <IntegralCast> part_of_explicit_cast
|   | |         `-ImplicitCastExpr 0xa90db0 <col:65> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|   | |           `-DeclRefExpr 0xa90d90 <col:65> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa86980 '__m' 'std::memory_order':'std::memory_order'
|   | `-AlwaysInlineAttr 0xa86ad0 <line:45:54> always_inline
|   `-CXXMethodDecl 0xa86c50 <col:32, line:936:72> line:934:7 fetch_sub 'std::__atomic_base<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) volatile noexcept' inline
|     |-ParmVarDecl 0xa86b38 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
|     |-ParmVarDecl 0xa86bb0 <line:935:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
|     | `-DeclRefExpr 0xa86e88 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|     |-CompoundStmt 0xa910d0 <line:936:7, col:72>
|     | `-ReturnStmt 0xa910c0 <col:9, col:69>
|     |   `-CallExpr 0xa91088 <col:16, col:69> '<dependent type>'
|     |     |-DeclRefExpr 0xa90e68 <col:16> '<builtin fn type>' Function 0xa80e88 '__atomic_fetch_sub' 'void (...)'
|     |     |-CXXOperatorCallExpr 0xa90f10 <col:35, col:36> '<dependent type>' '&'
|     |     | |-UnresolvedLookupExpr 0xa90ec8 <col:35> '<overloaded function type>' lvalue (ADL) = 'operator&' 0xa520e0
|     |     | `-MemberExpr 0xa90e98 <col:36> 'volatile std::__atomic_base<type-parameter-0-0 *>::__pointer_type':'_PTp *volatile' lvalue ->_M_p 0xa83fc0
|     |     |   `-CXXThisExpr 0xa90e88 <col:36> 'volatile __atomic_base<type-parameter-0-0 *> *' implicit this
|     |     |-CallExpr 0xa90fd0 <col:42, col:58> '<dependent type>'
|     |     | |-UnresolvedMemberExpr 0xa90f50 <col:42> '<bound member function type>' lvalue
|     |     | `-DeclRefExpr 0xa90fb0 <col:55> 'std::ptrdiff_t':'long' lvalue ParmVar 0xa86b38 '__d' 'std::ptrdiff_t':'long'
|     |     `-CXXFunctionalCastExpr 0xa91060 <col:61, col:68> 'int' functional cast to int <NoOp>
|     |       `-ImplicitCastExpr 0xa91048 <col:65> 'int' <IntegralCast> part_of_explicit_cast
|     |         `-ImplicitCastExpr 0xa91030 <col:65> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
|     |           `-DeclRefExpr 0xa91010 <col:65> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa86bb0 '__m' 'std::memory_order':'std::memory_order'
|     `-AlwaysInlineAttr 0xa86d00 <line:45:54> always_inline
|-LinkageSpecDecl 0xa533a0 <line:133:5> col:5 implicit C
| `-FunctionDecl 0xa533f0 <col:5> col:5 implicit used __atomic_thread_fence 'void (int) noexcept' extern
|   |-ParmVarDecl 0xa534e8 <<invalid sloc>> <invalid sloc> 'int'
|   |-BuiltinAttr 0xa53490 <<invalid sloc>> Implicit 656
|   `-NoThrowAttr 0xa53558 <col:5> Implicit
|-LinkageSpecDecl 0xa53888 <line:137:5> col:5 implicit C
| `-FunctionDecl 0xa538d8 <col:5> col:5 implicit used __atomic_signal_fence 'void (int) noexcept' extern
|   |-ParmVarDecl 0xa539d0 <<invalid sloc>> <invalid sloc> 'int'
|   |-BuiltinAttr 0xa53978 <<invalid sloc>> Implicit 657
|   `-NoThrowAttr 0xa53a40 <col:5> Implicit
|-LinkageSpecDecl 0xa5b4c8 <line:212:14> col:14 implicit C
| `-FunctionDecl 0xa5b518 <col:14> col:14 implicit used __atomic_test_and_set 'bool (volatile void *, int) noexcept' extern
|   |-ParmVarDecl 0xa5b610 <<invalid sloc>> <invalid sloc> 'volatile void *'
|   |-ParmVarDecl 0xa5b678 <<invalid sloc>> <invalid sloc> 'int'
|   |-BuiltinAttr 0xa5b5b8 <<invalid sloc>> Implicit 654
|   `-NoThrowAttr 0xa5b6f0 <col:14> Implicit
|-LinkageSpecDecl 0xa5bf50 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5> col:5 implicit C
| `-FunctionDecl 0xa5bfa0 <col:5> col:5 implicit used __builtin_unreachable 'void () __attribute__((noreturn)) noexcept' extern
|   |-BuiltinAttr 0xa5c040 <<invalid sloc>> Implicit 490
|   `-NoThrowAttr 0xa5c098 <col:5> Implicit
|-LinkageSpecDecl 0xa63308 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/atomic_base.h:277:7> col:7 implicit C
| `-FunctionDecl 0xa63358 <col:7> col:7 implicit used __atomic_clear 'void (volatile void *, int) noexcept' extern
|   |-ParmVarDecl 0xa63450 <<invalid sloc>> <invalid sloc> 'volatile void *'
|   |-ParmVarDecl 0xa634b8 <<invalid sloc>> <invalid sloc> 'int'
|   |-BuiltinAttr 0xa633f8 <<invalid sloc>> Implicit 655
|   `-NoThrowAttr 0xa63530 <col:7> Implicit
|-LinkageSpecDecl 0xa75ee0 <line:385:16> col:16 implicit C
| `-FunctionDecl 0xa75f30 <col:16> col:16 implicit referenced __atomic_add_fetch 'void (...)' extern
|   `-BuiltinAttr 0xa75fd0 <<invalid sloc>> Implicit 646
|-LinkageSpecDecl 0xa763c8 <line:393:16> col:16 implicit C
| `-FunctionDecl 0xa76418 <col:16> col:16 implicit referenced __atomic_sub_fetch 'void (...)' extern
|   `-BuiltinAttr 0xa764b8 <<invalid sloc>> Implicit 647
|-LinkageSpecDecl 0xa76ff0 <line:417:16> col:16 implicit C
| `-FunctionDecl 0xa794d0 <col:16> col:16 implicit referenced __atomic_and_fetch 'void (...)' extern
|   `-BuiltinAttr 0xa79570 <<invalid sloc>> Implicit 648
|-LinkageSpecDecl 0xa79968 <line:425:16> col:16 implicit C
| `-FunctionDecl 0xa799b8 <col:16> col:16 implicit referenced __atomic_or_fetch 'void (...)' extern
|   `-BuiltinAttr 0xa79a58 <<invalid sloc>> Implicit 649
|-LinkageSpecDecl 0xa79e50 <line:433:16> col:16 implicit C
| `-FunctionDecl 0xa79ea0 <col:16> col:16 implicit referenced __atomic_xor_fetch 'void (...)' extern
|   `-BuiltinAttr 0xa79f40 <<invalid sloc>> Implicit 650
|-LinkageSpecDecl 0xa7a3e8 <line:443:9> col:9 implicit C
| `-FunctionDecl 0xa7a438 <col:9> col:9 implicit used __atomic_is_lock_free 'bool (unsigned long, const volatile void *) noexcept' extern
|   |-ParmVarDecl 0xa7a530 <<invalid sloc>> <invalid sloc> 'unsigned long'
|   |-ParmVarDecl 0xa7a598 <<invalid sloc>> <invalid sloc> 'const volatile void *'
|   |-BuiltinAttr 0xa7a4d8 <<invalid sloc>> Implicit 659
|   `-NoThrowAttr 0xa7a610 <col:9> Implicit
|-LinkageSpecDecl 0xa7b408 <line:464:2> col:2 implicit C
| `-FunctionDecl 0xa7b690 <col:2> col:2 implicit used __atomic_store_n 'void (...)' extern
|   `-BuiltinAttr 0xa7b730 <<invalid sloc>> Implicit 635
|-LinkageSpecDecl 0xa7cba8 <line:488:9> col:9 implicit C
| `-FunctionDecl 0xa7cbf8 <col:9> col:9 implicit used __atomic_load_n 'void (...)' extern
|   `-BuiltinAttr 0xa7cc98 <<invalid sloc>> Implicit 633
|-LinkageSpecDecl 0xa7db88 <line:506:9> col:9 implicit C
| `-FunctionDecl 0xa7dbd8 <col:9> col:9 implicit used __atomic_exchange_n 'void (...)' extern
|   `-BuiltinAttr 0xa7dc78 <<invalid sloc>> Implicit 637
|-LinkageSpecDecl 0xa7e3c0 <line:523:9> col:9 implicit C
| `-FunctionDecl 0xa7e410 <col:9> col:9 implicit used __atomic_compare_exchange_n 'void (...)' extern
|   `-BuiltinAttr 0xa7e4b0 <<invalid sloc>> Implicit 639
|-LinkageSpecDecl 0xa80920 <line:618:16> col:16 implicit C
| `-FunctionDecl 0xa80970 <col:16> col:16 implicit referenced __atomic_fetch_add 'void (...)' extern
|   `-BuiltinAttr 0xa80a10 <<invalid sloc>> Implicit 640
|-LinkageSpecDecl 0xa80e38 <line:628:16> col:16 implicit C
| `-FunctionDecl 0xa80e88 <col:16> col:16 implicit referenced __atomic_fetch_sub 'void (...)' extern
|   `-BuiltinAttr 0xa80f28 <<invalid sloc>> Implicit 641
|-LinkageSpecDecl 0xa81350 <line:638:16> col:16 implicit C
| `-FunctionDecl 0xa813a0 <col:16> col:16 implicit referenced __atomic_fetch_and 'void (...)' extern
|   `-BuiltinAttr 0xa81440 <<invalid sloc>> Implicit 642
|-LinkageSpecDecl 0xa81868 <line:648:16> col:16 implicit C
| `-FunctionDecl 0xa818b8 <col:16> col:16 implicit referenced __atomic_fetch_or 'void (...)' extern
|   `-BuiltinAttr 0xa81958 <<invalid sloc>> Implicit 643
|-LinkageSpecDecl 0xa81d80 <line:658:16> col:16 implicit C
| `-FunctionDecl 0xa81dd0 <col:16> col:16 implicit referenced __atomic_fetch_xor 'void (...)' extern
|   `-BuiltinAttr 0xa81e70 <<invalid sloc>> Implicit 644
|-NamespaceDecl 0xa91108 prev 0xa511f8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/atomic:43:1, line:1649:1> line:43:11 std
| |-original Namespace 0x86b810 'std'
| |-VisibilityAttr 0xa91178 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:70:49, col:67> Default
| |-ClassTemplateDecl 0xa912f0 prev 0xa54830 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/atomic:56:3, line:57:12> col:12 atomic
| | |-TemplateTypeParmDecl 0xa911d0 <line:56:12, col:21> col:21 typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xa91260 prev 0xa547a0 <line:57:5, col:12> col:12 struct atomic
| | |-ClassTemplateSpecialization 0xa91368 'atomic'
| | |-ClassTemplateSpecialization 0xaae758 'atomic'
| | |-ClassTemplateSpecialization 0xac0da8 'atomic'
| | |-ClassTemplateSpecialization 0xac93b0 'atomic'
| | |-ClassTemplateSpecialization 0xad3a00 'atomic'
| | |-ClassTemplateSpecialization 0xadc000 'atomic'
| | |-ClassTemplateSpecialization 0xae4610 'atomic'
| | |-ClassTemplateSpecialization 0xaed080 'atomic'
| | |-ClassTemplateSpecialization 0xaf56c0 'atomic'
| | |-ClassTemplateSpecialization 0xb00b50 'atomic'
| | |-ClassTemplateSpecialization 0xb091b0 'atomic'
| | |-ClassTemplateSpecialization 0xb135b0 'atomic'
| | |-ClassTemplateSpecialization 0xb1f068 'atomic'
| | |-ClassTemplateSpecialization 0xb27688 'atomic'
| | `-ClassTemplateSpecialization 0xb32298 'atomic'
| |-ClassTemplateSpecializationDecl 0xa91368 <line:61:3, line:182:3> line:62:10 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-TemplateArgument type 'bool'
| | | `-BuiltinType 0x826220 'bool'
| | |-CXXRecordDecl 0xa91578 <col:3, col:10> col:10 implicit referenced struct atomic
| | |-TypeAliasDecl 0xa91618 <line:64:5, col:24> col:11 value_type 'bool'
| | | `-BuiltinType 0x826220 'bool'
| | |-AccessSpecDecl 0xa91678 <line:66:3, col:10> col:3 private
| | |-FieldDecl 0xa98780 <line:67:5, col:25> col:25 referenced _M_base '__atomic_base<bool>':'std::__atomic_base<bool>'
| | |-AccessSpecDecl 0xa987d0 <line:69:3, col:9> col:3 public
| | |-CXXConstructorDecl 0xa98868 <line:70:5, col:31> col:5 used atomic 'void () noexcept' default trivial
| | | |-CXXCtorInitializer Field 0xa98780 '_M_base' '__atomic_base<bool>':'std::__atomic_base<bool>'
| | | | `-CXXConstructExpr 0xb5cd88 <col:5> '__atomic_base<bool>':'std::__atomic_base<bool>' 'void () noexcept'
| | | `-CompoundStmt 0xb5cdd8 <col:31>
| | |-CXXDestructorDecl 0xa98960 <line:71:5, col:32> col:5 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xa98b28 <line:72:5, col:34> col:5 atomic 'void (const std::atomic<bool> &)' delete trivial
| | | `-ParmVarDecl 0xa98a60 <col:12, col:24> col:25 'const std::atomic<bool> &'
| | |-CXXMethodDecl 0xa98ce8 <line:73:5, col:45> col:13 operator= 'std::atomic<bool> &(const std::atomic<bool> &)' delete trivial
| | | `-ParmVarDecl 0xa98bf8 <col:23, col:35> col:36 'const std::atomic<bool> &'
| | |-CXXMethodDecl 0xa98e98 <line:74:5, col:54> col:13 operator= 'std::atomic<bool> &(const std::atomic<bool> &) volatile' delete trivial
| | | `-ParmVarDecl 0xa98da0 <col:23, col:35> col:36 'const std::atomic<bool> &'
| | |-CXXConstructorDecl 0xa98ff8 <line:76:5, col:58> col:15 constexpr atomic 'void (bool) noexcept'
| | | |-ParmVarDecl 0xa98f60 <col:22, col:27> col:27 used __i 'bool'
| | | |-CXXCtorInitializer Field 0xa98780 '_M_base' '__atomic_base<bool>':'std::__atomic_base<bool>'
| | | | `-CXXConstructExpr 0xa9bd40 <col:43, col:54> '__atomic_base<bool>':'std::__atomic_base<bool>' 'void (std::__atomic_base<bool>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xa9bbb8 <col:51> 'bool' <LValueToRValue>
| | | |     `-DeclRefExpr 0xa9bb78 <col:51> 'bool' lvalue ParmVar 0xa98f60 '__i' 'bool'
| | | `-CompoundStmt 0xa9bd98 <col:56, col:58>
| | |-CXXMethodDecl 0xa99190 <line:78:5, line:80:38> line:79:5 operator= 'bool (bool) noexcept'
| | | |-ParmVarDecl 0xa990c8 <col:15, col:20> col:20 used __i 'bool'
| | | `-CompoundStmt 0xa9bfc0 <line:80:5, col:38>
| | |   `-ReturnStmt 0xa9bfb0 <col:7, col:35>
| | |     `-CXXMemberCallExpr 0xa9bf70 <col:14, col:35> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xa9bf40 <col:14, col:30> '<bound member function type>' .operator= 0xa92af0
| | |       | `-MemberExpr 0xa9be80 <col:14> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9be70 <col:14> 'std::atomic<bool> *' implicit this
| | |       `-ImplicitCastExpr 0xa9bf98 <col:32> 'bool' <LValueToRValue>
| | |         `-DeclRefExpr 0xa9bf20 <col:32> 'bool' lvalue ParmVar 0xa990c8 '__i' 'bool'
| | |-CXXMethodDecl 0xa99320 <line:82:5, line:84:38> line:83:5 operator= 'bool (bool) volatile noexcept'
| | | |-ParmVarDecl 0xa99258 <col:15, col:20> col:20 used __i 'bool'
| | | `-CompoundStmt 0xa9c178 <line:84:5, col:38>
| | |   `-ReturnStmt 0xa9c168 <col:7, col:35>
| | |     `-CXXMemberCallExpr 0xa9c0d8 <col:14, col:35> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xa9c0a8 <col:14, col:30> '<bound member function type>' .operator= 0xa92cc0
| | |       | `-MemberExpr 0xa9bfe8 <col:14> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9bfd8 <col:14> 'volatile std::atomic<bool> *' implicit this
| | |       `-ImplicitCastExpr 0xa9c128 <col:32> 'bool' <LValueToRValue>
| | |         `-DeclRefExpr 0xa9c088 <col:32> 'bool' lvalue ParmVar 0xa99258 '__i' 'bool'
| | |-CXXConversionDecl 0xa99440 <line:86:5, line:87:30> line:86:5 used operator bool 'bool () const noexcept'
| | | `-CompoundStmt 0xa9c318 <line:87:5, col:30>
| | |   `-ReturnStmt 0xa9c308 <col:7, col:27>
| | |     `-CXXMemberCallExpr 0xa9c260 <col:14, col:27> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xa9c230 <col:14, col:22> '<bound member function type>' .load 0xa94de0
| | |       | `-MemberExpr 0xa9c1a0 <col:14> 'const __atomic_base<bool>':'const std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9c190 <col:14> 'const std::atomic<bool> *' implicit this
| | |       `-CXXDefaultArgExpr 0xa9c2b8 <<invalid sloc>> 'std::memory_order'
| | |-CXXConversionDecl 0xa99550 <line:89:5, line:90:30> line:89:5 operator bool 'bool () const volatile noexcept'
| | | `-CompoundStmt 0xa9c4b8 <line:90:5, col:30>
| | |   `-ReturnStmt 0xa9c4a8 <col:7, col:27>
| | |     `-CXXMemberCallExpr 0xa9c400 <col:14, col:27> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xa9c3d0 <col:14, col:22> '<bound member function type>' .load 0xa94ff0
| | |       | `-MemberExpr 0xa9c340 <col:14> 'const volatile __atomic_base<bool>':'const volatile std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9c330 <col:14> 'const volatile std::atomic<bool> *' implicit this
| | |       `-CXXDefaultArgExpr 0xa9c458 <<invalid sloc>> 'std::memory_order'
| | |-CXXMethodDecl 0xa99640 <line:92:5, line:93:68> col:5 is_lock_free 'bool () const noexcept'
| | | `-CompoundStmt 0xa9c5d0 <col:35, col:68>
| | |   `-ReturnStmt 0xa9c5c0 <col:37, col:65>
| | |     `-CXXMemberCallExpr 0xa9c5a0 <col:44, col:65> 'bool'
| | |       `-MemberExpr 0xa9c570 <col:44, col:52> '<bound member function type>' .is_lock_free 0xa945e0
| | |         `-MemberExpr 0xa9c4e0 <col:44> 'const __atomic_base<bool>':'const std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |           `-CXXThisExpr 0xa9c4d0 <col:44> 'const std::atomic<bool> *' implicit this
| | |-CXXMethodDecl 0xa99708 <line:95:5, line:96:77> col:5 is_lock_free 'bool () const volatile noexcept'
| | | `-CompoundStmt 0xa9c6e8 <col:44, col:77>
| | |   `-ReturnStmt 0xa9c6d8 <col:46, col:74>
| | |     `-CXXMemberCallExpr 0xa9c6b8 <col:53, col:74> 'bool'
| | |       `-MemberExpr 0xa9c688 <col:53, col:61> '<bound member function type>' .is_lock_free 0xa94690
| | |         `-MemberExpr 0xa9c5f8 <col:53> 'const volatile __atomic_base<bool>':'const volatile std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |           `-CXXThisExpr 0xa9c5e8 <col:53> 'const volatile std::atomic<bool> *' implicit this
| | |-CXXMethodDecl 0xa99920 <line:102:5, line:104:32> line:103:5 store 'void (bool, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xa997c8 <col:11, col:16> col:16 used __i 'bool'
| | | |-ParmVarDecl 0xa99840 <col:21, col:40> col:34 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xa9ba38 <col:40> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xa9c8b8 <line:104:5, col:32>
| | |   `-CXXMemberCallExpr 0xa9c858 <col:7, col:29> 'void'
| | |     |-MemberExpr 0xa9c828 <col:7, col:15> '<bound member function type>' .store 0xa948e0
| | |     | `-MemberExpr 0xa9c758 <col:7> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |     |   `-CXXThisExpr 0xa9c748 <col:7> 'std::atomic<bool> *' implicit this
| | |     |-ImplicitCastExpr 0xa9c888 <col:21> 'bool' <LValueToRValue>
| | |     | `-DeclRefExpr 0xa9c7e8 <col:21> 'bool' lvalue ParmVar 0xa997c8 '__i' 'bool'
| | |     `-ImplicitCastExpr 0xa9c8a0 <col:26> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |       `-DeclRefExpr 0xa9c808 <col:26> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa99840 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xa99b30 <line:106:5, line:108:32> line:107:5 store 'void (bool, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xa999e0 <col:11, col:16> col:16 used __i 'bool'
| | | |-ParmVarDecl 0xa99a58 <col:21, col:40> col:34 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xa9ba58 <col:40> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xa9caa0 <line:108:5, col:32>
| | |   `-CXXMemberCallExpr 0xa9ca28 <col:7, col:29> 'void'
| | |     |-MemberExpr 0xa9c9f8 <col:7, col:15> '<bound member function type>' .store 0xa94bc0
| | |     | `-MemberExpr 0xa9c928 <col:7> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |     |   `-CXXThisExpr 0xa9c918 <col:7> 'volatile std::atomic<bool> *' implicit this
| | |     |-ImplicitCastExpr 0xa9ca70 <col:21> 'bool' <LValueToRValue>
| | |     | `-DeclRefExpr 0xa9c9b8 <col:21> 'bool' lvalue ParmVar 0xa999e0 '__i' 'bool'
| | |     `-ImplicitCastExpr 0xa9ca88 <col:26> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |       `-DeclRefExpr 0xa9c9d8 <col:26> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa99a58 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xa99cd0 <line:110:5, line:112:33> line:111:5 load 'bool (std::memory_order) const noexcept'
| | | |-ParmVarDecl 0xa99c00 <col:10, col:29> col:23 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xa9ba78 <col:29> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xa9cbf8 <line:112:5, col:33>
| | |   `-ReturnStmt 0xa9cbe8 <col:7, col:30>
| | |     `-CXXMemberCallExpr 0xa9cba8 <col:14, col:30> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xa9cb78 <col:14, col:22> '<bound member function type>' .load 0xa94de0
| | |       | `-MemberExpr 0xa9cac8 <col:14> 'const __atomic_base<bool>':'const std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9cab8 <col:14> 'const std::atomic<bool> *' implicit this
| | |       `-ImplicitCastExpr 0xa9cbd0 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xa9cb58 <col:27> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa99c00 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xa99e50 <line:114:5, line:116:33> line:115:5 load 'bool (std::memory_order) const volatile noexcept'
| | | |-ParmVarDecl 0xa99d88 <col:10, col:29> col:23 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xa9ba98 <col:29> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xa9cd50 <line:116:5, col:33>
| | |   `-ReturnStmt 0xa9cd40 <col:7, col:30>
| | |     `-CXXMemberCallExpr 0xa9cd00 <col:14, col:30> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xa9ccd0 <col:14, col:22> '<bound member function type>' .load 0xa94ff0
| | |       | `-MemberExpr 0xa9cc20 <col:14> 'const volatile __atomic_base<bool>':'const volatile std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9cc10 <col:14> 'const volatile std::atomic<bool> *' implicit this
| | |       `-ImplicitCastExpr 0xa9cd28 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xa9ccb0 <col:27> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa99d88 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xa9a070 <line:118:5, line:120:42> line:119:5 exchange 'bool (bool, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xa99f18 <col:14, col:19> col:19 used __i 'bool'
| | | |-ParmVarDecl 0xa99f90 <col:24, col:43> col:37 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xa9bab8 <col:43> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xa9cee8 <line:120:5, col:42>
| | |   `-ReturnStmt 0xa9ced8 <col:7, col:39>
| | |     `-CXXMemberCallExpr 0xa9ce78 <col:14, col:39> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xa9ce48 <col:14, col:22> '<bound member function type>' .exchange 0xa952a0
| | |       | `-MemberExpr 0xa9cd78 <col:14> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9cd68 <col:14> 'std::atomic<bool> *' implicit this
| | |       |-ImplicitCastExpr 0xa9cea8 <col:31> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xa9ce08 <col:31> 'bool' lvalue ParmVar 0xa99f18 '__i' 'bool'
| | |       `-ImplicitCastExpr 0xa9cec0 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xa9ce28 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa99f90 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xa9a280 <line:122:5, line:125:42> line:123:5 exchange 'bool (bool, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xa9a130 <col:14, col:19> col:19 used __i 'bool'
| | | |-ParmVarDecl 0xa9a1a8 <line:124:7, col:26> col:20 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xa9bad8 <col:26> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xa9d080 <line:125:5, col:42>
| | |   `-ReturnStmt 0xa9d070 <col:7, col:39>
| | |     `-CXXMemberCallExpr 0xa9d010 <col:14, col:39> 'std::__atomic_base<bool>::__int_type':'bool'
| | |       |-MemberExpr 0xa9cfe0 <col:14, col:22> '<bound member function type>' .exchange 0xa95550
| | |       | `-MemberExpr 0xa9cf10 <col:14> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9cf00 <col:14> 'volatile std::atomic<bool> *' implicit this
| | |       |-ImplicitCastExpr 0xa9d040 <col:31> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xa9cfa0 <col:31> 'bool' lvalue ParmVar 0xa9a130 '__i' 'bool'
| | |       `-ImplicitCastExpr 0xa9d058 <col:36> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xa9cfc0 <col:36> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9a1a8 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xa9a5c0 <line:127:5, line:130:69> line:128:5 compare_exchange_weak 'bool (bool &, bool, std::memory_order, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xa9a358 <col:27, col:33> col:33 used __i1 'bool &'
| | | |-ParmVarDecl 0xa9a3d0 <col:39, col:44> col:44 used __i2 'bool'
| | | |-ParmVarDecl 0xa9a448 <col:50, col:63> col:63 used __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xa9a4c0 <line:129:6, col:19> col:19 used __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xa9d290 <line:130:5, col:69>
| | |   `-ReturnStmt 0xa9d280 <col:7, col:66>
| | |     `-CXXMemberCallExpr 0xa9d1f8 <col:14, col:66> 'bool'
| | |       |-MemberExpr 0xa9d1c8 <col:14, col:22> '<bound member function type>' .compare_exchange_weak 0xa95980
| | |       | `-MemberExpr 0xa9d0a8 <col:14> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9d098 <col:14> 'std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xa9d148 <col:44> 'bool' lvalue ParmVar 0xa9a358 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xa9d238 <col:50> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xa9d168 <col:50> 'bool' lvalue ParmVar 0xa9a3d0 '__i2' 'bool'
| | |       |-ImplicitCastExpr 0xa9d250 <col:56> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |       | `-DeclRefExpr 0xa9d188 <col:56> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9a448 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-ImplicitCastExpr 0xa9d268 <col:62> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xa9d1a8 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9a4c0 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xa9a900 <line:132:5, line:135:69> line:133:5 compare_exchange_weak 'bool (bool &, bool, std::memory_order, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xa9a698 <col:27, col:33> col:33 used __i1 'bool &'
| | | |-ParmVarDecl 0xa9a710 <col:39, col:44> col:44 used __i2 'bool'
| | | |-ParmVarDecl 0xa9a788 <col:50, col:63> col:63 used __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xa9a800 <line:134:6, col:19> col:19 used __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xa9d4a0 <line:135:5, col:69>
| | |   `-ReturnStmt 0xa9d490 <col:7, col:66>
| | |     `-CXXMemberCallExpr 0xa9d408 <col:14, col:66> 'bool'
| | |       |-MemberExpr 0xa9d3d8 <col:14, col:22> '<bound member function type>' .compare_exchange_weak 0xa95d50
| | |       | `-MemberExpr 0xa9d2b8 <col:14> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9d2a8 <col:14> 'volatile std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xa9d358 <col:44> 'bool' lvalue ParmVar 0xa9a698 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xa9d448 <col:50> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xa9d378 <col:50> 'bool' lvalue ParmVar 0xa9a710 '__i2' 'bool'
| | |       |-ImplicitCastExpr 0xa9d460 <col:56> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |       | `-DeclRefExpr 0xa9d398 <col:56> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9a788 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-ImplicitCastExpr 0xa9d478 <col:62> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xa9d3b8 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9a800 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xa9abd0 <line:137:5, line:140:62> line:138:5 compare_exchange_weak 'bool (bool &, bool, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xa9a9e8 <col:27, col:33> col:33 used __i1 'bool &'
| | | |-ParmVarDecl 0xa9aa70 <col:39, col:44> col:44 used __i2 'bool'
| | | |-ParmVarDecl 0xa9aae8 <line:139:6, col:25> col:19 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xa9baf8 <col:25> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xa9d670 <line:140:5, col:62>
| | |   `-ReturnStmt 0xa9d660 <col:7, col:59>
| | |     `-CXXMemberCallExpr 0xa9d5f8 <col:14, col:59> 'bool'
| | |       |-MemberExpr 0xa9d5c8 <col:14, col:22> '<bound member function type>' .compare_exchange_weak 0xa960a0
| | |       | `-MemberExpr 0xa9d4c8 <col:14> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9d4b8 <col:14> 'std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xa9d568 <col:44> 'bool' lvalue ParmVar 0xa9a9e8 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xa9d630 <col:50> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xa9d588 <col:50> 'bool' lvalue ParmVar 0xa9aa70 '__i2' 'bool'
| | |       `-ImplicitCastExpr 0xa9d648 <col:56> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xa9d5a8 <col:56> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9aae8 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xa9ae90 <line:142:5, line:145:62> line:143:5 compare_exchange_weak 'bool (bool &, bool, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xa9acb0 <col:27, col:33> col:33 used __i1 'bool &'
| | | |-ParmVarDecl 0xa9ad28 <col:39, col:44> col:44 used __i2 'bool'
| | | |-ParmVarDecl 0xa9ada0 <line:144:8, col:27> col:21 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xa9bb18 <col:27> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xa9d840 <line:145:5, col:62>
| | |   `-ReturnStmt 0xa9d830 <col:7, col:59>
| | |     `-CXXMemberCallExpr 0xa9d7c8 <col:14, col:59> 'bool'
| | |       |-MemberExpr 0xa9d798 <col:14, col:22> '<bound member function type>' .compare_exchange_weak 0xa963f0
| | |       | `-MemberExpr 0xa9d698 <col:14> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9d688 <col:14> 'volatile std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xa9d738 <col:44> 'bool' lvalue ParmVar 0xa9acb0 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xa9d800 <col:50> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xa9d758 <col:50> 'bool' lvalue ParmVar 0xa9ad28 '__i2' 'bool'
| | |       `-ImplicitCastExpr 0xa9d818 <col:56> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xa9d778 <col:56> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9ada0 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xa9b188 <line:147:5, line:150:71> line:148:5 compare_exchange_strong 'bool (bool &, bool, std::memory_order, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xa9af70 <col:29, col:35> col:35 used __i1 'bool &'
| | | |-ParmVarDecl 0xa9afe8 <col:41, col:46> col:46 used __i2 'bool'
| | | |-ParmVarDecl 0xa9b060 <col:52, col:65> col:65 used __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xa9b0d8 <line:149:8, col:21> col:21 used __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xa9da50 <line:150:5, col:71>
| | |   `-ReturnStmt 0xa9da40 <col:7, col:68>
| | |     `-CXXMemberCallExpr 0xa9d9b8 <col:14, col:68> 'bool'
| | |       |-MemberExpr 0xa9d988 <col:14, col:22> '<bound member function type>' .compare_exchange_strong 0xa96728
| | |       | `-MemberExpr 0xa9d868 <col:14> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9d858 <col:14> 'std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xa9d908 <col:46> 'bool' lvalue ParmVar 0xa9af70 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xa9d9f8 <col:52> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xa9d928 <col:52> 'bool' lvalue ParmVar 0xa9afe8 '__i2' 'bool'
| | |       |-ImplicitCastExpr 0xa9da10 <col:58> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |       | `-DeclRefExpr 0xa9d948 <col:58> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9b060 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-ImplicitCastExpr 0xa9da28 <col:64> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xa9d968 <col:64> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9b0d8 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xa9b478 <line:152:5, line:155:71> line:153:5 compare_exchange_strong 'bool (bool &, bool, std::memory_order, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xa9b260 <col:29, col:35> col:35 used __i1 'bool &'
| | | |-ParmVarDecl 0xa9b2d8 <col:41, col:46> col:46 used __i2 'bool'
| | | |-ParmVarDecl 0xa9b350 <col:52, col:65> col:65 used __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xa9b3c8 <line:154:8, col:21> col:21 used __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xa9dc60 <line:155:5, col:71>
| | |   `-ReturnStmt 0xa9dc50 <col:7, col:68>
| | |     `-CXXMemberCallExpr 0xa9dbc8 <col:14, col:68> 'bool'
| | |       |-MemberExpr 0xa9db98 <col:14, col:22> '<bound member function type>' .compare_exchange_strong 0xa96a88
| | |       | `-MemberExpr 0xa9da78 <col:14> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9da68 <col:14> 'volatile std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xa9db18 <col:46> 'bool' lvalue ParmVar 0xa9b260 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xa9dc08 <col:52> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xa9db38 <col:52> 'bool' lvalue ParmVar 0xa9b2d8 '__i2' 'bool'
| | |       |-ImplicitCastExpr 0xa9dc20 <col:58> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |       | `-DeclRefExpr 0xa9db58 <col:58> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9b350 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-ImplicitCastExpr 0xa9dc38 <col:64> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xa9db78 <col:64> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9b3c8 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xa9b6f8 <line:157:5, line:160:64> line:158:5 compare_exchange_strong 'bool (bool &, bool, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xa9b560 <col:29, col:35> col:35 used __i1 'bool &'
| | | |-ParmVarDecl 0xa9b5d8 <col:41, col:46> col:46 used __i2 'bool'
| | | |-ParmVarDecl 0xa9b650 <line:159:8, col:27> col:21 used __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xa9bb38 <col:27> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xa9de30 <line:160:5, col:64>
| | |   `-ReturnStmt 0xa9de20 <col:7, col:61>
| | |     `-CXXMemberCallExpr 0xa9ddb8 <col:14, col:61> 'bool'
| | |       |-MemberExpr 0xa9dd88 <col:14, col:22> '<bound member function type>' .compare_exchange_strong 0xa96d58
| | |       | `-MemberExpr 0xa9dc88 <col:14> '__atomic_base<bool>':'std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| | |       |   `-CXXThisExpr 0xa9dc78 <col:14> 'std::atomic<bool> *' implicit this
| | |       |-DeclRefExpr 0xa9dd28 <col:46> 'bool' lvalue ParmVar 0xa9b560 '__i1' 'bool &'
| | |       |-ImplicitCastExpr 0xa9ddf0 <col:52> 'bool' <LValueToRValue>
| | |       | `-DeclRefExpr 0xa9dd48 <col:52> 'bool' lvalue ParmVar 0xa9b5d8 '__i2' 'bool'
| | |       `-ImplicitCastExpr 0xa9de08 <col:58> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |         `-DeclRefExpr 0xa9dd68 <col:58> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9b650 '__m' 'std::memory_order':'std::memory_order'
| | `-CXXMethodDecl 0xa9b970 <line:162:5, line:165:64> line:163:5 compare_exchange_strong 'bool (bool &, bool, std::memory_order) volatile noexcept'
| |   |-ParmVarDecl 0xa9b7d8 <col:29, col:35> col:35 used __i1 'bool &'
| |   |-ParmVarDecl 0xa9b850 <col:41, col:46> col:46 used __i2 'bool'
| |   |-ParmVarDecl 0xa9b8c8 <line:164:7, col:26> col:20 used __m 'std::memory_order':'std::memory_order' cinit
| |   | `-DeclRefExpr 0xa9bb58 <col:26> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |   `-CompoundStmt 0xa9e000 <line:165:5, col:64>
| |     `-ReturnStmt 0xa9dff0 <col:7, col:61>
| |       `-CXXMemberCallExpr 0xa9df88 <col:14, col:61> 'bool'
| |         |-MemberExpr 0xa9df58 <col:14, col:22> '<bound member function type>' .compare_exchange_strong 0xa97020
| |         | `-MemberExpr 0xa9de58 <col:14> 'volatile __atomic_base<bool>':'volatile std::__atomic_base<bool>' lvalue ->_M_base 0xa98780
| |         |   `-CXXThisExpr 0xa9de48 <col:14> 'volatile std::atomic<bool> *' implicit this
| |         |-DeclRefExpr 0xa9def8 <col:46> 'bool' lvalue ParmVar 0xa9b7d8 '__i1' 'bool &'
| |         |-ImplicitCastExpr 0xa9dfc0 <col:52> 'bool' <LValueToRValue>
| |         | `-DeclRefExpr 0xa9df18 <col:52> 'bool' lvalue ParmVar 0xa9b850 '__i2' 'bool'
| |         `-ImplicitCastExpr 0xa9dfd8 <col:58> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |           `-DeclRefExpr 0xa9df38 <col:58> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9b8c8 '__m' 'std::memory_order':'std::memory_order'
| |-ClassTemplateDecl 0xa9e140 prev 0xa912f0 <line:195:3, line:410:5> line:196:12 atomic
| | |-TemplateTypeParmDecl 0xa9e018 <line:195:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xa9e0b0 prev 0xa91260 <line:196:5, line:410:5> line:196:12 struct atomic definition
| | | |-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | | |-DefaultConstructor exists
| | | | |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor irrelevant non_trivial user_declared
| | | |-CXXRecordDecl 0xa9e200 <col:5, col:12> col:12 implicit referenced struct atomic
| | | |-TypeAliasDecl 0xa9e2a0 <line:198:7, col:26> col:13 value_type '_Tp'
| | | | `-TemplateTypeParmType 0xa9e070 '_Tp' dependent depth 0 index 0
| | | |   `-TemplateTypeParm 0xa9e018 '_Tp'
| | | |-AccessSpecDecl 0xa9e300 <line:200:5, col:12> col:5 private
| | | |-VarDecl 0xa9e340 <line:202:7, line:204:18> line:202:28 referenced _S_min_alignment 'const int' static constexpr cinit
| | | | `-ImplicitCastExpr 0xa9e618 <line:203:4, line:204:18> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xa9e5e8 <line:203:4, line:204:18> 'unsigned long'
| | | |     |-BinaryOperator 0xa9e560 <line:203:4, col:55> 'bool' '||'
| | | |     | |-ImplicitCastExpr 0xa9e548 <col:4, col:36> 'bool' <IntegralToBoolean>
| | | |     | | `-ParenExpr 0xa9e4a0 <col:4, col:36> 'unsigned long'
| | | |     | |   `-BinaryOperator 0xa9e480 <col:5, col:35> 'unsigned long' '&'
| | | |     | |     |-UnaryExprOrTypeTraitExpr 0xa9e3b8 <col:5, col:15> 'unsigned long' sizeof '_Tp'
| | | |     | |     `-ParenExpr 0xa9e460 <col:19, col:35> 'unsigned long'
| | | |     | |       `-BinaryOperator 0xa9e440 <col:20, col:34> 'unsigned long' '-'
| | | |     | |         |-UnaryExprOrTypeTraitExpr 0xa9e3e8 <col:20, col:30> 'unsigned long' sizeof '_Tp'
| | | |     | |         `-ImplicitCastExpr 0xa9e428 <col:34> 'unsigned long' <IntegralCast>
| | | |     | |           `-IntegerLiteral 0xa9e408 <col:34> 'int' 1
| | | |     | `-BinaryOperator 0xa9e528 <col:41, col:55> 'bool' '>'
| | | |     |   |-UnaryExprOrTypeTraitExpr 0xa9e4d0 <col:41, col:51> 'unsigned long' sizeof '_Tp'
| | | |     |   `-ImplicitCastExpr 0xa9e510 <col:55> 'unsigned long' <IntegralCast>
| | | |     |     `-IntegerLiteral 0xa9e4f0 <col:55> 'int' 16
| | | |     |-ImplicitCastExpr 0xa9e5d0 <line:204:4> 'unsigned long' <IntegralCast>
| | | |     | `-IntegerLiteral 0xa9e580 <col:4> 'int' 0
| | | |     `-UnaryExprOrTypeTraitExpr 0xa9e5b0 <col:8, col:18> 'unsigned long' sizeof '_Tp'
| | | |-VarDecl 0xa9e648 <line:206:7, line:207:75> line:206:28 referenced _S_alignment 'const int' static constexpr cinit
| | | | `-ImplicitCastExpr 0xa9e800 <line:207:11, col:75> 'const int' <IntegralCast>
| | | |   `-ConditionalOperator 0xa9e7d0 <col:11, col:75> 'unsigned long'
| | | |     |-BinaryOperator 0xa9e730 <col:11, col:41> 'bool' '>'
| | | |     | |-ImplicitCastExpr 0xa9e718 <col:11> 'unsigned long' <IntegralCast>
| | | |     | | `-ImplicitCastExpr 0xa9e700 <col:11> 'int' <LValueToRValue>
| | | |     | |   `-DeclRefExpr 0xa9e6b0 <col:11> 'const int' lvalue Var 0xa9e340 '_S_min_alignment' 'const int'
| | | |     | `-UnaryExprOrTypeTraitExpr 0xa9e6e0 <col:30, col:41> 'unsigned long' alignof '_Tp'
| | | |     |-ImplicitCastExpr 0xa9e7b8 <col:45> 'unsigned long' <IntegralCast>
| | | |     | `-ImplicitCastExpr 0xa9e7a0 <col:45> 'int' <LValueToRValue>
| | | |     |   `-DeclRefExpr 0xa9e750 <col:45> 'const int' lvalue Var 0xa9e340 '_S_min_alignment' 'const int'
| | | |     `-UnaryExprOrTypeTraitExpr 0xa9e780 <col:64, col:75> 'unsigned long' alignof '_Tp'
| | | |-FieldDecl 0xa9e890 <line:209:29, col:33> col:33 referenced _M_i '_Tp'
| | | | `-AlignedAttr 0xa9e8e0 <col:7> alignas
| | | |   `-DeclRefExpr 0xa9e860 <col:15> 'const int' lvalue Var 0xa9e648 '_S_alignment' 'const int'
| | | |-StaticAssertDecl 0xa9ea30 <line:211:7, line:212:55> line:211:7
| | | | |-TypeTraitExpr 0xa9e950 <col:21, col:48> 'bool' __is_trivially_copyable
| | | | `-StringLiteral 0xa9e9e8 <line:212:7> 'const char[47]' lvalue "std::atomic requires a trivially copyable type"
| | | |-StaticAssertDecl 0xa9ebd0 <line:214:7, line:215:57> line:214:7
| | | | |-BinaryOperator 0xa9eae8 <col:21, col:35> 'bool' '>'
| | | | | |-UnaryExprOrTypeTraitExpr 0xa9ea90 <col:21, col:31> 'unsigned long' sizeof '_Tp'
| | | | | `-ImplicitCastExpr 0xa9ead0 <col:35> 'unsigned long' <IntegralCast>
| | | | |   `-IntegerLiteral 0xa9eab0 <col:35> 'int' 0
| | | | `-StringLiteral 0xa9eb88 <line:215:7> 'const char[49]' lvalue "Incomplete or zero-sized types are not supported"
| | | |-AccessSpecDecl 0xa9ec10 <line:224:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0xa9eca0 <line:225:7, col:24> col:7 atomic<_Tp> 'void ()' default
| | | |-CXXDestructorDecl 0xa9ed98 <line:226:7, col:34> col:7 ~atomic<_Tp> 'void () noexcept' default
| | | |-CXXConstructorDecl 0xa9ef48 <line:227:7, col:36> col:7 atomic<_Tp> 'void (const atomic<_Tp> &)' delete
| | | | `-ParmVarDecl 0xa9ee88 <col:14, col:26> col:27 'const atomic<_Tp> &'
| | | |-CXXMethodDecl 0xa9f108 <line:228:7, col:47> col:15 operator= 'atomic<_Tp> &(const atomic<_Tp> &)' delete
| | | | `-ParmVarDecl 0xa9f018 <col:25, col:37> col:38 'const atomic<_Tp> &'
| | | |-CXXMethodDecl 0xa9f2b8 <line:229:7, col:56> col:15 operator= 'atomic<_Tp> &(const atomic<_Tp> &) volatile' delete
| | | | `-ParmVarDecl 0xa9f1c0 <col:25, col:37> col:38 'const atomic<_Tp> &'
| | | |-CXXConstructorDecl 0xa9f450 <line:231:7, col:56> col:17 constexpr atomic<_Tp> 'void (_Tp) noexcept'
| | | | |-ParmVarDecl 0xa9f380 <col:24, col:28> col:28 referenced __i '_Tp'
| | | | |-CXXCtorInitializer Field 0xa9e890 '_M_i' '_Tp'
| | | | | `-ParenListExpr 0xaa2068 <col:48, col:52> 'NULL TYPE'
| | | | |   `-DeclRefExpr 0xaa2048 <col:49> '_Tp' lvalue ParmVar 0xa9f380 '__i' '_Tp'
| | | | `-CompoundStmt 0xaa20b0 <col:54, col:56>
| | | |-CXXConversionDecl 0xa9f5a0 <line:233:7, line:234:24> line:233:7 operator type-parameter-0-0 '_Tp () const noexcept'
| | | | `-CompoundStmt 0xaa2160 <line:234:7, col:24>
| | | |   `-ReturnStmt 0xaa2150 <col:9, col:21>
| | | |     `-CallExpr 0xaa2130 <col:16, col:21> '<dependent type>'
| | | |       `-UnresolvedMemberExpr 0xaa20d0 <col:16> '<bound member function type>' lvalue
| | | |-CXXConversionDecl 0xa9f6e0 <line:236:7, line:237:24> line:236:7 operator type-parameter-0-0 '_Tp () const volatile noexcept'
| | | | `-CompoundStmt 0xaa2218 <line:237:7, col:24>
| | | |   `-ReturnStmt 0xaa2208 <col:9, col:21>
| | | |     `-CallExpr 0xaa21e8 <col:16, col:21> '<dependent type>'
| | | |       `-UnresolvedMemberExpr 0xaa2188 <col:16> '<bound member function type>' lvalue
| | | |-CXXMethodDecl 0xa9f880 <line:239:7, line:241:33> line:240:7 operator= '_Tp (_Tp) noexcept'
| | | | |-ParmVarDecl 0xa9f7b8 <col:17, col:21> col:21 referenced __i '_Tp'
| | | | `-CompoundStmt 0xaa2368 <line:241:7, col:33>
| | | |   |-CallExpr 0xaa2310 <col:9, col:18> '<dependent type>'
| | | |   | |-UnresolvedMemberExpr 0xaa2290 <col:9> '<bound member function type>' lvalue
| | | |   | `-DeclRefExpr 0xaa22f0 <col:15> '_Tp' lvalue ParmVar 0xa9f7b8 '__i' '_Tp'
| | | |   `-ReturnStmt 0xaa2358 <col:21, col:28>
| | | |     `-DeclRefExpr 0xaa2338 <col:28> '_Tp' lvalue ParmVar 0xa9f7b8 '__i' '_Tp'
| | | |-CXXMethodDecl 0xa9fa10 <line:243:7, line:245:33> line:244:7 operator= '_Tp (_Tp) volatile noexcept'
| | | | |-ParmVarDecl 0xa9f948 <col:17, col:21> col:21 referenced __i '_Tp'
| | | | `-CompoundStmt 0xaa24c0 <line:245:7, col:33>
| | | |   |-CallExpr 0xaa2468 <col:9, col:18> '<dependent type>'
| | | |   | |-UnresolvedMemberExpr 0xaa23e8 <col:9> '<bound member function type>' lvalue
| | | |   | `-DeclRefExpr 0xaa2448 <col:15> '_Tp' lvalue ParmVar 0xa9f948 '__i' '_Tp'
| | | |   `-ReturnStmt 0xaa24b0 <col:21, col:28>
| | | |     `-DeclRefExpr 0xaa2490 <col:28> '_Tp' lvalue ParmVar 0xa9f948 '__i' '_Tp'
| | | |-CXXMethodDecl 0xa9faf0 <line:247:7, line:253:7> line:248:7 is_lock_free 'bool () const noexcept'
| | | | `-CompoundStmt 0xaa26d0 <line:249:7, line:253:7>
| | | |   `-ReturnStmt 0xaa26c0 <line:251:2, line:252:45>
| | | |     `-CallExpr 0xaa2678 <line:251:9, line:252:45> 'bool'
| | | |       |-ImplicitCastExpr 0xaa2660 <line:251:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
| | | |       | `-DeclRefExpr 0xaa24e0 <col:9> '<builtin fn type>' Function 0xa7a438 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
| | | |       |-UnaryExprOrTypeTraitExpr 0xaa25a8 <col:31, col:42> 'unsigned long' sizeof
| | | |       | `-ParenExpr 0xaa2588 <col:37, col:42> 'const _Tp' lvalue
| | | |       |   `-MemberExpr 0xaa2558 <col:38> 'const _Tp' lvalue ->_M_i 0xa9e890 non_odr_use_unevaluated
| | | |       |     `-CXXThisExpr 0xaa2548 <col:38> 'const atomic<_Tp> *' implicit this
| | | |       `-ImplicitCastExpr 0xaa26a8 <line:252:6, col:44> 'const volatile void *' <NoOp>
| | | |         `-CXXReinterpretCastExpr 0xaa2630 <col:6, col:44> 'void *' reinterpret_cast<void *> <IntegralToPointer>
| | | |           `-UnaryOperator 0xaa2600 <col:31, col:32> 'int' prefix '-'
| | | |             `-ImplicitCastExpr 0xaa25e8 <col:32> 'int' <LValueToRValue>
| | | |               `-DeclRefExpr 0xaa25c8 <col:32> 'const int' lvalue Var 0xa9e648 '_S_alignment' 'const int'
| | | |-CXXMethodDecl 0xa9fbb8 <line:255:7, line:261:7> line:256:7 is_lock_free 'bool () const volatile noexcept'
| | | | `-CompoundStmt 0xaa28d8 <line:257:7, line:261:7>
| | | |   `-ReturnStmt 0xaa28c8 <line:259:2, line:260:45>
| | | |     `-CallExpr 0xaa2880 <line:259:9, line:260:45> 'bool'
| | | |       |-ImplicitCastExpr 0xaa2868 <line:259:9> 'bool (*)(unsigned long, const volatile void *) noexcept' <BuiltinFnToFnPtr>
| | | |       | `-DeclRefExpr 0xaa26e8 <col:9> '<builtin fn type>' Function 0xa7a438 '__atomic_is_lock_free' 'bool (unsigned long, const volatile void *) noexcept'
| | | |       |-UnaryExprOrTypeTraitExpr 0xaa27b0 <col:31, col:42> 'unsigned long' sizeof
| | | |       | `-ParenExpr 0xaa2790 <col:37, col:42> 'const volatile _Tp' lvalue
| | | |       |   `-MemberExpr 0xaa2760 <col:38> 'const volatile _Tp' lvalue ->_M_i 0xa9e890 non_odr_use_unevaluated
| | | |       |     `-CXXThisExpr 0xaa2750 <col:38> 'const volatile atomic<_Tp> *' implicit this
| | | |       `-ImplicitCastExpr 0xaa28b0 <line:260:6, col:44> 'const volatile void *' <NoOp>
| | | |         `-CXXReinterpretCastExpr 0xaa2838 <col:6, col:44> 'void *' reinterpret_cast<void *> <IntegralToPointer>
| | | |           `-UnaryOperator 0xaa2808 <col:31, col:32> 'int' prefix '-'
| | | |             `-ImplicitCastExpr 0xaa27f0 <col:32> 'int' <LValueToRValue>
| | | |               `-DeclRefExpr 0xaa27d0 <col:32> 'const int' lvalue Var 0xa9e648 '_S_alignment' 'const int'
| | | |-CXXMethodDecl 0xa9fdd0 <line:268:7, line:272:7> line:269:7 store 'void (_Tp, std::memory_order) noexcept'
| | | | |-ParmVarDecl 0xa9fc78 <col:13, col:17> col:17 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xa9fcf0 <col:22, col:41> col:35 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xaa1f08 <col:41> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xaa2cc8 <line:270:7, line:272:7>
| | | |   `-CallExpr 0xaa2c90 <line:271:2, col:72> '<dependent type>'
| | | |     |-DeclRefExpr 0xaa2a38 <col:2> '<builtin fn type>' Function 0xaa2940 '__atomic_store' 'void (...)'
| | | |     |-CallExpr 0xaa2b28 <col:17, col:38> '<dependent type>'
| | | |     | |-UnresolvedLookupExpr 0xaa2aa0 <col:17, col:22> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |     | `-MemberExpr 0xaa2af8 <col:34> '_Tp' lvalue ->_M_i 0xa9e890
| | | |     |   `-CXXThisExpr 0xaa2ae8 <col:34> 'atomic<_Tp> *' implicit this
| | | |     |-CallExpr 0xaa2bd8 <col:41, col:61> '<dependent type>'
| | | |     | |-UnresolvedLookupExpr 0xaa2b70 <col:41, col:46> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |     | `-DeclRefExpr 0xaa2bb8 <col:58> '_Tp' lvalue ParmVar 0xa9fc78 '__i' '_Tp'
| | | |     `-CXXFunctionalCastExpr 0xaa2c68 <col:64, col:71> 'int' functional cast to int <NoOp>
| | | |       `-ImplicitCastExpr 0xaa2c50 <col:68> 'int' <IntegralCast> part_of_explicit_cast
| | | |         `-ImplicitCastExpr 0xaa2c38 <col:68> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xaa2c18 <col:68> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9fcf0 '__m' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xa9ffe0 <line:274:7, line:278:7> line:275:7 store 'void (_Tp, std::memory_order) volatile noexcept'
| | | | |-ParmVarDecl 0xa9fe90 <col:13, col:17> col:17 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xa9ff08 <col:22, col:41> col:35 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xaa1f28 <col:41> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xaa2f48 <line:276:7, line:278:7>
| | | |   `-CallExpr 0xaa2f10 <line:277:2, col:72> '<dependent type>'
| | | |     |-DeclRefExpr 0xaa2ce0 <col:2> '<builtin fn type>' Function 0xaa2940 '__atomic_store' 'void (...)'
| | | |     |-CallExpr 0xaa2da8 <col:17, col:38> '<dependent type>'
| | | |     | |-UnresolvedLookupExpr 0xaa2d20 <col:17, col:22> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |     | `-MemberExpr 0xaa2d78 <col:34> 'volatile _Tp' lvalue ->_M_i 0xa9e890
| | | |     |   `-CXXThisExpr 0xaa2d68 <col:34> 'volatile atomic<_Tp> *' implicit this
| | | |     |-CallExpr 0xaa2e58 <col:41, col:61> '<dependent type>'
| | | |     | |-UnresolvedLookupExpr 0xaa2df0 <col:41, col:46> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |     | `-DeclRefExpr 0xaa2e38 <col:58> '_Tp' lvalue ParmVar 0xa9fe90 '__i' '_Tp'
| | | |     `-CXXFunctionalCastExpr 0xaa2ee8 <col:64, col:71> 'int' functional cast to int <NoOp>
| | | |       `-ImplicitCastExpr 0xaa2ed0 <col:68> 'int' <IntegralCast> part_of_explicit_cast
| | | |         `-ImplicitCastExpr 0xaa2eb8 <col:68> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |           `-DeclRefExpr 0xaa2e98 <col:68> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xa9ff08 '__m' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xaa0180 <line:280:7, line:287:7> line:281:7 load '_Tp (std::memory_order) const noexcept'
| | | | |-ParmVarDecl 0xaa00b0 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xaa1f48 <col:31> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xaa3590 <line:282:7, line:287:7>
| | | |   |-DeclStmt 0xaa30f0 <line:283:2, col:47>
| | | |   | `-VarDecl 0xaa3028 <col:15, col:46> col:29 referenced __buf 'unsigned char[sizeof(_Tp)]'
| | | |   |   `-AlignedAttr 0xaa3090 <col:2> alignas
| | | |   |     `-UnaryExprOrTypeTraitExpr 0xaa2f70 <col:10, col:13> 'unsigned long' alignof '_Tp'
| | | |   |-DeclStmt 0xaa3210 <line:284:2, col:44>
| | | |   | `-VarDecl 0xaa3148 <col:2, col:43> col:7 referenced __ptr '_Tp *' cinit
| | | |   |   `-CXXReinterpretCastExpr 0xaa31e0 <col:15, col:43> '_Tp *' reinterpret_cast<_Tp *> <Dependent>
| | | |   |     `-DeclRefExpr 0xaa31b0 <col:38> 'unsigned char[sizeof(_Tp)]' lvalue Var 0xaa3028 '__buf' 'unsigned char[sizeof(_Tp)]'
| | | |   |-CallExpr 0xaa3510 <line:285:2, col:55> '<dependent type>'
| | | |   | |-DeclRefExpr 0xaa3370 <col:2> '<builtin fn type>' Function 0xaa3278 '__atomic_load' 'void (...)'
| | | |   | |-CallExpr 0xaa3438 <col:16, col:37> '<dependent type>'
| | | |   | | |-UnresolvedLookupExpr 0xaa33b0 <col:16, col:21> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |   | | `-MemberExpr 0xaa3408 <col:33> 'const _Tp' lvalue ->_M_i 0xa9e890
| | | |   | |   `-CXXThisExpr 0xaa33f8 <col:33> 'const atomic<_Tp> *' implicit this
| | | |   | |-DeclRefExpr 0xaa3460 <col:40> '_Tp *' lvalue Var 0xaa3148 '__ptr' '_Tp *'
| | | |   | `-CXXFunctionalCastExpr 0xaa34e8 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | |   |   `-ImplicitCastExpr 0xaa34d0 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |   |     `-ImplicitCastExpr 0xaa34b8 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |   |       `-DeclRefExpr 0xaa3498 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa00b0 '__m' 'std::memory_order':'std::memory_order'
| | | |   `-ReturnStmt 0xaa3580 <line:286:2, col:10>
| | | |     `-UnaryOperator 0xaa3568 <col:9, col:10> '<dependent type>' prefix '*' cannot overflow
| | | |       `-DeclRefExpr 0xaa3548 <col:10> '_Tp *' lvalue Var 0xaa3148 '__ptr' '_Tp *'
| | | |-CXXMethodDecl 0xaa0300 <line:289:7, line:296:7> line:290:7 load '_Tp (std::memory_order) const volatile noexcept'
| | | | |-ParmVarDecl 0xaa0238 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xaa1f68 <col:31> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xaa3a78 <line:291:7, line:296:7>
| | | |   |-DeclStmt 0xaa3750 <line:292:9, col:54>
| | | |   | `-VarDecl 0xaa3688 <col:22, col:53> col:36 referenced __buf 'unsigned char[sizeof(_Tp)]'
| | | |   |   `-AlignedAttr 0xaa36f0 <col:9> alignas
| | | |   |     `-UnaryExprOrTypeTraitExpr 0xaa35d0 <col:17, col:20> 'unsigned long' alignof '_Tp'
| | | |   |-DeclStmt 0xaa3840 <line:293:2, col:44>
| | | |   | `-VarDecl 0xaa3778 <col:2, col:43> col:7 referenced __ptr '_Tp *' cinit
| | | |   |   `-CXXReinterpretCastExpr 0xaa3810 <col:15, col:43> '_Tp *' reinterpret_cast<_Tp *> <Dependent>
| | | |   |     `-DeclRefExpr 0xaa37e0 <col:38> 'unsigned char[sizeof(_Tp)]' lvalue Var 0xaa3688 '__buf' 'unsigned char[sizeof(_Tp)]'
| | | |   |-CallExpr 0xaa39f8 <line:294:2, col:55> '<dependent type>'
| | | |   | |-DeclRefExpr 0xaa3858 <col:2> '<builtin fn type>' Function 0xaa3278 '__atomic_load' 'void (...)'
| | | |   | |-CallExpr 0xaa3920 <col:16, col:37> '<dependent type>'
| | | |   | | |-UnresolvedLookupExpr 0xaa3898 <col:16, col:21> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |   | | `-MemberExpr 0xaa38f0 <col:33> 'const volatile _Tp' lvalue ->_M_i 0xa9e890
| | | |   | |   `-CXXThisExpr 0xaa38e0 <col:33> 'const volatile atomic<_Tp> *' implicit this
| | | |   | |-DeclRefExpr 0xaa3948 <col:40> '_Tp *' lvalue Var 0xaa3778 '__ptr' '_Tp *'
| | | |   | `-CXXFunctionalCastExpr 0xaa39d0 <col:47, col:54> 'int' functional cast to int <NoOp>
| | | |   |   `-ImplicitCastExpr 0xaa39b8 <col:51> 'int' <IntegralCast> part_of_explicit_cast
| | | |   |     `-ImplicitCastExpr 0xaa39a0 <col:51> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |   |       `-DeclRefExpr 0xaa3980 <col:51> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa0238 '__m' 'std::memory_order':'std::memory_order'
| | | |   `-ReturnStmt 0xaa3a68 <line:295:2, col:10>
| | | |     `-UnaryOperator 0xaa3a50 <col:9, col:10> '<dependent type>' prefix '*' cannot overflow
| | | |       `-DeclRefExpr 0xaa3a30 <col:10> '_Tp *' lvalue Var 0xaa3778 '__ptr' '_Tp *'
| | | |-CXXMethodDecl 0xaa0520 <line:298:7, line:306:7> line:299:7 exchange '_Tp (_Tp, std::memory_order) noexcept'
| | | | |-ParmVarDecl 0xaa03c8 <col:16, col:20> col:20 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xaa0440 <col:25, col:44> col:38 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xaa1f88 <col:44> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xaa4168 <line:300:7, line:306:7>
| | | |   |-DeclStmt 0xaa3c40 <line:301:9, col:54>
| | | |   | `-VarDecl 0xaa3b78 <col:22, col:53> col:36 referenced __buf 'unsigned char[sizeof(_Tp)]'
| | | |   |   `-AlignedAttr 0xaa3be0 <col:9> alignas
| | | |   |     `-UnaryExprOrTypeTraitExpr 0xaa3ab8 <col:17, col:20> 'unsigned long' alignof '_Tp'
| | | |   |-DeclStmt 0xaa3d30 <line:302:2, col:44>
| | | |   | `-VarDecl 0xaa3c68 <col:2, col:43> col:7 referenced __ptr '_Tp *' cinit
| | | |   |   `-CXXReinterpretCastExpr 0xaa3d00 <col:15, col:43> '_Tp *' reinterpret_cast<_Tp *> <Dependent>
| | | |   |     `-DeclRefExpr 0xaa3cd0 <col:38> 'unsigned char[sizeof(_Tp)]' lvalue Var 0xaa3b78 '__buf' 'unsigned char[sizeof(_Tp)]'
| | | |   |-CallExpr 0xaa40e0 <line:303:2, line:304:21> '<dependent type>'
| | | |   | |-DeclRefExpr 0xaa3e90 <line:303:2> '<builtin fn type>' Function 0xaa3d98 '__atomic_exchange' 'void (...)'
| | | |   | |-CallExpr 0xaa3f58 <col:20, col:41> '<dependent type>'
| | | |   | | |-UnresolvedLookupExpr 0xaa3ed0 <col:20, col:25> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |   | | `-MemberExpr 0xaa3f28 <col:37> '_Tp' lvalue ->_M_i 0xa9e890
| | | |   | |   `-CXXThisExpr 0xaa3f18 <col:37> 'atomic<_Tp> *' implicit this
| | | |   | |-CallExpr 0xaa4008 <col:44, col:64> '<dependent type>'
| | | |   | | |-UnresolvedLookupExpr 0xaa3fa0 <col:44, col:49> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |   | | `-DeclRefExpr 0xaa3fe8 <col:61> '_Tp' lvalue ParmVar 0xaa03c8 '__i' '_Tp'
| | | |   | |-DeclRefExpr 0xaa4030 <line:304:6> '_Tp *' lvalue Var 0xaa3c68 '__ptr' '_Tp *'
| | | |   | `-CXXFunctionalCastExpr 0xaa40b8 <col:13, col:20> 'int' functional cast to int <NoOp>
| | | |   |   `-ImplicitCastExpr 0xaa40a0 <col:17> 'int' <IntegralCast> part_of_explicit_cast
| | | |   |     `-ImplicitCastExpr 0xaa4088 <col:17> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |   |       `-DeclRefExpr 0xaa4068 <col:17> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa0440 '__m' 'std::memory_order':'std::memory_order'
| | | |   `-ReturnStmt 0xaa4158 <line:305:2, col:10>
| | | |     `-UnaryOperator 0xaa4140 <col:9, col:10> '<dependent type>' prefix '*' cannot overflow
| | | |       `-DeclRefExpr 0xaa4120 <col:10> '_Tp *' lvalue Var 0xaa3c68 '__ptr' '_Tp *'
| | | |-CXXMethodDecl 0xaa0730 <line:308:7, line:317:7> line:309:7 exchange '_Tp (_Tp, std::memory_order) volatile noexcept'
| | | | |-ParmVarDecl 0xaa05e0 <col:16, col:20> col:20 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xaa0658 <line:310:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xaa1fa8 <col:28> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xaa4710 <line:311:7, line:317:7>
| | | |   |-DeclStmt 0xaa4330 <line:312:9, col:54>
| | | |   | `-VarDecl 0xaa4268 <col:22, col:53> col:36 referenced __buf 'unsigned char[sizeof(_Tp)]'
| | | |   |   `-AlignedAttr 0xaa42d0 <col:9> alignas
| | | |   |     `-UnaryExprOrTypeTraitExpr 0xaa41a8 <col:17, col:20> 'unsigned long' alignof '_Tp'
| | | |   |-DeclStmt 0xaa4420 <line:313:2, col:44>
| | | |   | `-VarDecl 0xaa4358 <col:2, col:43> col:7 referenced __ptr '_Tp *' cinit
| | | |   |   `-CXXReinterpretCastExpr 0xaa43f0 <col:15, col:43> '_Tp *' reinterpret_cast<_Tp *> <Dependent>
| | | |   |     `-DeclRefExpr 0xaa43c0 <col:38> 'unsigned char[sizeof(_Tp)]' lvalue Var 0xaa4268 '__buf' 'unsigned char[sizeof(_Tp)]'
| | | |   |-CallExpr 0xaa4688 <line:314:2, line:315:21> '<dependent type>'
| | | |   | |-DeclRefExpr 0xaa4438 <line:314:2> '<builtin fn type>' Function 0xaa3d98 '__atomic_exchange' 'void (...)'
| | | |   | |-CallExpr 0xaa4500 <col:20, col:41> '<dependent type>'
| | | |   | | |-UnresolvedLookupExpr 0xaa4478 <col:20, col:25> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |   | | `-MemberExpr 0xaa44d0 <col:37> 'volatile _Tp' lvalue ->_M_i 0xa9e890
| | | |   | |   `-CXXThisExpr 0xaa44c0 <col:37> 'volatile atomic<_Tp> *' implicit this
| | | |   | |-CallExpr 0xaa45b0 <col:44, col:64> '<dependent type>'
| | | |   | | |-UnresolvedLookupExpr 0xaa4548 <col:44, col:49> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |   | | `-DeclRefExpr 0xaa4590 <col:61> '_Tp' lvalue ParmVar 0xaa05e0 '__i' '_Tp'
| | | |   | |-DeclRefExpr 0xaa45d8 <line:315:6> '_Tp *' lvalue Var 0xaa4358 '__ptr' '_Tp *'
| | | |   | `-CXXFunctionalCastExpr 0xaa4660 <col:13, col:20> 'int' functional cast to int <NoOp>
| | | |   |   `-ImplicitCastExpr 0xaa4648 <col:17> 'int' <IntegralCast> part_of_explicit_cast
| | | |   |     `-ImplicitCastExpr 0xaa4630 <col:17> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |   |       `-DeclRefExpr 0xaa4610 <col:17> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa0658 '__m' 'std::memory_order':'std::memory_order'
| | | |   `-ReturnStmt 0xaa4700 <line:316:2, col:10>
| | | |     `-UnaryOperator 0xaa46e8 <col:9, col:10> '<dependent type>' prefix '*' cannot overflow
| | | |       `-DeclRefExpr 0xaa46c8 <col:10> '_Tp *' lvalue Var 0xaa4358 '__ptr' '_Tp *'
| | | |-CXXMethodDecl 0xaa0ad8 <line:319:7, line:329:7> line:320:7 compare_exchange_weak 'bool (_Tp &, _Tp, std::memory_order, std::memory_order) noexcept'
| | | | |-ParmVarDecl 0xaa0828 <col:29, col:34> col:34 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xaa08a0 <col:39, col:43> col:43 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xaa0918 <col:48, col:61> col:61 referenced __s 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xaa0990 <line:321:8, col:21> col:21 referenced __f 'std::memory_order':'std::memory_order'
| | | | `-CompoundStmt 0xaa4f88 <line:322:7, line:329:7>
| | | |   |-DoStmt 0xaa49e8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | |   | |-CompoundStmt 0xaa49c0 <col:6, col:42>
| | | |   | | `-IfStmt 0xaa49a0 <line:545:3, line:546:27>
| | | |   | |   |-BinaryOperator 0xaa4928 <line:545:7, col:51> 'bool' '&&'
| | | |   | |   | |-CallExpr 0xaa47d8 <col:7, col:36> 'bool'
| | | |   | |   | | `-ImplicitCastExpr 0xaa47c0 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | |   | |   | |   `-DeclRefExpr 0xaa4790 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | |   | |   | `-UnaryOperator 0xaa4910 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | |   | |   |   `-CXXFunctionalCastExpr 0xaa48e8 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | |   | |   |     `-CallExpr 0xaa48a8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/atomic:323:19, col:55> 'bool'
| | | |   | |   |       |-ImplicitCastExpr 0xaa4890 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | |   | |   |       | `-DeclRefExpr 0xaa4870 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
| | | |   | |   |       `-ImplicitCastExpr 0xaa48d0 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | |   | |   |         `-DeclRefExpr 0xaa4850 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa0990 '__f' 'std::memory_order':'std::memory_order'
| | | |   | |   `-CallExpr 0xaa4980 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | |   | |     `-ImplicitCastExpr 0xaa4968 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | |   | |       `-DeclRefExpr 0xaa4948 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | |   | `-CXXBoolLiteralExpr 0xaa49d8 <line:591:51> 'bool' false
| | | |   `-ReturnStmt 0xaa4f78 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/atomic:325:2, line:328:31>
| | | |     `-CallExpr 0xaa4f28 <line:325:9, line:328:31> '<dependent type>'
| | | |       |-DeclRefExpr 0xaa4ba8 <line:325:9> '<builtin fn type>' Function 0xaa4ab0 '__atomic_compare_exchange' 'void (...)'
| | | |       |-CallExpr 0xaa4c70 <col:35, col:56> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xaa4be8 <col:35, col:40> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |       | `-MemberExpr 0xaa4c40 <col:52> '_Tp' lvalue ->_M_i 0xa9e890
| | | |       |   `-CXXThisExpr 0xaa4c30 <col:52> 'atomic<_Tp> *' implicit this
| | | |       |-CallExpr 0xaa4d20 <line:326:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xaa4cb8 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |       | `-DeclRefExpr 0xaa4d00 <col:24> '_Tp' lvalue ParmVar 0xaa0828 '__e' '_Tp &'
| | | |       |-CallExpr 0xaa4dd0 <line:327:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xaa4d68 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |       | `-DeclRefExpr 0xaa4db0 <col:24> '_Tp' lvalue ParmVar 0xaa08a0 '__i' '_Tp'
| | | |       |-CXXBoolLiteralExpr 0xaa4df8 <line:328:7> 'bool' true
| | | |       |-CXXFunctionalCastExpr 0xaa4e70 <col:13, col:20> 'int' functional cast to int <NoOp>
| | | |       | `-ImplicitCastExpr 0xaa4e58 <col:17> 'int' <IntegralCast> part_of_explicit_cast
| | | |       |   `-ImplicitCastExpr 0xaa4e40 <col:17> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |       |     `-DeclRefExpr 0xaa4e20 <col:17> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa0918 '__s' 'std::memory_order':'std::memory_order'
| | | |       `-CXXFunctionalCastExpr 0xaa4f00 <col:23, col:30> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xaa4ee8 <col:27> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-ImplicitCastExpr 0xaa4ed0 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |             `-DeclRefExpr 0xaa4eb0 <col:27> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa0990 '__f' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xaa0e10 <line:331:7, line:341:7> line:332:7 compare_exchange_weak 'bool (_Tp &, _Tp, std::memory_order, std::memory_order) volatile noexcept'
| | | | |-ParmVarDecl 0xaa0ba8 <col:29, col:34> col:34 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xaa0c20 <col:39, col:43> col:43 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xaa0c98 <col:48, col:61> col:61 referenced __s 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xaa0d10 <line:333:8, col:21> col:21 referenced __f 'std::memory_order':'std::memory_order'
| | | | `-CompoundStmt 0xaa5650 <line:334:7, line:341:7>
| | | |   |-DoStmt 0xaa5250 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | |   | |-CompoundStmt 0xaa5228 <col:6, col:42>
| | | |   | | `-IfStmt 0xaa5208 <line:545:3, line:546:27>
| | | |   | |   |-BinaryOperator 0xaa5190 <line:545:7, col:51> 'bool' '&&'
| | | |   | |   | |-CallExpr 0xaa5040 <col:7, col:36> 'bool'
| | | |   | |   | | `-ImplicitCastExpr 0xaa5028 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | |   | |   | |   `-DeclRefExpr 0xaa4ff8 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | |   | |   | `-UnaryOperator 0xaa5178 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | |   | |   |   `-CXXFunctionalCastExpr 0xaa5150 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | |   | |   |     `-CallExpr 0xaa5110 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/atomic:335:19, col:55> 'bool'
| | | |   | |   |       |-ImplicitCastExpr 0xaa50f8 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | |   | |   |       | `-DeclRefExpr 0xaa50d8 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
| | | |   | |   |       `-ImplicitCastExpr 0xaa5138 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | |   | |   |         `-DeclRefExpr 0xaa50b8 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa0d10 '__f' 'std::memory_order':'std::memory_order'
| | | |   | |   `-CallExpr 0xaa51e8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | |   | |     `-ImplicitCastExpr 0xaa51d0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | |   | |       `-DeclRefExpr 0xaa51b0 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | |   | `-CXXBoolLiteralExpr 0xaa5240 <line:591:51> 'bool' false
| | | |   `-ReturnStmt 0xaa5640 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/atomic:337:2, line:340:31>
| | | |     `-CallExpr 0xaa55f0 <line:337:9, line:340:31> '<dependent type>'
| | | |       |-DeclRefExpr 0xaa5270 <line:337:9> '<builtin fn type>' Function 0xaa4ab0 '__atomic_compare_exchange' 'void (...)'
| | | |       |-CallExpr 0xaa5338 <col:35, col:56> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xaa52b0 <col:35, col:40> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |       | `-MemberExpr 0xaa5308 <col:52> 'volatile _Tp' lvalue ->_M_i 0xa9e890
| | | |       |   `-CXXThisExpr 0xaa52f8 <col:52> 'volatile atomic<_Tp> *' implicit this
| | | |       |-CallExpr 0xaa53e8 <line:338:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xaa5380 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |       | `-DeclRefExpr 0xaa53c8 <col:24> '_Tp' lvalue ParmVar 0xaa0ba8 '__e' '_Tp &'
| | | |       |-CallExpr 0xaa5498 <line:339:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xaa5430 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |       | `-DeclRefExpr 0xaa5478 <col:24> '_Tp' lvalue ParmVar 0xaa0c20 '__i' '_Tp'
| | | |       |-CXXBoolLiteralExpr 0xaa54c0 <line:340:7> 'bool' true
| | | |       |-CXXFunctionalCastExpr 0xaa5538 <col:13, col:20> 'int' functional cast to int <NoOp>
| | | |       | `-ImplicitCastExpr 0xaa5520 <col:17> 'int' <IntegralCast> part_of_explicit_cast
| | | |       |   `-ImplicitCastExpr 0xaa5508 <col:17> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |       |     `-DeclRefExpr 0xaa54e8 <col:17> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa0c98 '__s' 'std::memory_order':'std::memory_order'
| | | |       `-CXXFunctionalCastExpr 0xaa55c8 <col:23, col:30> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xaa55b0 <col:27> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-ImplicitCastExpr 0xaa5598 <col:27> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |             `-DeclRefExpr 0xaa5578 <col:27> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa0d10 '__f' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xaa10d0 <line:343:7, line:347:69> line:344:7 compare_exchange_weak 'bool (_Tp &, _Tp, std::memory_order) noexcept'
| | | | |-ParmVarDecl 0xaa0ef0 <col:29, col:34> col:34 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xaa0f68 <col:39, col:43> col:43 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xaa0fe0 <line:345:8, col:27> col:21 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xaa1fc8 <col:27> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xaa5880 <line:346:7, line:347:69>
| | | |   `-ReturnStmt 0xaa5870 <line:346:9, line:347:66>
| | | |     `-CallExpr 0xaa5830 <line:346:16, line:347:66> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xaa5680 <line:346:16> '<bound member function type>' lvalue
| | | |       |-DeclRefExpr 0xaa56f0 <col:38> '_Tp' lvalue ParmVar 0xaa0ef0 '__e' '_Tp &'
| | | |       |-DeclRefExpr 0xaa5710 <col:43> '_Tp' lvalue ParmVar 0xaa0f68 '__i' '_Tp'
| | | |       |-DeclRefExpr 0xaa5730 <col:48> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa0fe0 '__m' 'std::memory_order':'std::memory_order'
| | | |       `-CallExpr 0xaa57f0 <line:347:38, col:65> 'std::memory_order':'std::memory_order'
| | | |         |-ImplicitCastExpr 0xaa57d8 <col:38> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | |         | `-DeclRefExpr 0xaa57b8 <col:38> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | |         `-ImplicitCastExpr 0xaa5818 <col:62> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | |           `-DeclRefExpr 0xaa5798 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa0fe0 '__m' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xaa1380 <line:349:7, line:353:69> line:350:7 compare_exchange_weak 'bool (_Tp &, _Tp, std::memory_order) volatile noexcept'
| | | | |-ParmVarDecl 0xaa11a8 <col:29, col:34> col:34 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xaa1220 <col:39, col:43> col:43 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xaa1298 <line:351:8, col:27> col:21 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xaa1fe8 <col:27> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xaa5aa8 <line:352:7, line:353:69>
| | | |   `-ReturnStmt 0xaa5a98 <line:352:9, line:353:66>
| | | |     `-CallExpr 0xaa5a58 <line:352:16, line:353:66> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xaa58a8 <line:352:16> '<bound member function type>' lvalue
| | | |       |-DeclRefExpr 0xaa5918 <col:38> '_Tp' lvalue ParmVar 0xaa11a8 '__e' '_Tp &'
| | | |       |-DeclRefExpr 0xaa5938 <col:43> '_Tp' lvalue ParmVar 0xaa1220 '__i' '_Tp'
| | | |       |-DeclRefExpr 0xaa5958 <col:48> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa1298 '__m' 'std::memory_order':'std::memory_order'
| | | |       `-CallExpr 0xaa5a18 <line:353:38, col:65> 'std::memory_order':'std::memory_order'
| | | |         |-ImplicitCastExpr 0xaa5a00 <col:38> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | |         | `-DeclRefExpr 0xaa59e0 <col:38> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | |         `-ImplicitCastExpr 0xaa5a40 <col:62> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | |           `-DeclRefExpr 0xaa59c0 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa1298 '__m' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xaa1670 <line:355:7, line:365:7> line:356:7 compare_exchange_strong 'bool (_Tp &, _Tp, std::memory_order, std::memory_order) noexcept'
| | | | |-ParmVarDecl 0xaa1458 <col:31, col:36> col:36 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xaa14d0 <col:41, col:45> col:45 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xaa1548 <col:50, col:63> col:63 referenced __s 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xaa15c0 <line:357:10, col:23> col:23 referenced __f 'std::memory_order':'std::memory_order'
| | | | `-CompoundStmt 0xaa6168 <line:358:7, line:365:7>
| | | |   |-DoStmt 0xaa5d68 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | |   | |-CompoundStmt 0xaa5d40 <col:6, col:42>
| | | |   | | `-IfStmt 0xaa5d20 <line:545:3, line:546:27>
| | | |   | |   |-BinaryOperator 0xaa5ca8 <line:545:7, col:51> 'bool' '&&'
| | | |   | |   | |-CallExpr 0xaa5b58 <col:7, col:36> 'bool'
| | | |   | |   | | `-ImplicitCastExpr 0xaa5b40 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | |   | |   | |   `-DeclRefExpr 0xaa5b10 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | |   | |   | `-UnaryOperator 0xaa5c90 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | |   | |   |   `-CXXFunctionalCastExpr 0xaa5c68 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | |   | |   |     `-CallExpr 0xaa5c28 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/atomic:359:19, col:55> 'bool'
| | | |   | |   |       |-ImplicitCastExpr 0xaa5c10 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | |   | |   |       | `-DeclRefExpr 0xaa5bf0 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
| | | |   | |   |       `-ImplicitCastExpr 0xaa5c50 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | |   | |   |         `-DeclRefExpr 0xaa5bd0 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa15c0 '__f' 'std::memory_order':'std::memory_order'
| | | |   | |   `-CallExpr 0xaa5d00 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | |   | |     `-ImplicitCastExpr 0xaa5ce8 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | |   | |       `-DeclRefExpr 0xaa5cc8 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | |   | `-CXXBoolLiteralExpr 0xaa5d58 <line:591:51> 'bool' false
| | | |   `-ReturnStmt 0xaa6158 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/atomic:361:2, line:364:32>
| | | |     `-CallExpr 0xaa6108 <line:361:9, line:364:32> '<dependent type>'
| | | |       |-DeclRefExpr 0xaa5d88 <line:361:9> '<builtin fn type>' Function 0xaa4ab0 '__atomic_compare_exchange' 'void (...)'
| | | |       |-CallExpr 0xaa5e50 <col:35, col:56> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xaa5dc8 <col:35, col:40> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |       | `-MemberExpr 0xaa5e20 <col:52> '_Tp' lvalue ->_M_i 0xa9e890
| | | |       |   `-CXXThisExpr 0xaa5e10 <col:52> 'atomic<_Tp> *' implicit this
| | | |       |-CallExpr 0xaa5f00 <line:362:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xaa5e98 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |       | `-DeclRefExpr 0xaa5ee0 <col:24> '_Tp' lvalue ParmVar 0xaa1458 '__e' '_Tp &'
| | | |       |-CallExpr 0xaa5fb0 <line:363:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xaa5f48 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |       | `-DeclRefExpr 0xaa5f90 <col:24> '_Tp' lvalue ParmVar 0xaa14d0 '__i' '_Tp'
| | | |       |-CXXBoolLiteralExpr 0xaa5fd8 <line:364:7> 'bool' false
| | | |       |-CXXFunctionalCastExpr 0xaa6050 <col:14, col:21> 'int' functional cast to int <NoOp>
| | | |       | `-ImplicitCastExpr 0xaa6038 <col:18> 'int' <IntegralCast> part_of_explicit_cast
| | | |       |   `-ImplicitCastExpr 0xaa6020 <col:18> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |       |     `-DeclRefExpr 0xaa6000 <col:18> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa1548 '__s' 'std::memory_order':'std::memory_order'
| | | |       `-CXXFunctionalCastExpr 0xaa60e0 <col:24, col:31> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xaa60c8 <col:28> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-ImplicitCastExpr 0xaa60b0 <col:28> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |             `-DeclRefExpr 0xaa6090 <col:28> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa15c0 '__f' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xaa1958 <line:367:7, line:377:7> line:368:7 compare_exchange_strong 'bool (_Tp &, _Tp, std::memory_order, std::memory_order) volatile noexcept'
| | | | |-ParmVarDecl 0xaa1740 <col:31, col:36> col:36 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xaa17b8 <col:41, col:45> col:45 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xaa1830 <col:50, col:63> col:63 referenced __s 'std::memory_order':'std::memory_order'
| | | | |-ParmVarDecl 0xaa18a8 <line:369:10, col:23> col:23 referenced __f 'std::memory_order':'std::memory_order'
| | | | `-CompoundStmt 0xaa6830 <line:370:7, line:377:7>
| | | |   |-DoStmt 0xaa6430 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:591:3, col:56>
| | | |   | |-CompoundStmt 0xaa6408 <col:6, col:42>
| | | |   | | `-IfStmt 0xaa63e8 <line:545:3, line:546:27>
| | | |   | |   |-BinaryOperator 0xaa6370 <line:545:7, col:51> 'bool' '&&'
| | | |   | |   | |-CallExpr 0xaa6220 <col:7, col:36> 'bool'
| | | |   | |   | | `-ImplicitCastExpr 0xaa6208 <col:7, col:12> 'bool (*)() noexcept' <FunctionToPointerDecay>
| | | |   | |   | |   `-DeclRefExpr 0xaa61d8 <col:7, col:12> 'bool () noexcept' lvalue Function 0x86c380 '__is_constant_evaluated' 'bool () noexcept'
| | | |   | |   | `-UnaryOperator 0xaa6358 <col:41, col:51> 'bool' prefix '!' cannot overflow
| | | |   | |   |   `-CXXFunctionalCastExpr 0xaa6330 <col:42, col:51> 'bool' functional cast to _Bool <NoOp>
| | | |   | |   |     `-CallExpr 0xaa62f0 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/atomic:371:19, col:55> 'bool'
| | | |   | |   |       |-ImplicitCastExpr 0xaa62d8 <col:19> 'bool (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | |   | |   |       | `-DeclRefExpr 0xaa62b8 <col:19> 'bool (std::memory_order) noexcept' lvalue Function 0xa52d90 '__is_valid_cmpexch_failure_order' 'bool (std::memory_order) noexcept'
| | | |   | |   |       `-ImplicitCastExpr 0xaa6318 <col:52> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | |   | |   |         `-DeclRefExpr 0xaa6298 <col:52> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa18a8 '__f' 'std::memory_order':'std::memory_order'
| | | |   | |   `-CallExpr 0xaa63c8 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/x86_64-linux-gnu/c++/12/bits/c++config.h:546:5, col:27> 'void'
| | | |   | |     `-ImplicitCastExpr 0xaa63b0 <col:5> 'void (*)() __attribute__((noreturn)) noexcept' <BuiltinFnToFnPtr>
| | | |   | |       `-DeclRefExpr 0xaa6390 <col:5> '<builtin fn type>' Function 0xa5bfa0 '__builtin_unreachable' 'void () __attribute__((noreturn)) noexcept'
| | | |   | `-CXXBoolLiteralExpr 0xaa6420 <line:591:51> 'bool' false
| | | |   `-ReturnStmt 0xaa6820 </usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/atomic:373:2, line:376:32>
| | | |     `-CallExpr 0xaa67d0 <line:373:9, line:376:32> '<dependent type>'
| | | |       |-DeclRefExpr 0xaa6450 <line:373:9> '<builtin fn type>' Function 0xaa4ab0 '__atomic_compare_exchange' 'void (...)'
| | | |       |-CallExpr 0xaa6518 <col:35, col:56> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xaa6490 <col:35, col:40> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |       | `-MemberExpr 0xaa64e8 <col:52> 'volatile _Tp' lvalue ->_M_i 0xa9e890
| | | |       |   `-CXXThisExpr 0xaa64d8 <col:52> 'volatile atomic<_Tp> *' implicit this
| | | |       |-CallExpr 0xaa65c8 <line:374:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xaa6560 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |       | `-DeclRefExpr 0xaa65a8 <col:24> '_Tp' lvalue ParmVar 0xaa1740 '__e' '_Tp &'
| | | |       |-CallExpr 0xaa6678 <line:375:7, col:27> '<dependent type>'
| | | |       | |-UnresolvedLookupExpr 0xaa6610 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '__addressof' 0x90aea0
| | | |       | `-DeclRefExpr 0xaa6658 <col:24> '_Tp' lvalue ParmVar 0xaa17b8 '__i' '_Tp'
| | | |       |-CXXBoolLiteralExpr 0xaa66a0 <line:376:7> 'bool' false
| | | |       |-CXXFunctionalCastExpr 0xaa6718 <col:14, col:21> 'int' functional cast to int <NoOp>
| | | |       | `-ImplicitCastExpr 0xaa6700 <col:18> 'int' <IntegralCast> part_of_explicit_cast
| | | |       |   `-ImplicitCastExpr 0xaa66e8 <col:18> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |       |     `-DeclRefExpr 0xaa66c8 <col:18> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa1830 '__s' 'std::memory_order':'std::memory_order'
| | | |       `-CXXFunctionalCastExpr 0xaa67a8 <col:24, col:31> 'int' functional cast to int <NoOp>
| | | |         `-ImplicitCastExpr 0xaa6790 <col:28> 'int' <IntegralCast> part_of_explicit_cast
| | | |           `-ImplicitCastExpr 0xaa6778 <col:28> 'std::memory_order':'std::memory_order' <LValueToRValue> part_of_explicit_cast
| | | |             `-DeclRefExpr 0xaa6758 <col:28> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa18a8 '__f' 'std::memory_order':'std::memory_order'
| | | |-CXXMethodDecl 0xaa1bd0 <line:379:7, line:383:71> line:380:7 compare_exchange_strong 'bool (_Tp &, _Tp, std::memory_order) noexcept'
| | | | |-ParmVarDecl 0xaa1a38 <col:31, col:36> col:36 referenced __e '_Tp &'
| | | | |-ParmVarDecl 0xaa1ab0 <col:41, col:45> col:45 referenced __i '_Tp'
| | | | |-ParmVarDecl 0xaa1b28 <line:381:11, col:30> col:24 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | | `-DeclRefExpr 0xaa2008 <col:30> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | | `-CompoundStmt 0xaa6a60 <line:382:7, line:383:71>
| | | |   `-ReturnStmt 0xaa6a50 <line:382:9, line:383:68>
| | | |     `-CallExpr 0xaa6a10 <line:382:16, line:383:68> '<dependent type>'
| | | |       |-UnresolvedMemberExpr 0xaa6860 <line:382:16> '<bound member function type>' lvalue
| | | |       |-DeclRefExpr 0xaa68d0 <col:40> '_Tp' lvalue ParmVar 0xaa1a38 '__e' '_Tp &'
| | | |       |-DeclRefExpr 0xaa68f0 <col:45> '_Tp' lvalue ParmVar 0xaa1ab0 '__i' '_Tp'
| | | |       |-DeclRefExpr 0xaa6910 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa1b28 '__m' 'std::memory_order':'std::memory_order'
| | | |       `-CallExpr 0xaa69d0 <line:383:40, col:67> 'std::memory_order':'std::memory_order'
| | | |         |-ImplicitCastExpr 0xaa69b8 <col:40> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | | |         | `-DeclRefExpr 0xaa6998 <col:40> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | | |         `-ImplicitCastExpr 0xaa69f8 <col:64> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | | |           `-DeclRefExpr 0xaa6978 <col:64> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa1b28 '__m' 'std::memory_order':'std::memory_order'
| | | `-CXXMethodDecl 0xaa1e40 <line:385:7, line:389:71> line:386:7 compare_exchange_strong 'bool (_Tp &, _Tp, std::memory_order) volatile noexcept'
| | |   |-ParmVarDecl 0xaa1ca8 <col:31, col:36> col:36 referenced __e '_Tp &'
| | |   |-ParmVarDecl 0xaa1d20 <col:41, col:45> col:45 referenced __i '_Tp'
| | |   |-ParmVarDecl 0xaa1d98 <line:387:8, col:27> col:21 referenced __m 'std::memory_order':'std::memory_order' cinit
| | |   | `-DeclRefExpr 0xaa2028 <col:27> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | |   `-CompoundStmt 0xaa6cc0 <line:388:7, line:389:71>
| | |     `-ReturnStmt 0xaa6cb0 <line:388:9, line:389:68>
| | |       `-CallExpr 0xaa6c70 <line:388:16, line:389:68> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0xaa6ac0 <line:388:16> '<bound member function type>' lvalue
| | |         |-DeclRefExpr 0xaa6b30 <col:40> '_Tp' lvalue ParmVar 0xaa1ca8 '__e' '_Tp &'
| | |         |-DeclRefExpr 0xaa6b50 <col:45> '_Tp' lvalue ParmVar 0xaa1d20 '__i' '_Tp'
| | |         |-DeclRefExpr 0xaa6b70 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa1d98 '__m' 'std::memory_order':'std::memory_order'
| | |         `-CallExpr 0xaa6c30 <line:389:40, col:67> 'std::memory_order':'std::memory_order'
| | |           |-ImplicitCastExpr 0xaa6c18 <col:40> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | |           | `-DeclRefExpr 0xaa6bf8 <col:40> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | |           `-ImplicitCastExpr 0xaa6c58 <col:64> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |             `-DeclRefExpr 0xaa6bd8 <col:64> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa1d98 '__m' 'std::memory_order':'std::memory_order'
| | |-ClassTemplateSpecialization 0xa91368 'atomic'
| | |-ClassTemplateSpecialization 0xaae758 'atomic'
| | |-ClassTemplateSpecialization 0xac0da8 'atomic'
| | |-ClassTemplateSpecialization 0xac93b0 'atomic'
| | |-ClassTemplateSpecialization 0xad3a00 'atomic'
| | |-ClassTemplateSpecialization 0xadc000 'atomic'
| | |-ClassTemplateSpecialization 0xae4610 'atomic'
| | |-ClassTemplateSpecialization 0xaed080 'atomic'
| | |-ClassTemplateSpecialization 0xaf56c0 'atomic'
| | |-ClassTemplateSpecialization 0xb00b50 'atomic'
| | |-ClassTemplateSpecialization 0xb091b0 'atomic'
| | |-ClassTemplateSpecialization 0xb135b0 'atomic'
| | |-ClassTemplateSpecialization 0xb1f068 'atomic'
| | |-ClassTemplateSpecialization 0xb27688 'atomic'
| | `-ClassTemplateSpecialization 0xb32298 'atomic'
| |-ClassTemplatePartialSpecializationDecl 0xaa6e20 prev 0xa54b90 <line:414:3, line:704:5> line:415:12 struct atomic definition
| | |-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists
| | | |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| | | |-MoveConstructor
| | | |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| | | |-MoveAssignment
| | | `-Destructor irrelevant non_trivial user_declared
| | |-TemplateArgument type 'type-parameter-0-0 *'
| | | `-PointerType 0x8fb540 'type-parameter-0-0 *' dependent
| | |   `-TemplateTypeParmType 0x8fb400 'type-parameter-0-0' dependent depth 0 index 0
| | |-TemplateTypeParmDecl 0xaa6cd8 <line:414:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | |-CXXRecordDecl 0xaa7008 <line:415:5, col:12> col:12 implicit referenced struct atomic
| | |-TypeAliasDecl 0xaa70a8 <line:417:7, col:29> col:13 value_type '_Tp *'
| | | `-PointerType 0xaa6d70 '_Tp *' dependent
| | |   `-TemplateTypeParmType 0xaa6d30 '_Tp' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0xaa6cd8 '_Tp'
| | |-TypeAliasDecl 0xaa7118 <line:418:7, col:31> col:13 difference_type 'std::ptrdiff_t':'long'
| | | `-TypedefType 0xa84010 'std::ptrdiff_t' sugar
| | |   |-Typedef 0x86b908 'ptrdiff_t'
| | |   `-BuiltinType 0x8262c0 'long'
| | |-TypedefDecl 0xaa7188 <line:420:7, col:23> col:23 referenced __pointer_type '_Tp *'
| | | `-PointerType 0xaa6d70 '_Tp *' dependent
| | |   `-TemplateTypeParmType 0xaa6d30 '_Tp' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0xaa6cd8 '_Tp'
| | |-TypedefDecl 0xaa7270 <line:421:7, col:35> col:35 referenced __base_type '__atomic_base<_Tp *>'
| | | `-TemplateSpecializationType 0xaa71f0 '__atomic_base<_Tp *>' dependent __atomic_base
| | |   `-TemplateArgument type '_Tp *'
| | |     `-PointerType 0xaa6d70 '_Tp *' dependent
| | |       `-TemplateTypeParmType 0xaa6d30 '_Tp' dependent depth 0 index 0
| | |         `-TemplateTypeParm 0xaa6cd8 '_Tp'
| | |-FieldDecl 0xaa7300 <line:422:7, col:21> col:21 referenced _M_b 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>'
| | |-CXXConstructorDecl 0xaa73b8 <line:424:7, col:33> col:7 atomic<type-parameter-0-0 *> 'void () noexcept' default
| | |-CXXDestructorDecl 0xaa74b0 <line:425:7, col:34> col:7 ~atomic<type-parameter-0-0 *> 'void () noexcept' default
| | |-CXXConstructorDecl 0xaa7658 <line:426:7, col:36> col:7 atomic<type-parameter-0-0 *> 'void (const atomic<type-parameter-0-0 *> &)' delete
| | | `-ParmVarDecl 0xaa7598 <col:14, col:26> col:27 'const atomic<type-parameter-0-0 *> &'
| | |-CXXMethodDecl 0xaa7818 <line:427:7, col:47> col:15 operator= 'atomic<type-parameter-0-0 *> &(const atomic<type-parameter-0-0 *> &)' delete
| | | `-ParmVarDecl 0xaa7728 <col:25, col:37> col:38 'const atomic<type-parameter-0-0 *> &'
| | |-CXXMethodDecl 0xaa79c8 <line:428:7, col:56> col:15 operator= 'atomic<type-parameter-0-0 *> &(const atomic<type-parameter-0-0 *> &) volatile' delete
| | | `-ParmVarDecl 0xaa78d0 <col:25, col:37> col:38 'const atomic<type-parameter-0-0 *> &'
| | |-CXXConstructorDecl 0xaa7b80 <line:430:7, col:67> col:17 constexpr atomic<type-parameter-0-0 *> 'void (std::atomic<type-parameter-0-0 *>::__pointer_type) noexcept'
| | | |-ParmVarDecl 0xaa7ab0 <col:24, col:39> col:39 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-CXXCtorInitializer Field 0xaa7300 '_M_b' 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>'
| | | | `-ParenListExpr 0xaac040 <col:59, col:63> 'NULL TYPE'
| | | |   `-DeclRefExpr 0xaac020 <col:60> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaa7ab0 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | `-CompoundStmt 0xaac088 <col:65, col:67>
| | |-CXXConversionDecl 0xaa7cd0 <line:432:7, line:433:38> line:432:7 operator type-parameter-0-0 * 'std::atomic<type-parameter-0-0 *>::__pointer_type () const noexcept'
| | | `-CompoundStmt 0xaac120 <line:433:7, col:38>
| | |   `-ReturnStmt 0xaac110 <col:9, col:35>
| | |     `-CXXUnresolvedConstructExpr 0xaac0e8 <col:16, col:35> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       `-MemberExpr 0xaac0b8 <col:31> 'const std::atomic<type-parameter-0-0 *>::__base_type':'const __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |         `-CXXThisExpr 0xaac0a8 <col:31> 'const atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXConversionDecl 0xaa7e10 <line:435:7, line:436:38> line:435:7 operator type-parameter-0-0 * 'std::atomic<type-parameter-0-0 *>::__pointer_type () const volatile noexcept'
| | | `-CompoundStmt 0xaac1c0 <line:436:7, col:38>
| | |   `-ReturnStmt 0xaac1b0 <col:9, col:35>
| | |     `-CXXUnresolvedConstructExpr 0xaac188 <col:16, col:35> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       `-MemberExpr 0xaac158 <col:31> 'const volatile std::atomic<type-parameter-0-0 *>::__base_type':'const volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |         `-CXXThisExpr 0xaac148 <col:31> 'const volatile atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xaa7fb0 <line:438:7, line:440:37> line:439:7 operator= 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::atomic<type-parameter-0-0 *>::__pointer_type) noexcept'
| | | |-ParmVarDecl 0xaa7ee8 <col:17, col:32> col:32 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | `-CompoundStmt 0xaac2b8 <line:440:7, col:37>
| | |   `-ReturnStmt 0xaac2a8 <col:9, col:34>
| | |     `-CallExpr 0xaac280 <col:16, col:34> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaac218 <col:16, col:29> '<dependent type>' lvalue .operator=
| | |       | `-MemberExpr 0xaac1e8 <col:16> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaac1d8 <col:16> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xaac260 <col:31> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaa7ee8 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |-CXXMethodDecl 0xaa8140 <line:442:7, line:444:37> line:443:7 operator= 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::atomic<type-parameter-0-0 *>::__pointer_type) volatile noexcept'
| | | |-ParmVarDecl 0xaa8078 <col:17, col:32> col:32 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | `-CompoundStmt 0xaac3b0 <line:444:7, col:37>
| | |   `-ReturnStmt 0xaac3a0 <col:9, col:34>
| | |     `-CallExpr 0xaac378 <col:16, col:34> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaac310 <col:16, col:29> '<dependent type>' lvalue .operator=
| | |       | `-MemberExpr 0xaac2e0 <col:16> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaac2d0 <col:16> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xaac358 <col:31> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaa8078 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |-CXXMethodDecl 0xaa82e0 <line:446:7, line:453:7> line:447:7 operator++ 'std::atomic<type-parameter-0-0 *>::__pointer_type (int) noexcept'
| | | |-ParmVarDecl 0xaa8210 <col:18> col:21 'int'
| | | `-CompoundStmt 0xaac450 <line:448:7, line:453:7>
| | |   `-ReturnStmt 0xaac440 <line:452:2, col:13>
| | |     `-UnaryOperator 0xaac428 <col:9, col:13> '<dependent type>' postfix '++' cannot overflow
| | |       `-MemberExpr 0xaac3d8 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |         `-CXXThisExpr 0xaac3c8 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xaa8470 <line:455:7, line:462:7> line:456:7 operator++ 'std::atomic<type-parameter-0-0 *>::__pointer_type (int) volatile noexcept'
| | | |-ParmVarDecl 0xaa83a0 <col:18> col:21 'int'
| | | `-CompoundStmt 0xaac4f0 <line:457:7, line:462:7>
| | |   `-ReturnStmt 0xaac4e0 <line:461:2, col:13>
| | |     `-UnaryOperator 0xaac4c8 <col:9, col:13> '<dependent type>' postfix '++' cannot overflow
| | |       `-MemberExpr 0xaac478 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |         `-CXXThisExpr 0xaac468 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xaa85d8 <line:464:7, line:471:7> line:465:7 operator-- 'std::atomic<type-parameter-0-0 *>::__pointer_type (int) noexcept'
| | | |-ParmVarDecl 0xaa8540 <col:18> col:21 'int'
| | | `-CompoundStmt 0xaac590 <line:466:7, line:471:7>
| | |   `-ReturnStmt 0xaac580 <line:470:2, col:13>
| | |     `-UnaryOperator 0xaac568 <col:9, col:13> '<dependent type>' postfix '--' cannot overflow
| | |       `-MemberExpr 0xaac518 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |         `-CXXThisExpr 0xaac508 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xaa8730 <line:473:7, line:480:7> line:474:7 operator-- 'std::atomic<type-parameter-0-0 *>::__pointer_type (int) volatile noexcept'
| | | |-ParmVarDecl 0xaa8698 <col:18> col:21 'int'
| | | `-CompoundStmt 0xaac630 <line:475:7, line:480:7>
| | |   `-ReturnStmt 0xaac620 <line:479:2, col:13>
| | |     `-UnaryOperator 0xaac608 <col:9, col:13> '<dependent type>' postfix '--' cannot overflow
| | |       `-MemberExpr 0xaac5b8 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |         `-CXXThisExpr 0xaac5a8 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xaa8840 <line:482:7, line:489:7> line:483:7 operator++ 'std::atomic<type-parameter-0-0 *>::__pointer_type () noexcept'
| | | `-CompoundStmt 0xaac6b0 <line:484:7, line:489:7>
| | |   `-ReturnStmt 0xaac6a0 <line:488:2, col:11>
| | |     `-UnaryOperator 0xaac688 <col:9, col:11> '<dependent type>' prefix '++' cannot overflow
| | |       `-MemberExpr 0xaac658 <col:11> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |         `-CXXThisExpr 0xaac648 <col:11> 'atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xaa8940 <line:491:7, line:498:7> line:492:7 operator++ 'std::atomic<type-parameter-0-0 *>::__pointer_type () volatile noexcept'
| | | `-CompoundStmt 0xaac730 <line:493:7, line:498:7>
| | |   `-ReturnStmt 0xaac720 <line:497:2, col:11>
| | |     `-UnaryOperator 0xaac708 <col:9, col:11> '<dependent type>' prefix '++' cannot overflow
| | |       `-MemberExpr 0xaac6d8 <col:11> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |         `-CXXThisExpr 0xaac6c8 <col:11> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xaa8a18 <line:500:7, line:507:7> line:501:7 operator-- 'std::atomic<type-parameter-0-0 *>::__pointer_type () noexcept'
| | | `-CompoundStmt 0xaac7b0 <line:502:7, line:507:7>
| | |   `-ReturnStmt 0xaac7a0 <line:506:2, col:11>
| | |     `-UnaryOperator 0xaac788 <col:9, col:11> '<dependent type>' prefix '--' cannot overflow
| | |       `-MemberExpr 0xaac758 <col:11> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |         `-CXXThisExpr 0xaac748 <col:11> 'atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xaa8b08 <line:509:7, line:516:7> line:510:7 operator-- 'std::atomic<type-parameter-0-0 *>::__pointer_type () volatile noexcept'
| | | `-CompoundStmt 0xaac830 <line:511:7, line:516:7>
| | |   `-ReturnStmt 0xaac820 <line:515:2, col:11>
| | |     `-UnaryOperator 0xaac808 <col:9, col:11> '<dependent type>' prefix '--' cannot overflow
| | |       `-MemberExpr 0xaac7d8 <col:11> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |         `-CXXThisExpr 0xaac7c8 <col:11> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xaa8c90 <line:518:7, line:525:7> line:519:7 operator+= 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) noexcept'
| | | |-ParmVarDecl 0xaa8bc8 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
| | | `-CompoundStmt 0xaac928 <line:520:7, line:525:7>
| | |   `-ReturnStmt 0xaac918 <line:524:2, col:28>
| | |     `-CallExpr 0xaac8f0 <col:9, col:28> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaac888 <col:9, col:22> '<dependent type>' lvalue .operator+=
| | |       | `-MemberExpr 0xaac858 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaac848 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xaac8d0 <col:25> 'std::ptrdiff_t':'long' lvalue ParmVar 0xaa8bc8 '__d' 'std::ptrdiff_t':'long'
| | |-CXXMethodDecl 0xaa8e10 <line:527:7, line:534:7> line:528:7 operator+= 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) volatile noexcept'
| | | |-ParmVarDecl 0xaa8d48 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
| | | `-CompoundStmt 0xaaca20 <line:529:7, line:534:7>
| | |   `-ReturnStmt 0xaaca10 <line:533:2, col:28>
| | |     `-CallExpr 0xaac9e8 <col:9, col:28> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaac980 <col:9, col:22> '<dependent type>' lvalue .operator+=
| | |       | `-MemberExpr 0xaac950 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaac940 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xaac9c8 <col:25> 'std::ptrdiff_t':'long' lvalue ParmVar 0xaa8d48 '__d' 'std::ptrdiff_t':'long'
| | |-CXXMethodDecl 0xaa8f70 <line:536:7, line:543:7> line:537:7 operator-= 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) noexcept'
| | | |-ParmVarDecl 0xaa8ed8 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
| | | `-CompoundStmt 0xaacb28 <line:538:7, line:543:7>
| | |   `-ReturnStmt 0xaacb18 <line:542:2, col:28>
| | |     `-CallExpr 0xaacaf0 <col:9, col:28> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaaca78 <col:9, col:22> '<dependent type>' lvalue .operator-=
| | |       | `-MemberExpr 0xaaca48 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaaca38 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xaacac0 <col:25> 'std::ptrdiff_t':'long' lvalue ParmVar 0xaa8ed8 '__d' 'std::ptrdiff_t':'long'
| | |-CXXMethodDecl 0xaa90c0 <line:545:7, line:552:7> line:546:7 operator-= 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t) volatile noexcept'
| | | |-ParmVarDecl 0xaa9028 <col:18, col:28> col:28 referenced __d 'std::ptrdiff_t':'long'
| | | `-CompoundStmt 0xaacc20 <line:547:7, line:552:7>
| | |   `-ReturnStmt 0xaacc10 <line:551:2, col:28>
| | |     `-CallExpr 0xaacbe8 <col:9, col:28> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaacb80 <col:9, col:22> '<dependent type>' lvalue .operator-=
| | |       | `-MemberExpr 0xaacb50 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaacb40 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xaacbc8 <col:25> 'std::ptrdiff_t':'long' lvalue ParmVar 0xaa9028 '__d' 'std::ptrdiff_t':'long'
| | |-CXXMethodDecl 0xaa91a0 <line:554:7, line:556:37> line:555:7 is_lock_free 'bool () const noexcept'
| | | `-CompoundStmt 0xaaccf0 <line:556:7, col:37>
| | |   `-ReturnStmt 0xaacce0 <col:9, col:34>
| | |     `-CallExpr 0xaaccc0 <col:16, col:34> '<dependent type>'
| | |       `-CXXDependentScopeMemberExpr 0xaacc78 <col:16, col:21> '<dependent type>' lvalue .is_lock_free
| | |         `-MemberExpr 0xaacc48 <col:16> 'const std::atomic<type-parameter-0-0 *>::__base_type':'const __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |           `-CXXThisExpr 0xaacc38 <col:16> 'const atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xaa9268 <line:558:7, line:560:37> line:559:7 is_lock_free 'bool () const volatile noexcept'
| | | `-CompoundStmt 0xaacdc0 <line:560:7, col:37>
| | |   `-ReturnStmt 0xaacdb0 <col:9, col:34>
| | |     `-CallExpr 0xaacd90 <col:16, col:34> '<dependent type>'
| | |       `-CXXDependentScopeMemberExpr 0xaacd48 <col:16, col:21> '<dependent type>' lvalue .is_lock_free
| | |         `-MemberExpr 0xaacd18 <col:16> 'const volatile std::atomic<type-parameter-0-0 *>::__base_type':'const volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |           `-CXXThisExpr 0xaacd08 <col:16> 'const volatile atomic<type-parameter-0-0 *> *' implicit this
| | |-CXXMethodDecl 0xaa9480 <line:567:7, line:570:38> line:568:7 store 'void (std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xaa9328 <col:13, col:28> col:28 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xaa93a0 <line:569:6, col:25> col:19 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xaabe60 <col:25> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xaacee0 <line:570:7, col:38>
| | |   `-ReturnStmt 0xaaced0 <col:9, col:35>
| | |     `-CallExpr 0xaacea0 <col:16, col:35> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaace18 <col:16, col:21> '<dependent type>' lvalue .store
| | |       | `-MemberExpr 0xaacde8 <col:16> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaacdd8 <col:16> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xaace60 <col:27> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaa9328 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       `-DeclRefExpr 0xaace80 <col:32> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa93a0 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaa9690 <line:572:7, line:575:38> line:573:7 store 'void (std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xaa9540 <col:13, col:28> col:28 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xaa95b8 <line:574:6, col:25> col:19 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xaabe80 <col:25> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xaad000 <line:575:7, col:38>
| | |   `-ReturnStmt 0xaacff0 <col:9, col:35>
| | |     `-CallExpr 0xaacfc0 <col:16, col:35> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaacf38 <col:16, col:21> '<dependent type>' lvalue .store
| | |       | `-MemberExpr 0xaacf08 <col:16> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaacef8 <col:16> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xaacf80 <col:27> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaa9540 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       `-DeclRefExpr 0xaacfa0 <col:32> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa95b8 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaa9830 <line:577:7, line:579:32> line:578:7 load 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::memory_order) const noexcept'
| | | |-ParmVarDecl 0xaa9760 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xaabea0 <col:31> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xaad0f8 <line:579:7, col:32>
| | |   `-ReturnStmt 0xaad0e8 <col:9, col:29>
| | |     `-CallExpr 0xaad0c0 <col:16, col:29> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaad058 <col:16, col:21> '<dependent type>' lvalue .load
| | |       | `-MemberExpr 0xaad028 <col:16> 'const std::atomic<type-parameter-0-0 *>::__base_type':'const __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaad018 <col:16> 'const atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xaad0a0 <col:26> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa9760 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaa99b0 <line:581:7, line:583:32> line:582:7 load 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::memory_order) const volatile noexcept'
| | | |-ParmVarDecl 0xaa98e8 <col:12, col:31> col:25 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xaabec0 <col:31> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xaad1f0 <line:583:7, col:32>
| | |   `-ReturnStmt 0xaad1e0 <col:9, col:29>
| | |     `-CallExpr 0xaad1b8 <col:16, col:29> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaad150 <col:16, col:21> '<dependent type>' lvalue .load
| | |       | `-MemberExpr 0xaad120 <col:16> 'const volatile std::atomic<type-parameter-0-0 *>::__base_type':'const volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaad110 <col:16> 'const volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       `-DeclRefExpr 0xaad198 <col:26> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa98e8 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaa9bd0 <line:585:7, line:588:41> line:586:7 exchange 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xaa9a78 <col:16, col:31> col:31 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xaa9af0 <line:587:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xaabee0 <col:28> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xaad310 <line:588:7, col:41>
| | |   `-ReturnStmt 0xaad300 <col:9, col:38>
| | |     `-CallExpr 0xaad2d0 <col:16, col:38> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaad248 <col:16, col:21> '<dependent type>' lvalue .exchange
| | |       | `-MemberExpr 0xaad218 <col:16> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaad208 <col:16> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xaad290 <col:30> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaa9a78 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       `-DeclRefExpr 0xaad2b0 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa9af0 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaa9de0 <line:590:7, line:593:41> line:591:7 exchange 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xaa9c90 <col:16, col:31> col:31 referenced __p 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xaa9d08 <line:592:9, col:28> col:22 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xaabf00 <col:28> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xaad430 <line:593:7, col:41>
| | |   `-ReturnStmt 0xaad420 <col:9, col:38>
| | |     `-CallExpr 0xaad3f0 <col:16, col:38> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaad368 <col:16, col:21> '<dependent type>' lvalue .exchange
| | |       | `-MemberExpr 0xaad338 <col:16> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaad328 <col:16> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xaad3b0 <col:30> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaa9c90 '__p' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       `-DeclRefExpr 0xaad3d0 <col:35> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa9d08 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaaa140 <line:595:7, line:598:68> line:596:7 compare_exchange_weak 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xaa9ed8 <col:29, col:45> col:45 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xaa9f50 <col:51, col:66> col:66 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xaa9fc8 <line:597:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xaaa040 <col:27, col:40> col:40 referenced __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xaad5a0 <line:598:7, col:68>
| | |   `-ReturnStmt 0xaad590 <col:9, col:65>
| | |     `-CallExpr 0xaad550 <col:16, col:65> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaad488 <col:16, col:21> '<dependent type>' lvalue .compare_exchange_weak
| | |       | `-MemberExpr 0xaad458 <col:16> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaad448 <col:16> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xaad4d0 <col:43> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaa9ed8 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xaad4f0 <col:49> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaa9f50 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xaad510 <col:55> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaa9fc8 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-DeclRefExpr 0xaad530 <col:61> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaaa040 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaaa470 <line:600:7, line:604:68> line:601:7 compare_exchange_weak 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xaaa210 <col:29, col:45> col:45 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xaaa288 <col:51, col:66> col:66 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xaaa300 <line:602:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xaaa378 <line:603:8, col:21> col:21 referenced __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xaad710 <line:604:7, col:68>
| | |   `-ReturnStmt 0xaad700 <col:9, col:65>
| | |     `-CallExpr 0xaad6c0 <col:16, col:65> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaad5f8 <col:16, col:21> '<dependent type>' lvalue .compare_exchange_weak
| | |       | `-MemberExpr 0xaad5c8 <col:16> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaad5b8 <col:16> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xaad640 <col:43> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaaa210 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xaad660 <col:49> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaaa288 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xaad680 <col:55> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaaa300 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-DeclRefExpr 0xaad6a0 <col:61> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaaa378 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaaa770 <line:606:7, line:612:7> line:607:7 compare_exchange_weak 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xaaa550 <col:29, col:45> col:45 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xaaa5c8 <col:51, col:66> col:66 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xaaa640 <line:608:8, col:27> col:21 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xaabf20 <col:27> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xaad938 <line:609:7, line:612:7>
| | |   `-ReturnStmt 0xaad928 <line:610:2, line:611:38>
| | |     `-CallExpr 0xaad8e8 <line:610:9, line:611:38> '<dependent type>'
| | |       |-UnresolvedMemberExpr 0xaad738 <line:610:9> '<bound member function type>' lvalue
| | |       |-DeclRefExpr 0xaad7a8 <col:31> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaaa550 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xaad7c8 <col:37> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaaa5c8 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xaad7e8 <col:43> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaaa640 '__m' 'std::memory_order':'std::memory_order'
| | |       `-CallExpr 0xaad8a8 <line:611:10, col:37> 'std::memory_order':'std::memory_order'
| | |         |-ImplicitCastExpr 0xaad890 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0xaad870 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | |         `-ImplicitCastExpr 0xaad8d0 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |           `-DeclRefExpr 0xaad850 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaaa640 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaaaae0 <line:614:7, line:620:7> line:615:7 compare_exchange_weak 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xaaa848 <col:29, col:45> col:45 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xaaa8c0 <col:51, col:66> col:66 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xaaa938 <line:616:7, col:26> col:20 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xaabf40 <col:26> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xaadb60 <line:617:7, line:620:7>
| | |   `-ReturnStmt 0xaadb50 <line:618:2, line:619:38>
| | |     `-CallExpr 0xaadb10 <line:618:9, line:619:38> '<dependent type>'
| | |       |-UnresolvedMemberExpr 0xaad960 <line:618:9> '<bound member function type>' lvalue
| | |       |-DeclRefExpr 0xaad9d0 <col:31> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaaa848 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xaad9f0 <col:37> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaaa8c0 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xaada10 <col:43> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaaa938 '__m' 'std::memory_order':'std::memory_order'
| | |       `-CallExpr 0xaadad0 <line:619:10, col:37> 'std::memory_order':'std::memory_order'
| | |         |-ImplicitCastExpr 0xaadab8 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0xaada98 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | |         `-ImplicitCastExpr 0xaadaf8 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |           `-DeclRefExpr 0xaada78 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaaa938 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaaadd0 <line:622:7, line:625:70> line:623:7 compare_exchange_strong 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xaaabb8 <col:31, col:47> col:47 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xaaac30 <col:53, col:68> col:68 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xaaaca8 <line:624:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xaaad20 <col:29, col:42> col:42 referenced __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xaadcd0 <line:625:7, col:70>
| | |   `-ReturnStmt 0xaadcc0 <col:9, col:67>
| | |     `-CallExpr 0xaadc80 <col:16, col:67> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaadbb8 <col:16, col:21> '<dependent type>' lvalue .compare_exchange_strong
| | |       | `-MemberExpr 0xaadb88 <col:16> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaadb78 <col:16> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xaadc00 <col:45> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaaabb8 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xaadc20 <col:51> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaaac30 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xaadc40 <col:57> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaaaca8 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-DeclRefExpr 0xaadc60 <col:63> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaaad20 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaab0b8 <line:627:7, line:631:70> line:628:7 compare_exchange_strong 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xaaaea0 <col:31, col:47> col:47 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xaaaf18 <col:53, col:68> col:68 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xaaaf90 <line:629:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
| | | |-ParmVarDecl 0xaab008 <line:630:10, col:23> col:23 referenced __m2 'std::memory_order':'std::memory_order'
| | | `-CompoundStmt 0xaade40 <line:631:7, col:70>
| | |   `-ReturnStmt 0xaade30 <col:9, col:67>
| | |     `-CallExpr 0xaaddf0 <col:16, col:67> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaadd28 <col:16, col:21> '<dependent type>' lvalue .compare_exchange_strong
| | |       | `-MemberExpr 0xaadcf8 <col:16> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaadce8 <col:16> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xaadd70 <col:45> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaaaea0 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xaadd90 <col:51> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaaaf18 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xaaddb0 <col:57> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaaaf90 '__m1' 'std::memory_order':'std::memory_order'
| | |       `-DeclRefExpr 0xaaddd0 <col:63> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaab008 '__m2' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaab330 <line:633:7, line:639:7> line:634:7 compare_exchange_strong 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xaab198 <col:31, col:47> col:47 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xaab210 <col:53, col:68> col:68 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xaab288 <line:635:10, col:29> col:23 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xaabf60 <col:29> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xaae070 <line:636:7, line:639:7>
| | |   `-ReturnStmt 0xaae060 <line:637:2, line:638:38>
| | |     `-CallExpr 0xaae020 <line:637:9, line:638:38> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaade98 <line:637:9, col:14> '<dependent type>' lvalue .compare_exchange_strong
| | |       | `-MemberExpr 0xaade68 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaade58 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xaadee0 <col:38> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaab198 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xaadf00 <col:44> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaab210 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xaadf20 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaab288 '__m' 'std::memory_order':'std::memory_order'
| | |       `-CallExpr 0xaadfe0 <line:638:10, col:37> 'std::memory_order':'std::memory_order'
| | |         |-ImplicitCastExpr 0xaadfc8 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0xaadfa8 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | |         `-ImplicitCastExpr 0xaae008 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |           `-DeclRefExpr 0xaadf88 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaab288 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaab5a0 <line:641:7, line:647:7> line:642:7 compare_exchange_strong 'bool (std::atomic<type-parameter-0-0 *>::__pointer_type &, std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xaab408 <col:31, col:47> col:47 referenced __p1 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | | |-ParmVarDecl 0xaab480 <col:53, col:68> col:68 referenced __p2 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | | |-ParmVarDecl 0xaab4f8 <line:643:7, col:26> col:20 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xaabf80 <col:26> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xaae2a0 <line:644:7, line:647:7>
| | |   `-ReturnStmt 0xaae290 <line:645:2, line:646:38>
| | |     `-CallExpr 0xaae250 <line:645:9, line:646:38> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaae0c8 <line:645:9, col:14> '<dependent type>' lvalue .compare_exchange_strong
| | |       | `-MemberExpr 0xaae098 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaae088 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xaae110 <col:38> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaab408 '__p1' 'std::atomic<type-parameter-0-0 *>::__pointer_type &'
| | |       |-DeclRefExpr 0xaae130 <col:44> 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *' lvalue ParmVar 0xaab480 '__p2' 'std::atomic<type-parameter-0-0 *>::__pointer_type':'_Tp *'
| | |       |-DeclRefExpr 0xaae150 <col:50> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaab4f8 '__m' 'std::memory_order':'std::memory_order'
| | |       `-CallExpr 0xaae210 <line:646:10, col:37> 'std::memory_order':'std::memory_order'
| | |         |-ImplicitCastExpr 0xaae1f8 <col:10> 'std::memory_order (*)(std::memory_order) noexcept' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0xaae1d8 <col:10> 'std::memory_order (std::memory_order) noexcept' lvalue Function 0xa527e0 '__cmpexch_failure_order' 'std::memory_order (std::memory_order) noexcept'
| | |         `-ImplicitCastExpr 0xaae238 <col:34> 'std::memory_order':'std::memory_order' <LValueToRValue>
| | |           `-DeclRefExpr 0xaae1b8 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaab4f8 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaab7d0 <line:665:7, line:673:7> line:666:7 fetch_add 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xaab678 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
| | | |-ParmVarDecl 0xaab6f0 <line:667:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xaabfa0 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xaae3c0 <line:668:7, line:673:7>
| | |   `-ReturnStmt 0xaae3b0 <line:672:2, col:32>
| | |     `-CallExpr 0xaae380 <col:9, col:32> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaae2f8 <col:9, col:14> '<dependent type>' lvalue .fetch_add
| | |       | `-MemberExpr 0xaae2c8 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaae2b8 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xaae340 <col:24> 'std::ptrdiff_t':'long' lvalue ParmVar 0xaab678 '__d' 'std::ptrdiff_t':'long'
| | |       `-DeclRefExpr 0xaae360 <col:29> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaab6f0 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaab9e0 <line:675:7, line:683:7> line:676:7 fetch_add 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) volatile noexcept'
| | | |-ParmVarDecl 0xaab890 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
| | | |-ParmVarDecl 0xaab908 <line:677:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xaabfc0 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xaae4e0 <line:678:7, line:683:7>
| | |   `-ReturnStmt 0xaae4d0 <line:682:2, col:32>
| | |     `-CallExpr 0xaae4a0 <col:9, col:32> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaae418 <col:9, col:14> '<dependent type>' lvalue .fetch_add
| | |       | `-MemberExpr 0xaae3e8 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaae3d8 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xaae460 <col:24> 'std::ptrdiff_t':'long' lvalue ParmVar 0xaab890 '__d' 'std::ptrdiff_t':'long'
| | |       `-DeclRefExpr 0xaae480 <col:29> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaab908 '__m' 'std::memory_order':'std::memory_order'
| | |-CXXMethodDecl 0xaabbc8 <line:685:7, line:693:7> line:686:7 fetch_sub 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) noexcept'
| | | |-ParmVarDecl 0xaabab0 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
| | | |-ParmVarDecl 0xaabb28 <line:687:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| | | | `-DeclRefExpr 0xaabfe0 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| | | `-CompoundStmt 0xaae600 <line:688:7, line:693:7>
| | |   `-ReturnStmt 0xaae5f0 <line:692:2, col:32>
| | |     `-CallExpr 0xaae5c0 <col:9, col:32> '<dependent type>'
| | |       |-CXXDependentScopeMemberExpr 0xaae538 <col:9, col:14> '<dependent type>' lvalue .fetch_sub
| | |       | `-MemberExpr 0xaae508 <col:9> 'std::atomic<type-parameter-0-0 *>::__base_type':'__atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| | |       |   `-CXXThisExpr 0xaae4f8 <col:9> 'atomic<type-parameter-0-0 *> *' implicit this
| | |       |-DeclRefExpr 0xaae580 <col:24> 'std::ptrdiff_t':'long' lvalue ParmVar 0xaabab0 '__d' 'std::ptrdiff_t':'long'
| | |       `-DeclRefExpr 0xaae5a0 <col:29> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaabb28 '__m' 'std::memory_order':'std::memory_order'
| | `-CXXMethodDecl 0xaabda0 <line:695:7, line:703:7> line:696:7 fetch_sub 'std::atomic<type-parameter-0-0 *>::__pointer_type (std::ptrdiff_t, std::memory_order) volatile noexcept'
| |   |-ParmVarDecl 0xaabc88 <col:17, col:27> col:27 referenced __d 'std::ptrdiff_t':'long'
| |   |-ParmVarDecl 0xaabd00 <line:697:3, col:22> col:16 referenced __m 'std::memory_order':'std::memory_order' cinit
| |   | `-DeclRefExpr 0xaac000 <col:22> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |   `-CompoundStmt 0xaae720 <line:698:7, line:703:7>
| |     `-ReturnStmt 0xaae710 <line:702:2, col:32>
| |       `-CallExpr 0xaae6e0 <col:9, col:32> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xaae658 <col:9, col:14> '<dependent type>' lvalue .fetch_sub
| |         | `-MemberExpr 0xaae628 <col:9> 'volatile std::atomic<type-parameter-0-0 *>::__base_type':'volatile __atomic_base<_Tp *>' lvalue ->_M_b 0xaa7300
| |         |   `-CXXThisExpr 0xaae618 <col:9> 'volatile atomic<type-parameter-0-0 *> *' implicit this
| |         |-DeclRefExpr 0xaae6a0 <col:24> 'std::ptrdiff_t':'long' lvalue ParmVar 0xaabc88 '__d' 'std::ptrdiff_t':'long'
| |         `-DeclRefExpr 0xaae6c0 <col:29> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xaabd00 '__m' 'std::memory_order':'std::memory_order'
| |-ClassTemplateSpecializationDecl 0xaae758 <line:708:3, line:728:5> line:709:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<char>':'std::__atomic_base<char>'
| | |-TemplateArgument type 'char'
| | | `-BuiltinType 0x826240 'char'
| | |-CXXRecordDecl 0x9c5798 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0x9c5838 <line:711:7, col:23> col:23 referenced __integral_type 'char'
| | | `-BuiltinType 0x826240 'char'
| | |-TypedefDecl 0x9c5920 <line:712:7, col:36> col:36 referenced __base_type '__atomic_base<char>':'std::__atomic_base<char>'
| | | `-TemplateSpecializationType 0x9c58a0 '__atomic_base<char>' sugar __atomic_base
| | |   |-TemplateArgument type 'char'
| | |   | `-BuiltinType 0x826240 'char'
| | |   `-RecordType 0xaaea60 'std::__atomic_base<char>'
| | |     `-ClassTemplateSpecialization 0xaae978 '__atomic_base'
| | |-CXXConstructorDecl 0x9c59e8 <line:714:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0x9c5ae0 <line:715:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0x9c5c88 <line:716:7, col:36> col:7 atomic 'void (const std::atomic<char> &)' delete trivial
| | | `-ParmVarDecl 0x9c5bc8 <col:14, col:26> col:27 'const std::atomic<char> &'
| | |-CXXMethodDecl 0x9c5e48 <line:717:7, col:47> col:15 operator= 'std::atomic<char> &(const std::atomic<char> &)' delete trivial
| | | `-ParmVarDecl 0x9c5d58 <col:25, col:37> col:38 'const std::atomic<char> &'
| | |-CXXMethodDecl 0x9c5ff8 <line:718:7, col:56> col:15 operator= 'std::atomic<char> &(const std::atomic<char> &) volatile' delete trivial
| | | `-ParmVarDecl 0x9c5f00 <col:25, col:37> col:38 'const std::atomic<char> &'
| | |-CXXConstructorDecl 0x9c61b0 <line:720:7, col:75> col:17 constexpr atomic 'void (std::atomic<char>::__integral_type) noexcept'
| | | |-ParmVarDecl 0x9c60e0 <col:24, col:40> col:40 used __i 'std::atomic<char>::__integral_type':'char'
| | | |-CXXCtorInitializer 'std::atomic<char>::__base_type':'std::__atomic_base<char>'
| | | | `-CXXConstructExpr 0xac0c58 <col:56, col:71> '__atomic_base<char>':'std::__atomic_base<char>' 'void (std::__atomic_base<char>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0x9c6668 <col:68> 'std::atomic<char>::__integral_type':'char' <LValueToRValue>
| | | |     `-DeclRefExpr 0x9c6618 <col:68> 'std::atomic<char>::__integral_type':'char' lvalue ParmVar 0x9c60e0 '__i' 'std::atomic<char>::__integral_type':'char'
| | | `-CompoundStmt 0xac0cb0 <col:73, col:75>
| | |-UsingDecl 0x9c62e8 <line:722:7, col:35> col:26 __base_type::operator char
| | |-UsingShadowDecl 0x9c6340 <col:26> col:26 implicit CXXConversion 0xaafb38 'operator char' 'std::__atomic_base<char>::__int_type () const noexcept'
| | |-UsingShadowDecl 0x9c63a8 <col:26> col:26 implicit CXXConversion 0xaafc90 'operator char' 'std::__atomic_base<char>::__int_type () const volatile noexcept'
| | |-UsingDecl 0x9c6430 <line:723:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0x9c6498 <col:26> col:26 implicit CXXMethod 0xaaf638 'operator=' 'std::__atomic_base<char> &(const std::__atomic_base<char> &)'
| | |-UsingShadowDecl 0x9c64f8 <col:26> col:26 implicit CXXMethod 0xaaf7c8 'operator=' 'std::__atomic_base<char> &(const std::__atomic_base<char> &) volatile'
| | |-UsingShadowDecl 0x9c6558 <col:26> col:26 implicit CXXMethod 0xaafe70 'operator=' 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) noexcept'
| | `-UsingShadowDecl 0x9c65b8 <col:26> col:26 implicit CXXMethod 0xab0040 'operator=' 'std::__atomic_base<char>::__int_type (std::__atomic_base<char>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xac0da8 <line:731:3, line:751:5> line:732:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<signed char>':'std::__atomic_base<signed char>'
| | |-TemplateArgument type 'signed char'
| | | `-BuiltinType 0x826260 'signed char'
| | |-CXXRecordDecl 0xac81a0 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xac8248 <line:734:7, col:29> col:29 referenced __integral_type 'signed char'
| | | `-BuiltinType 0x826260 'signed char'
| | |-TypedefDecl 0xac8340 <line:735:7, col:43> col:43 referenced __base_type '__atomic_base<signed char>':'std::__atomic_base<signed char>'
| | | `-TemplateSpecializationType 0xac82c0 '__atomic_base<signed char>' sugar __atomic_base
| | |   |-TemplateArgument type 'signed char'
| | |   | `-BuiltinType 0x826260 'signed char'
| | |   `-RecordType 0xac10b0 'std::__atomic_base<signed char>'
| | |     `-ClassTemplateSpecialization 0xac0fd0 '__atomic_base'
| | |-CXXConstructorDecl 0xac8408 <line:737:7, col:32> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xac8500 <line:738:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xac86a8 <line:739:7, col:36> col:7 atomic 'void (const std::atomic<signed char> &)' delete trivial
| | | `-ParmVarDecl 0xac85e8 <col:14, col:26> col:27 'const std::atomic<signed char> &'
| | |-CXXMethodDecl 0xac8868 <line:740:7, col:47> col:15 operator= 'std::atomic<signed char> &(const std::atomic<signed char> &)' delete trivial
| | | `-ParmVarDecl 0xac8778 <col:25, col:37> col:38 'const std::atomic<signed char> &'
| | |-CXXMethodDecl 0xac8a18 <line:741:7, col:56> col:15 operator= 'std::atomic<signed char> &(const std::atomic<signed char> &) volatile' delete trivial
| | | `-ParmVarDecl 0xac8920 <col:25, col:37> col:38 'const std::atomic<signed char> &'
| | |-CXXConstructorDecl 0xac8c20 <line:743:7, col:75> col:17 constexpr atomic 'void (std::atomic<signed char>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xac8b50 <col:24, col:40> col:40 used __i 'std::atomic<signed char>::__integral_type':'signed char'
| | | |-CXXCtorInitializer 'std::atomic<signed char>::__base_type':'std::__atomic_base<signed char>'
| | | | `-CXXConstructExpr 0xac9260 <col:56, col:71> '__atomic_base<signed char>':'std::__atomic_base<signed char>' 'void (std::__atomic_base<signed char>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xac90d8 <col:68> 'std::atomic<signed char>::__integral_type':'signed char' <LValueToRValue>
| | | |     `-DeclRefExpr 0xac9088 <col:68> 'std::atomic<signed char>::__integral_type':'signed char' lvalue ParmVar 0xac8b50 '__i' 'std::atomic<signed char>::__integral_type':'signed char'
| | | `-CompoundStmt 0xac92b8 <col:73, col:75>
| | |-UsingDecl 0xac8d58 <line:745:7, col:35> col:26 __base_type::operator signed char
| | |-UsingShadowDecl 0xac8db0 <col:26> col:26 implicit CXXConversion 0xac2168 'operator signed char' 'std::__atomic_base<signed char>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xac8e18 <col:26> col:26 implicit CXXConversion 0xac22c0 'operator signed char' 'std::__atomic_base<signed char>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xac8ea0 <line:746:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xac8f08 <col:26> col:26 implicit CXXMethod 0xac1c68 'operator=' 'std::__atomic_base<signed char> &(const std::__atomic_base<signed char> &)'
| | |-UsingShadowDecl 0xac8f68 <col:26> col:26 implicit CXXMethod 0xac1df8 'operator=' 'std::__atomic_base<signed char> &(const std::__atomic_base<signed char> &) volatile'
| | |-UsingShadowDecl 0xac8fc8 <col:26> col:26 implicit CXXMethod 0xac24a0 'operator=' 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) noexcept'
| | `-UsingShadowDecl 0xac9028 <col:26> col:26 implicit CXXMethod 0xac2670 'operator=' 'std::__atomic_base<signed char>::__int_type (std::__atomic_base<signed char>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xac93b0 <line:754:3, line:774:5> line:755:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<unsigned char>':'std::__atomic_base<unsigned char>'
| | |-TemplateArgument type 'unsigned char'
| | | `-BuiltinType 0x826300 'unsigned char'
| | |-CXXRecordDecl 0xad07b0 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xad0858 <line:757:7, col:31> col:31 referenced __integral_type 'unsigned char'
| | | `-BuiltinType 0x826300 'unsigned char'
| | |-TypedefDecl 0xad0950 <line:758:7, col:45> col:45 referenced __base_type '__atomic_base<unsigned char>':'std::__atomic_base<unsigned char>'
| | | `-TemplateSpecializationType 0xad08d0 '__atomic_base<unsigned char>' sugar __atomic_base
| | |   |-TemplateArgument type 'unsigned char'
| | |   | `-BuiltinType 0x826300 'unsigned char'
| | |   `-RecordType 0xac96b0 'std::__atomic_base<unsigned char>'
| | |     `-ClassTemplateSpecialization 0xac95d0 '__atomic_base'
| | |-CXXConstructorDecl 0xad0a18 <line:760:7, col:32> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xad2ba0 <line:761:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xad2d48 <line:762:7, col:36> col:7 atomic 'void (const std::atomic<unsigned char> &)' delete trivial
| | | `-ParmVarDecl 0xad2c88 <col:14, col:26> col:27 'const std::atomic<unsigned char> &'
| | |-CXXMethodDecl 0xad2f08 <line:763:7, col:47> col:15 operator= 'std::atomic<unsigned char> &(const std::atomic<unsigned char> &)' delete trivial
| | | `-ParmVarDecl 0xad2e18 <col:25, col:37> col:38 'const std::atomic<unsigned char> &'
| | |-CXXMethodDecl 0xad30b8 <line:764:7, col:56> col:15 operator= 'std::atomic<unsigned char> &(const std::atomic<unsigned char> &) volatile' delete trivial
| | | `-ParmVarDecl 0xad2fc0 <col:25, col:37> col:38 'const std::atomic<unsigned char> &'
| | |-CXXConstructorDecl 0xad3270 <line:766:7, col:75> col:17 constexpr atomic 'void (std::atomic<unsigned char>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xad31a0 <col:24, col:40> col:40 used __i 'std::atomic<unsigned char>::__integral_type':'unsigned char'
| | | |-CXXCtorInitializer 'std::atomic<unsigned char>::__base_type':'std::__atomic_base<unsigned char>'
| | | | `-CXXConstructExpr 0xad38b0 <col:56, col:71> '__atomic_base<unsigned char>':'std::__atomic_base<unsigned char>' 'void (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xad3728 <col:68> 'std::atomic<unsigned char>::__integral_type':'unsigned char' <LValueToRValue>
| | | |     `-DeclRefExpr 0xad36d8 <col:68> 'std::atomic<unsigned char>::__integral_type':'unsigned char' lvalue ParmVar 0xad31a0 '__i' 'std::atomic<unsigned char>::__integral_type':'unsigned char'
| | | `-CompoundStmt 0xad3908 <col:73, col:75>
| | |-UsingDecl 0xad33a8 <line:768:7, col:35> col:26 __base_type::operator unsigned char
| | |-UsingShadowDecl 0xad3400 <col:26> col:26 implicit CXXConversion 0xaca768 'operator unsigned char' 'std::__atomic_base<unsigned char>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xad3468 <col:26> col:26 implicit CXXConversion 0xaca8c0 'operator unsigned char' 'std::__atomic_base<unsigned char>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xad34f0 <line:769:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xad3558 <col:26> col:26 implicit CXXMethod 0xaca268 'operator=' 'std::__atomic_base<unsigned char> &(const std::__atomic_base<unsigned char> &)'
| | |-UsingShadowDecl 0xad35b8 <col:26> col:26 implicit CXXMethod 0xaca3f8 'operator=' 'std::__atomic_base<unsigned char> &(const std::__atomic_base<unsigned char> &) volatile'
| | |-UsingShadowDecl 0xad3618 <col:26> col:26 implicit CXXMethod 0xacaaa0 'operator=' 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) noexcept'
| | `-UsingShadowDecl 0xad3678 <col:26> col:26 implicit CXXMethod 0xacac80 'operator=' 'std::__atomic_base<unsigned char>::__int_type (std::__atomic_base<unsigned char>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xad3a00 <line:777:3, line:797:5> line:778:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<short>':'std::__atomic_base<short>'
| | |-TemplateArgument type 'short'
| | | `-BuiltinType 0x826280 'short'
| | |-CXXRecordDecl 0xadae40 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xadaee8 <line:780:7, col:24> col:24 referenced __integral_type 'short'
| | | `-BuiltinType 0x826280 'short'
| | |-TypedefDecl 0xadafe0 <line:781:7, col:38> col:38 referenced __base_type '__atomic_base<short>':'std::__atomic_base<short>'
| | | `-TemplateSpecializationType 0xadaf60 '__atomic_base<short>' sugar __atomic_base
| | |   |-TemplateArgument type 'short'
| | |   | `-BuiltinType 0x826280 'short'
| | |   `-RecordType 0xad3d00 'std::__atomic_base<short>'
| | |     `-ClassTemplateSpecialization 0xad3c20 '__atomic_base'
| | |-CXXConstructorDecl 0xadb0a8 <line:783:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xadb1a0 <line:784:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xadb348 <line:785:7, col:36> col:7 atomic 'void (const std::atomic<short> &)' delete trivial
| | | `-ParmVarDecl 0xadb288 <col:14, col:26> col:27 'const std::atomic<short> &'
| | |-CXXMethodDecl 0xadb508 <line:786:7, col:47> col:15 operator= 'std::atomic<short> &(const std::atomic<short> &)' delete trivial
| | | `-ParmVarDecl 0xadb418 <col:25, col:37> col:38 'const std::atomic<short> &'
| | |-CXXMethodDecl 0xadb6b8 <line:787:7, col:56> col:15 operator= 'std::atomic<short> &(const std::atomic<short> &) volatile' delete trivial
| | | `-ParmVarDecl 0xadb5c0 <col:25, col:37> col:38 'const std::atomic<short> &'
| | |-CXXConstructorDecl 0xadb870 <line:789:7, col:75> col:17 constexpr atomic 'void (std::atomic<short>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xadb7a0 <col:24, col:40> col:40 used __i 'std::atomic<short>::__integral_type':'short'
| | | |-CXXCtorInitializer 'std::atomic<short>::__base_type':'std::__atomic_base<short>'
| | | | `-CXXConstructExpr 0xadbeb0 <col:56, col:71> '__atomic_base<short>':'std::__atomic_base<short>' 'void (std::__atomic_base<short>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xadbd28 <col:68> 'std::atomic<short>::__integral_type':'short' <LValueToRValue>
| | | |     `-DeclRefExpr 0xadbcd8 <col:68> 'std::atomic<short>::__integral_type':'short' lvalue ParmVar 0xadb7a0 '__i' 'std::atomic<short>::__integral_type':'short'
| | | `-CompoundStmt 0xadbf08 <col:73, col:75>
| | |-UsingDecl 0xadb9a8 <line:791:7, col:35> col:26 __base_type::operator short
| | |-UsingShadowDecl 0xadba00 <col:26> col:26 implicit CXXConversion 0xad4dd8 'operator short' 'std::__atomic_base<short>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xadba68 <col:26> col:26 implicit CXXConversion 0xad4f30 'operator short' 'std::__atomic_base<short>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xadbaf0 <line:792:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xadbb58 <col:26> col:26 implicit CXXMethod 0xad48b8 'operator=' 'std::__atomic_base<short> &(const std::__atomic_base<short> &)'
| | |-UsingShadowDecl 0xadbbb8 <col:26> col:26 implicit CXXMethod 0xad4a48 'operator=' 'std::__atomic_base<short> &(const std::__atomic_base<short> &) volatile'
| | |-UsingShadowDecl 0xadbc18 <col:26> col:26 implicit CXXMethod 0xad5110 'operator=' 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) noexcept'
| | `-UsingShadowDecl 0xadbc78 <col:26> col:26 implicit CXXMethod 0xad52e0 'operator=' 'std::__atomic_base<short>::__int_type (std::__atomic_base<short>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xadc000 <line:800:3, line:820:5> line:801:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<unsigned short>':'std::__atomic_base<unsigned short>'
| | |-TemplateArgument type 'unsigned short'
| | | `-BuiltinType 0x826320 'unsigned short'
| | |-CXXRecordDecl 0xae3450 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xae34f8 <line:803:7, col:38> col:38 referenced __integral_type 'unsigned short'
| | | `-BuiltinType 0x826320 'unsigned short'
| | |-TypedefDecl 0xae35f0 <line:804:7, col:47> col:47 referenced __base_type '__atomic_base<unsigned short>':'std::__atomic_base<unsigned short>'
| | | `-TemplateSpecializationType 0xae3570 '__atomic_base<unsigned short>' sugar __atomic_base
| | |   |-TemplateArgument type 'unsigned short'
| | |   | `-BuiltinType 0x826320 'unsigned short'
| | |   `-RecordType 0xadc300 'std::__atomic_base<unsigned short>'
| | |     `-ClassTemplateSpecialization 0xadc220 '__atomic_base'
| | |-CXXConstructorDecl 0xae36b8 <line:806:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xae37b0 <line:807:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xae3958 <line:808:7, col:36> col:7 atomic 'void (const std::atomic<unsigned short> &)' delete trivial
| | | `-ParmVarDecl 0xae3898 <col:14, col:26> col:27 'const std::atomic<unsigned short> &'
| | |-CXXMethodDecl 0xae3b18 <line:809:7, col:47> col:15 operator= 'std::atomic<unsigned short> &(const std::atomic<unsigned short> &)' delete trivial
| | | `-ParmVarDecl 0xae3a28 <col:25, col:37> col:38 'const std::atomic<unsigned short> &'
| | |-CXXMethodDecl 0xae3cc8 <line:810:7, col:56> col:15 operator= 'std::atomic<unsigned short> &(const std::atomic<unsigned short> &) volatile' delete trivial
| | | `-ParmVarDecl 0xae3bd0 <col:25, col:37> col:38 'const std::atomic<unsigned short> &'
| | |-CXXConstructorDecl 0xae3e80 <line:812:7, col:75> col:17 constexpr atomic 'void (std::atomic<unsigned short>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xae3db0 <col:24, col:40> col:40 used __i 'std::atomic<unsigned short>::__integral_type':'unsigned short'
| | | |-CXXCtorInitializer 'std::atomic<unsigned short>::__base_type':'std::__atomic_base<unsigned short>'
| | | | `-CXXConstructExpr 0xae44c0 <col:56, col:71> '__atomic_base<unsigned short>':'std::__atomic_base<unsigned short>' 'void (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xae4338 <col:68> 'std::atomic<unsigned short>::__integral_type':'unsigned short' <LValueToRValue>
| | | |     `-DeclRefExpr 0xae42e8 <col:68> 'std::atomic<unsigned short>::__integral_type':'unsigned short' lvalue ParmVar 0xae3db0 '__i' 'std::atomic<unsigned short>::__integral_type':'unsigned short'
| | | `-CompoundStmt 0xae4518 <col:73, col:75>
| | |-UsingDecl 0xae3fb8 <line:814:7, col:35> col:26 __base_type::operator unsigned short
| | |-UsingShadowDecl 0xae4010 <col:26> col:26 implicit CXXConversion 0xadd3d8 'operator unsigned short' 'std::__atomic_base<unsigned short>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xae4078 <col:26> col:26 implicit CXXConversion 0xadd530 'operator unsigned short' 'std::__atomic_base<unsigned short>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xae4100 <line:815:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xae4168 <col:26> col:26 implicit CXXMethod 0xadced8 'operator=' 'std::__atomic_base<unsigned short> &(const std::__atomic_base<unsigned short> &)'
| | |-UsingShadowDecl 0xae41c8 <col:26> col:26 implicit CXXMethod 0xadd068 'operator=' 'std::__atomic_base<unsigned short> &(const std::__atomic_base<unsigned short> &) volatile'
| | |-UsingShadowDecl 0xae4228 <col:26> col:26 implicit CXXMethod 0xadd710 'operator=' 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) noexcept'
| | `-UsingShadowDecl 0xae4288 <col:26> col:26 implicit CXXMethod 0xadd8e0 'operator=' 'std::__atomic_base<unsigned short>::__int_type (std::__atomic_base<unsigned short>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xae4610 <line:823:3, line:843:5> line:824:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<int>':'std::__atomic_base<int>'
| | |-TemplateArgument type 'int'
| | | `-BuiltinType 0x8262a0 'int'
| | |-CXXRecordDecl 0xaebe78 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xaebf20 <line:826:7, col:22> col:22 referenced __integral_type 'int'
| | | `-BuiltinType 0x8262a0 'int'
| | |-TypedefDecl 0xaec010 <line:827:7, col:36> col:36 referenced __base_type '__atomic_base<int>':'std::__atomic_base<int>'
| | | `-TemplateSpecializationType 0xaebf90 '__atomic_base<int>' sugar __atomic_base
| | |   |-TemplateArgument type 'int'
| | |   | `-BuiltinType 0x8262a0 'int'
| | |   `-RecordType 0xae4910 'std::__atomic_base<int>'
| | |     `-ClassTemplateSpecialization 0xae4830 '__atomic_base'
| | |-CXXConstructorDecl 0xaec0d8 <line:829:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xaec1d0 <line:830:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xaec378 <line:831:7, col:36> col:7 atomic 'void (const std::atomic<int> &)' delete trivial
| | | `-ParmVarDecl 0xaec2b8 <col:14, col:26> col:27 'const std::atomic<int> &'
| | |-CXXMethodDecl 0xaec538 <line:832:7, col:47> col:15 operator= 'std::atomic<int> &(const std::atomic<int> &)' delete trivial
| | | `-ParmVarDecl 0xaec448 <col:25, col:37> col:38 'const std::atomic<int> &'
| | |-CXXMethodDecl 0xaec6e8 <line:833:7, col:56> col:15 operator= 'std::atomic<int> &(const std::atomic<int> &) volatile' delete trivial
| | | `-ParmVarDecl 0xaec5f0 <col:25, col:37> col:38 'const std::atomic<int> &'
| | |-CXXConstructorDecl 0xaec8a0 <line:835:7, col:75> col:17 constexpr atomic 'void (std::atomic<int>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xaec7d0 <col:24, col:40> col:40 used __i 'std::atomic<int>::__integral_type':'int'
| | | |-CXXCtorInitializer 'std::atomic<int>::__base_type':'std::__atomic_base<int>'
| | | | `-CXXConstructExpr 0xaecee0 <col:56, col:71> '__atomic_base<int>':'std::__atomic_base<int>' 'void (std::__atomic_base<int>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xaecd58 <col:68> 'std::atomic<int>::__integral_type':'int' <LValueToRValue>
| | | |     `-DeclRefExpr 0xaecd08 <col:68> 'std::atomic<int>::__integral_type':'int' lvalue ParmVar 0xaec7d0 '__i' 'std::atomic<int>::__integral_type':'int'
| | | `-CompoundStmt 0xaecf38 <col:73, col:75>
| | |-UsingDecl 0xaec9d8 <line:837:7, col:35> col:26 __base_type::operator int
| | |-UsingShadowDecl 0xaeca30 <col:26> col:26 implicit CXXConversion 0xae5db8 'operator int' 'std::__atomic_base<int>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xaeca98 <col:26> col:26 implicit CXXConversion 0xae5f10 'operator int' 'std::__atomic_base<int>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xaecb20 <line:838:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xaecb88 <col:26> col:26 implicit CXXMethod 0xae58e8 'operator=' 'std::__atomic_base<int> &(const std::__atomic_base<int> &)'
| | |-UsingShadowDecl 0xaecbe8 <col:26> col:26 implicit CXXMethod 0xae5a78 'operator=' 'std::__atomic_base<int> &(const std::__atomic_base<int> &) volatile'
| | |-UsingShadowDecl 0xaecc48 <col:26> col:26 implicit CXXMethod 0xae60f0 'operator=' 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) noexcept'
| | `-UsingShadowDecl 0xaecca8 <col:26> col:26 implicit CXXMethod 0xae62c0 'operator=' 'std::__atomic_base<int>::__int_type (std::__atomic_base<int>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xaed080 <line:846:3, line:866:5> line:847:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<unsigned int>':'std::__atomic_base<unsigned int>'
| | |-TemplateArgument type 'unsigned int'
| | | `-BuiltinType 0x826340 'unsigned int'
| | |-CXXRecordDecl 0xaf44d0 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xaf4578 <line:849:7, col:29> col:29 referenced __integral_type 'unsigned int'
| | | `-BuiltinType 0x826340 'unsigned int'
| | |-TypedefDecl 0xaf4670 <line:850:7, col:44> col:44 referenced __base_type '__atomic_base<unsigned int>':'std::__atomic_base<unsigned int>'
| | | `-TemplateSpecializationType 0xaf45f0 '__atomic_base<unsigned int>' sugar __atomic_base
| | |   |-TemplateArgument type 'unsigned int'
| | |   | `-BuiltinType 0x826340 'unsigned int'
| | |   `-RecordType 0xaed380 'std::__atomic_base<unsigned int>'
| | |     `-ClassTemplateSpecialization 0xaed2a0 '__atomic_base'
| | |-CXXConstructorDecl 0xaf4738 <line:852:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xaf4830 <line:853:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xaf49d8 <line:854:7, col:36> col:7 atomic 'void (const std::atomic<unsigned int> &)' delete trivial
| | | `-ParmVarDecl 0xaf4918 <col:14, col:26> col:27 'const std::atomic<unsigned int> &'
| | |-CXXMethodDecl 0xaf4b98 <line:855:7, col:47> col:15 operator= 'std::atomic<unsigned int> &(const std::atomic<unsigned int> &)' delete trivial
| | | `-ParmVarDecl 0xaf4aa8 <col:25, col:37> col:38 'const std::atomic<unsigned int> &'
| | |-CXXMethodDecl 0xaf4d48 <line:856:7, col:56> col:15 operator= 'std::atomic<unsigned int> &(const std::atomic<unsigned int> &) volatile' delete trivial
| | | `-ParmVarDecl 0xaf4c50 <col:25, col:37> col:38 'const std::atomic<unsigned int> &'
| | |-CXXConstructorDecl 0xaf4f00 <line:858:7, col:75> col:17 constexpr atomic 'void (std::atomic<unsigned int>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xaf4e30 <col:24, col:40> col:40 used __i 'std::atomic<unsigned int>::__integral_type':'unsigned int'
| | | |-CXXCtorInitializer 'std::atomic<unsigned int>::__base_type':'std::__atomic_base<unsigned int>'
| | | | `-CXXConstructExpr 0xaf5570 <col:56, col:71> '__atomic_base<unsigned int>':'std::__atomic_base<unsigned int>' 'void (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xaf53e8 <col:68> 'std::atomic<unsigned int>::__integral_type':'unsigned int' <LValueToRValue>
| | | |     `-DeclRefExpr 0xaf5398 <col:68> 'std::atomic<unsigned int>::__integral_type':'unsigned int' lvalue ParmVar 0xaf4e30 '__i' 'std::atomic<unsigned int>::__integral_type':'unsigned int'
| | | `-CompoundStmt 0xaf55c8 <col:73, col:75>
| | |-UsingDecl 0xaf5038 <line:860:7, col:35> col:26 __base_type::operator unsigned int
| | |-UsingShadowDecl 0xaf50c0 <col:26> col:26 implicit CXXConversion 0xaee438 'operator unsigned int' 'std::__atomic_base<unsigned int>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xaf5128 <col:26> col:26 implicit CXXConversion 0xaee590 'operator unsigned int' 'std::__atomic_base<unsigned int>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xaf51b0 <line:861:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xaf5218 <col:26> col:26 implicit CXXMethod 0xaedf38 'operator=' 'std::__atomic_base<unsigned int> &(const std::__atomic_base<unsigned int> &)'
| | |-UsingShadowDecl 0xaf5278 <col:26> col:26 implicit CXXMethod 0xaee0c8 'operator=' 'std::__atomic_base<unsigned int> &(const std::__atomic_base<unsigned int> &) volatile'
| | |-UsingShadowDecl 0xaf52d8 <col:26> col:26 implicit CXXMethod 0xaee770 'operator=' 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) noexcept'
| | `-UsingShadowDecl 0xaf5338 <col:26> col:26 implicit CXXMethod 0xaee940 'operator=' 'std::__atomic_base<unsigned int>::__int_type (std::__atomic_base<unsigned int>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xaf56c0 <line:869:3, line:889:5> line:870:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<long>':'std::__atomic_base<long>'
| | |-TemplateArgument type 'long'
| | | `-BuiltinType 0x8262c0 'long'
| | |-CXXRecordDecl 0xaff988 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xaffa30 <line:872:7, col:23> col:23 referenced __integral_type 'long'
| | | `-BuiltinType 0x8262c0 'long'
| | |-TypedefDecl 0xaffb20 <line:873:7, col:36> col:36 referenced __base_type '__atomic_base<long>':'std::__atomic_base<long>'
| | | `-TemplateSpecializationType 0xaffaa0 '__atomic_base<long>' sugar __atomic_base
| | |   |-TemplateArgument type 'long'
| | |   | `-BuiltinType 0x8262c0 'long'
| | |   `-RecordType 0xaf59c0 'std::__atomic_base<long>'
| | |     `-ClassTemplateSpecialization 0xaf58e0 '__atomic_base'
| | |-CXXConstructorDecl 0xaffbe8 <line:875:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xaffce0 <line:876:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xaffe88 <line:877:7, col:36> col:7 atomic 'void (const std::atomic<long> &)' delete trivial
| | | `-ParmVarDecl 0xaffdc8 <col:14, col:26> col:27 'const std::atomic<long> &'
| | |-CXXMethodDecl 0xb00058 <line:878:7, col:47> col:15 operator= 'std::atomic<long> &(const std::atomic<long> &)' delete trivial
| | | `-ParmVarDecl 0xafff68 <col:25, col:37> col:38 'const std::atomic<long> &'
| | |-CXXMethodDecl 0xb00208 <line:879:7, col:56> col:15 operator= 'std::atomic<long> &(const std::atomic<long> &) volatile' delete trivial
| | | `-ParmVarDecl 0xb00110 <col:25, col:37> col:38 'const std::atomic<long> &'
| | |-CXXConstructorDecl 0xb003c0 <line:881:7, col:75> col:17 constexpr atomic 'void (std::atomic<long>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xb002f0 <col:24, col:40> col:40 used __i 'std::atomic<long>::__integral_type':'long'
| | | |-CXXCtorInitializer 'std::atomic<long>::__base_type':'std::__atomic_base<long>'
| | | | `-CXXConstructExpr 0xb00a00 <col:56, col:71> '__atomic_base<long>':'std::__atomic_base<long>' 'void (std::__atomic_base<long>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xb00878 <col:68> 'std::atomic<long>::__integral_type':'long' <LValueToRValue>
| | | |     `-DeclRefExpr 0xb00828 <col:68> 'std::atomic<long>::__integral_type':'long' lvalue ParmVar 0xb002f0 '__i' 'std::atomic<long>::__integral_type':'long'
| | | `-CompoundStmt 0xb00a58 <col:73, col:75>
| | |-UsingDecl 0xb004f8 <line:883:7, col:35> col:26 __base_type::operator long
| | |-UsingShadowDecl 0xb00550 <col:26> col:26 implicit CXXConversion 0xaf6a78 'operator long' 'std::__atomic_base<long>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xb005b8 <col:26> col:26 implicit CXXConversion 0xaf6bd0 'operator long' 'std::__atomic_base<long>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xb00640 <line:884:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xb006a8 <col:26> col:26 implicit CXXMethod 0xaf6578 'operator=' 'std::__atomic_base<long> &(const std::__atomic_base<long> &)'
| | |-UsingShadowDecl 0xb00708 <col:26> col:26 implicit CXXMethod 0xaf6708 'operator=' 'std::__atomic_base<long> &(const std::__atomic_base<long> &) volatile'
| | |-UsingShadowDecl 0xb00768 <col:26> col:26 implicit CXXMethod 0xaf6db0 'operator=' 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) noexcept'
| | `-UsingShadowDecl 0xb007c8 <col:26> col:26 implicit CXXMethod 0xaf6f80 'operator=' 'std::__atomic_base<long>::__int_type (std::__atomic_base<long>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xb00b50 <line:892:3, line:912:5> line:893:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<unsigned long>':'std::__atomic_base<unsigned long>'
| | |-TemplateArgument type 'unsigned long'
| | | `-BuiltinType 0x826360 'unsigned long'
| | |-CXXRecordDecl 0xb07ff0 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xb08098 <line:895:7, col:31> col:31 referenced __integral_type 'unsigned long'
| | | `-BuiltinType 0x826360 'unsigned long'
| | |-TypedefDecl 0xb08190 <line:896:7, col:45> col:45 referenced __base_type '__atomic_base<unsigned long>':'std::__atomic_base<unsigned long>'
| | | `-TemplateSpecializationType 0xb08110 '__atomic_base<unsigned long>' sugar __atomic_base
| | |   |-TemplateArgument type 'unsigned long'
| | |   | `-BuiltinType 0x826360 'unsigned long'
| | |   `-RecordType 0xb00e50 'std::__atomic_base<unsigned long>'
| | |     `-ClassTemplateSpecialization 0xb00d70 '__atomic_base'
| | |-CXXConstructorDecl 0xb08258 <line:898:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xb08350 <line:899:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xb084f8 <line:900:7, col:36> col:7 atomic 'void (const std::atomic<unsigned long> &)' delete trivial
| | | `-ParmVarDecl 0xb08438 <col:14, col:26> col:27 'const std::atomic<unsigned long> &'
| | |-CXXMethodDecl 0xb086b8 <line:901:7, col:47> col:15 operator= 'std::atomic<unsigned long> &(const std::atomic<unsigned long> &)' delete trivial
| | | `-ParmVarDecl 0xb085c8 <col:25, col:37> col:38 'const std::atomic<unsigned long> &'
| | |-CXXMethodDecl 0xb08868 <line:902:7, col:56> col:15 operator= 'std::atomic<unsigned long> &(const std::atomic<unsigned long> &) volatile' delete trivial
| | | `-ParmVarDecl 0xb08770 <col:25, col:37> col:38 'const std::atomic<unsigned long> &'
| | |-CXXConstructorDecl 0xb08a20 <line:904:7, col:75> col:17 constexpr atomic 'void (std::atomic<unsigned long>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xb08950 <col:24, col:40> col:40 used __i 'std::atomic<unsigned long>::__integral_type':'unsigned long'
| | | |-CXXCtorInitializer 'std::atomic<unsigned long>::__base_type':'std::__atomic_base<unsigned long>'
| | | | `-CXXConstructExpr 0xb09060 <col:56, col:71> '__atomic_base<unsigned long>':'std::__atomic_base<unsigned long>' 'void (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xb08ed8 <col:68> 'std::atomic<unsigned long>::__integral_type':'unsigned long' <LValueToRValue>
| | | |     `-DeclRefExpr 0xb08e88 <col:68> 'std::atomic<unsigned long>::__integral_type':'unsigned long' lvalue ParmVar 0xb08950 '__i' 'std::atomic<unsigned long>::__integral_type':'unsigned long'
| | | `-CompoundStmt 0xb090b8 <col:73, col:75>
| | |-UsingDecl 0xb08b58 <line:906:7, col:35> col:26 __base_type::operator unsigned long
| | |-UsingShadowDecl 0xb08bb0 <col:26> col:26 implicit CXXConversion 0xb01f50 'operator unsigned long' 'std::__atomic_base<unsigned long>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xb08c18 <col:26> col:26 implicit CXXConversion 0xb020a0 'operator unsigned long' 'std::__atomic_base<unsigned long>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xb08ca0 <line:907:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xb08d08 <col:26> col:26 implicit CXXMethod 0xb01a08 'operator=' 'std::__atomic_base<unsigned long> &(const std::__atomic_base<unsigned long> &)'
| | |-UsingShadowDecl 0xb08d68 <col:26> col:26 implicit CXXMethod 0xb01b98 'operator=' 'std::__atomic_base<unsigned long> &(const std::__atomic_base<unsigned long> &) volatile'
| | |-UsingShadowDecl 0xb08dc8 <col:26> col:26 implicit CXXMethod 0xb02280 'operator=' 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) noexcept'
| | `-UsingShadowDecl 0xb08e28 <col:26> col:26 implicit CXXMethod 0xb02450 'operator=' 'std::__atomic_base<unsigned long>::__int_type (std::__atomic_base<unsigned long>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xb091b0 <line:915:3, line:935:5> line:916:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<long long>':'std::__atomic_base<long long>'
| | |-TemplateArgument type 'long long'
| | | `-BuiltinType 0x8262e0 'long long'
| | |-CXXRecordDecl 0xb123f0 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xb12498 <line:918:7, col:27> col:27 referenced __integral_type 'long long'
| | | `-BuiltinType 0x8262e0 'long long'
| | |-TypedefDecl 0xb12590 <line:919:7, col:42> col:42 referenced __base_type '__atomic_base<long long>':'std::__atomic_base<long long>'
| | | `-TemplateSpecializationType 0xb12510 '__atomic_base<long long>' sugar __atomic_base
| | |   |-TemplateArgument type 'long long'
| | |   | `-BuiltinType 0x8262e0 'long long'
| | |   `-RecordType 0xb094b0 'std::__atomic_base<long long>'
| | |     `-ClassTemplateSpecialization 0xb093d0 '__atomic_base'
| | |-CXXConstructorDecl 0xb12658 <line:921:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xb12750 <line:922:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xb128f8 <line:923:7, col:36> col:7 atomic 'void (const std::atomic<long long> &)' delete trivial
| | | `-ParmVarDecl 0xb12838 <col:14, col:26> col:27 'const std::atomic<long long> &'
| | |-CXXMethodDecl 0xb12ab8 <line:924:7, col:47> col:15 operator= 'std::atomic<long long> &(const std::atomic<long long> &)' delete trivial
| | | `-ParmVarDecl 0xb129c8 <col:25, col:37> col:38 'const std::atomic<long long> &'
| | |-CXXMethodDecl 0xb12c68 <line:925:7, col:56> col:15 operator= 'std::atomic<long long> &(const std::atomic<long long> &) volatile' delete trivial
| | | `-ParmVarDecl 0xb12b70 <col:25, col:37> col:38 'const std::atomic<long long> &'
| | |-CXXConstructorDecl 0xb12e20 <line:927:7, col:75> col:17 constexpr atomic 'void (std::atomic<long long>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xb12d50 <col:24, col:40> col:40 used __i 'std::atomic<long long>::__integral_type':'long long'
| | | |-CXXCtorInitializer 'std::atomic<long long>::__base_type':'std::__atomic_base<long long>'
| | | | `-CXXConstructExpr 0xb13460 <col:56, col:71> '__atomic_base<long long>':'std::__atomic_base<long long>' 'void (std::__atomic_base<long long>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xb132d8 <col:68> 'std::atomic<long long>::__integral_type':'long long' <LValueToRValue>
| | | |     `-DeclRefExpr 0xb13288 <col:68> 'std::atomic<long long>::__integral_type':'long long' lvalue ParmVar 0xb12d50 '__i' 'std::atomic<long long>::__integral_type':'long long'
| | | `-CompoundStmt 0xb134b8 <col:73, col:75>
| | |-UsingDecl 0xb12f58 <line:929:7, col:35> col:26 __base_type::operator long long
| | |-UsingShadowDecl 0xb12fb0 <col:26> col:26 implicit CXXConversion 0xb0c3b8 'operator long long' 'std::__atomic_base<long long>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xb13018 <col:26> col:26 implicit CXXConversion 0xb0c510 'operator long long' 'std::__atomic_base<long long>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xb130a0 <line:930:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xb13108 <col:26> col:26 implicit CXXMethod 0xb0beb8 'operator=' 'std::__atomic_base<long long> &(const std::__atomic_base<long long> &)'
| | |-UsingShadowDecl 0xb13168 <col:26> col:26 implicit CXXMethod 0xb0c048 'operator=' 'std::__atomic_base<long long> &(const std::__atomic_base<long long> &) volatile'
| | |-UsingShadowDecl 0xb131c8 <col:26> col:26 implicit CXXMethod 0xb0c6f0 'operator=' 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) noexcept'
| | `-UsingShadowDecl 0xb13228 <col:26> col:26 implicit CXXMethod 0xb0c8c0 'operator=' 'std::__atomic_base<long long>::__int_type (std::__atomic_base<long long>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xb135b0 <line:938:3, line:958:5> line:939:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<unsigned long long>':'std::__atomic_base<unsigned long long>'
| | |-TemplateArgument type 'unsigned long long'
| | | `-BuiltinType 0x826380 'unsigned long long'
| | |-CXXRecordDecl 0xb1deb8 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xb1df60 <line:941:7, col:41> col:41 referenced __integral_type 'unsigned long long'
| | | `-BuiltinType 0x826380 'unsigned long long'
| | |-TypedefDecl 0xb1e050 <line:942:7, col:50> col:50 referenced __base_type '__atomic_base<unsigned long long>':'std::__atomic_base<unsigned long long>'
| | | `-TemplateSpecializationType 0xb1dfd0 '__atomic_base<unsigned long long>' sugar __atomic_base
| | |   |-TemplateArgument type 'unsigned long long'
| | |   | `-BuiltinType 0x826380 'unsigned long long'
| | |   `-RecordType 0xb138b0 'std::__atomic_base<unsigned long long>'
| | |     `-ClassTemplateSpecialization 0xb137d0 '__atomic_base'
| | |-CXXConstructorDecl 0xb1e118 <line:944:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xb1e210 <line:945:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xb1e3b8 <line:946:7, col:36> col:7 atomic 'void (const std::atomic<unsigned long long> &)' delete trivial
| | | `-ParmVarDecl 0xb1e2f8 <col:14, col:26> col:27 'const std::atomic<unsigned long long> &'
| | |-CXXMethodDecl 0xb1e578 <line:947:7, col:47> col:15 operator= 'std::atomic<unsigned long long> &(const std::atomic<unsigned long long> &)' delete trivial
| | | `-ParmVarDecl 0xb1e488 <col:25, col:37> col:38 'const std::atomic<unsigned long long> &'
| | |-CXXMethodDecl 0xb1e728 <line:948:7, col:56> col:15 operator= 'std::atomic<unsigned long long> &(const std::atomic<unsigned long long> &) volatile' delete trivial
| | | `-ParmVarDecl 0xb1e630 <col:25, col:37> col:38 'const std::atomic<unsigned long long> &'
| | |-CXXConstructorDecl 0xb1e8e0 <line:950:7, col:75> col:17 constexpr atomic 'void (std::atomic<unsigned long long>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xb1e810 <col:24, col:40> col:40 used __i 'std::atomic<unsigned long long>::__integral_type':'unsigned long long'
| | | |-CXXCtorInitializer 'std::atomic<unsigned long long>::__base_type':'std::__atomic_base<unsigned long long>'
| | | | `-CXXConstructExpr 0xb1ef20 <col:56, col:71> '__atomic_base<unsigned long long>':'std::__atomic_base<unsigned long long>' 'void (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xb1ed98 <col:68> 'std::atomic<unsigned long long>::__integral_type':'unsigned long long' <LValueToRValue>
| | | |     `-DeclRefExpr 0xb1ed48 <col:68> 'std::atomic<unsigned long long>::__integral_type':'unsigned long long' lvalue ParmVar 0xb1e810 '__i' 'std::atomic<unsigned long long>::__integral_type':'unsigned long long'
| | | `-CompoundStmt 0xb1ef78 <col:73, col:75>
| | |-UsingDecl 0xb1ea18 <line:952:7, col:35> col:26 __base_type::operator unsigned long long
| | |-UsingShadowDecl 0xb1ea70 <col:26> col:26 implicit CXXConversion 0xb15dc8 'operator unsigned long long' 'std::__atomic_base<unsigned long long>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xb1ead8 <col:26> col:26 implicit CXXConversion 0xb15f20 'operator unsigned long long' 'std::__atomic_base<unsigned long long>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xb1eb60 <line:953:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xb1ebc8 <col:26> col:26 implicit CXXMethod 0xb158c8 'operator=' 'std::__atomic_base<unsigned long long> &(const std::__atomic_base<unsigned long long> &)'
| | |-UsingShadowDecl 0xb1ec28 <col:26> col:26 implicit CXXMethod 0xb15a58 'operator=' 'std::__atomic_base<unsigned long long> &(const std::__atomic_base<unsigned long long> &) volatile'
| | |-UsingShadowDecl 0xb1ec88 <col:26> col:26 implicit CXXMethod 0xb16100 'operator=' 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) noexcept'
| | `-UsingShadowDecl 0xb1ece8 <col:26> col:26 implicit CXXMethod 0xb162d0 'operator=' 'std::__atomic_base<unsigned long long>::__int_type (std::__atomic_base<unsigned long long>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xb1f068 <line:961:3, line:981:5> line:962:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<wchar_t>':'std::__atomic_base<wchar_t>'
| | |-TemplateArgument type 'wchar_t'
| | | `-BuiltinType 0x8267a0 'wchar_t'
| | |-CXXRecordDecl 0xb264c0 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xb26560 <line:964:7, col:26> col:26 referenced __integral_type 'wchar_t'
| | | `-BuiltinType 0x8267a0 'wchar_t'
| | |-TypedefDecl 0xb26650 <line:965:7, col:39> col:39 referenced __base_type '__atomic_base<wchar_t>':'std::__atomic_base<wchar_t>'
| | | `-TemplateSpecializationType 0xb265d0 '__atomic_base<wchar_t>' sugar __atomic_base
| | |   |-TemplateArgument type 'wchar_t'
| | |   | `-BuiltinType 0x8267a0 'wchar_t'
| | |   `-RecordType 0xb1f3c0 'std::__atomic_base<wchar_t>'
| | |     `-ClassTemplateSpecialization 0xb1f2d8 '__atomic_base'
| | |-CXXConstructorDecl 0xb26718 <line:967:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xb26810 <line:968:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xb269b8 <line:969:7, col:36> col:7 atomic 'void (const std::atomic<wchar_t> &)' delete trivial
| | | `-ParmVarDecl 0xb268f8 <col:14, col:26> col:27 'const std::atomic<wchar_t> &'
| | |-CXXMethodDecl 0xb26b78 <line:970:7, col:47> col:15 operator= 'std::atomic<wchar_t> &(const std::atomic<wchar_t> &)' delete trivial
| | | `-ParmVarDecl 0xb26a88 <col:25, col:37> col:38 'const std::atomic<wchar_t> &'
| | |-CXXMethodDecl 0xb26d28 <line:971:7, col:56> col:15 operator= 'std::atomic<wchar_t> &(const std::atomic<wchar_t> &) volatile' delete trivial
| | | `-ParmVarDecl 0xb26c30 <col:25, col:37> col:38 'const std::atomic<wchar_t> &'
| | |-CXXConstructorDecl 0xb26ee0 <line:973:7, col:75> col:17 constexpr atomic 'void (std::atomic<wchar_t>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xb26e10 <col:24, col:40> col:40 used __i 'std::atomic<wchar_t>::__integral_type':'wchar_t'
| | | |-CXXCtorInitializer 'std::atomic<wchar_t>::__base_type':'std::__atomic_base<wchar_t>'
| | | | `-CXXConstructExpr 0xb27540 <col:56, col:71> '__atomic_base<wchar_t>':'std::__atomic_base<wchar_t>' 'void (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xb273b0 <col:68> 'std::atomic<wchar_t>::__integral_type':'wchar_t' <LValueToRValue>
| | | |     `-DeclRefExpr 0xb27360 <col:68> 'std::atomic<wchar_t>::__integral_type':'wchar_t' lvalue ParmVar 0xb26e10 '__i' 'std::atomic<wchar_t>::__integral_type':'wchar_t'
| | | `-CompoundStmt 0xb27598 <col:73, col:75>
| | |-UsingDecl 0xb27018 <line:975:7, col:35> col:26 __base_type::operator wchar_t
| | |-UsingShadowDecl 0xb27070 <col:26> col:26 implicit CXXConversion 0xb20478 'operator wchar_t' 'std::__atomic_base<wchar_t>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xb270d8 <col:26> col:26 implicit CXXConversion 0xb205d0 'operator wchar_t' 'std::__atomic_base<wchar_t>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xb27160 <line:976:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xb271c8 <col:26> col:26 implicit CXXMethod 0xb1ff78 'operator=' 'std::__atomic_base<wchar_t> &(const std::__atomic_base<wchar_t> &)'
| | |-UsingShadowDecl 0xb27228 <col:26> col:26 implicit CXXMethod 0xb20108 'operator=' 'std::__atomic_base<wchar_t> &(const std::__atomic_base<wchar_t> &) volatile'
| | |-UsingShadowDecl 0xb272a0 <col:26> col:26 implicit CXXMethod 0xb207b0 'operator=' 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) noexcept'
| | `-UsingShadowDecl 0xb27300 <col:26> col:26 implicit CXXMethod 0xb20980 'operator=' 'std::__atomic_base<wchar_t>::__int_type (std::__atomic_base<wchar_t>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xb27688 <line:1010:3, line:1031:5> line:1011:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<char16_t>':'std::__atomic_base<char16_t>'
| | |-TemplateArgument type 'char16_t'
| | | `-BuiltinType 0x8267e0 'char16_t'
| | |-CXXRecordDecl 0xb310f0 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xb31190 <line:1013:7, col:27> col:27 referenced __integral_type 'char16_t'
| | | `-BuiltinType 0x8267e0 'char16_t'
| | |-TypedefDecl 0xb31280 <line:1014:7, col:40> col:40 referenced __base_type '__atomic_base<char16_t>':'std::__atomic_base<char16_t>'
| | | `-TemplateSpecializationType 0xb31200 '__atomic_base<char16_t>' sugar __atomic_base
| | |   |-TemplateArgument type 'char16_t'
| | |   | `-BuiltinType 0x8267e0 'char16_t'
| | |   `-RecordType 0xb27990 'std::__atomic_base<char16_t>'
| | |     `-ClassTemplateSpecialization 0xb278a8 '__atomic_base'
| | |-CXXConstructorDecl 0xb31348 <line:1016:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xb31440 <line:1017:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xb315e8 <line:1018:7, col:36> col:7 atomic 'void (const std::atomic<char16_t> &)' delete trivial
| | | `-ParmVarDecl 0xb31528 <col:14, col:26> col:27 'const std::atomic<char16_t> &'
| | |-CXXMethodDecl 0xb317a8 <line:1019:7, col:47> col:15 operator= 'std::atomic<char16_t> &(const std::atomic<char16_t> &)' delete trivial
| | | `-ParmVarDecl 0xb316b8 <col:25, col:37> col:38 'const std::atomic<char16_t> &'
| | |-CXXMethodDecl 0xb31958 <line:1020:7, col:56> col:15 operator= 'std::atomic<char16_t> &(const std::atomic<char16_t> &) volatile' delete trivial
| | | `-ParmVarDecl 0xb31860 <col:25, col:37> col:38 'const std::atomic<char16_t> &'
| | |-CXXConstructorDecl 0xb31b10 <line:1022:7, col:75> col:17 constexpr atomic 'void (std::atomic<char16_t>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xb31a40 <col:24, col:40> col:40 used __i 'std::atomic<char16_t>::__integral_type':'char16_t'
| | | |-CXXCtorInitializer 'std::atomic<char16_t>::__base_type':'std::__atomic_base<char16_t>'
| | | | `-CXXConstructExpr 0xb32150 <col:56, col:71> '__atomic_base<char16_t>':'std::__atomic_base<char16_t>' 'void (std::__atomic_base<char16_t>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xb31fc8 <col:68> 'std::atomic<char16_t>::__integral_type':'char16_t' <LValueToRValue>
| | | |     `-DeclRefExpr 0xb31f78 <col:68> 'std::atomic<char16_t>::__integral_type':'char16_t' lvalue ParmVar 0xb31a40 '__i' 'std::atomic<char16_t>::__integral_type':'char16_t'
| | | `-CompoundStmt 0xb321a8 <col:73, col:75>
| | |-UsingDecl 0xb31c48 <line:1024:7, col:35> col:26 __base_type::operator char16_t
| | |-UsingShadowDecl 0xb31ca0 <col:26> col:26 implicit CXXConversion 0xb28a48 'operator char16_t' 'std::__atomic_base<char16_t>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xb31d08 <col:26> col:26 implicit CXXConversion 0xb28ba0 'operator char16_t' 'std::__atomic_base<char16_t>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xb31d90 <line:1025:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xb31df8 <col:26> col:26 implicit CXXMethod 0xb28548 'operator=' 'std::__atomic_base<char16_t> &(const std::__atomic_base<char16_t> &)'
| | |-UsingShadowDecl 0xb31e58 <col:26> col:26 implicit CXXMethod 0xb286d8 'operator=' 'std::__atomic_base<char16_t> &(const std::__atomic_base<char16_t> &) volatile'
| | |-UsingShadowDecl 0xb31eb8 <col:26> col:26 implicit CXXMethod 0xb28d80 'operator=' 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) noexcept'
| | `-UsingShadowDecl 0xb31f18 <col:26> col:26 implicit CXXMethod 0xb28f50 'operator=' 'std::__atomic_base<char16_t>::__int_type (std::__atomic_base<char16_t>::__int_type) volatile noexcept'
| |-ClassTemplateSpecializationDecl 0xb32298 <line:1034:3, line:1055:5> line:1035:12 struct atomic definition
| | |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor needs_overload_resolution
| | | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment needs_overload_resolution
| | | `-Destructor irrelevant trivial user_declared needs_overload_resolution
| | |-public '__atomic_base<char32_t>':'std::__atomic_base<char32_t>'
| | |-TemplateArgument type 'char32_t'
| | | `-BuiltinType 0x826800 'char32_t'
| | |-CXXRecordDecl 0xb396b0 <col:5, col:12> col:12 implicit referenced struct atomic
| | |-TypedefDecl 0xb39750 <line:1037:7, col:27> col:27 referenced __integral_type 'char32_t'
| | | `-BuiltinType 0x826800 'char32_t'
| | |-TypedefDecl 0xb39840 <line:1038:7, col:40> col:40 referenced __base_type '__atomic_base<char32_t>':'std::__atomic_base<char32_t>'
| | | `-TemplateSpecializationType 0xb397c0 '__atomic_base<char32_t>' sugar __atomic_base
| | |   |-TemplateArgument type 'char32_t'
| | |   | `-BuiltinType 0x826800 'char32_t'
| | |   `-RecordType 0xb325a0 'std::__atomic_base<char32_t>'
| | |     `-ClassTemplateSpecialization 0xb324b8 '__atomic_base'
| | |-CXXConstructorDecl 0xb39908 <line:1040:7, col:33> col:7 atomic 'void () noexcept' default trivial
| | |-CXXDestructorDecl 0xb39a00 <line:1041:7, col:34> col:7 ~atomic 'void () noexcept' default trivial
| | |-CXXConstructorDecl 0xb39ba8 <line:1042:7, col:36> col:7 atomic 'void (const std::atomic<char32_t> &)' delete trivial
| | | `-ParmVarDecl 0xb39ae8 <col:14, col:26> col:27 'const std::atomic<char32_t> &'
| | |-CXXMethodDecl 0xb39d68 <line:1043:7, col:47> col:15 operator= 'std::atomic<char32_t> &(const std::atomic<char32_t> &)' delete trivial
| | | `-ParmVarDecl 0xb39c78 <col:25, col:37> col:38 'const std::atomic<char32_t> &'
| | |-CXXMethodDecl 0xb39f18 <line:1044:7, col:56> col:15 operator= 'std::atomic<char32_t> &(const std::atomic<char32_t> &) volatile' delete trivial
| | | `-ParmVarDecl 0xb39e20 <col:25, col:37> col:38 'const std::atomic<char32_t> &'
| | |-CXXConstructorDecl 0xb3a0d0 <line:1046:7, col:75> col:17 constexpr atomic 'void (std::atomic<char32_t>::__integral_type) noexcept'
| | | |-ParmVarDecl 0xb3a000 <col:24, col:40> col:40 used __i 'std::atomic<char32_t>::__integral_type':'char32_t'
| | | |-CXXCtorInitializer 'std::atomic<char32_t>::__base_type':'std::__atomic_base<char32_t>'
| | | | `-CXXConstructExpr 0xb3a710 <col:56, col:71> '__atomic_base<char32_t>':'std::__atomic_base<char32_t>' 'void (std::__atomic_base<char32_t>::__int_type) noexcept'
| | | |   `-ImplicitCastExpr 0xb3a588 <col:68> 'std::atomic<char32_t>::__integral_type':'char32_t' <LValueToRValue>
| | | |     `-DeclRefExpr 0xb3a538 <col:68> 'std::atomic<char32_t>::__integral_type':'char32_t' lvalue ParmVar 0xb3a000 '__i' 'std::atomic<char32_t>::__integral_type':'char32_t'
| | | `-CompoundStmt 0xb3a768 <col:73, col:75>
| | |-UsingDecl 0xb3a208 <line:1048:7, col:35> col:26 __base_type::operator char32_t
| | |-UsingShadowDecl 0xb3a260 <col:26> col:26 implicit CXXConversion 0xb33658 'operator char32_t' 'std::__atomic_base<char32_t>::__int_type () const noexcept'
| | |-UsingShadowDecl 0xb3a2c8 <col:26> col:26 implicit CXXConversion 0xb337b0 'operator char32_t' 'std::__atomic_base<char32_t>::__int_type () const volatile noexcept'
| | |-UsingDecl 0xb3a350 <line:1049:7, col:34> col:26 __base_type::operator=
| | |-UsingShadowDecl 0xb3a3b8 <col:26> col:26 implicit CXXMethod 0xb33158 'operator=' 'std::__atomic_base<char32_t> &(const std::__atomic_base<char32_t> &)'
| | |-UsingShadowDecl 0xb3a418 <col:26> col:26 implicit CXXMethod 0xb332e8 'operator=' 'std::__atomic_base<char32_t> &(const std::__atomic_base<char32_t> &) volatile'
| | |-UsingShadowDecl 0xb3a478 <col:26> col:26 implicit CXXMethod 0xb339c0 'operator=' 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) noexcept'
| | `-UsingShadowDecl 0xb3a4d8 <col:26> col:26 implicit CXXMethod 0xb33b90 'operator=' 'std::__atomic_base<char32_t>::__int_type (std::__atomic_base<char32_t>::__int_type) volatile noexcept'
| |-TypedefDecl 0xb3a8d0 <line:1059:3, col:26> col:26 referenced atomic_bool 'atomic<bool>':'std::atomic<bool>'
| | `-TemplateSpecializationType 0xb3a850 'atomic<bool>' sugar atomic
| |   |-TemplateArgument type 'bool'
| |   | `-BuiltinType 0x826220 'bool'
| |   `-RecordType 0xa91450 'std::atomic<bool>'
| |     `-ClassTemplateSpecialization 0xa91368 'atomic'
| |-TypedefDecl 0xb3a9c0 <line:1062:3, col:26> col:26 atomic_char 'atomic<char>':'std::atomic<char>'
| | `-TemplateSpecializationType 0xb3a940 'atomic<char>' sugar atomic
| |   |-TemplateArgument type 'char'
| |   | `-BuiltinType 0x826240 'char'
| |   `-RecordType 0xaae840 'std::atomic<char>'
| |     `-ClassTemplateSpecialization 0xaae758 'atomic'
| |-TypedefDecl 0xb3aab0 <line:1065:3, col:32> col:32 atomic_schar 'atomic<signed char>':'std::atomic<signed char>'
| | `-TemplateSpecializationType 0xb3aa30 'atomic<signed char>' sugar atomic
| |   |-TemplateArgument type 'signed char'
| |   | `-BuiltinType 0x826260 'signed char'
| |   `-RecordType 0xac0e90 'std::atomic<signed char>'
| |     `-ClassTemplateSpecialization 0xac0da8 'atomic'
| |-TypedefDecl 0xb3aba0 <line:1068:3, col:34> col:34 atomic_uchar 'atomic<unsigned char>':'std::atomic<unsigned char>'
| | `-TemplateSpecializationType 0xb3ab20 'atomic<unsigned char>' sugar atomic
| |   |-TemplateArgument type 'unsigned char'
| |   | `-BuiltinType 0x826300 'unsigned char'
| |   `-RecordType 0xac9490 'std::atomic<unsigned char>'
| |     `-ClassTemplateSpecialization 0xac93b0 'atomic'
| |-TypedefDecl 0xb3ac90 <line:1071:3, col:27> col:27 atomic_short 'atomic<short>':'std::atomic<short>'
| | `-TemplateSpecializationType 0xb3ac10 'atomic<short>' sugar atomic
| |   |-TemplateArgument type 'short'
| |   | `-BuiltinType 0x826280 'short'
| |   `-RecordType 0xad3ae0 'std::atomic<short>'
| |     `-ClassTemplateSpecialization 0xad3a00 'atomic'
| |-TypedefDecl 0xb3ad80 <line:1074:3, col:34> col:34 atomic_ushort 'atomic<unsigned short>':'std::atomic<unsigned short>'
| | `-TemplateSpecializationType 0xb3ad00 'atomic<unsigned short>' sugar atomic
| |   |-TemplateArgument type 'unsigned short'
| |   | `-BuiltinType 0x826320 'unsigned short'
| |   `-RecordType 0xadc0e0 'std::atomic<unsigned short>'
| |     `-ClassTemplateSpecialization 0xadc000 'atomic'
| |-TypedefDecl 0xb3ae70 <line:1077:3, col:25> col:25 atomic_int 'atomic<int>':'std::atomic<int>'
| | `-TemplateSpecializationType 0xb3adf0 'atomic<int>' sugar atomic
| |   |-TemplateArgument type 'int'
| |   | `-BuiltinType 0x8262a0 'int'
| |   `-RecordType 0xae46f0 'std::atomic<int>'
| |     `-ClassTemplateSpecialization 0xae4610 'atomic'
| |-TypedefDecl 0xb3af60 <line:1080:3, col:33> col:33 atomic_uint 'atomic<unsigned int>':'std::atomic<unsigned int>'
| | `-TemplateSpecializationType 0xb3aee0 'atomic<unsigned int>' sugar atomic
| |   |-TemplateArgument type 'unsigned int'
| |   | `-BuiltinType 0x826340 'unsigned int'
| |   `-RecordType 0xaed160 'std::atomic<unsigned int>'
| |     `-ClassTemplateSpecialization 0xaed080 'atomic'
| |-TypedefDecl 0xb3b050 <line:1083:3, col:26> col:26 atomic_long 'atomic<long>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xb3afd0 'atomic<long>' sugar atomic
| |   |-TemplateArgument type 'long'
| |   | `-BuiltinType 0x8262c0 'long'
| |   `-RecordType 0xaf57a0 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xaf56c0 'atomic'
| |-TypedefDecl 0xb3b140 <line:1086:3, col:34> col:34 atomic_ulong 'atomic<unsigned long>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xb3b0c0 'atomic<unsigned long>' sugar atomic
| |   |-TemplateArgument type 'unsigned long'
| |   | `-BuiltinType 0x826360 'unsigned long'
| |   `-RecordType 0xb00c30 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xb00b50 'atomic'
| |-TypedefDecl 0xb3b230 <line:1089:3, col:30> col:30 atomic_llong 'atomic<long long>':'std::atomic<long long>'
| | `-TemplateSpecializationType 0xb3b1b0 'atomic<long long>' sugar atomic
| |   |-TemplateArgument type 'long long'
| |   | `-BuiltinType 0x8262e0 'long long'
| |   `-RecordType 0xb09290 'std::atomic<long long>'
| |     `-ClassTemplateSpecialization 0xb091b0 'atomic'
| |-TypedefDecl 0xb3b320 <line:1092:3, col:38> col:38 atomic_ullong 'atomic<unsigned long long>':'std::atomic<unsigned long long>'
| | `-TemplateSpecializationType 0xb3b2a0 'atomic<unsigned long long>' sugar atomic
| |   |-TemplateArgument type 'unsigned long long'
| |   | `-BuiltinType 0x826380 'unsigned long long'
| |   `-RecordType 0xb13690 'std::atomic<unsigned long long>'
| |     `-ClassTemplateSpecialization 0xb135b0 'atomic'
| |-TypedefDecl 0xb3b410 <line:1095:3, col:28> col:28 atomic_wchar_t 'atomic<wchar_t>':'std::atomic<wchar_t>'
| | `-TemplateSpecializationType 0xb3b390 'atomic<wchar_t>' sugar atomic
| |   |-TemplateArgument type 'wchar_t'
| |   | `-BuiltinType 0x8267a0 'wchar_t'
| |   `-RecordType 0xb1f150 'std::atomic<wchar_t>'
| |     `-ClassTemplateSpecialization 0xb1f068 'atomic'
| |-TypedefDecl 0xb3b500 <line:1103:3, col:29> col:29 atomic_char16_t 'atomic<char16_t>':'std::atomic<char16_t>'
| | `-TemplateSpecializationType 0xb3b480 'atomic<char16_t>' sugar atomic
| |   |-TemplateArgument type 'char16_t'
| |   | `-BuiltinType 0x8267e0 'char16_t'
| |   `-RecordType 0xb27770 'std::atomic<char16_t>'
| |     `-ClassTemplateSpecialization 0xb27688 'atomic'
| |-TypedefDecl 0xb3b5f0 <line:1106:3, col:29> col:29 atomic_char32_t 'atomic<char32_t>':'std::atomic<char32_t>'
| | `-TemplateSpecializationType 0xb3b570 'atomic<char32_t>' sugar atomic
| |   |-TemplateArgument type 'char32_t'
| |   | `-BuiltinType 0x826800 'char32_t'
| |   `-RecordType 0xb32380 'std::atomic<char32_t>'
| |     `-ClassTemplateSpecialization 0xb32298 'atomic'
| |-TypedefDecl 0xb3b700 <line:1113:3, col:27> col:27 atomic_int8_t 'atomic<int8_t>':'std::atomic<signed char>'
| | `-TemplateSpecializationType 0xb3b680 'atomic<int8_t>' sugar atomic
| |   |-TemplateArgument type 'int8_t':'signed char'
| |   | `-TypedefType 0xb3b650 'int8_t' sugar
| |   |   |-Typedef 0x8f3a58 'int8_t'
| |   |   `-TypedefType 0x8ebf90 '__int8_t' sugar
| |   |     |-Typedef 0x8ebc20 '__int8_t'
| |   |     `-BuiltinType 0x826260 'signed char'
| |   `-RecordType 0xac0e90 'std::atomic<signed char>'
| |     `-ClassTemplateSpecialization 0xac0da8 'atomic'
| |-TypedefDecl 0xb3b810 <line:1116:3, col:28> col:28 atomic_uint8_t 'atomic<uint8_t>':'std::atomic<unsigned char>'
| | `-TemplateSpecializationType 0xb3b790 'atomic<uint8_t>' sugar atomic
| |   |-TemplateArgument type 'uint8_t':'unsigned char'
| |   | `-TypedefType 0xb3b760 'uint8_t' sugar
| |   |   |-Typedef 0x8fa6b8 'uint8_t'
| |   |   `-TypedefType 0x8ec020 '__uint8_t' sugar
| |   |     |-Typedef 0x8ebc90 '__uint8_t'
| |   |     `-BuiltinType 0x826300 'unsigned char'
| |   `-RecordType 0xac9490 'std::atomic<unsigned char>'
| |     `-ClassTemplateSpecialization 0xac93b0 'atomic'
| |-TypedefDecl 0xb3d780 <line:1119:3, col:28> col:28 atomic_int16_t 'atomic<int16_t>':'std::atomic<short>'
| | `-TemplateSpecializationType 0xb3b8a0 'atomic<int16_t>' sugar atomic
| |   |-TemplateArgument type 'int16_t':'short'
| |   | `-TypedefType 0xb3b870 'int16_t' sugar
| |   |   |-Typedef 0x8fa580 'int16_t'
| |   |   `-TypedefType 0x8ec0b0 '__int16_t' sugar
| |   |     |-Typedef 0x8ebd00 '__int16_t'
| |   |     `-BuiltinType 0x826280 'short'
| |   `-RecordType 0xad3ae0 'std::atomic<short>'
| |     `-ClassTemplateSpecialization 0xad3a00 'atomic'
| |-TypedefDecl 0xb3d890 <line:1122:3, col:29> col:29 atomic_uint16_t 'atomic<uint16_t>':'std::atomic<unsigned short>'
| | `-TemplateSpecializationType 0xb3d810 'atomic<uint16_t>' sugar atomic
| |   |-TemplateArgument type 'uint16_t':'unsigned short'
| |   | `-TypedefType 0xb3d7e0 'uint16_t' sugar
| |   |   |-Typedef 0x8fa720 'uint16_t'
| |   |   `-TypedefType 0x8ec140 '__uint16_t' sugar
| |   |     |-Typedef 0x8ebd70 '__uint16_t'
| |   |     `-BuiltinType 0x826320 'unsigned short'
| |   `-RecordType 0xadc0e0 'std::atomic<unsigned short>'
| |     `-ClassTemplateSpecialization 0xadc000 'atomic'
| |-TypedefDecl 0xb3d9a0 <line:1125:3, col:28> col:28 atomic_int32_t 'atomic<int32_t>':'std::atomic<int>'
| | `-TemplateSpecializationType 0xb3d920 'atomic<int32_t>' sugar atomic
| |   |-TemplateArgument type 'int32_t':'int'
| |   | `-TypedefType 0xb3d8f0 'int32_t' sugar
| |   |   |-Typedef 0x8fa5e8 'int32_t'
| |   |   `-TypedefType 0x8ec1d0 '__int32_t' sugar
| |   |     |-Typedef 0x8ebde0 '__int32_t'
| |   |     `-BuiltinType 0x8262a0 'int'
| |   `-RecordType 0xae46f0 'std::atomic<int>'
| |     `-ClassTemplateSpecialization 0xae4610 'atomic'
| |-TypedefDecl 0xb3dab0 <line:1128:3, col:29> col:29 atomic_uint32_t 'atomic<uint32_t>':'std::atomic<unsigned int>'
| | `-TemplateSpecializationType 0xb3da30 'atomic<uint32_t>' sugar atomic
| |   |-TemplateArgument type 'uint32_t':'unsigned int'
| |   | `-TypedefType 0xb3da00 'uint32_t' sugar
| |   |   |-Typedef 0x8fa788 'uint32_t'
| |   |   `-TypedefType 0x8ec260 '__uint32_t' sugar
| |   |     |-Typedef 0x8ebe50 '__uint32_t'
| |   |     `-BuiltinType 0x826340 'unsigned int'
| |   `-RecordType 0xaed160 'std::atomic<unsigned int>'
| |     `-ClassTemplateSpecialization 0xaed080 'atomic'
| |-TypedefDecl 0xb3dbc0 <line:1131:3, col:28> col:28 atomic_int64_t 'atomic<int64_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xb3db40 'atomic<int64_t>' sugar atomic
| |   |-TemplateArgument type 'int64_t':'long'
| |   | `-TypedefType 0xb3db10 'int64_t' sugar
| |   |   |-Typedef 0x8fa650 'int64_t'
| |   |   `-TypedefType 0x8ec2f0 '__int64_t' sugar
| |   |     |-Typedef 0x8ebec0 '__int64_t'
| |   |     `-BuiltinType 0x8262c0 'long'
| |   `-RecordType 0xaf57a0 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xaf56c0 'atomic'
| |-TypedefDecl 0xb3dcd0 <line:1134:3, col:29> col:29 atomic_uint64_t 'atomic<uint64_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xb3dc50 'atomic<uint64_t>' sugar atomic
| |   |-TemplateArgument type 'uint64_t':'unsigned long'
| |   | `-TypedefType 0xb3dc20 'uint64_t' sugar
| |   |   |-Typedef 0x8fa7f0 'uint64_t'
| |   |   `-TypedefType 0x8ec380 '__uint64_t' sugar
| |   |     |-Typedef 0x8ebf30 '__uint64_t'
| |   |     `-BuiltinType 0x826360 'unsigned long'
| |   `-RecordType 0xb00c30 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xb00b50 'atomic'
| |-TypedefDecl 0xb3dde0 <line:1138:3, col:33> col:33 atomic_int_least8_t 'atomic<int_least8_t>':'std::atomic<signed char>'
| | `-TemplateSpecializationType 0xb3dd60 'atomic<int_least8_t>' sugar atomic
| |   |-TemplateArgument type 'int_least8_t':'signed char'
| |   | `-TypedefType 0xb3dd30 'int_least8_t' sugar
| |   |   |-Typedef 0x8fa880 'int_least8_t'
| |   |   `-TypedefType 0x8fa850 '__int_least8_t' sugar
| |   |     |-Typedef 0x8ebfc0 '__int_least8_t'
| |   |     `-TypedefType 0x8ebf90 '__int8_t' sugar
| |   |       |-Typedef 0x8ebc20 '__int8_t'
| |   |       `-BuiltinType 0x826260 'signed char'
| |   `-RecordType 0xac0e90 'std::atomic<signed char>'
| |     `-ClassTemplateSpecialization 0xac0da8 'atomic'
| |-TypedefDecl 0xb3def0 <line:1141:3, col:34> col:34 atomic_uint_least8_t 'atomic<uint_least8_t>':'std::atomic<unsigned char>'
| | `-TemplateSpecializationType 0xb3de70 'atomic<uint_least8_t>' sugar atomic
| |   |-TemplateArgument type 'uint_least8_t':'unsigned char'
| |   | `-TypedefType 0xb3de40 'uint_least8_t' sugar
| |   |   |-Typedef 0x8faac0 'uint_least8_t'
| |   |   `-TypedefType 0x8faa90 '__uint_least8_t' sugar
| |   |     |-Typedef 0x8ec050 '__uint_least8_t'
| |   |     `-TypedefType 0x8ec020 '__uint8_t' sugar
| |   |       |-Typedef 0x8ebc90 '__uint8_t'
| |   |       `-BuiltinType 0x826300 'unsigned char'
| |   `-RecordType 0xac9490 'std::atomic<unsigned char>'
| |     `-ClassTemplateSpecialization 0xac93b0 'atomic'
| |-TypedefDecl 0xb3e000 <line:1144:3, col:34> col:34 atomic_int_least16_t 'atomic<int_least16_t>':'std::atomic<short>'
| | `-TemplateSpecializationType 0xb3df80 'atomic<int_least16_t>' sugar atomic
| |   |-TemplateArgument type 'int_least16_t':'short'
| |   | `-TypedefType 0xb3df50 'int_least16_t' sugar
| |   |   |-Typedef 0x8fa910 'int_least16_t'
| |   |   `-TypedefType 0x8fa8e0 '__int_least16_t' sugar
| |   |     |-Typedef 0x8ec0e0 '__int_least16_t'
| |   |     `-TypedefType 0x8ec0b0 '__int16_t' sugar
| |   |       |-Typedef 0x8ebd00 '__int16_t'
| |   |       `-BuiltinType 0x826280 'short'
| |   `-RecordType 0xad3ae0 'std::atomic<short>'
| |     `-ClassTemplateSpecialization 0xad3a00 'atomic'
| |-TypedefDecl 0xb3e110 <line:1147:3, col:34> col:34 atomic_uint_least16_t 'atomic<uint_least16_t>':'std::atomic<unsigned short>'
| | `-TemplateSpecializationType 0xb3e090 'atomic<uint_least16_t>' sugar atomic
| |   |-TemplateArgument type 'uint_least16_t':'unsigned short'
| |   | `-TypedefType 0xb3e060 'uint_least16_t' sugar
| |   |   |-Typedef 0x8fab50 'uint_least16_t'
| |   |   `-TypedefType 0x8fab20 '__uint_least16_t' sugar
| |   |     |-Typedef 0x8ec170 '__uint_least16_t'
| |   |     `-TypedefType 0x8ec140 '__uint16_t' sugar
| |   |       |-Typedef 0x8ebd70 '__uint16_t'
| |   |       `-BuiltinType 0x826320 'unsigned short'
| |   `-RecordType 0xadc0e0 'std::atomic<unsigned short>'
| |     `-ClassTemplateSpecialization 0xadc000 'atomic'
| |-TypedefDecl 0xb3e220 <line:1150:3, col:34> col:34 atomic_int_least32_t 'atomic<int_least32_t>':'std::atomic<int>'
| | `-TemplateSpecializationType 0xb3e1a0 'atomic<int_least32_t>' sugar atomic
| |   |-TemplateArgument type 'int_least32_t':'int'
| |   | `-TypedefType 0xb3e170 'int_least32_t' sugar
| |   |   |-Typedef 0x8fa9a0 'int_least32_t'
| |   |   `-TypedefType 0x8fa970 '__int_least32_t' sugar
| |   |     |-Typedef 0x8ec200 '__int_least32_t'
| |   |     `-TypedefType 0x8ec1d0 '__int32_t' sugar
| |   |       |-Typedef 0x8ebde0 '__int32_t'
| |   |       `-BuiltinType 0x8262a0 'int'
| |   `-RecordType 0xae46f0 'std::atomic<int>'
| |     `-ClassTemplateSpecialization 0xae4610 'atomic'
| |-TypedefDecl 0xb3e330 <line:1153:3, col:34> col:34 atomic_uint_least32_t 'atomic<uint_least32_t>':'std::atomic<unsigned int>'
| | `-TemplateSpecializationType 0xb3e2b0 'atomic<uint_least32_t>' sugar atomic
| |   |-TemplateArgument type 'uint_least32_t':'unsigned int'
| |   | `-TypedefType 0xb3e280 'uint_least32_t' sugar
| |   |   |-Typedef 0x8fabe0 'uint_least32_t'
| |   |   `-TypedefType 0x8fabb0 '__uint_least32_t' sugar
| |   |     |-Typedef 0x8ec290 '__uint_least32_t'
| |   |     `-TypedefType 0x8ec260 '__uint32_t' sugar
| |   |       |-Typedef 0x8ebe50 '__uint32_t'
| |   |       `-BuiltinType 0x826340 'unsigned int'
| |   `-RecordType 0xaed160 'std::atomic<unsigned int>'
| |     `-ClassTemplateSpecialization 0xaed080 'atomic'
| |-TypedefDecl 0xb3e440 <line:1156:3, col:34> col:34 atomic_int_least64_t 'atomic<int_least64_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xb3e3c0 'atomic<int_least64_t>' sugar atomic
| |   |-TemplateArgument type 'int_least64_t':'long'
| |   | `-TypedefType 0xb3e390 'int_least64_t' sugar
| |   |   |-Typedef 0x8faa30 'int_least64_t'
| |   |   `-TypedefType 0x8faa00 '__int_least64_t' sugar
| |   |     |-Typedef 0x8ec320 '__int_least64_t'
| |   |     `-TypedefType 0x8ec2f0 '__int64_t' sugar
| |   |       |-Typedef 0x8ebec0 '__int64_t'
| |   |       `-BuiltinType 0x8262c0 'long'
| |   `-RecordType 0xaf57a0 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xaf56c0 'atomic'
| |-TypedefDecl 0xb3e550 <line:1159:3, col:34> col:34 atomic_uint_least64_t 'atomic<uint_least64_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xb3e4d0 'atomic<uint_least64_t>' sugar atomic
| |   |-TemplateArgument type 'uint_least64_t':'unsigned long'
| |   | `-TypedefType 0xb3e4a0 'uint_least64_t' sugar
| |   |   |-Typedef 0x8fac70 'uint_least64_t'
| |   |   `-TypedefType 0x8fac40 '__uint_least64_t' sugar
| |   |     |-Typedef 0x8ec3b0 '__uint_least64_t'
| |   |     `-TypedefType 0x8ec380 '__uint64_t' sugar
| |   |       |-Typedef 0x8ebf30 '__uint64_t'
| |   |       `-BuiltinType 0x826360 'unsigned long'
| |   `-RecordType 0xb00c30 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xb00b50 'atomic'
| |-TypedefDecl 0xb3e660 <line:1163:3, col:32> col:32 atomic_int_fast8_t 'atomic<int_fast8_t>':'std::atomic<signed char>'
| | `-TemplateSpecializationType 0xb3e5e0 'atomic<int_fast8_t>' sugar atomic
| |   |-TemplateArgument type 'int_fast8_t':'signed char'
| |   | `-TypedefType 0xb3e5b0 'int_fast8_t' sugar
| |   |   |-Typedef 0x8face0 'int_fast8_t'
| |   |   `-BuiltinType 0x826260 'signed char'
| |   `-RecordType 0xac0e90 'std::atomic<signed char>'
| |     `-ClassTemplateSpecialization 0xac0da8 'atomic'
| |-TypedefDecl 0xb3e770 <line:1166:3, col:33> col:33 atomic_uint_fast8_t 'atomic<uint_fast8_t>':'std::atomic<unsigned char>'
| | `-TemplateSpecializationType 0xb3e6f0 'atomic<uint_fast8_t>' sugar atomic
| |   |-TemplateArgument type 'uint_fast8_t':'unsigned char'
| |   | `-TypedefType 0xb3e6c0 'uint_fast8_t' sugar
| |   |   |-Typedef 0x8faea0 'uint_fast8_t'
| |   |   `-BuiltinType 0x826300 'unsigned char'
| |   `-RecordType 0xac9490 'std::atomic<unsigned char>'
| |     `-ClassTemplateSpecialization 0xac93b0 'atomic'
| |-TypedefDecl 0xb3e880 <line:1169:3, col:33> col:33 atomic_int_fast16_t 'atomic<int_fast16_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xb3e800 'atomic<int_fast16_t>' sugar atomic
| |   |-TemplateArgument type 'int_fast16_t':'long'
| |   | `-TypedefType 0xb3e7d0 'int_fast16_t' sugar
| |   |   |-Typedef 0x8fad50 'int_fast16_t'
| |   |   `-BuiltinType 0x8262c0 'long'
| |   `-RecordType 0xaf57a0 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xaf56c0 'atomic'
| |-TypedefDecl 0xb3e990 <line:1172:3, col:34> col:34 atomic_uint_fast16_t 'atomic<uint_fast16_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xb3e910 'atomic<uint_fast16_t>' sugar atomic
| |   |-TemplateArgument type 'uint_fast16_t':'unsigned long'
| |   | `-TypedefType 0xb3e8e0 'uint_fast16_t' sugar
| |   |   |-Typedef 0x8faf10 'uint_fast16_t'
| |   |   `-BuiltinType 0x826360 'unsigned long'
| |   `-RecordType 0xb00c30 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xb00b50 'atomic'
| |-TypedefDecl 0xb3eaa0 <line:1175:3, col:33> col:33 atomic_int_fast32_t 'atomic<int_fast32_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xb3ea20 'atomic<int_fast32_t>' sugar atomic
| |   |-TemplateArgument type 'int_fast32_t':'long'
| |   | `-TypedefType 0xb3e9f0 'int_fast32_t' sugar
| |   |   |-Typedef 0x8fadc0 'int_fast32_t'
| |   |   `-BuiltinType 0x8262c0 'long'
| |   `-RecordType 0xaf57a0 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xaf56c0 'atomic'
| |-TypedefDecl 0xb3ebb0 <line:1178:3, col:34> col:34 atomic_uint_fast32_t 'atomic<uint_fast32_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xb3eb30 'atomic<uint_fast32_t>' sugar atomic
| |   |-TemplateArgument type 'uint_fast32_t':'unsigned long'
| |   | `-TypedefType 0xb3eb00 'uint_fast32_t' sugar
| |   |   |-Typedef 0x8faf80 'uint_fast32_t'
| |   |   `-BuiltinType 0x826360 'unsigned long'
| |   `-RecordType 0xb00c30 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xb00b50 'atomic'
| |-TypedefDecl 0xb3ecc0 <line:1181:3, col:33> col:33 atomic_int_fast64_t 'atomic<int_fast64_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xb3ec40 'atomic<int_fast64_t>' sugar atomic
| |   |-TemplateArgument type 'int_fast64_t':'long'
| |   | `-TypedefType 0xb3ec10 'int_fast64_t' sugar
| |   |   |-Typedef 0x8fae30 'int_fast64_t'
| |   |   `-BuiltinType 0x8262c0 'long'
| |   `-RecordType 0xaf57a0 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xaf56c0 'atomic'
| |-TypedefDecl 0xb3edd0 <line:1184:3, col:34> col:34 atomic_uint_fast64_t 'atomic<uint_fast64_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xb3ed50 'atomic<uint_fast64_t>' sugar atomic
| |   |-TemplateArgument type 'uint_fast64_t':'unsigned long'
| |   | `-TypedefType 0xb3ed20 'uint_fast64_t' sugar
| |   |   |-Typedef 0x8faff0 'uint_fast64_t'
| |   |   `-BuiltinType 0x826360 'unsigned long'
| |   `-RecordType 0xb00c30 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xb00b50 'atomic'
| |-TypedefDecl 0xb3eee0 <line:1189:3, col:29> col:29 atomic_intptr_t 'atomic<intptr_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xb3ee60 'atomic<intptr_t>' sugar atomic
| |   |-TemplateArgument type 'intptr_t':'long'
| |   | `-TypedefType 0xb3ee30 'intptr_t' sugar
| |   |   |-Typedef 0x8fb060 'intptr_t'
| |   |   `-BuiltinType 0x8262c0 'long'
| |   `-RecordType 0xaf57a0 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xaf56c0 'atomic'
| |-TypedefDecl 0xb3eff0 <line:1192:3, col:30> col:30 atomic_uintptr_t 'atomic<uintptr_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xb3ef70 'atomic<uintptr_t>' sugar atomic
| |   |-TemplateArgument type 'uintptr_t':'unsigned long'
| |   | `-TypedefType 0xb3ef40 'uintptr_t' sugar
| |   |   |-Typedef 0x8fb0d0 'uintptr_t'
| |   |   `-BuiltinType 0x826360 'unsigned long'
| |   `-RecordType 0xb00c30 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xb00b50 'atomic'
| |-TypedefDecl 0xb3f0e0 <line:1195:3, col:27> col:27 atomic_size_t 'atomic<std::size_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xb3f060 'atomic<std::size_t>' sugar atomic
| |   |-TemplateArgument type 'std::size_t':'unsigned long'
| |   | `-TypedefType 0x923fd0 'std::size_t' sugar
| |   |   |-Typedef 0x86b898 'size_t'
| |   |   `-BuiltinType 0x826360 'unsigned long'
| |   `-RecordType 0xb00c30 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xb00b50 'atomic'
| |-TypedefDecl 0xb3f1d0 <line:1198:3, col:30> col:30 atomic_ptrdiff_t 'atomic<std::ptrdiff_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xb3f150 'atomic<std::ptrdiff_t>' sugar atomic
| |   |-TemplateArgument type 'std::ptrdiff_t':'long'
| |   | `-TypedefType 0xa84010 'std::ptrdiff_t' sugar
| |   |   |-Typedef 0x86b908 'ptrdiff_t'
| |   |   `-BuiltinType 0x8262c0 'long'
| |   `-RecordType 0xaf57a0 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xaf56c0 'atomic'
| |-TypedefDecl 0xb3f2e0 <line:1202:3, col:29> col:29 atomic_intmax_t 'atomic<intmax_t>':'std::atomic<long>'
| | `-TemplateSpecializationType 0xb3f260 'atomic<intmax_t>' sugar atomic
| |   |-TemplateArgument type 'intmax_t':'long'
| |   | `-TypedefType 0xb3f230 'intmax_t' sugar
| |   |   |-Typedef 0x8fb160 'intmax_t'
| |   |   `-TypedefType 0x8fb130 '__intmax_t' sugar
| |   |     |-Typedef 0x8ec500 '__intmax_t'
| |   |     `-BuiltinType 0x8262c0 'long'
| |   `-RecordType 0xaf57a0 'std::atomic<long>'
| |     `-ClassTemplateSpecialization 0xaf56c0 'atomic'
| |-TypedefDecl 0xb3f3f0 <line:1205:3, col:30> col:30 atomic_uintmax_t 'atomic<uintmax_t>':'std::atomic<unsigned long>'
| | `-TemplateSpecializationType 0xb3f370 'atomic<uintmax_t>' sugar atomic
| |   |-TemplateArgument type 'uintmax_t':'unsigned long'
| |   | `-TypedefType 0xb3f340 'uintmax_t' sugar
| |   |   |-Typedef 0x8fb1f0 'uintmax_t'
| |   |   `-TypedefType 0x8fb1c0 '__uintmax_t' sugar
| |   |     |-Typedef 0x8ec570 '__uintmax_t'
| |   |     `-BuiltinType 0x826360 'unsigned long'
| |   `-RecordType 0xb00c30 'std::atomic<unsigned long>'
| |     `-ClassTemplateSpecialization 0xb00b50 'atomic'
| |-FunctionDecl 0xb3f5f0 <line:1209:3, line:1212:36> line:1210:3 used atomic_flag_test_and_set_explicit 'bool (std::atomic_flag *, std::memory_order) noexcept' inline
| | |-ParmVarDecl 0xb3f458 <col:37, col:50> col:50 used __a 'std::atomic_flag *'
| | |-ParmVarDecl 0xb3f4d0 <line:1211:9, col:22> col:22 used __m 'std::memory_order':'std::memory_order'
| | `-CompoundStmt 0xb3f7d8 <line:1212:3, col:36>
| |   `-ReturnStmt 0xb3f7c8 <col:5, col:33>
| |     `-CXXMemberCallExpr 0xb3f788 <col:12, col:33> 'bool'
| |       |-MemberExpr 0xb3f758 <col:12, col:17> '<bound member function type>' ->test_and_set 0xa55c88
| |       | `-ImplicitCastExpr 0xb3f6c0 <col:12> 'std::atomic_flag *' <LValueToRValue>
| |       |   `-DeclRefExpr 0xb3f6a0 <col:12> 'std::atomic_flag *' lvalue ParmVar 0xb3f458 '__a' 'std::atomic_flag *'
| |       `-ImplicitCastExpr 0xb3f7b0 <col:30> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |         `-DeclRefExpr 0xb3f738 <col:30> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb3f4d0 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionDecl 0xb3f990 <line:1214:3, line:1217:36> line:1215:3 used atomic_flag_test_and_set_explicit 'bool (volatile std::atomic_flag *, std::memory_order) noexcept' inline
| | |-ParmVarDecl 0xb3f800 <col:37, col:59> col:59 used __a 'volatile std::atomic_flag *'
| | |-ParmVarDecl 0xb3f878 <line:1216:9, col:22> col:22 used __m 'std::memory_order':'std::memory_order'
| | `-CompoundStmt 0xb3fb88 <line:1217:3, col:36>
| |   `-ReturnStmt 0xb3fb78 <col:5, col:33>
| |     `-CXXMemberCallExpr 0xb3fb38 <col:12, col:33> 'bool'
| |       |-MemberExpr 0xb3fb08 <col:12, col:17> '<bound member function type>' ->test_and_set 0xa55e90
| |       | `-ImplicitCastExpr 0xb3fa70 <col:12> 'volatile std::atomic_flag *' <LValueToRValue>
| |       |   `-DeclRefExpr 0xb3fa50 <col:12> 'volatile std::atomic_flag *' lvalue ParmVar 0xb3f800 '__a' 'volatile std::atomic_flag *'
| |       `-ImplicitCastExpr 0xb3fb60 <col:30> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |         `-DeclRefExpr 0xb3fae8 <col:30> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb3f878 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionDecl 0xb3fd40 <line:1219:3, line:1221:22> line:1220:3 used atomic_flag_clear_explicit 'void (std::atomic_flag *, std::memory_order) noexcept' inline
| | |-ParmVarDecl 0xb3fbb0 <col:30, col:43> col:43 used __a 'std::atomic_flag *'
| | |-ParmVarDecl 0xb3fc28 <col:48, col:61> col:61 used __m 'std::memory_order':'std::memory_order'
| | `-CompoundStmt 0xb3ff18 <line:1221:3, col:22>
| |   `-CXXMemberCallExpr 0xb3fed8 <col:5, col:19> 'void'
| |     |-MemberExpr 0xb3fea8 <col:5, col:10> '<bound member function type>' ->clear 0xa56048
| |     | `-ImplicitCastExpr 0xb3fe10 <col:5> 'std::atomic_flag *' <LValueToRValue>
| |     |   `-DeclRefExpr 0xb3fdf0 <col:5> 'std::atomic_flag *' lvalue ParmVar 0xb3fbb0 '__a' 'std::atomic_flag *'
| |     `-ImplicitCastExpr 0xb3ff00 <col:16> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |       `-DeclRefExpr 0xb3fe88 <col:16> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb3fc28 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionDecl 0xb400d0 <line:1223:3, line:1226:22> line:1224:3 used atomic_flag_clear_explicit 'void (volatile std::atomic_flag *, std::memory_order) noexcept' inline
| | |-ParmVarDecl 0xb3ff40 <col:30, col:52> col:52 used __a 'volatile std::atomic_flag *'
| | |-ParmVarDecl 0xb3ffb8 <line:1225:9, col:22> col:22 used __m 'std::memory_order':'std::memory_order'
| | `-CompoundStmt 0xb402b8 <line:1226:3, col:22>
| |   `-CXXMemberCallExpr 0xb40278 <col:5, col:19> 'void'
| |     |-MemberExpr 0xb40248 <col:5, col:10> '<bound member function type>' ->clear 0xa5a4e0
| |     | `-ImplicitCastExpr 0xb401b0 <col:5> 'volatile std::atomic_flag *' <LValueToRValue>
| |     |   `-DeclRefExpr 0xb40190 <col:5> 'volatile std::atomic_flag *' lvalue ParmVar 0xb3ff40 '__a' 'volatile std::atomic_flag *'
| |     `-ImplicitCastExpr 0xb402a0 <col:16> 'std::memory_order':'std::memory_order' <LValueToRValue>
| |       `-DeclRefExpr 0xb40228 <col:16> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb3ffb8 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionDecl 0xb403e0 <line:1228:3, line:1230:74> line:1229:3 atomic_flag_test_and_set 'bool (std::atomic_flag *) noexcept' inline
| | |-ParmVarDecl 0xb402e0 <col:28, col:41> col:41 used __a 'std::atomic_flag *'
| | `-CompoundStmt 0xb40608 <line:1230:3, col:74>
| |   `-ReturnStmt 0xb405f8 <col:5, col:71>
| |     `-CallExpr 0xb405b0 <col:12, col:71> 'bool'
| |       |-ImplicitCastExpr 0xb40598 <col:12> 'bool (*)(std::atomic_flag *, std::memory_order) noexcept' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0xb40518 <col:12> 'bool (std::atomic_flag *, std::memory_order) noexcept' lvalue Function 0xb3f5f0 'atomic_flag_test_and_set_explicit' 'bool (std::atomic_flag *, std::memory_order) noexcept'
| |       |-ImplicitCastExpr 0xb405e0 <col:46> 'std::atomic_flag *' <LValueToRValue>
| |       | `-DeclRefExpr 0xb404d8 <col:46> 'std::atomic_flag *' lvalue ParmVar 0xb402e0 '__a' 'std::atomic_flag *'
| |       `-DeclRefExpr 0xb404f8 <col:51> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionDecl 0xb40730 <line:1232:3, line:1234:74> line:1233:3 atomic_flag_test_and_set 'bool (volatile std::atomic_flag *) noexcept' inline
| | |-ParmVarDecl 0xb40630 <col:28, col:50> col:50 used __a 'volatile std::atomic_flag *'
| | `-CompoundStmt 0xb40968 <line:1234:3, col:74>
| |   `-ReturnStmt 0xb40958 <col:5, col:71>
| |     `-CallExpr 0xb40910 <col:12, col:71> 'bool'
| |       |-ImplicitCastExpr 0xb408f8 <col:12> 'bool (*)(volatile std::atomic_flag *, std::memory_order) noexcept' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0xb40878 <col:12> 'bool (volatile std::atomic_flag *, std::memory_order) noexcept' lvalue Function 0xb3f990 'atomic_flag_test_and_set_explicit' 'bool (volatile std::atomic_flag *, std::memory_order) noexcept'
| |       |-ImplicitCastExpr 0xb40940 <col:46> 'volatile std::atomic_flag *' <LValueToRValue>
| |       | `-DeclRefExpr 0xb40838 <col:46> 'volatile std::atomic_flag *' lvalue ParmVar 0xb40630 '__a' 'volatile std::atomic_flag *'
| |       `-DeclRefExpr 0xb40858 <col:51> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionDecl 0xb40a90 <line:1236:3, line:1238:60> line:1237:3 atomic_flag_clear 'void (std::atomic_flag *) noexcept' inline
| | |-ParmVarDecl 0xb40990 <col:21, col:34> col:34 used __a 'std::atomic_flag *'
| | `-CompoundStmt 0xb40ca8 <line:1238:3, col:60>
| |   `-CallExpr 0xb40c60 <col:5, col:57> 'void'
| |     |-ImplicitCastExpr 0xb40c48 <col:5> 'void (*)(std::atomic_flag *, std::memory_order) noexcept' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0xb40bc8 <col:5> 'void (std::atomic_flag *, std::memory_order) noexcept' lvalue Function 0xb3fd40 'atomic_flag_clear_explicit' 'void (std::atomic_flag *, std::memory_order) noexcept'
| |     |-ImplicitCastExpr 0xb40c90 <col:32> 'std::atomic_flag *' <LValueToRValue>
| |     | `-DeclRefExpr 0xb40b88 <col:32> 'std::atomic_flag *' lvalue ParmVar 0xb40990 '__a' 'std::atomic_flag *'
| |     `-DeclRefExpr 0xb40ba8 <col:37> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionDecl 0xb40dd0 <line:1240:3, line:1242:60> line:1241:3 atomic_flag_clear 'void (volatile std::atomic_flag *) noexcept' inline
| | |-ParmVarDecl 0xb40cd0 <col:21, col:43> col:43 used __a 'volatile std::atomic_flag *'
| | `-CompoundStmt 0xb40ff8 <line:1242:3, col:60>
| |   `-CallExpr 0xb40fb0 <col:5, col:57> 'void'
| |     |-ImplicitCastExpr 0xb40f98 <col:5> 'void (*)(volatile std::atomic_flag *, std::memory_order) noexcept' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0xb40f18 <col:5> 'void (volatile std::atomic_flag *, std::memory_order) noexcept' lvalue Function 0xb400d0 'atomic_flag_clear_explicit' 'void (volatile std::atomic_flag *, std::memory_order) noexcept'
| |     |-ImplicitCastExpr 0xb40fe0 <col:32> 'volatile std::atomic_flag *' <LValueToRValue>
| |     | `-DeclRefExpr 0xb40ed8 <col:32> 'volatile std::atomic_flag *' lvalue ParmVar 0xb40cd0 '__a' 'volatile std::atomic_flag *'
| |     `-DeclRefExpr 0xb40ef8 <col:37> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-TypeAliasTemplateDecl 0xb41250 <line:1245:3, line:1246:50> col:5 __atomic_val_t
| | |-TemplateTypeParmDecl 0xb41010 <line:1245:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xb411f0 <line:1246:5, col:50> col:11 __atomic_val_t 'typename atomic<_Tp>::value_type'
| |   `-DependentNameType 0xb41180 'typename atomic<_Tp>::value_type' dependent
| |-TypeAliasTemplateDecl 0xb414d0 <line:1247:3, line:1248:51> col:5 __atomic_diff_t
| | |-TemplateTypeParmDecl 0xb412a8 <line:1247:12, col:21> col:21 referenced typename depth 0 index 0 _Tp
| | `-TypeAliasDecl 0xb41470 <line:1248:5, col:51> col:11 __atomic_diff_t 'typename atomic<_Tp>::difference_type'
| |   `-DependentNameType 0xb41400 'typename atomic<_Tp>::difference_type' dependent
| |-FunctionTemplateDecl 0xb42870 <line:1252:3, line:1255:35> line:1254:5 atomic_is_lock_free
| | |-TemplateTypeParmDecl 0xb41528 <line:1252:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb427d0 <line:1253:5, line:1255:35> line:1254:5 atomic_is_lock_free 'bool (const atomic<_ITp> *) noexcept' inline
| |   |-ParmVarDecl 0xb416b0 <col:25, col:45> col:45 referenced __a 'const atomic<_ITp> *'
| |   `-CompoundStmt 0xb429e0 <line:1255:5, col:35>
| |     `-ReturnStmt 0xb429d0 <col:7, col:32>
| |       `-CallExpr 0xb429b0 <col:14, col:32> '<dependent type>'
| |         `-CXXDependentScopeMemberExpr 0xb42968 <col:14, col:19> '<dependent type>' lvalue ->is_lock_free
| |           `-DeclRefExpr 0xb42948 <col:14> 'const atomic<_ITp> *' lvalue ParmVar 0xb416b0 '__a' 'const atomic<_ITp> *'
| |-FunctionTemplateDecl 0xb42d20 <line:1257:3, line:1260:35> line:1259:5 atomic_is_lock_free
| | |-TemplateTypeParmDecl 0xb429f8 <line:1257:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb42c80 <line:1258:5, line:1260:35> line:1259:5 atomic_is_lock_free 'bool (const volatile atomic<_ITp> *) noexcept' inline
| |   |-ParmVarDecl 0xb42b80 <col:25, col:54> col:54 referenced __a 'const volatile atomic<_ITp> *'
| |   `-CompoundStmt 0xb42ea0 <line:1260:5, col:35>
| |     `-ReturnStmt 0xb42e90 <col:7, col:32>
| |       `-CallExpr 0xb42e70 <col:14, col:32> '<dependent type>'
| |         `-CXXDependentScopeMemberExpr 0xb42e28 <col:14, col:19> '<dependent type>' lvalue ->is_lock_free
| |           `-DeclRefExpr 0xb42e08 <col:14> 'const volatile atomic<_ITp> *' lvalue ParmVar 0xb42b80 '__a' 'const volatile atomic<_ITp> *'
| |-FunctionTemplateDecl 0xb43480 <line:1262:3, line:1265:46> line:1264:5 atomic_init
| | |-TemplateTypeParmDecl 0xb42eb8 <line:1262:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb433e0 <line:1263:5, line:1265:46> line:1264:5 atomic_init 'void (atomic<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb43040 <col:17, col:31> col:31 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xb432c8 <col:36, col:57> col:57 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb43638 <line:1265:5, col:46>
| |     `-CallExpr 0xb43608 <col:7, col:43> '<dependent type>'
| |       |-CXXDependentScopeMemberExpr 0xb43580 <col:7, col:12> '<dependent type>' lvalue ->store
| |       | `-DeclRefExpr 0xb43560 <col:7> 'atomic<_ITp> *' lvalue ParmVar 0xb43040 '__a' 'atomic<_ITp> *'
| |       |-DeclRefExpr 0xb435c8 <col:18> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb432c8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |       `-DeclRefExpr 0xb435e8 <col:23> 'std::memory_order' EnumConstant 0xa51380 'memory_order_relaxed' 'std::memory_order'
| |-FunctionTemplateDecl 0xb43be0 <line:1267:3, line:1270:46> line:1269:5 atomic_init
| | |-TemplateTypeParmDecl 0xb43650 <line:1267:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb43b40 <line:1268:5, line:1270:46> line:1269:5 atomic_init 'void (volatile atomic<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb437d0 <col:17, col:40> col:40 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb43a28 <col:45, col:66> col:66 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb43da8 <line:1270:5, col:46>
| |     `-CallExpr 0xb43d78 <col:7, col:43> '<dependent type>'
| |       |-CXXDependentScopeMemberExpr 0xb43cf0 <col:7, col:12> '<dependent type>' lvalue ->store
| |       | `-DeclRefExpr 0xb43cd0 <col:7> 'volatile atomic<_ITp> *' lvalue ParmVar 0xb437d0 '__a' 'volatile atomic<_ITp> *'
| |       |-DeclRefExpr 0xb43d38 <col:18> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb43a28 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |       `-DeclRefExpr 0xb43d58 <col:23> 'std::memory_order' EnumConstant 0xa51380 'memory_order_relaxed' 'std::memory_order'
| |-FunctionTemplateDecl 0xb443b0 <line:1272:3, line:1276:29> line:1274:5 atomic_store_explicit
| | |-TemplateTypeParmDecl 0xb43dc0 <line:1272:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb44310 <line:1273:5, line:1276:29> line:1274:5 atomic_store_explicit 'void (atomic<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb43f10 <col:27, col:41> col:41 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xb44168 <col:46, col:67> col:67 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb441e0 <line:1275:6, col:19> col:19 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb44570 <line:1276:5, col:29>
| |     `-CallExpr 0xb44540 <col:7, col:26> '<dependent type>'
| |       |-CXXDependentScopeMemberExpr 0xb444b8 <col:7, col:12> '<dependent type>' lvalue ->store
| |       | `-DeclRefExpr 0xb44498 <col:7> 'atomic<_ITp> *' lvalue ParmVar 0xb43f10 '__a' 'atomic<_ITp> *'
| |       |-DeclRefExpr 0xb44500 <col:18> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb44168 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |       `-DeclRefExpr 0xb44520 <col:23> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb441e0 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb44b80 <line:1278:3, line:1282:29> line:1280:5 atomic_store_explicit
| | |-TemplateTypeParmDecl 0xb44588 <line:1278:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb44ae0 <line:1279:5, line:1282:29> line:1280:5 atomic_store_explicit 'void (volatile atomic<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb446e0 <col:27, col:50> col:50 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb44938 <col:55, col:76> col:76 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb449b0 <line:1281:6, col:19> col:19 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb44d50 <line:1282:5, col:29>
| |     `-CallExpr 0xb44d20 <col:7, col:26> '<dependent type>'
| |       |-CXXDependentScopeMemberExpr 0xb44c98 <col:7, col:12> '<dependent type>' lvalue ->store
| |       | `-DeclRefExpr 0xb44c78 <col:7> 'volatile atomic<_ITp> *' lvalue ParmVar 0xb446e0 '__a' 'volatile atomic<_ITp> *'
| |       |-DeclRefExpr 0xb44ce0 <col:18> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb44938 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |       `-DeclRefExpr 0xb44d00 <col:23> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb449b0 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb450f0 <line:1284:3, line:1287:30> line:1286:5 atomic_load_explicit
| | |-TemplateTypeParmDecl 0xb44d68 <line:1284:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb45050 <line:1285:5, line:1287:30> line:1286:5 atomic_load_explicit '_ITp (const atomic<_ITp> *, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb44ec0 <col:26, col:46> col:46 referenced __a 'const atomic<_ITp> *'
| |   |-ParmVarDecl 0xb44f38 <col:51, col:64> col:64 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb45290 <line:1287:5, col:30>
| |     `-ReturnStmt 0xb45280 <col:7, col:27>
| |       `-CallExpr 0xb45258 <col:14, col:27> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb451f0 <col:14, col:19> '<dependent type>' lvalue ->load
| |         | `-DeclRefExpr 0xb451d0 <col:14> 'const atomic<_ITp> *' lvalue ParmVar 0xb44ec0 '__a' 'const atomic<_ITp> *'
| |         `-DeclRefExpr 0xb45238 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb44f38 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb45630 <line:1289:3, line:1293:30> line:1291:5 atomic_load_explicit
| | |-TemplateTypeParmDecl 0xb452a8 <line:1289:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb45590 <line:1290:5, line:1293:30> line:1291:5 atomic_load_explicit '_ITp (const volatile atomic<_ITp> *, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb45400 <col:26, col:55> col:55 referenced __a 'const volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb45478 <line:1292:5, col:18> col:18 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb457e0 <line:1293:5, col:30>
| |     `-ReturnStmt 0xb457d0 <col:7, col:27>
| |       `-CallExpr 0xb457a8 <col:14, col:27> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb45740 <col:14, col:19> '<dependent type>' lvalue ->load
| |         | `-DeclRefExpr 0xb45720 <col:14> 'const volatile atomic<_ITp> *' lvalue ParmVar 0xb45400 '__a' 'const volatile atomic<_ITp> *'
| |         `-DeclRefExpr 0xb45788 <col:24> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb45478 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb45df0 <line:1295:3, line:1299:39> line:1297:5 atomic_exchange_explicit
| | |-TemplateTypeParmDecl 0xb457f8 <line:1295:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb45d50 <line:1296:5, line:1299:39> line:1297:5 atomic_exchange_explicit '_ITp (atomic<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb45950 <col:30, col:44> col:44 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xb45ba8 <col:49, col:70> col:70 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb45c20 <line:1298:9, col:22> col:22 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb45fc0 <line:1299:5, col:39>
| |     `-ReturnStmt 0xb45fb0 <col:7, col:36>
| |       `-CallExpr 0xb45f80 <col:14, col:36> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb45ef8 <col:14, col:19> '<dependent type>' lvalue ->exchange
| |         | `-DeclRefExpr 0xb45ed8 <col:14> 'atomic<_ITp> *' lvalue ParmVar 0xb45950 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xb45f40 <col:28> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb45ba8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb45f60 <col:33> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb45c20 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb465d0 <line:1301:3, line:1306:39> line:1303:5 atomic_exchange_explicit
| | |-TemplateTypeParmDecl 0xb45fd8 <line:1301:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb46530 <line:1302:5, line:1306:39> line:1303:5 atomic_exchange_explicit '_ITp (volatile atomic<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb46130 <col:30, col:53> col:53 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb46388 <line:1304:9, col:30> col:30 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb46400 <line:1305:9, col:22> col:22 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb467c0 <line:1306:5, col:39>
| |     `-ReturnStmt 0xb467b0 <col:7, col:36>
| |       `-CallExpr 0xb46770 <col:14, col:36> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb466e8 <col:14, col:19> '<dependent type>' lvalue ->exchange
| |         | `-DeclRefExpr 0xb466c8 <col:14> 'volatile atomic<_ITp> *' lvalue ParmVar 0xb46130 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xb46730 <col:28> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb46388 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb46750 <col:33> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb46400 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb47130 <line:1308:3, line:1315:67> line:1310:5 atomic_compare_exchange_weak_explicit
| | |-TemplateTypeParmDecl 0xb467d8 <line:1308:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb47090 <line:1309:5, line:1315:67> line:1310:5 atomic_compare_exchange_weak_explicit 'bool (atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>, std::memory_order, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb46930 <col:43, col:57> col:57 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xb46bf0 <line:1311:8, col:30> col:30 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xb46e48 <line:1312:8, col:29> col:29 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb46ec0 <line:1313:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
| |   |-ParmVarDecl 0xb46f38 <line:1314:8, col:21> col:21 referenced __m2 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb47378 <line:1315:5, col:67>
| |     `-ReturnStmt 0xb47368 <col:7, col:64>
| |       `-CallExpr 0xb47328 <col:14, col:64> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb47248 <col:14, col:19> '<dependent type>' lvalue ->compare_exchange_weak
| |         | `-DeclRefExpr 0xb47228 <col:14> 'atomic<_ITp> *' lvalue ParmVar 0xb46930 '__a' 'atomic<_ITp> *'
| |         |-UnaryOperator 0xb472b0 <col:41, col:42> '<dependent type>' prefix '*' cannot overflow
| |         | `-DeclRefExpr 0xb47290 <col:42> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xb46bf0 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xb472c8 <col:48> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb46e48 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xb472e8 <col:54> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb46ec0 '__m1' 'std::memory_order':'std::memory_order'
| |         `-DeclRefExpr 0xb47308 <col:60> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb46f38 '__m2' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb47cb0 <line:1317:3, line:1324:67> line:1319:5 atomic_compare_exchange_weak_explicit
| | |-TemplateTypeParmDecl 0xb47390 <line:1317:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb47c10 <line:1318:5, line:1324:67> line:1319:5 atomic_compare_exchange_weak_explicit 'bool (volatile atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>, std::memory_order, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb474e0 <col:43, col:66> col:66 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb47770 <line:1320:8, col:30> col:30 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xb479c8 <line:1321:8, col:29> col:29 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb47a40 <line:1322:8, col:21> col:21 referenced __m1 'std::memory_order':'std::memory_order'
| |   |-ParmVarDecl 0xb47ab8 <line:1323:8, col:21> col:21 referenced __m2 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb47f08 <line:1324:5, col:67>
| |     `-ReturnStmt 0xb47ef8 <col:7, col:64>
| |       `-CallExpr 0xb47eb8 <col:14, col:64> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb47dd8 <col:14, col:19> '<dependent type>' lvalue ->compare_exchange_weak
| |         | `-DeclRefExpr 0xb47db8 <col:14> 'volatile atomic<_ITp> *' lvalue ParmVar 0xb474e0 '__a' 'volatile atomic<_ITp> *'
| |         |-UnaryOperator 0xb47e40 <col:41, col:42> '<dependent type>' prefix '*' cannot overflow
| |         | `-DeclRefExpr 0xb47e20 <col:42> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xb47770 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xb47e58 <col:48> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb479c8 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xb47e78 <col:54> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb47a40 '__m1' 'std::memory_order':'std::memory_order'
| |         `-DeclRefExpr 0xb47e98 <col:60> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb47ab8 '__m2' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb487f0 <line:1326:3, line:1333:69> line:1328:5 atomic_compare_exchange_strong_explicit
| | |-TemplateTypeParmDecl 0xb47f20 <line:1326:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb48750 <line:1327:5, line:1333:69> line:1328:5 atomic_compare_exchange_strong_explicit 'bool (atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>, std::memory_order, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb48070 <col:45, col:59> col:59 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xb48300 <line:1329:10, col:32> col:32 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xb48558 <line:1330:10, col:31> col:31 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb485d0 <line:1331:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
| |   |-ParmVarDecl 0xb48648 <line:1332:10, col:23> col:23 referenced __m2 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb48a38 <line:1333:5, col:69>
| |     `-ReturnStmt 0xb48a28 <col:7, col:66>
| |       `-CallExpr 0xb489e8 <col:14, col:66> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb48908 <col:14, col:19> '<dependent type>' lvalue ->compare_exchange_strong
| |         | `-DeclRefExpr 0xb488e8 <col:14> 'atomic<_ITp> *' lvalue ParmVar 0xb48070 '__a' 'atomic<_ITp> *'
| |         |-UnaryOperator 0xb48970 <col:43, col:44> '<dependent type>' prefix '*' cannot overflow
| |         | `-DeclRefExpr 0xb48950 <col:44> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xb48300 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xb48988 <col:50> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb48558 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xb489a8 <col:56> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb485d0 '__m1' 'std::memory_order':'std::memory_order'
| |         `-DeclRefExpr 0xb489c8 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb48648 '__m2' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb49320 <line:1335:3, line:1342:69> line:1337:5 atomic_compare_exchange_strong_explicit
| | |-TemplateTypeParmDecl 0xb48a50 <line:1335:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb49280 <line:1336:5, line:1342:69> line:1337:5 atomic_compare_exchange_strong_explicit 'bool (volatile atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>, std::memory_order, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb48ba0 <col:45, col:68> col:68 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb48e30 <line:1338:10, col:32> col:32 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xb49088 <line:1339:10, col:31> col:31 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb49100 <line:1340:10, col:23> col:23 referenced __m1 'std::memory_order':'std::memory_order'
| |   |-ParmVarDecl 0xb49178 <line:1341:10, col:23> col:23 referenced __m2 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb49578 <line:1342:5, col:69>
| |     `-ReturnStmt 0xb49568 <col:7, col:66>
| |       `-CallExpr 0xb49528 <col:14, col:66> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb49448 <col:14, col:19> '<dependent type>' lvalue ->compare_exchange_strong
| |         | `-DeclRefExpr 0xb49428 <col:14> 'volatile atomic<_ITp> *' lvalue ParmVar 0xb48ba0 '__a' 'volatile atomic<_ITp> *'
| |         |-UnaryOperator 0xb494b0 <col:43, col:44> '<dependent type>' prefix '*' cannot overflow
| |         | `-DeclRefExpr 0xb49490 <col:44> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xb48e30 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xb494c8 <col:50> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb49088 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xb494e8 <col:56> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb49100 '__m1' 'std::memory_order':'std::memory_order'
| |         `-DeclRefExpr 0xb49508 <col:62> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb49178 '__m2' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb49ab0 <line:1345:3, line:1348:62> line:1347:5 atomic_store
| | |-TemplateTypeParmDecl 0xb49590 <line:1345:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb49a10 <line:1346:5, line:1348:62> line:1347:5 atomic_store 'void (atomic<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb496e0 <col:18, col:32> col:32 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xb49938 <col:37, col:58> col:58 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb49c78 <line:1348:5, col:62>
| |     `-CallExpr 0xb49c40 <col:7, col:59> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xb49b90 <col:7> '<overloaded function type>' lvalue (ADL) = 'atomic_store_explicit' 0xb44b80 0xb443b0
| |       |-DeclRefExpr 0xb49be0 <col:29> 'atomic<_ITp> *' lvalue ParmVar 0xb496e0 '__a' 'atomic<_ITp> *'
| |       |-DeclRefExpr 0xb49c00 <col:34> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb49938 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |       `-DeclRefExpr 0xb49c20 <col:39> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb4a1b0 <line:1350:3, line:1353:62> line:1352:5 atomic_store
| | |-TemplateTypeParmDecl 0xb49c90 <line:1350:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb4a110 <line:1351:5, line:1353:62> line:1352:5 atomic_store 'void (volatile atomic<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb49de0 <col:18, col:41> col:41 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb4a038 <col:46, col:67> col:67 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb4a388 <line:1353:5, col:62>
| |     `-CallExpr 0xb4a350 <col:7, col:59> '<dependent type>'
| |       |-UnresolvedLookupExpr 0xb4a2a0 <col:7> '<overloaded function type>' lvalue (ADL) = 'atomic_store_explicit' 0xb44b80 0xb443b0
| |       |-DeclRefExpr 0xb4a2f0 <col:29> 'volatile atomic<_ITp> *' lvalue ParmVar 0xb49de0 '__a' 'volatile atomic<_ITp> *'
| |       |-DeclRefExpr 0xb4a310 <col:34> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb4a038 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |       `-DeclRefExpr 0xb4a330 <col:39> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb4a690 <line:1355:3, line:1358:63> line:1357:5 atomic_load
| | |-TemplateTypeParmDecl 0xb4a3a0 <line:1355:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb4a5f0 <line:1356:5, line:1358:63> line:1357:5 atomic_load '_ITp (const atomic<_ITp> *) noexcept' inline
| |   |-ParmVarDecl 0xb4a4f0 <col:17, col:37> col:37 referenced __a 'const atomic<_ITp> *'
| |   `-CompoundStmt 0xb4a890 <line:1358:5, col:63>
| |     `-ReturnStmt 0xb4a880 <col:7, col:60>
| |       `-CallExpr 0xb4a850 <col:14, col:60> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb4a7c0 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_load_explicit' 0xb45630 0xb450f0
| |         |-DeclRefExpr 0xb4a810 <col:35> 'const atomic<_ITp> *' lvalue ParmVar 0xb4a4f0 '__a' 'const atomic<_ITp> *'
| |         `-DeclRefExpr 0xb4a830 <col:40> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb4aba0 <line:1360:3, line:1363:63> line:1362:5 atomic_load
| | |-TemplateTypeParmDecl 0xb4a8a8 <line:1360:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb4ab00 <line:1361:5, line:1363:63> line:1362:5 atomic_load '_ITp (const volatile atomic<_ITp> *) noexcept' inline
| |   |-ParmVarDecl 0xb4aa00 <col:17, col:46> col:46 referenced __a 'const volatile atomic<_ITp> *'
| |   `-CompoundStmt 0xb4ad58 <line:1363:5, col:63>
| |     `-ReturnStmt 0xb4ad48 <col:7, col:60>
| |       `-CallExpr 0xb4ad18 <col:14, col:60> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb4ac88 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_load_explicit' 0xb45630 0xb450f0
| |         |-DeclRefExpr 0xb4acd8 <col:35> 'const volatile atomic<_ITp> *' lvalue ParmVar 0xb4aa00 '__a' 'const volatile atomic<_ITp> *'
| |         `-DeclRefExpr 0xb4acf8 <col:40> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb4b2d0 <line:1365:3, line:1368:72> line:1367:5 atomic_exchange
| | |-TemplateTypeParmDecl 0xb4ad70 <line:1365:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb4b230 <line:1366:5, line:1368:72> line:1367:5 atomic_exchange '_ITp (atomic<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb4aec0 <col:21, col:35> col:35 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xb4b118 <col:40, col:61> col:61 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb4b4a8 <line:1368:5, col:72>
| |     `-ReturnStmt 0xb4b498 <col:7, col:69>
| |       `-CallExpr 0xb4b460 <col:14, col:69> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb4b3b0 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_exchange_explicit' 0xb465d0 0xb45df0
| |         |-DeclRefExpr 0xb4b400 <col:39> 'atomic<_ITp> *' lvalue ParmVar 0xb4aec0 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xb4b420 <col:44> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb4b118 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb4b440 <col:49> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb4ba20 <line:1370:3, line:1374:72> line:1372:5 atomic_exchange
| | |-TemplateTypeParmDecl 0xb4b4c0 <line:1370:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb4b980 <line:1371:5, line:1374:72> line:1372:5 atomic_exchange '_ITp (volatile atomic<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb4b610 <col:21, col:44> col:44 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb4b868 <line:1373:7, col:28> col:28 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb4bc08 <line:1374:5, col:72>
| |     `-ReturnStmt 0xb4bbf8 <col:7, col:69>
| |       `-CallExpr 0xb4bbc0 <col:14, col:69> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb4bb10 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_exchange_explicit' 0xb465d0 0xb45df0
| |         |-DeclRefExpr 0xb4bb60 <col:39> 'volatile atomic<_ITp> *' lvalue ParmVar 0xb4b610 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xb4bb80 <col:44> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb4b868 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb4bba0 <col:49> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb4c420 <line:1376:3, line:1385:5> line:1378:5 atomic_compare_exchange_weak
| | |-TemplateTypeParmDecl 0xb4bc20 <line:1376:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb4c380 <line:1377:5, line:1385:5> line:1378:5 atomic_compare_exchange_weak 'bool (atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb4bd70 <col:34, col:48> col:48 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xb4c000 <line:1379:6, col:28> col:28 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xb4c258 <line:1380:6, col:27> col:27 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb4c650 <line:1381:5, line:1385:5>
| |     `-ReturnStmt 0xb4c640 <line:1382:7, line:1384:30>
| |       `-CallExpr 0xb4c5f8 <line:1382:14, line:1384:30> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb4c508 <line:1382:14> '<overloaded function type>' lvalue (ADL) = 'atomic_compare_exchange_weak_explicit' 0xb47cb0 0xb47130
| |         |-DeclRefExpr 0xb4c558 <col:52> 'atomic<_ITp> *' lvalue ParmVar 0xb4bd70 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xb4c578 <col:57> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xb4c000 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xb4c598 <col:63> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb4c258 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xb4c5b8 <line:1383:10> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |         `-DeclRefExpr 0xb4c5d8 <line:1384:10> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb4ce70 <line:1387:3, line:1396:5> line:1389:5 atomic_compare_exchange_weak
| | |-TemplateTypeParmDecl 0xb4c668 <line:1387:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb4cdd0 <line:1388:5, line:1396:5> line:1389:5 atomic_compare_exchange_weak 'bool (volatile atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb4c7c0 <col:34, col:57> col:57 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb4ca50 <line:1390:6, col:28> col:28 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xb4cca8 <line:1391:6, col:27> col:27 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb4d0b0 <line:1392:5, line:1396:5>
| |     `-ReturnStmt 0xb4d0a0 <line:1393:7, line:1395:30>
| |       `-CallExpr 0xb4d058 <line:1393:14, line:1395:30> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb4cf68 <line:1393:14> '<overloaded function type>' lvalue (ADL) = 'atomic_compare_exchange_weak_explicit' 0xb47cb0 0xb47130
| |         |-DeclRefExpr 0xb4cfb8 <col:52> 'volatile atomic<_ITp> *' lvalue ParmVar 0xb4c7c0 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xb4cfd8 <col:57> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xb4ca50 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xb4cff8 <col:63> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb4cca8 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xb4d018 <line:1394:10> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |         `-DeclRefExpr 0xb4d038 <line:1395:10> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb4d890 <line:1398:3, line:1407:5> line:1400:5 atomic_compare_exchange_strong
| | |-TemplateTypeParmDecl 0xb4d0c8 <line:1398:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb4d7f0 <line:1399:5, line:1407:5> line:1400:5 atomic_compare_exchange_strong 'bool (atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb4d220 <col:36, col:50> col:50 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xb4d4b0 <line:1401:8, col:30> col:30 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xb4d708 <line:1402:8, col:29> col:29 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb4dac0 <line:1403:5, line:1407:5>
| |     `-ReturnStmt 0xb4dab0 <line:1404:7, line:1406:32>
| |       `-CallExpr 0xb4da68 <line:1404:14, line:1406:32> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb4d978 <line:1404:14> '<overloaded function type>' lvalue (ADL) = 'atomic_compare_exchange_strong_explicit' 0xb49320 0xb487f0
| |         |-DeclRefExpr 0xb4d9c8 <col:54> 'atomic<_ITp> *' lvalue ParmVar 0xb4d220 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xb4d9e8 <col:59> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xb4d4b0 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xb4da08 <col:65> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb4d708 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xb4da28 <line:1405:12> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |         `-DeclRefExpr 0xb4da48 <line:1406:12> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb4e2a0 <line:1409:3, line:1418:5> line:1411:5 atomic_compare_exchange_strong
| | |-TemplateTypeParmDecl 0xb4dad8 <line:1409:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb4e200 <line:1410:5, line:1418:5> line:1411:5 atomic_compare_exchange_strong 'bool (volatile atomic<_ITp> *, __atomic_val_t<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb4dc30 <col:36, col:59> col:59 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb4dec0 <line:1412:8, col:30> col:30 referenced __i1 '__atomic_val_t<_ITp> *'
| |   |-ParmVarDecl 0xb4e118 <line:1413:8, col:29> col:29 referenced __i2 '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb4e4e0 <line:1414:5, line:1418:5>
| |     `-ReturnStmt 0xb4e4d0 <line:1415:7, line:1417:32>
| |       `-CallExpr 0xb4e488 <line:1415:14, line:1417:32> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb4e398 <line:1415:14> '<overloaded function type>' lvalue (ADL) = 'atomic_compare_exchange_strong_explicit' 0xb49320 0xb487f0
| |         |-DeclRefExpr 0xb4e3e8 <col:54> 'volatile atomic<_ITp> *' lvalue ParmVar 0xb4dc30 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xb4e408 <col:59> '__atomic_val_t<_ITp> *' lvalue ParmVar 0xb4dec0 '__i1' '__atomic_val_t<_ITp> *'
| |         |-DeclRefExpr 0xb4e428 <col:65> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb4e118 '__i2' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         |-DeclRefExpr 0xb4e448 <line:1416:12> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |         `-DeclRefExpr 0xb4e468 <line:1417:12> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb50180 <line:1450:3, line:1455:40> line:1452:5 atomic_fetch_add_explicit
| | |-TemplateTypeParmDecl 0xb4e4f8 <line:1450:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb500e0 <line:1451:5, line:1455:40> line:1452:5 atomic_fetch_add_explicit '_ITp (atomic<_ITp> *, __atomic_diff_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb4e650 <col:31, col:45> col:45 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xb4ff38 <line:1453:10, col:32> col:32 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   |-ParmVarDecl 0xb4ffb0 <line:1454:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb50350 <line:1455:5, col:40>
| |     `-ReturnStmt 0xb50340 <col:7, col:37>
| |       `-CallExpr 0xb50310 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb50288 <col:14, col:19> '<dependent type>' lvalue ->fetch_add
| |         | `-DeclRefExpr 0xb50268 <col:14> 'atomic<_ITp> *' lvalue ParmVar 0xb4e650 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xb502d0 <col:29> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xb4ff38 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xb502f0 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb4ffb0 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb50960 <line:1457:3, line:1462:40> line:1459:5 atomic_fetch_add_explicit
| | |-TemplateTypeParmDecl 0xb50368 <line:1457:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb508c0 <line:1458:5, line:1462:40> line:1459:5 atomic_fetch_add_explicit '_ITp (volatile atomic<_ITp> *, __atomic_diff_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb504c0 <col:31, col:54> col:54 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb50718 <line:1460:10, col:32> col:32 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   |-ParmVarDecl 0xb50790 <line:1461:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb50b40 <line:1462:5, col:40>
| |     `-ReturnStmt 0xb50b30 <col:7, col:37>
| |       `-CallExpr 0xb50b00 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb50a78 <col:14, col:19> '<dependent type>' lvalue ->fetch_add
| |         | `-DeclRefExpr 0xb50a58 <col:14> 'volatile atomic<_ITp> *' lvalue ParmVar 0xb504c0 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xb50ac0 <col:29> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xb50718 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xb50ae0 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb50790 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb51110 <line:1464:3, line:1469:40> line:1466:5 atomic_fetch_sub_explicit
| | |-TemplateTypeParmDecl 0xb50b58 <line:1464:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb51070 <line:1465:5, line:1469:40> line:1466:5 atomic_fetch_sub_explicit '_ITp (atomic<_ITp> *, __atomic_diff_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb50cb0 <col:31, col:45> col:45 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xb50f08 <line:1467:10, col:32> col:32 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   |-ParmVarDecl 0xb50f80 <line:1468:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb512e0 <line:1469:5, col:40>
| |     `-ReturnStmt 0xb512d0 <col:7, col:37>
| |       `-CallExpr 0xb512a0 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb51218 <col:14, col:19> '<dependent type>' lvalue ->fetch_sub
| |         | `-DeclRefExpr 0xb511f8 <col:14> 'atomic<_ITp> *' lvalue ParmVar 0xb50cb0 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xb51260 <col:29> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xb50f08 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xb51280 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb50f80 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb518b0 <line:1471:3, line:1476:40> line:1473:5 atomic_fetch_sub_explicit
| | |-TemplateTypeParmDecl 0xb512f8 <line:1471:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb51810 <line:1472:5, line:1476:40> line:1473:5 atomic_fetch_sub_explicit '_ITp (volatile atomic<_ITp> *, __atomic_diff_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb51450 <col:31, col:54> col:54 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb516a8 <line:1474:10, col:32> col:32 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   |-ParmVarDecl 0xb51720 <line:1475:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb51a90 <line:1476:5, col:40>
| |     `-ReturnStmt 0xb51a80 <col:7, col:37>
| |       `-CallExpr 0xb51a50 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb519c8 <col:14, col:19> '<dependent type>' lvalue ->fetch_sub
| |         | `-DeclRefExpr 0xb519a8 <col:14> 'volatile atomic<_ITp> *' lvalue ParmVar 0xb51450 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xb51a10 <col:29> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xb516a8 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xb51a30 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb51720 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb520d0 <line:1478:3, line:1483:40> line:1480:5 atomic_fetch_and_explicit
| | |-TemplateTypeParmDecl 0xb51aa8 <line:1478:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb52030 <line:1479:5, line:1483:40> line:1480:5 atomic_fetch_and_explicit '_ITp (__atomic_base<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb51c30 <col:31, col:52> col:52 referenced __a '__atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xb51e88 <line:1481:10, col:31> col:31 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb51f00 <line:1482:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb522a0 <line:1483:5, col:40>
| |     `-ReturnStmt 0xb52290 <col:7, col:37>
| |       `-CallExpr 0xb52260 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb521d8 <col:14, col:19> '<dependent type>' lvalue ->fetch_and
| |         | `-DeclRefExpr 0xb521b8 <col:14> '__atomic_base<_ITp> *' lvalue ParmVar 0xb51c30 '__a' '__atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xb52220 <col:29> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb51e88 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb52240 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb51f00 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb528e0 <line:1485:3, line:1490:40> line:1487:5 atomic_fetch_and_explicit
| | |-TemplateTypeParmDecl 0xb522b8 <line:1485:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb52840 <line:1486:5, line:1490:40> line:1487:5 atomic_fetch_and_explicit '_ITp (volatile __atomic_base<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb52440 <col:31, col:61> col:61 referenced __a 'volatile __atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xb52698 <line:1488:10, col:31> col:31 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb52710 <line:1489:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb52ac0 <line:1490:5, col:40>
| |     `-ReturnStmt 0xb52ab0 <col:7, col:37>
| |       `-CallExpr 0xb52a80 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb529f8 <col:14, col:19> '<dependent type>' lvalue ->fetch_and
| |         | `-DeclRefExpr 0xb529d8 <col:14> 'volatile __atomic_base<_ITp> *' lvalue ParmVar 0xb52440 '__a' 'volatile __atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xb52a40 <col:29> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb52698 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb52a60 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb52710 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb53090 <line:1492:3, line:1497:39> line:1494:5 atomic_fetch_or_explicit
| | |-TemplateTypeParmDecl 0xb52ad8 <line:1492:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb52ff0 <line:1493:5, line:1497:39> line:1494:5 atomic_fetch_or_explicit '_ITp (__atomic_base<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb52c30 <col:30, col:51> col:51 referenced __a '__atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xb52e88 <line:1495:9, col:30> col:30 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb52f00 <line:1496:9, col:22> col:22 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb53260 <line:1497:5, col:39>
| |     `-ReturnStmt 0xb53250 <col:7, col:36>
| |       `-CallExpr 0xb53220 <col:14, col:36> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb53198 <col:14, col:19> '<dependent type>' lvalue ->fetch_or
| |         | `-DeclRefExpr 0xb53178 <col:14> '__atomic_base<_ITp> *' lvalue ParmVar 0xb52c30 '__a' '__atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xb531e0 <col:28> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb52e88 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb53200 <col:33> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb52f00 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb53830 <line:1499:3, line:1504:39> line:1501:5 atomic_fetch_or_explicit
| | |-TemplateTypeParmDecl 0xb53278 <line:1499:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb53790 <line:1500:5, line:1504:39> line:1501:5 atomic_fetch_or_explicit '_ITp (volatile __atomic_base<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb533d0 <col:30, col:60> col:60 referenced __a 'volatile __atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xb53628 <line:1502:9, col:30> col:30 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb536a0 <line:1503:9, col:22> col:22 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb53a10 <line:1504:5, col:39>
| |     `-ReturnStmt 0xb53a00 <col:7, col:36>
| |       `-CallExpr 0xb539d0 <col:14, col:36> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb53948 <col:14, col:19> '<dependent type>' lvalue ->fetch_or
| |         | `-DeclRefExpr 0xb53928 <col:14> 'volatile __atomic_base<_ITp> *' lvalue ParmVar 0xb533d0 '__a' 'volatile __atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xb53990 <col:28> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb53628 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb539b0 <col:33> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb536a0 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb56ea0 <line:1506:3, line:1511:40> line:1508:5 atomic_fetch_xor_explicit
| | |-TemplateTypeParmDecl 0xb53a28 <line:1506:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb56e00 <line:1507:5, line:1511:40> line:1508:5 atomic_fetch_xor_explicit '_ITp (__atomic_base<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb53b80 <col:31, col:52> col:52 referenced __a '__atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xb56ca0 <line:1509:10, col:31> col:31 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb56d18 <line:1510:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb57070 <line:1511:5, col:40>
| |     `-ReturnStmt 0xb57060 <col:7, col:37>
| |       `-CallExpr 0xb57030 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb56fa8 <col:14, col:19> '<dependent type>' lvalue ->fetch_xor
| |         | `-DeclRefExpr 0xb56f88 <col:14> '__atomic_base<_ITp> *' lvalue ParmVar 0xb53b80 '__a' '__atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xb56ff0 <col:29> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb56ca0 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb57010 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb56d18 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb57640 <line:1513:3, line:1518:40> line:1515:5 atomic_fetch_xor_explicit
| | |-TemplateTypeParmDecl 0xb57088 <line:1513:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb575a0 <line:1514:5, line:1518:40> line:1515:5 atomic_fetch_xor_explicit '_ITp (volatile __atomic_base<_ITp> *, __atomic_val_t<_ITp>, std::memory_order) noexcept' inline
| |   |-ParmVarDecl 0xb571e0 <col:31, col:61> col:61 referenced __a 'volatile __atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xb57438 <line:1516:10, col:31> col:31 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   |-ParmVarDecl 0xb574b0 <line:1517:10, col:23> col:23 referenced __m 'std::memory_order':'std::memory_order'
| |   `-CompoundStmt 0xb57820 <line:1518:5, col:40>
| |     `-ReturnStmt 0xb57810 <col:7, col:37>
| |       `-CallExpr 0xb577e0 <col:14, col:37> '<dependent type>'
| |         |-CXXDependentScopeMemberExpr 0xb57758 <col:14, col:19> '<dependent type>' lvalue ->fetch_xor
| |         | `-DeclRefExpr 0xb57738 <col:14> 'volatile __atomic_base<_ITp> *' lvalue ParmVar 0xb571e0 '__a' 'volatile __atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xb577a0 <col:29> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb57438 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb577c0 <col:34> 'std::memory_order':'std::memory_order' lvalue ParmVar 0xb574b0 '__m' 'std::memory_order':'std::memory_order'
| |-FunctionTemplateDecl 0xb57da0 <line:1520:3, line:1524:73> line:1522:5 atomic_fetch_add
| | |-TemplateTypeParmDecl 0xb57838 <line:1520:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb57d00 <line:1521:5, line:1524:73> line:1522:5 atomic_fetch_add '_ITp (atomic<_ITp> *, __atomic_diff_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb57990 <col:22, col:36> col:36 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xb57be8 <line:1523:8, col:30> col:30 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   `-CompoundStmt 0xb57f78 <line:1524:5, col:73>
| |     `-ReturnStmt 0xb57f68 <col:7, col:70>
| |       `-CallExpr 0xb57f30 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb57e80 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_add_explicit' 0xb50960 0xb50180
| |         |-DeclRefExpr 0xb57ed0 <col:40> 'atomic<_ITp> *' lvalue ParmVar 0xb57990 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xb57ef0 <col:45> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xb57be8 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xb57f10 <col:50> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb584f0 <line:1526:3, line:1530:73> line:1528:5 atomic_fetch_add
| | |-TemplateTypeParmDecl 0xb57f90 <line:1526:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb58450 <line:1527:5, line:1530:73> line:1528:5 atomic_fetch_add '_ITp (volatile atomic<_ITp> *, __atomic_diff_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb580e0 <col:22, col:45> col:45 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb58338 <line:1529:8, col:30> col:30 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   `-CompoundStmt 0xb586d8 <line:1530:5, col:73>
| |     `-ReturnStmt 0xb586c8 <col:7, col:70>
| |       `-CallExpr 0xb58690 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb585e0 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_add_explicit' 0xb50960 0xb50180
| |         |-DeclRefExpr 0xb58630 <col:40> 'volatile atomic<_ITp> *' lvalue ParmVar 0xb580e0 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xb58650 <col:45> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xb58338 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xb58670 <col:50> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb58c10 <line:1532:3, line:1536:73> line:1534:5 atomic_fetch_sub
| | |-TemplateTypeParmDecl 0xb586f0 <line:1532:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb58b70 <line:1533:5, line:1536:73> line:1534:5 atomic_fetch_sub '_ITp (atomic<_ITp> *, __atomic_diff_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb58840 <col:22, col:36> col:36 referenced __a 'atomic<_ITp> *'
| |   |-ParmVarDecl 0xb58a98 <line:1535:8, col:30> col:30 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   `-CompoundStmt 0xb58de8 <line:1536:5, col:73>
| |     `-ReturnStmt 0xb58dd8 <col:7, col:70>
| |       `-CallExpr 0xb58da0 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb58cf0 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_sub_explicit' 0xb518b0 0xb51110
| |         |-DeclRefExpr 0xb58d40 <col:40> 'atomic<_ITp> *' lvalue ParmVar 0xb58840 '__a' 'atomic<_ITp> *'
| |         |-DeclRefExpr 0xb58d60 <col:45> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xb58a98 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xb58d80 <col:50> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb59320 <line:1538:3, line:1542:73> line:1540:5 atomic_fetch_sub
| | |-TemplateTypeParmDecl 0xb58e00 <line:1538:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb59280 <line:1539:5, line:1542:73> line:1540:5 atomic_fetch_sub '_ITp (volatile atomic<_ITp> *, __atomic_diff_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb58f50 <col:22, col:45> col:45 referenced __a 'volatile atomic<_ITp> *'
| |   |-ParmVarDecl 0xb591a8 <line:1541:8, col:30> col:30 referenced __i '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |   `-CompoundStmt 0xb59508 <line:1542:5, col:73>
| |     `-ReturnStmt 0xb594f8 <col:7, col:70>
| |       `-CallExpr 0xb594c0 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb59410 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_sub_explicit' 0xb518b0 0xb51110
| |         |-DeclRefExpr 0xb59460 <col:40> 'volatile atomic<_ITp> *' lvalue ParmVar 0xb58f50 '__a' 'volatile atomic<_ITp> *'
| |         |-DeclRefExpr 0xb59480 <col:45> '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type' lvalue ParmVar 0xb591a8 '__i' '__atomic_diff_t<_ITp>':'typename atomic<type-parameter-0-0>::difference_type'
| |         `-DeclRefExpr 0xb594a0 <col:50> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb59a80 <line:1544:3, line:1548:73> line:1546:5 atomic_fetch_and
| | |-TemplateTypeParmDecl 0xb59520 <line:1544:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb599e0 <line:1545:5, line:1548:73> line:1546:5 atomic_fetch_and '_ITp (__atomic_base<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb59670 <col:22, col:43> col:43 referenced __a '__atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xb598c8 <line:1547:8, col:29> col:29 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb59c58 <line:1548:5, col:73>
| |     `-ReturnStmt 0xb59c48 <col:7, col:70>
| |       `-CallExpr 0xb59c10 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb59b60 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_and_explicit' 0xb528e0 0xb520d0
| |         |-DeclRefExpr 0xb59bb0 <col:40> '__atomic_base<_ITp> *' lvalue ParmVar 0xb59670 '__a' '__atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xb59bd0 <col:45> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb598c8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb59bf0 <col:50> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb5a1d0 <line:1550:3, line:1554:73> line:1552:5 atomic_fetch_and
| | |-TemplateTypeParmDecl 0xb59c70 <line:1550:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb5a130 <line:1551:5, line:1554:73> line:1552:5 atomic_fetch_and '_ITp (volatile __atomic_base<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb59dc0 <col:22, col:52> col:52 referenced __a 'volatile __atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xb5a018 <line:1553:8, col:29> col:29 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb5a3b8 <line:1554:5, col:73>
| |     `-ReturnStmt 0xb5a3a8 <col:7, col:70>
| |       `-CallExpr 0xb5a370 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb5a2c0 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_and_explicit' 0xb528e0 0xb520d0
| |         |-DeclRefExpr 0xb5a310 <col:40> 'volatile __atomic_base<_ITp> *' lvalue ParmVar 0xb59dc0 '__a' 'volatile __atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xb5a330 <col:45> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb5a018 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb5a350 <col:50> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb5a8f0 <line:1556:3, line:1560:72> line:1558:5 atomic_fetch_or
| | |-TemplateTypeParmDecl 0xb5a3d0 <line:1556:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb5a850 <line:1557:5, line:1560:72> line:1558:5 atomic_fetch_or '_ITp (__atomic_base<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb5a520 <col:21, col:42> col:42 referenced __a '__atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xb5a778 <line:1559:7, col:28> col:28 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb5aac8 <line:1560:5, col:72>
| |     `-ReturnStmt 0xb5aab8 <col:7, col:69>
| |       `-CallExpr 0xb5aa80 <col:14, col:69> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb5a9d0 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_or_explicit' 0xb53830 0xb53090
| |         |-DeclRefExpr 0xb5aa20 <col:39> '__atomic_base<_ITp> *' lvalue ParmVar 0xb5a520 '__a' '__atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xb5aa40 <col:44> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb5a778 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb5aa60 <col:49> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb5bc40 <line:1562:3, line:1566:72> line:1564:5 atomic_fetch_or
| | |-TemplateTypeParmDecl 0xb5aae0 <line:1562:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb5bba0 <line:1563:5, line:1566:72> line:1564:5 atomic_fetch_or '_ITp (volatile __atomic_base<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb5ac30 <col:21, col:51> col:51 referenced __a 'volatile __atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xb5bac8 <line:1565:7, col:28> col:28 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb5be28 <line:1566:5, col:72>
| |     `-ReturnStmt 0xb5be18 <col:7, col:69>
| |       `-CallExpr 0xb5bde0 <col:14, col:69> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb5bd30 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_or_explicit' 0xb53830 0xb53090
| |         |-DeclRefExpr 0xb5bd80 <col:39> 'volatile __atomic_base<_ITp> *' lvalue ParmVar 0xb5ac30 '__a' 'volatile __atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xb5bda0 <col:44> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb5bac8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb5bdc0 <col:49> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| |-FunctionTemplateDecl 0xb5c360 <line:1568:3, line:1572:73> line:1570:5 atomic_fetch_xor
| | |-TemplateTypeParmDecl 0xb5be40 <line:1568:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
| | `-FunctionDecl 0xb5c2c0 <line:1569:5, line:1572:73> line:1570:5 atomic_fetch_xor '_ITp (__atomic_base<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
| |   |-ParmVarDecl 0xb5bf90 <col:22, col:43> col:43 referenced __a '__atomic_base<_ITp> *'
| |   |-ParmVarDecl 0xb5c1e8 <line:1571:8, col:29> col:29 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |   `-CompoundStmt 0xb5c538 <line:1572:5, col:73>
| |     `-ReturnStmt 0xb5c528 <col:7, col:70>
| |       `-CallExpr 0xb5c4f0 <col:14, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0xb5c440 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_xor_explicit' 0xb57640 0xb56ea0
| |         |-DeclRefExpr 0xb5c490 <col:40> '__atomic_base<_ITp> *' lvalue ParmVar 0xb5bf90 '__a' '__atomic_base<_ITp> *'
| |         |-DeclRefExpr 0xb5c4b0 <col:45> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb5c1e8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
| |         `-DeclRefExpr 0xb5c4d0 <col:50> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
| `-FunctionTemplateDecl 0xb5ca70 <line:1574:3, line:1578:73> line:1576:5 atomic_fetch_xor
|   |-TemplateTypeParmDecl 0xb5c550 <line:1574:12, col:21> col:21 referenced typename depth 0 index 0 _ITp
|   `-FunctionDecl 0xb5c9d0 <line:1575:5, line:1578:73> line:1576:5 atomic_fetch_xor '_ITp (volatile __atomic_base<_ITp> *, __atomic_val_t<_ITp>) noexcept' inline
|     |-ParmVarDecl 0xb5c6a0 <col:22, col:52> col:52 referenced __a 'volatile __atomic_base<_ITp> *'
|     |-ParmVarDecl 0xb5c8f8 <line:1577:8, col:29> col:29 referenced __i '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
|     `-CompoundStmt 0xb5cc58 <line:1578:5, col:73>
|       `-ReturnStmt 0xb5cc48 <col:7, col:70>
|         `-CallExpr 0xb5cc10 <col:14, col:70> '<dependent type>'
|           |-UnresolvedLookupExpr 0xb5cb60 <col:14> '<overloaded function type>' lvalue (ADL) = 'atomic_fetch_xor_explicit' 0xb57640 0xb56ea0
|           |-DeclRefExpr 0xb5cbb0 <col:40> 'volatile __atomic_base<_ITp> *' lvalue ParmVar 0xb5c6a0 '__a' 'volatile __atomic_base<_ITp> *'
|           |-DeclRefExpr 0xb5cbd0 <col:45> '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type' lvalue ParmVar 0xb5c8f8 '__i' '__atomic_val_t<_ITp>':'typename atomic<type-parameter-0-0>::value_type'
|           `-DeclRefExpr 0xb5cbf0 <col:50> 'std::memory_order' EnumConstant 0xa51510 'memory_order_seq_cst' 'std::memory_order'
|-LinkageSpecDecl 0xaa28f0 <line:271:2> col:2 implicit C
| `-FunctionDecl 0xaa2940 <col:2> col:2 implicit referenced __atomic_store 'void (...)' extern
|   `-BuiltinAttr 0xaa29e0 <<invalid sloc>> Implicit 634
|-LinkageSpecDecl 0xaa3228 <line:285:2> col:2 implicit C
| `-FunctionDecl 0xaa3278 <col:2> col:2 implicit referenced __atomic_load 'void (...)' extern
|   `-BuiltinAttr 0xaa3318 <<invalid sloc>> Implicit 632
|-LinkageSpecDecl 0xaa3d48 <line:303:2> col:2 implicit C
| `-FunctionDecl 0xaa3d98 <col:2> col:2 implicit referenced __atomic_exchange 'void (...)' extern
|   `-BuiltinAttr 0xaa3e38 <<invalid sloc>> Implicit 636
|-LinkageSpecDecl 0xaa4a08 <line:325:9> col:9 implicit C
| `-FunctionDecl 0xaa4ab0 <col:9> col:9 implicit referenced __atomic_compare_exchange 'void (...)' extern
|   `-BuiltinAttr 0xaa4b50 <<invalid sloc>> Implicit 638
|-VarDecl 0xb5cd10 <cpp_tests/atomic.cpp:3:1, col:18> col:18 used b 'std::atomic_bool':'std::atomic<bool>' callinit
| `-CXXConstructExpr 0xb5ce18 <col:18> 'std::atomic_bool':'std::atomic<bool>' 'void () noexcept'
`-FunctionDecl 0xb5cec0 <line:5:1, line:10:1> line:5:5 main 'int ()'
  `-CompoundStmt 0xb5d1a0 <line:6:1, line:10:1>
    |-DeclStmt 0xb5d158 <line:7:3, col:13>
    | `-VarDecl 0xb5cf98 <col:3, col:12> col:8 a 'bool' cinit
    |   `-ImplicitCastExpr 0xb5d140 <col:12> 'bool' <UserDefinedConversion>
    |     `-CXXMemberCallExpr 0xb5d120 <col:12> 'bool'
    |       `-MemberExpr 0xb5d0f0 <col:12> '<bound member function type>' .operator bool 0xa99440
    |         `-ImplicitCastExpr 0xb5d0d8 <col:12> 'const std::atomic<bool>' lvalue <NoOp>
    |           `-DeclRefExpr 0xb5d000 <col:12> 'std::atomic_bool':'std::atomic<bool>' lvalue Var 0xb5cd10 'b' 'std::atomic_bool':'std::atomic<bool>'
    `-ReturnStmt 0xb5d190 <line:9:3, col:10>
      `-IntegerLiteral 0xb5d170 <col:10> 'int' 0
